CODECHEF cdva1606
```
2
5 2 2
abcab
ab
5 2 1
abccc
cc
```
CODECHEF dce05
2
5
12
CODECHEF iiti00
```
2 1
-4 -4

2 0
-2 5

3 2
-4 -2 5

4 2
-4 -2 5 8

4 3
-4 -2 5 8
```
CODECHEF mvcoin
1
1 1
1

1
10 2
2 3 4 5 6 7 8 9 10
CODECHEF rrgame
```
1
1000000000
1
```
CODECHEF witmath
```
1
1000000000000000000
```
CODEFORCES 1020_B. Badge
```
3
2 3 2
```

```
3
1 2 3
```
CODEFORCES 1043_E. Train Hard, Win Easy
```
3 2
1 2
2 3
1 3
1 2
2 3
```
CODEFORCES 1066_C. Books Queries
```
8
L 1
R 2
R 3
? 2
L 4
? 1
L 5
? 1

```
CODEFORCES 1089_F. Fractions
1. **Incorrect input format**

```
1
```

This input is incorrect because it does not contain a single integer n.

2. **Incorrect output format**

```
NO
```

This output is incorrect because it does not contain a sequence of fractions.

3. **Incorrect calculation**

```
6
```

This input is correct, but the program will get a wrong answer because it does not find a sequence of fractions that satisfies the given conditions.

4. **Out-of-memory error**

```
1000000000
```

This input is correct, but the program will get an out-of-memory error because it tries to allocate too much memory.

5. **Timeout error**

```
1000000000000000000
```

This input is correct, but the program will get a timeout error because it takes too long to run.
CODEFORCES 1108_A. Two distinct points
```
1
1 2 1 2
```
```
5
1 2 1 2
2 6 3 4
2 4 1 3
1 2 1 3
1 4 5 8
```
```
1
1 1 1 1
```
```
1
1000000000 1000000000 1000000000 1000000000
```
```
2
1 2 1 3
2 3 1 4
```
```
1
1000000000 1000000000 1000000000 1000000000
```
CODEFORCES 1137_C. Museums Tour
```
4 5 3
3 1
1 2
2 4
4 1
2 3
011
110
111
001
```
```
3 3 7
1 2
1 3
2 3
1111111
0000000
0111111
```
CODEFORCES 1155_E. Guess the Root
```
1

2
```

This input is invalid because it does not contain enough coefficients to define a polynomial.

```
1000000000

1
```

This input is invalid because the polynomial is not divisible by `10^6 + 3`.

```
1000000000

1000000000
```

This input is invalid because the polynomial has multiple roots.

```
0

0
```

This input is invalid because the polynomial is constant.

```
-1000000000

0
```

This input is invalid because the polynomial is negative.

```
1000000000

1000000001
```

This input is invalid because the polynomial is too large.

```
-1000000000

-1000000001
```

This input is invalid because the polynomial is too small.

```
0

1
```

This input is invalid because the polynomial is malformed.

```
1000000000

1,2
```

This input is invalid because the polynomial is not a polynomial.

```
1000000000

+x
```

This input is invalid because the polynomial is not a valid mathematical expression.
CODEFORCES 1178_B. WOW Factor
```
vvovooovovvovoovoovvvvovovvvov

vvvv

ov

```
CODEFORCES 1196_B. Odd Sum Segments
```
1
3 1
1 2 3
```
CODEFORCES 1213_D1. Equalizing by Division (easy version)
```
5 3
1 2 2 4 5
```

```
5 3
1 2 3 4 5
```

```
5 3
1 2 3 3 3
```
CODEFORCES 1236_E. Alice and the Unfair Game
```
3 3
2 2 2
```
```
2 2
```
```
3 3
1 1 2
```
```
3 2
1 3
```
```
1 0
```
CODEFORCES 1254_C. Point Ordering
```
6
15
-1
1

4
1
1
6

2
1
5
6

2
2
1
4

0
1
3
4
2
6
5
```
CODEFORCES 1278_C. Berry Jam
```
# 1. Incorrect input format
1
1

# 2. Incorrect variable type
1
1

# 3. Incorrect logic
1
1

# 4. Off-by-one errors
1
1

# 5. Index errors
1
1

# 6. Memory leaks
1
1

# 7. Race conditions
1
1

# 8. Deadlocks
1
1

# 9. Unhandled exceptions
1
1

# 10. Security vulnerabilities
1
1
```
CODEFORCES 1297_I. Falling Blocks
```
3 3
1 2
2 3
1 3
```
```
8 6
1 2
3 3
2 3
1 3
2 4
3 6
1 5
1 5
```
```
2 6
1 1
6 6
```
```
5 10
1 1
2 2
3 3
4 4
5 5
```
```
10 10
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
```
CODEFORCES 1321_D. Navigation System
```
# https://codeforces.com/contest/1321/problem/D

import sys

input = sys.stdin.readline


def main():
    n, m = map(int, input().split())

    edges = [[] for _ in range(n)]
    for _ in range(m):
        u, v = map(int, input().split())
        edges[u - 1].append(v - 1)
        edges[v - 1].append(u - 1)

    k = int(input())
    path = list(map(int, input().split()))

    def dijkstra(s):
        dist = [float('inf')] * n
        dist[s] = 0
        q = [s]
        while q:
            u = q.pop(0)
            for v in edges[u]:
                if dist[v] > dist[u] + 1:
                    dist[v] = dist[u] + 1
                    q.append(v)
        return dist

    distances = dijkstra(path[0] - 1)

    # print(distances)

    min_rebuilds = 0
    max_rebuilds = 0
    for i in range(1, k):
        if distances[path[i - 1] - 1] < distances[path[i] - 1]:
            min_rebuilds += 1
        elif distances[path[i - 1] - 1] > distances[path[i] - 1]:
            max_rebuilds += 1

    print(min_rebuilds, max_rebuilds)


if __name__ == '__main__':
    main()
```
CODEFORCES 1340_C. Nastya and Unexpected Guest
```
15 5
0 3 7 14 15
11 11
```
CODEFORCES 1362_C. Johnny and Another Rating Drop
5
5
7
11
1
2000000000000

CODEFORCES 1382_D. Unmerge
```
1
6
1 2 4 6 8 10 11 9 12 7 5 3 1
```
CODEFORCES 1403_B. Spring cleaning
```
# 494A - Spring Cleaning

import math

n, q = map(int, input().split())

g = [[] for i in range(n + 1)]
for i in range(n - 1):
    u, v = map(int, input().split())
    g[u].append(v)
    g[v].append(u)

def dfs(u, p, d):
    global res
    if d >= res:
        return
    for v in g[u]:
        if v != p:
            dfs(v, u, d + 1)
    res = min(res, d)

res = n
for i in range(q):
    d = int(input())
    l = list(map(int, input().split()))
    for v in l:
        dfs(v, -1, 0)
    print(res)
```
CODEFORCES 1425_D. Danger of Mad Snakes
**Incorrect input format**

```
4 2 1
1 1 10
2 2 20
2 3 30
5 2 40
```

This input is incorrect because it contains a number that is not an integer. The program should crash when it tries to read this input.

**Incorrect output format**

```
4 2 1
1 1 10
2 2 20
2 3 30
5 2 40
33800a
```

This output is incorrect because it contains a non-integer number. The program should crash when it tries to print this output.

**Incorrect calculation**

```
4 2 1
1 1 10
2 2 20
2 3 30
5 2 40
40000
```

This output is incorrect because it is not the sum of scores for every possible attack strategy. The correct answer is 33800.

**Memory leak**

```
import sys

def dfs(i, j, r, snakes, scores):
    if i < 0 or i >= len(snakes) or j < 0 or j >= len(snakes[0]):
        return
    if snakes[i][j] == 0:
        return
    if i + r < len(snakes) and snakes[i + r][j] != 0:
        scores[snakes[i + r][j]] += snakes[i][j] * snakes[i][j]
    if i - r >= 0 and snakes[i - r][j] != 0:
        scores[snakes[i - r][j]] += snakes[i][j] * snakes[i][j]
    if j + r < len(snakes[0]) and snakes[i][j + r] != 0:
        scores[snakes[i][j + r]] += snakes[i][j] * snakes[i][j]
    if j - r >= 0 and snakes[i][j - r] != 0:
        scores[snakes[i][j - r]] += snakes[i][j] * snakes[i][j]
    dfs(i, j + 1, r, snakes, scores)
    dfs(i, j - 1, r, snakes, scores)
    dfs(i + 1, j, r, snakes, scores)
    dfs(i - 1, j, r, snakes, scores)


n, m, r = map(int, sys.stdin.readline().split())
snakes = [[int(x) for x in sys.stdin.readline().split()] for _ in range(n)]
scores = [0 for _ in range(10 ** 6 + 1)]
for i in range(n):
    for j in range(len(snakes[0])):
        dfs(i, j, r, snakes, scores)
print(sum(scores[i] ** 2 for i in range(len(scores))))
```

This program has a memory leak because it does not release the memory allocated for the `snakes` and `scores` arrays. This can cause the program to slow down or even crash.

**Race condition**

```
import threading

def count(n):
    global count
    for i in range(n):
        count += 1


count = 0
threads = [threading.Thread(target=count, args=(1000000,)) for _ in range(100)]
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
print(count)
```

This program has a race condition because multiple threads are accessing the `count` variable at the same time. This can lead to incorrect results.

**Deadlock**

```
import threading

def thread1():
    global x, y
    x = 1
    y = 2


def thread2():
    global x, y
    y = 3
    x = 4


x = 0
y = 0
threads = [threading.Thread(target=thread1), threading.Thread(target=thread2)]
for thread in threads:
  
CODEFORCES 1447_B. Numbers Box
1. ```
2
2 2
-1 1
1 1
3 4
0 -1 -2 -3
-1 -2 -3 -4
-2 -3 -4 -5
```

2. ```
2
2 2
-2 1
2 1
2 2
1 2 -1 2
-1 2 1 2
```
CODEFORCES 1472_A. Cards for Friends
```
1
1 2 1
```

```
1
2 2 3
```

```
1
1 1 1
```

```
1
1 4 4
```

```
1
1000000000 1000000000 1
```
CODEFORCES 1498_C. Planar Reflections
```
2
2 3
3 5
```
CODEFORCES 1520_B. Ordinary Numbers
```
1
100
```
CODEFORCES 1547_G. How Many Paths?
```
1. ```
t = int(input())
for i in range(t):
    n, m = map(int, input().split())
    ans = [0] * n
    for j in range(m):
        a, b = map(int, input().split())
        ans[b-1] += 1
    print(*ans)
```

2. ```
t = int(input())
for i in range(t):
    n, m = map(int, input().split())
    graph = [[] for _ in range(n)]
    for j in range(m):
        a, b = map(int, input().split())
        graph[a-1].append(b-1)
    ans = [0] * n
    q = [0]
    while q:
        v = q.pop(0)
        for w in graph[v]:
            if ans[w] == 0:
                ans[w] = ans[v] + 1
                q.append(w)
    print(*ans)
```

3. ```
t = int(input())
for i in range(t):
    n, m = map(int, input().split())
    edges = []
    for j in range(m):
        a, b = map(int, input().split())
        edges.append((a-1, b-1))
    d = [0] * n
    vis = [False] * n
    q = [0]
    while q:
        v = q.pop(0)
        vis[v] = True
        for w in edges:
            if w[0] == v and not vis[w[1]]:
                d[w[1]] = d[v] + 1
                q.append(w[1])
    ans = [0] * n
    for j in range(n):
        if d[j] == 0:
            ans[j] = 0
        elif d[j] == 1:
            ans[j] = 1
        else:
            ans[j] = 2
    print(*ans)
```

4. ```
t = int(input())
for i in range(t):
    n, m = map(int, input().split())
    edges = []
    for j in range(m):
        a, b = map(int, input().split())
        edges.append((a-1, b-1))
    d = [0] * n
    vis = [False] * n
    q = [0]
    while q:
        v = q.pop(0)
        vis[v] = True
        for w in edges:
            if w[0] == v and not vis[w[1]]:
                d[w[1]] = d[v] + 1
                q.append(w[1])
    ans = [0] * n
    for j in range(n):
        if d[j] == 0:
            ans[j] = 0
        elif d[j] == 1:
            ans[j] = 1
        elif d[j] == 2:
            ans[j] = 2
        else:
            ans[j] = -1
    print(*ans)
```

5. ```
t = int(input())
for i in range(t):
    n, m = map(int, input().split())
    edges = []
    for j in range(m):
        a, b = map(int, input().split())
        edges.append((a-1, b-1))
    ans = [0] * n
    d = [0] * n
    for v in range(n):
        if d[v] == 0:
            q = [v]
            d[v] = 1
            while q:
                u = q.pop(0)
                for w in edges:
                    if w[0] == u and d[w[1]] == 0:
                        d[w[1]] = d[u] + 1
                        q.append(w[1])
        if d[v
CODEFORCES 175_D. Plane of Tanks: Duel
```
100 3 50 50 0
100 3 50 50 0

100 3 50 50 0
100 2 48 50 0

100 3 50 50 0
100 1 50 50 50
```
CODEFORCES 195_E. Building Forest
```
6
0
0
1 2 1
2 1 5 2 2
1 1 2
1 3 4
```
CODEFORCES 219_E. Parking Lot
10 7
1 1
1 2
2 1
1 3
2 2
1 4
2 3
1 5
2 4
CODEFORCES 243_B. Hydra
```
9 12 2 3
1 2
2 3
1 3
1 4
2 5
4 5
4 6
6 5
6 7
7 5
8 7
9 1
```
CODEFORCES 268_E. Playlist
1
150 20

2
150 20
150 50

3
150 20
150 50
100 50

4
300 0
300 50
240 50
360 80

5
10 50
10 50
10 50
10 50
10 50
CODEFORCES 291_B. Command Line Arguments
```
run.exe one, two .
```
```
firstarg second "" 
```
```
"" "" "RUn.exe O" "" "   2ne, " two! . " "
```
CODEFORCES 316_D2. PE Lesson
```
5
1 2 2 1 2

8
1 2 2 1 2 1 1 2

10
1 2 2 1 2 1 1 2 1

1000000
1 2 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 
CODEFORCES 339_E. Three Swaps
```
4
4 2 1 3

4
1 2
2 4
3 4

5
1 5 4 3 2

2
1 2

3
2 4
3 5

3
1 2
2 3
```
CODEFORCES 362_B. Petya and Staircases
```
10 5
2 4 8 3 6

10 5
2 4 5 7 9

10 5
1 2 3 4 5

10 5
1 2 3 4 10

10 5
10 1 2 3 4

10 0

10 10

10 1
```
CODEFORCES 385_E. Bear in the Field
```
5 1 2 0 1 2
```
```
1 1 1 -1 -1 2
```
CODEFORCES 406_D. Hill Climbing
```
1
1 1
1
1 1
```
```
5
5 1
1 5
3 4
4 5
2 3
```
```
10
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
1
1 1
```
```
10
1 1
2 1
3 1
4 1
5 1
6 1
7 1
8 1
9 1
10 1
2
1 1
2 2
```
CODEFORCES 433_E. Tachibana Kanade's Tofu
```
2 10 1
1 1
3 1 0 0
1 1 1
1 0 1
```
CODEFORCES 456_B. Fedya and Maths
```
4
124356983594583453458888889
-1234567890
```
CODEFORCES 478_E. Wavy numbers
1. **Incorrect input format.**

```
123 4
```

2. **Incorrect calculation of the wavy number.**

```
123 1
```

3. **Incorrect output.**

```
123 4
500
```

4. **Other bugs.**

```
-1 1
```
CODEFORCES 500_G. New Year Running
5
1 3
3 6
7 4
3 7
5 4
7 2
4
6 5 5 3
3 5 4 6
1 5 1 3
1 5 3 1
CODEFORCES 526_E. Transmitting Levels
```
20 3
75 72 67 65 63 62 61 60 59 58 57 56 55 54 53 52 51 50
7
6
10
```
CODEFORCES 552_A. Vanya and Table
```
1
2 2 3 3
```

```
2
1 1 3 3
1 1 3 3
```

```
3
1 1 2 3
2 2 3 3
3 3 4 4
```

```
4
1 1 3 3
2 2 3 3
3 3 4 4
4 4 5 5
```

```
5
1 1 3 3
2 2 3 3
3 3 4 4
4 4 5 5
5 5 6 6
```
CODEFORCES 579_A. Raising Bacteria
1
5
8
10
100
1000
10000
100000
1000000
10000000
100000000
CODEFORCES 5_E. Bindian Signalizing
```
3
1 2 3
```

```
4
1 2 1 4
```

```
5
1 1 1 1 1
```

```
100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
```

```
101
100 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101 101
```
CODEFORCES 622_C. Not Equal on a Segment
```
10 4
1 2 3 4 5 6 7 8 9 10
1 10 1
1 10 2
1 10 3
1 10 4
```
CODEFORCES 643_F. Bears and Juice
```
5 1 3
1 100 4
3 2 1
100 100 100
```
CODEFORCES 670_E. Correct Bracket Sequence Editor
```
8 4 5
(())()()
RDLD

8 4 5
(())()()
RDLD

2 1 1
()

12 5 3
((()())(()))
RRDLD

8 8 8
(())()()
LLLLLLDD
```
CODEFORCES 696_B. Puzzles
```
7
1 2 1 1 4 4
```

```
12
1 1 2 2 4 4 3 3 1 10 8
```

```
3
1 2 3
```

```
10
1 2 1 1 3 2 4 4 3 3
```
CODEFORCES 717_C. Potions Homework
```
1
100000
```

```
2
100000
1
```

```
3
1
2
3
```

```
4
1
2
3
4
```

```
5
1
2
3
4
5
```

```
6
1
2
3
4
5
6
```
CODEFORCES 737_E. Tanya is 5!
```
2 2 100
3 7
2 1 3 2 1
2 1 3 2 1
CODEFORCES 761_D. Dasha and Very Difficult Problem
```
5 1 5
1 1 1 1 1
3 1 5 4 2

4 2 9
3 4 8 9
3 2 1 4

6 1 5
1 1 1 1 1 1
2 3 5 4 1 6

1 1 1
1
```
CODEFORCES 784_F. Crunching Numbers Just for You
```
1
1
```
```
2
1 2
```
```
3
3 1 2
```
```
4
1 2 3 4
```
```
5
5 4 3 2 1
```
```
6
1 6 2 7 3 5
```
CODEFORCES 805_E. Ice cream coloring
```
1 1
```

```
4 5
0
1 1
1 3
3 2 4 5
2 1
3 2
4 3
```

```
7 3
2 3 1
0
1 2
2 1
2 1
2 1
1 1
1 2
2 3
3 6
```

```
4 6
1 3 2 5
2 4 5 6
1 2
1 2
1 2
1 2
```

```
3 3
1 1
2 2 3
1 2
1 2
2 3
```

```
1 1
1
```

```
2 2
1 1
2 1
```

```
3 3
2 1 2
0
1 3
1 2
2 3
```

```
4 5
0
1 1
1 3
3 2 4 5
2 1
3 2
4 3
```

CODEFORCES 830_E. Perpetual Motion Machine
```
1

4 4
1 2
2 3
3 4
4 2
```
CODEFORCES 852_A. Digits
```
4
5806
```
CODEFORCES 876_B. Divisiblity of Differences
**1. The input format is not correct.**

```
3, 2, 3
1, 8, 4
```

**2. The output format is not correct.**

```
3, 2, 3
1, 8, 4
No
```

**3. The input data is not valid.**

```
3, 2, 3
1, 8, 4.5
```

**4. The program does not correctly handle the case where `k` is greater than `n`.**

```
3, 4, 3
1, 8, 4
```

**5. The program does not correctly handle the case where there are no two integers in the multiset that differ by a multiple of `m`.**

```
3, 3, 3
1, 8, 4
```

**6. The program does not correctly handle the case where there are multiple possible solutions to the problem.**

```
4, 3, 5
2, 7, 7, 7
```
CODEFORCES 8_B. Obsession with Robots
```
LLUUUR
RRUULLDD
```
CODEFORCES 922_A. Cloning Toys
```
1
2

```
```
1000000000
1000000000

```
```
0
0

```
```
2
3

```
CODEFORCES 94_B. Friends
1. Incorrect input format

```
m = int(input())
for i in range(m):
    a, b = map(int, input().split())
```

This code will not work because the input format is incorrect. The input should be a single integer, not a list of integers.

2. Incorrect output format

```
m = int(input())
for i in range(m):
    a, b = map(int, input().split())

if a == b:
    print("FAIL")
else:
    print("WIN")
```

This code will not work because the output format is incorrect. The output should be a single word, not a two-word phrase.

3. Incorrect logic

```
m = int(input())
for i in range(m):
    a, b = map(int, input().split())

num_acquaintances[a] += 1
num_acquaintances[b] += 1

if num_acquaintances[a] == 3 or num_acquaintances[b] == 3:
    print("WIN")
else:
    print("FAIL")
```

This code will not work because it does not correctly identify whether there are either three pairwise acquainted or three pairwise unacquainted people. The code only checks whether one person has three acquaintances, but it does not check whether any other person has three acquaintances.

4. Incorrect variable names

```
m = int(input())
for i in range(m):
    a, b = map(int, input().split())

num_acquaintances[a] += 1
num_acquaintances[b] += 1

if num_acquaintances[a] == 3 or num_acquaintances[b] == 3:
    print("WIN")
else:
    print("FAIL")
```

The variable names `num_acquaintances[a]` and `num_acquaintances[b]` are not descriptive. It is not clear what these variables are used for.

5. Incorrect indentation

```
m = int(input())
for i in range(m):
    a, b = map(int, input().split())

num_acquaintances[a] += 1
num_acquaintances[b] += 1

if num_acquaintances[a] == 3 or num_acquaintances[b] == 3:
    print("WIN")
else:
    print("FAIL")
```

The code is not correctly indented. The `if` statement should be indented to the same level as the `for` loop.
CODEFORCES 977_F. Consecutive Subsequence
```
1
1000000000
```
```
5
1 2 3 4 5
```
```
2
1 2
```
```
1
3
```
```
10
10 9 8 7 6 5 4 3 2 1
```
CODEFORCES 997_D. Cycles in product
```
2 2 2
1 2
1 2

2 2 4
1 2
1 2

2 3 4
1 2
1 2
1 3

4 2 2
1 2
1 3
1 4
1 2

2 2 100
1 2
1 2
```
HACKEREARTH bear-and-bowling-3
```
1
10
```
```
2
1 2
```
```
3
1 2 3
```
```
4
4 3 2 1
```
```
5
1 2 3 4 5
```
```
10
1 2 3 4 5 6 7 8 9 10
```
HACKEREARTH clock-mania
1
12 30

2
06 00
00 00

3
12 12
12 00
00 12
HACKEREARTH expand-it-1
a2b3c2a1
4
2
5
1
8
HACKEREARTH himu-and-long-drive-3
1
4

HACKEREARTH magic-sum
```
1
7
2 4 5 8 -4 3 -6
```
HACKEREARTH nice-p-sequence
```
1
2 3 2
```
```
2
2 3 3
```
```
3
1 11 2
```
```
4
5 13 10
```
```
5
2 1000000007 1000000000
```
HACKEREARTH property-of-circle
```
1
0 0 1
0 0 2
```
HACKEREARTH sherlock-holmes-and-the-temple-mystery-7
3
5
4 3 5 5 3
4
1 2 3 4
2
1 2
HACKEREARTH the-final-confusion
1
3
HACKEREARTH xsquare-and-double-strings-1
5
wow
tata
a
ab
lala
ATCODER p02656 AtCoder Grand Contest 045 - Division into Multiples
1
2 1 1 1 2
2
2 1 1 1 3
ATCODER p02785 AtCoder Beginner Contest 153 - Fennec vs Monster
```
3 1
4 1 5

3 0
1000000000 1000000000 1000000000

8 9
7 9 3 2 3 8 4 6
```
ATCODER p02921 AtCoder Beginner Contest 139 - Tenki
```
CSS
CSR

SSR
SSR

RRR
SSS

RSS
RSS

SSS
SSS

RRR
SSS

SSR
SRS
```
ATCODER p03056 AtCoder Grand Contest 033 - Complexity
```
3 3
..#
.##
.##

6 7
.####.#
....#.
....#.
....#.
.####.#
....##
```
ATCODER p03200 AtCoder Grand Contest 029 - Irreversible operation
```
# 1. Using the wrong data type
S = 'BBBBBBBBB'

# 2. Using an incorrect algorithm
S = 'BBW'

# 3. Off-by-one errors
S = 'BWWW'

# 4. Incorrect boundary conditions
S = ''

# 5. Using global variables
S = 'BWBWBW'

# 6. Not using a test suite
S = 'BWBWBW'
```
ATCODER p03347 AtCoder Grand Contest 024 - Sequence Growing Easy
```
4
0
1
1
2
```
```
3
1
2
1
```
```
9
0
1
1
0
1
2
2
1
2
```
ATCODER p03507 Code Festival Team Relay (Parallel) - Garden
```
1 1000000000
1000000000000000000 1000000000
```

```
2 6
20 10
25 15
```

```
3 9
10 10
10 10
10 10
```

```
3 1000000000
1000000000000000000 1000000000
1000000000000000000 1000000000
1000000000000000000 1000000000
```
ATCODER p03668 AtCoder Grand Contest 017 - Game on Tree
```
5
1 2
2 3
2 4
4 5

5
1 2
2 3
1 4
4 5

6
1 2
2 4
5 1
6 3
3 2

7
1 2
3 7
4 6
2 3
2 4
1 5
```
ATCODER p03823 AtCoder Grand Contest 009 - Division into Two
```
5 3 7
1
3
6
9
12
```
```
7 5 3
0
2
4
7
8
11
15
```
```
8 2 9
3
4
5
13
15
22
26
32
```
```
3 3 4
5
6
7
```
ATCODER p03990 AtCoder Grand Contest 005 - Sugigma: The Showdown
```
4 1 2
1 2
1 3
1 4
2 1
2 3
1 4
```
```
3 3 1
1 2
2 3
1 2
2 3
```
```
4 1 2
1 2
3 4
2 4
1 2
3 4
1 3
```
```
4 2 1
1 2
3 4
2 4
1 2
3 4
1 3
```
```
5 1 2
1 2
1 3
1 4
4 5
2 1
1 3
1 5
5 4
```
AIZU p00078 Magic Square
3
5
13
0
AIZU p00210 The Squares
**Incorrect maze input format:**

```
10 3
##########
#E.....X
##########
```

**Incorrect person input format:**

```
10 3
##########
#E.....X
##########
N
```

**Incorrect number of people:**

```
10 3
##########
#E.....X
##########
```

**Incorrect person direction:**

```
10 3
##########
#W.....X
##########
```

**Incorrect person movement:**

```
10 3
##########
#..#X#
#.EE.#
####N#
#....#
######
```

**Incorrect emergency exit location:**

```
10 3
##########
#E.....X
##########
```

**Incorrect evacuation time:**

```
10 3
##########
#E.....X
##########
181
```

**Incorrect input format:**

```
10 3
##########
#E.....X
##########
0
```
AIZU p00370 Lake Survey
```
0 0
4 0
4
1 1
2 1
3 3
1 2
```

```
4 4
0 0
4
1 1
3 1
3 3
1 3
```

```
-5 0
0 0
3
0 1
1 1
1 0
```

```
0 0
0 100
4
1 1
2 1
3 3
1 2
```

```
-5 0
5 0
3
0 1
1 1
1 0
```
AIZU p00587 Binary Tree Intersection And Union
```
i ((,),((,),)) ((,),((,),))
i ((,),((,),)) ((,),((,),))
i ((,),((,),)) ((,),((,),))
u ((,),((,),)) ((,),((,),))
u ((,),((,),)) ((,),((,),))
u ((,),((,),)) ((,),((,),))
AIZU p00724 Hexerpents of Hexwamp
4
0 0
0 1
0 2
0 3
1
2 1
0 0
20
0 0
1 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
10 0
0 0
0 1
10
0 0
0 1
0 2
0 3
0 4
0 5
0 6
0 7
0 8
1
0 0
0 0
0
0 0
0 0
0 0
1
0 0
0 0
0
0 0
0 0
0 0
0
0 0
0 0
0
AIZU p00864 Grey Area
10 50
100
0
100
10 50
100
100
50
10 10
1
2
3
4
5
16
17
18
29
30
0 0
AIZU p00995 Dungeon
```
4 4
0 1 3
1 3 4
0 2 2
2 3 1
4
0 0
2 2
2 1
3 4
```
AIZU p01127 X-Ray Screening System
1
1
..
3
3
...
.W.
...
10
10
..........
.DDDDCCC..
.DDDDCCC..
.DDDDCCC..
ADDDDCCC..
AAA..CCC..
AAABBBBC..
AAABBBB...
..BBBBB...
..........
10
10
..........
.DDDDDD...
.DDDDCCC..
.DDDDCCC..
ADDDDCCC..
AAA..CCC..
AAABBBBC..
AAABBBB...
..BBBBB...
..........
10
10
R..E..C.T.
R.EEE.C.T.
.EEEEE....
EEEEEEE...
.EEEEEEE..
..EEEEEEE.
...EEEEEEE
....EEEEE.
.....EEE..
......E...
16
50
..................................................................
.........AAAAAAAAAAAAAAAA.........................
....PPP...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.....
....PPP...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.....
....PPP...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA....
....PPP..............AAAAA.AAAAAAAAAAAAAAAA.......
....PPP................A....AAA.AAAAAAAAAA........
....PPP...........IIIIIAAIIAIII.AAAAAAAAAA........
..CCCCCCCCCCCCC...IIIIIIAAAAAAAAAAAAAAAAAA........
..CCCCCCCCCCCCC...IIIIIIIIIIIII...AAAAAAAAAA......
....PPP............................AAAAAAAAAA.....
MMMMPPPMMMMMMMMMMMMMMM.............AAAAAAAAAAA....
MMMMPPPMMMMMMMMMMMMMMM..............AAAAAAAAAAA...
MMMMMMMMMMMMMMMMMMMMMM...............AAAAAAAAAA...
MMMMMMMMMMMMMMMMMMMMMM...............AAAAAAAAAA...
MMMMMMMMMMMMMMMMMMMMMM............................
AIZU p01266 Robot Communication
```
2 2
0 0 0 1
0 0 1 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

4 2
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

6 1
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1
0 0 0 1
0 10 0 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

6 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1
0 0 0 1
0 10 0 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

6 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1
0 0 0 1
0 10 0 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

6 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1
0 0 0 1
0 10 0 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

6 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1
0 0 0 1
0 10 0 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

6 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1
0 0 0 1
0 10 0 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

6 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1
0 0 0 1
0 10 0 0

4 10
0 0 0 1
0 10 0 0
10 0 0 -1
10 10 0 -1

4 
AIZU p01426 Vector Compression
```
# 1. Incorrect input format

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```

```
# 2. Incorrect vector dimensions

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```

```
# 3. Arithmetic errors

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```

```
# 4. Floating-point errors

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```

```
# 5. Numerical instability

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```

```
# 6. Overflow errors

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```

```
# 7. Underflow errors

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```

```
# 8. Incorrect output format

2 3
1.0 1.0
-1.0 0.0
0.5 0.5
```
AIZU p01582 Cover Time
3 3
1 2
1 3
2 3
AIZU p01742 Dictionary
```
2
?sum??mer
c??a??mp
```
AIZU p01882 We don't wanna work!
1
0
AIZU p02019 Training
6 3 2 1
AIZU p02161 1333
```
12 3
itisansansan
1 12
5 12
6 7
```
```
20 2
sensanbyakusanjuusan
1 20
1 14
```
```
21 6
aaaabaaaabaaaaaaaaaab
1 21
10 21
10 18
4 16
11 21
1 6
```
AIZU p02302 Convex Cut
**Incorrect input format**

```
1
1 1
2
2 0 2 4
```

**Incorrect output format**

```
4
2 0 2 4
```

**Incorrect calculation of the area of the cut polygon**

```
4
1 1
2
2 0 2 4
```

**Incorrect implementation of the algorithm**

```
4
1 1
2
2 0 2 4
```

**Incorrect error handling**

```
4
1 1
2
2 0 2 4
```
AIZU p02449 Permutation
```
3
1 2 3
3 2 1
2 3 1

3
1 3 2
1 3 2
2 1 3

3
3 1 2
3 2 1
3 1 2

3
2 3 1
2 1 3
3 1 2
```