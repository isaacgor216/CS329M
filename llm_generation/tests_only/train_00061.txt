CODECHEF bao
1
2 1
+5
*2
CODECHEF cme04
```
1
250 250 50 50
```
CODECHEF flow015
3
1994
1991
2014
CODECHEF life
```
10
111111111
010010000
000010100
111100011
100010000
000010000
001010100
001010100
011111111
100000000
```
CODECHEF prcnsr5
1
2
3
5
10
100
1000
10000
100000
1000000
10000000
100000000
1000000000
CODECHEF taaplusb
1
1
2
2
5
3
10
10
100
100
1000
1000
10000
10000
100000
100000
1000000
1000000
10000000
CODEFORCES 1010_C. Border
```
2 8
12 20
```
```
3 10
10 20 30
```
```
3 8
11 12 13
```
```
2 4
13 14
```
```
4 9
11 12 13 14
```
```
5 9
10 11 12 13 14
```
CODEFORCES 1034_C. Region Separation
```
4
1 1 1 1
1 2 3
```
CODEFORCES 1056_H. Detect Robots
```
1
5
2
4 1 2 3 5
3 1 4 3
```

```
1
4
4
3 1 2 3
3 2 3 4
3 3 4 1
3 4 1 2
```
CODEFORCES 107_D. Crime Management
```
5 2
A 1
B 2
```
```
6 3
A 1
B 2
C 3
```
```
8 3
A 2
A 3
B 2
```
CODEFORCES 109_C. Lucky Tree
```
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<vector<int>> adj(n + 1);
    for (int i = 0; i < n - 1; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int ans = 0;
    for (int i = 1; i <= n; i++) {
        for (int j = i + 1; j <= n; j++) {
            for (int k = j + 1; k <= n; k++) {
                if (adj[i].count(j) && adj[i].count(k) && adj[j].count(k)) {
                    ans++;
                }
            }
        }
    }

    cout << ans << endl;

    return 0;
}
```
CODEFORCES 1120_C. Compress String
```
# test case 1
3 3 1
aba

# test case 2
4 1 1
abcd

# test case 3
4 10 1
aaaa
```
CODEFORCES 1147_E. Rainbow Coins
**1. Incorrect input format**

```
1
100
```

This input is incorrect because it does not have a space between the two numbers.

**2. Invalid queries**

```
1
1 2 3
```

This query is invalid because it asks about a pair of coins that are not distinct.

**3. Excessive queries**

```
1
10
Q 1 2 3
Q 4 5 6 7 8 9 10
Q 1 2 3
```

This input is invalid because it asks for more than 7 batches.

**4. Incorrect output format**

```
1
10
A 1 2 3 4 5 6 7 8 9 10
```

This output is incorrect because it does not have the correct number of lines.

**5. Incorrect answer**

```
1
10
A 1 2 3 4 5 6 7 8 9 10
```

This answer is incorrect because it does not satisfy the constraints that the sizes of the three piles must add up to the total number of coins, each coin must appear in exactly one pile, and no two different colored coins can be in the same pile.

**6. Time limit exceeded**

```
1
10
```

This input is likely to cause a time limit exceeded error because the program is not efficient enough.

**7. Incorrect hack format**

```
1
t=1
s=RRRRR
```

This hack is incorrect because it does not have the correct format.
CODEFORCES 1169_A. Circle Metro
```
5 1 4 3 2
```

```
10 2 1 9 10
```

```
10 5 1 9 1
```

```
10 5 10 9 1
```
CODEFORCES 1187_C. Vasya And Array
```
2 1
1 1 2
```
CODEFORCES 1206_B. Make Product Equal One
```
1
1000000000
```
```
3
-1000000000 1000000000 0
```
```
1
-1000000000
```
```
5
-1000000000 -1000000000 -1000000000 -1000000000 -1000000000
```
```
10
-1000000000 0 1000000000 0 1000000000 0 1000000000 0 1000000000
```
```
2
1 2
```
CODEFORCES 1223_E. Paint the Tree
```
1
5 2
1 2 10
2 3 10
3 4 10
4 5 10
```
CODEFORCES 1249_B1. Books Exchange (easy version)
```
1
1
1
```

```
1
5
1 2 3 4 5
```

```
1
6
4 6 2 1 5 3
```

```
1
1
```

```
4
3 4 1 2
```

```
5
5 1 2 4 3
```
CODEFORCES 1267_H. Help BerLine
```
1
1
1
```

```
3
1 3 2
1 3 2
```

```
1
1
```

```
10
6 10 4 2 7 9 5 8 3 1
6 10 4 2 7 9 5 8 3 1
```

```
10
2 4 6 9 1 8 10 5 3 7
2 4 6 9 1 8 10 5 3 7
```
CODEFORCES 128_B. String
```
1. Incorrect input format

input = 123
output = 


2. Incorrect output format

input = a
output = 123


3. Incorrect implementation of the lexicographical order

input = a
output = b


4. Incorrect calculation of the k-th substring

input = a
output = b


5. Incorrect handling of edge cases

input = 
output = 


input = a
output = No such line.


input = aa
k = 2
output = aa


input = aba
k = 4
output = b
```
CODEFORCES 130_H. Balanced brackets
```
(()(()))()
())()
```
CODEFORCES 1332_C. K-Complete Word
```
1
6 2
abaaba
```
CODEFORCES 1352_F. Binary String Reconstruction
1
1 1 1
CODEFORCES 1372_D. Omkar and Circle
```
1
4
```

```
3
1 1 1
```

```
3
10 1 10
```
CODEFORCES 1395_C. Boboniu and Bit Operations
```
3 2
1 2 3
0 1
```
```
4 2
2 6 4 0
2 4
```
```
7 6
1 9 1 9 8 1 0
1 1 4 5 1 4
```
```
8 5
179 261 432 162 82 43 10 38
379 357 202 184 197
```
CODEFORCES 1419_E. Decryption
```
3
6
4
30
```
CODEFORCES 1437_F. Emotional Fishermen
```
3
1 2 3
```
```
4
4 3 2 1
```
```
3
4 2 1
```
```
8
42 1337 13 37 420 666 616 97
```
```
2
1 4
```
```
5
1 1 1 1 1
```
```
10
22 13 5 7 21 19 23 17 11 15
```
CODEFORCES 1462_D. Add to Neighbour and Remove
```
5
5
3 1 6 6 2
4
1 2 2 1
3
2 2 2
4
6 3 2 1
5
7 7 7 7 7
```
CODEFORCES 1487_E. Cheap Dinner
```
4 3 2 1
1 2 3 4
5 6 7
8 9
10
2
1 2
1 1
2
3 1
3 2
1
1 1

1 1 1 1
1
1
1
1
1
1 1
0
0
```
CODEFORCES 1511_B. GCD Length
**1. Incorrect input format**

```
1 2 3
```

**2. Incorrect output format**

```
1234 5678
```

**3. Incorrect use of variables**

```
for i in range(1, n + 1):
    if a % i == 0 and b % i == 0:
        gcd = i
```

**4. Logic errors**

```
def gcd(x, y):
    if x < y:
        return gcd(y, x)
    while y != 0:
        x, y = y, x % y
    return x

```

**5. Off-by-one errors**

```
for i in range(1, n + 1):
    if a % i == 0 and b % i == 0:
        gcd = i
        break
```

**6. Undefined behavior**

```
x = int(input())
```

**7. Memory leaks**

```
def gcd(x, y):
    if x < y:
        return gcd(y, x)
    while y != 0:
        x, y = y, x % y
    return x

for _ in range(int(input())):
    a, b, c = map(int, input().split())
    print(gcd(a, b), end=' ')
    print(gcd(a, b) * 10 ** (c - 1))
```

**8. Security vulnerabilities**

```
import os
import sys

def main():
    filename = sys.argv[1]
    with open(filename) as f:
        data = f.read()
    print(data)

if __name__ == '__main__':
    main()
```

**9. Performance issues**

```
def gcd(x, y):
    if x < y:
        return gcd(y, x)
    while y != 0:
        x, y = y, x % y
    return x

for _ in range(int(input())):
    a, b, c = map(int, input().split())
    print(gcd(a, b), end=' ')
    print(gcd(a, b) * 10 ** (c - 1))
```
CODEFORCES 1538_G. Gift Set
```
1
1 1 1 1
```

```
1
1000000000 1000000000 1 1
```

```
1
1 1 1000000000 1000000000
```

```
1
1000000000 1000000000 1000000000 1000000000
```

```
1
1000000000 1000000000 1000000000 1
```

```
1
1 2 1 1
```

```
1
2 1 1 1
```

```
1
7 8 1 2
```

```
1
4 1 2 3
```
CODEFORCES 165_B. Burning Midnight Oil
```
7 2

59 9
```
CODEFORCES 186_C. Plant
```
1
2
3
4
5
6
7
8
9
10
```
CODEFORCES 207_D5. The Beaver's Problem - 3
### Incorrect input format

```
Input:
1000000
document_name
document_text

Output:
3
```

```
Input:
500000
document_name
document_text

Output:
2
```

### Incorrect output format

```
Input:
1000000
document_name
document_text

Output:
a
```

```
Input:
500000
document_name
document_text

Output:
b
```

### Malformed documents

```
Input:
1000000
document_name
document_text
```

```
Input:
500000
document_name
document_text
```

### Memory issues

```
Input:
1000000
document_name
document_text
```

```
Input:
500000
document_name
document_text
```

### Timeout

```
Input:
1000000
document_name
document_text
```

```
Input:
500000
document_name
document_text
```

### Incorrect logic

```
Input:
1000000
document_name
document_text

Output:
3
```

```
Input:
500000
document_name
document_text

Output:
2
```
CODEFORCES 232_D. Fence
```
10
1 2 2 1 100 99 99 100 100 100
6
1 4
1 2
3 4
1 5
9 10
10 10
```
CODEFORCES 258_C. Little Elephant and LCM
```
3
1 4 3
```

```
2
6 3
```

```
1
1
```

```
10
7 6 8 2 4 5 1 3 9
```

```
6
1 2 3 4 5 6
```

```
100000
100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
```

CODEFORCES 281_C. Rectangle Puzzle
1. Incorrect input format:
```
1 2 3 a
```
2. Incorrect calculation of the area:
```
1 1 90
```
3. Incorrect rounding of the answer:
```
1 1 45
```
4. Other bugs:
```
1 1 -90
```
CODEFORCES 304_B. Calendar
1900:01:01
2038:12:31


1996:03:09
1991:11:12


2000:02:29
2000:03:01


1900:01:01
1900:01:02
CODEFORCES 330_C. Purification
```
3
.E.
E.E
.E.

```

```
3
EEE
E..
E.E

```

```
5
EE.EE
E.EE.
E...E
.EE.E
EE.EE
```
CODEFORCES 352_A. Jeff and Digits
```
1
5
```
```
4
5 0 5 0
```
```
11
5 5 5 5 5 5 5 5 0 5 5
```
CODEFORCES 376_B. I.O.U.
```
5 3
1 2 10
2 3 1
2 4 1

```

```
3 0

```

```
4 3
1 2 1
2 3 1
3 1 1

```
CODEFORCES 398_D. Instant Messanger
```
5 2 9
1
4
1 3
3 4
C 3
A 2 5
O 1
D 1 3
A 1 2
A 4 2
C 2
F 4
C 2
```
CODEFORCES 420_E. Playing the ball
```
# 420E - Playing the ball

def main():
    n, d = map(int, input().split())
    circles = [list(map(int, input().split())) for _ in range(n)]
    scores = []
    for x in range(-10000, 10001, d):
        for y in range(-10000, 10001, d):
            score = 0
            for cx, cy, r in circles:
                if (x - cx)**2 + (y - cy)**2 <= r**2:
                    score += 1
            scores.append(score)
    print(max(scores))


if __name__ == "__main__":
    main()
```
CODEFORCES 447_C. DZY Loves Sequences
```
1
1000000000
```
```
2
1 2
```
```
3
1 2 3
```
```
4
1 2 3 4
```
```
5
1 2 3 4 5
```
```
6
7 2 3 1 5 6
```
```
7
1 2 3 4 5 6 7
```
```
8
1 2 3 1 4 5 6 7
```
```
9
1 2 3 1 4 5 6 7 8
```
```
10
1 2 3 1 4 5 6 7 8 9
```
CODEFORCES 469_D. Two Sets
```
4 5 9
2 3 4 5
3 3 4
1 2 4
```
CODEFORCES 491_C. Deciphering
10 3
aaaabbbaaab
bbbbabbbbb
10 2
aaaaaaabbb
bbbbaaabbb
9 4
dacbdacbd
acbdacbda
10 2
aaaaaaaaaaaa
bbbbbbbbbbb
CODEFORCES 515_D. Drazil and Tiles
```
3 3
...
.*.
...

5 5
...**
*...
.*..
..*.
...

3 1
*.

1 1
*

1 2
..
```
CODEFORCES 542_E. Playing on Graph
```
5 4
1 2
2 3
3 4
3 5
```

```
4 6
1 2
2 3
1 3
3 4
2 4
1 4
```

```
4 2
1 3
2 4
```
CODEFORCES 56_A. Bar
```
1
18
```

```
2
19
17
```

```
5
18
VODKA
COKE
19
17
```

```
10
19
ABSINTH
20
BEER
21
CHAMPAGNE
22
GIN
23
RUM
24
SAKE
25
TEQUILA
26
VODKA
27
WHISKY
28
WINE
```
CODEFORCES 590_D. Top Secret Task
```
3 2 2
2 4 1
```

```
5 4 2
10 1 6 2 5
```

```
5 2 3
3 1 4 2 5
```
CODEFORCES 612_C. Replace To Make Regular Bracket Sequence
1. [&lt;}){}
2. {()}[]
3. ]]
4. <()()
5. ]]][[[()
6. [()()(
7. {()[)})]
8. ]]][[[()
9. [()()(
10. [[]()])]()
11. {()}[][()]
12. ]]][[[()
13. [()()()()(
14. ]]]]]]]]]]]]]]]]
15. {}[[[]]()
16. [)][()()]]]]
17. {[]}()
18. {()[)})]()]
19. [(){}(])
20. [()]
21. [()()(]))
22. {[()()()()()()]}
23. ]]][[[()
24. [()()(
25. [()]()
26. [)][()()]]]]
27. {[]}()
28. {()[)})]()]
29. [(){}(])
30. [()]
31. [()()(]))
32. {[()()()()()()]}
33. ]]][[[()
34. [()()(
35. [()]()
CODEFORCES 632_C. The Smallest String Concatenation
```
1
a
```

```
2
a
b
```

```
3
a
b
c
```

```
4
a
b
c
d
```

```
5
c
cb
cba
cbb
ccc
```

```
6
cba
cbb
ccc
c
cb
```
CODEFORCES 660_F. Bear and Bowling 4
6
5 -1000 1 -3 7 -8

5
1000 1000 1001 1000 1000

3
-60 -70 -80
CODEFORCES 683_J. The Hero with Bombs
```
3 5
XEX.X
X.XXT
X.X.X
```

```
1 1
X
```

```
2 2
X.
X.
```

```
3 4
....
X..X
....
```

```
2 3
X.X
X..
```

```
3 3
.X.X
.X.X
.X.X
```

```
4 4
X.X.X
.X.X.
X.X.X
.X.X.
```

```
4 5
X.X.X.
.X.X.X
X.X.X.
.X.X.X
```

```
5 5
X.X.X.X
.X.X.X.
X.X.X.X
.X.X.X.
X.X.X.X
```

```
6 6
X.X.X.X.X
.X.X.X.X.
X.X.X.X.X
.X.X.X.X.
X.X.X.X.X
X.X.X.X.X
```

```
7 7
X.X.X.X.X.X
.X.X.X.X.X.
X.X.X.X.X.X
.X.X.X.X.X.
X.X.X.X.X.X
.X.X.X.X.X.
X.X.X.X.X.X
```
CODEFORCES 707_D. Persistent Bookcase 
```
1 1 1
1 1 1
1 1 1
4 0
```
CODEFORCES 72_E. Ali goes shopping
```
a

abab

abcd

abababab

```
CODEFORCES 750_B. New Year and North Pole
```
1
South
```

This input is incorrect because it does not have the correct number of elements. The input should contain a single integer, but this input only contains one string.

```
1
1000 South
1000 North
```

This input is incorrect because it does not satisfy the condition that Limak must end on the North Pole. In this input, Limak starts on the North Pole and moves 1000 kilometers south, then 1000 kilometers north, which brings him back to the North Pole. However, the input does not specify that Limak must end on the North Pole, so it is incorrect.

```
1
1000 South
1000 North
1000 North
```

This input is correct because it satisfies all of the conditions that are specified in the problem statement. Limak starts on the North Pole and moves 1000 kilometers south, then 1000 kilometers north, then 1000 kilometers north, which brings him back to the North Pole. The input also specifies that Limak must end on the North Pole, so it is correct.

```
5
1000 South
1000 North
1000000 West
9000 North
10000 North
```

This input is correct because it satisfies all of the conditions that are specified in the problem statement. Limak starts on the North Pole and moves 1000 kilometers south, then 1000 kilometers north, then 1000000 kilometers west, then 9000 kilometers north, then 10000 kilometers north, which brings him back to the North Pole. The input also specifies that Limak must end on the North Pole, so it is correct.

```
3
20000 South
10 East
20000 North
```

This input is incorrect because it does not satisfy the condition that Limak must end on the North Pole. In this input, Limak starts on the North Pole and moves 20000 kilometers south, then 10 kilometers east, then 20000 kilometers north, which brings him to a point that is not on the North Pole. The input does not specify that Limak must end on the North Pole, so it is incorrect.
CODEFORCES 773_F. Test Data Generation
```
3 6 100000
6 21 100129
58 787788 50216
```
CODEFORCES 798_E. Mike and code of a permutation
### Invalid input

```
1
-1
```

### Invalid output

```
1 2 3 4 5 6
```

### Inefficient code

```
n = int(input())
a = list(map(int, input().split()))
p = [0] * n
for i in range(n):
    j = min(a[i + 1:] + [n + 1], key=lambda j: j - a[i])
    a[j] = n + 1
    p[i] = j
print(*p)
```

### Incorrect code

```
n = int(input())
a = list(map(int, input().split()))
p = solve(n, a)
print(*p)
```
CODEFORCES 818_G. Four Melodies
1. **Incorrect input format**
```
5
1 2 3 4 5
```

2. **Incorrect output format**
```
5
```

3. **Incorrect logic**
```
5
1 3 5 7 9
```

4. **Incorrect implementation**
```
5
1 3 5 7 9
```

5. **Incorrect testing**
```
5
1 3 5 7 9
```
CODEFORCES 844_C. Sorting by Subsequences
```
# 6
# 3 2 1 6 5 4

# 6
# 83 -75 -49 11 37 62

# 10
# 1 2 3 4 5 6 7 8 9 10

# 10
# 10 9 8 7 6 5 4 3 2 1
CODEFORCES 864_F. Cities Excursions
```
1 1 0
-1
```
```
2 0 0
```
```
3 3 1
1
```
```
4 3 1
1
```
```
5 0 0
-1
```
```
6 0 0
-1
```
```
7 0 0
-1
```
```
8 0 0
-1
```
```
9 0 0
-1
```
```
10 0 0
-1
```
CODEFORCES 88_E. Interesting Game
1. ```
3
```
2. ```
6
```
3. ```
100
```
CODEFORCES 913_C. Party Lemonade
1. Incorrect input format:
```
1 1
10
```

2. Incorrect output format:
```
4 12
20 30 70 90
150
```

3. Incorrect algorithm:
```
4 12
20 30 70 90
150
```

4. Runtime error:
```
4 12
20 30 70 90
```

5. Memory error:
```
4 12
20 30 70 90
```

6. Incorrect answer:
```
4 12
20 30 70 90
150
```
CODEFORCES 935_C. Fifa and Fafa
```
5 3 3 1 1
10 5 5 5 15
```
CODEFORCES 961_B. Lecture Sleep
```
6 3
1 3 5 2 5 4
1 1 0 1 0 0

6 3
1 3 5 2 5 4
1 0 0 1 0 0

6 3
1 3 5 2 5 4
0 0 0 1 0 0

6 3
1 3 5 2 5 4
0 1 0 1 0 0

6 3
1 3 5 2 5 4
1 1 1 1 1 1
```
CODEFORCES 989_A. A Blend of Springtime
1. ```
.BAC.
```
2. ```
AA..CB
```
3. ```
AB..C
```
4. ```
AB..A
```
5. ```
.A..C
```
6. ```
C..A.
```
7. ```
..C..
```
8. ```
......
```
9. ```
A..A..A..
```
10. ```
B..B..B..
```
HACKEREARTH amit-and-cookies
```
5 50
12 81 23 5 29

5 50
12 81 23 5 29

0 0

1 10
10
```
HACKEREARTH capture-castle
```
1
3 4
1 5 7 10
5 3 8 7 2 3
5 3 76
```
HACKEREARTH determine-the-truth
1
3

HACKEREARTH gcd-5
```
1
4
10 20 30 40
```
```
3
1
1
2
1 2
3
1 3 2
```
```
5
1
1
2
2
3
1 1
4
1 2 3 4
5
1 2 3 4 5
```
HACKEREARTH lalit-and-kundu
1
3 2
2 1
HACKEREARTH monk-and-power-of-time
```
3
3 2 1
1 3 2

3
1 2 3
1 2 3

0

3
1 2 3
3 1 2

2
1 2
2 1

1
1
1

1
2
2

3
1 3 2
2 3 1

4
1 2 3 4
2 3 4 1

10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
```
HACKEREARTH people-circle

HACKEREARTH roy-and-leds-6
```
12 2 3 5
```
HACKEREARTH string-weight
1. ```
abcd
2
a c
```

2. ```
'A'
0
```

3. ```
abcd
2
a,d
```

4. ```
abcd
1
d
```

5. ```

```

6. ```
''
0
```

7. ```
'aaa'
0
```

8. ```
'abcd'
1
a
```

9. ```
abcd
2
a,c
abcd
2
a,c
```

10. ```
'\u0000'
0
```
HACKEREARTH v-vs-s
1
1
3
10
11
101
111
0111
1000
1111
0000
ATCODER p02599 AtCoder Beginner Contest 174 - Range Set Query
**1. Using the wrong data type for the number of balls or queries.**

```
N, Q = map(int, input().split())
```

**2. Using the wrong data type for the colors of the balls.**

```
colors = list(map(int, input().split()))
```

**3. Using the wrong algorithm to solve the problem.**

```
def count_different_colors(l, r):
    # This is a simple brute-force algorithm that counts the number of different colors in the range [l, r].

    count = 0
    for i in range(l, r + 1):
        if colors[i] not in seen:
            seen.add(colors[i])
            count += 1
    return count


for _ in range(Q):
    l, r = map(int, input().split())
    print(count_different_colors(l, r))
```

**4. Making a mistake in the implementation of the algorithm.**

```
def count_different_colors(l, r):
    # This is a simple brute-force algorithm that counts the number of different colors in the range [l, r].

    if l == r:
        return 1

    count = 0
    for i in range(l, r + 1):
        if colors[i] not in seen:
            seen.add(colors[i])
            count += 1
    return count


for _ in range(Q):
    l, r = map(int, input().split())
    print(count_different_colors(l, r))
```

**5. Not handling all of the possible input cases.**

```
N, Q = map(int, input().split())
colors = list(map(int, input().split()))

# Handle the case where the number of balls is zero.

if N == 0:
    print(0)
    exit()

# Handle the case where the number of queries is zero.

if Q == 0:
    exit()

# Handle the case where the colors of the balls are all the same.

if len(set(colors)) == 1:
    for _ in range(Q):
        print(1)
    exit()

# Solve the problem.

for _ in range(Q):
    l, r = map(int, input().split())
    print(count_different_colors(l, r))
```
ATCODER p02730 AtCoder Beginner Contest 159 - String Palindrome
```
akasaka
level
atcoder
```
ATCODER p02863 AtCoder Beginner Contest 145 - All-you-can-eat
```
2 60
10 10
100 100

3 60
10 10
10 20
10 30

3 60
30 10
30 20
30 30

10 100
15 23
20 18
13 17
24 12
18 29
19 27
23 21
18 20
27 15
22 25
```
ATCODER p02998 AtCoder Beginner Contest 131 - Must Be Rectangular!
```
3
1 1
5 1
5 5
```
```
2
10 10
20 20
```
```
9
1 1
2 1
3 1
4 1
5 1
1 2
1 3
1 4
1 5
```
ATCODER p03139 NIKKEI Programming Contest 2019 - Subscribers
```
10 3 5
10 7 5
100 100 100
```
ATCODER p03283 AtCoder Beginner Contest 106 - AtCoder Express 2
```
2 3 1
1 1
1 2
2 2
1 2
```
ATCODER p03438 AtCoder Petrozavodsk Contest 001 - Two Arrays
```
3
1 2 3
5 2 2

5
3 1 4 1 5
2 7 1 8 2

5
2 7 1 8 2
3 1 4 1 5
```
ATCODER p03597 AtCoder Beginner Contest 074 - Bichrome Cells
```
1
0

3
4

19
100

10
0

10
10

100
100
```
ATCODER p03757 square869120Contest #4 - Get the Salary of Atcoder
```
6 7
-1 6
0 5
0 4
2 3
2 2
1 1
2 0 1
1 0 2 1
2 2 1
3 3 3
2 0 3
3 3 4
2 1 1
```
ATCODER p03918 CODE FESTIVAL 2016 Final - Neue Spiel
```
3
0 0 1
1 1 0
3 0 1
0 1 1
```
AIZU p00021 Parallelism
```
# 1. Using the wrong data type

Input:
1
0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0

Output:
NO

Explanation:
The input data is a list of real numbers, but the program uses integers. This causes the program to incorrectly compare the two points (0.0, 0.0) and (1.0, 1.0).

# 2. Not handling floating-point errors correctly

Input:
1
0.0 0.0 1.0 1.0 0.0 0.0 1.0 1.0

Output:
NO

Explanation:
The input data contains two points that are very close together, but not exactly the same. The program incorrectly compares the two points and returns "NO".

# 3. Not handling degenerate cases correctly

Input:
1
0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0

Output:
YES

Explanation:
The input data contains two points that are the same. The program incorrectly returns "YES".

# 4. Not using the right algorithm

Input:
1
0.0 0.0 1.0 1.0 1.0 1.0 2.0 2.0

Output:
YES

Explanation:
The input data contains two lines that are collinear. The program incorrectly returns "YES".

# 5. Not testing the program thoroughly

Input:
1
0.0 0.0 1.0 1.0 1.0 0.0 2.0 2.0

Output:
YES

Explanation:
The program does not correctly handle degenerate cases.
AIZU p00152 Bowling
```
3
1010 6 3 10 7 1 0 7 9 1 10 6 2 4 3 9 1 9 0
1200 5 3 9 1 7 1 0 0 8 1 10 10 4 3 9 1 8 2 9
1101 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
```
AIZU p00309 The Kingdom of Akabeko
10 10
1 2 1
2 3 2
3 1 3
4 5 4
5 6 5
6 4 6
1 4 7
7 8 8
8 9 9
9 10 10

AIZU p00473 Dividing Snacks
6
1
8
12
6
2
AIZU p00665 Everything Starts With Your Vote
```
# 問題：AIZU p00665 Everything Starts With Your Vote
# 解説：https://drken1215.hatenablog.com/entry/2018/02/10/0000

N, M, K, L = map(int, input().split())
S = [list(map(int, input().split())) for _ in range(N)]
T = list(map(int, input().split()))

for i in range(N):
    S[i].append(i)
S.sort(key=lambda x: (-x[0], x[1]))

ans = 0
for i in range(M):
    ans += min(L, K - sum(S[i][2:]))

print(ans)
```
AIZU p00808 Young
```
0
5
Hakodate 08:15 Morioka 12:30 2500
Morioka 14:05 Hakodate 17:30 2500
Morioka 15:30 Hakodate 18:00 3000
Morioka 14:30 Tokyo 17:50 3000
Tokyo 08:30 Morioka 13:35 3000
4
Hakodate 08:15 Morioka 12:30 2500
Morioka 14:04 Hakodate 17:30 2500
Morioka 14:30 Tokyo 17:50 3000
Tokyo 08:30 Morioka 13:35 3000
18
Hakodate 09:55 Akita 10:53 3840
Hakodate 14:14 Akita 16:09 1920
Hakodate 18:36 Akita 19:33 3840
Hakodate 08:00 Morioka 08:53 3550
Hakodate 22:40 Morioka 23:34 3550
Akita 14:23 Tokyo 14:53 2010
Akita 20:36 Tokyo 21:06 2010
Akita 08:20 Hakodate 09:18 3840
Akita 13:56 Hakodate 14:54 3840
Akita 21:37 Hakodate 22:35 3840
Morioka 09:51 Tokyo 10:31 2660
Morioka 14:49 Tokyo 15:29 2660
Morioka 19:42 Tokyo 20:22 2660
Morioka 15:11 Hakodate 16:04 3550
Morioka 23:03 Hakodate 23:56 3550
Tokyo 09:44 Morioka 11:04 1330
Tokyo 21:54 Morioka 22:34 2660
Tokyo 11:34 Akita 12:04 2010
0
```
AIZU p00939 Bringing Order to Disorder
1. **Incorrect input format**
```
a
```

2. **Incorrect output format**
```
20
```

3. **Off-by-one error**
```
1
```

4. **Infinite loop**
```
0
```

5. **Memory leak**
```
1000000000
```

6. **Security vulnerability**
```
1234567890
```
AIZU p01072 Plants
```
3 3 3
5
2 0 0
0 1 0
1 1 1
1 2 1
2 2 0
0 0 0
0 1 0
0 0 0
```

```
2 3 4
2
0 0 0
1 1 3
1 0
0 0
0 0
```

```
3 8 6
6
0 4 3
2 5 3
0 2 3
2 2 5
1 1 3
2 2 1
1 1 1
1 1 1
1 1 1
1 0 1
0 1 1
1 1 0
1 0 1
0 1 0
```

```
8 3 3
7
0 1 1
5 1 0
4 0 2
3 2 0
3 1 1
3 0 1
5 1 1
1 0 1 1 0 0 1 0
0 0 1 1 0 1 0 1
0 1 0 0 0 1 0 1
```
AIZU p01206 Black Force
4 4 1 1
2 2 2 2
2 1 1 2
2 1 1 2
2 1 2 2
1 1
4 4 1 1
2 2 2 2
2 1 1 2
2 1 1 2
2 1 2 2
2 2
4 4 1 1
2 2 2 2
2 1 1 2
2 1 1 2
2 1 1 2
1 1
3 6 6 1
1 6 7 1 7 1
5 1 2 8 1 6
1 4 3 1 5 1
1 4
5 6 21 1
1 3 3 3 3 1
3 1 1 1 1 3
3 1 1 3 2 2
3 1 1 1 1 3
1 3 3 3 3 1
3 4
0 0 0 0
AIZU p01342 Dungeon Wall
```
3 4 4
1 0 1 1
1 3 1 4
1 2 2 2
2 1 2 3
0 0
1 0


50 2 0
0 0
49 0


50 2 0
0 0
49 1


3 4 2
0 0 2 0
2 0 3 0
0 0
1 0
```
AIZU p01509 Play in Basic
1. ```
C4C4G4G4A4A4G2F4F4E4E4D4D4C2
```
2. ```
O4C4.C8F4.F8G8F8E8D8C2
```
3. ```
B-8>C8<B-8V40R2R..R8.V100EV50L1CG
```
4. ```
*
```
AIZU p01680 Everlasting -One-
```
3 2
1 2
2 3
5 0
100000 0
0 0
```
AIZU p01824 Surface Area of Cubes
```
[1.0, 2.0, 3.0]
[-1, -2, -3]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
```
AIZU p01959 Revenge of the Broken Door
```
3 3 1 3
1 2 1
2 3 5
1 3 3
```
```
4 4 1 4
1 2 1
2 4 1
1 3 1
3 4 1
```
```
5 4 4 1
1 2 3
2 3 4
3 4 5
4 5 6
```
```
3 3 1 2
1 2 1
1 3 2
2 3 3
```
AIZU p02106 Tree-Light
7 5
0 1
1 2
1 3
0 4
4 5
4 6
1 0 0 9
2 0 0 5
2 1 5 8
1 0 5 8
1 0 8 8
AIZU p02246 15 Puzzle
```
# 1. Incorrect input format

1 2 3 4
5 6 7 8
9 10 11 0
12 13 14 15

# 2. Incorrect output format

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15
8

# 3. Incorrect puzzle solution

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15
9

# 4. Infinite loop

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15

# 5. Memory leak

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15

# 6. Stack overflow

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15

# 7. Incorrect data type

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15

# 8. Off-by-one error

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15

# 9. Incorrect algorithm

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15

# 10. Other bugs

1 2 3 4
6 7 8 0
5 10 11 12
9 13 14 15
```
AIZU p02392 Range
```
1 3 8
3 8 1
1 8 8
1 1 1
100 101 102
-1 0 1
```