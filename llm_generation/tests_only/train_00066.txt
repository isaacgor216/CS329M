CODECHEF binop
1
11011
01010
1
11011
10111
1
1111
1111
CODECHEF cnr
1
3 2 2
1
1
2 1 1
1
2 2 2
011
3 2 1
10
CODECHEF frjump
```
5
1 2 3 4 5
3
2 1
1 3 10
2 2
```
CODECHEF lpair
```
1
```
```
2
1 1
```
```
3
2 4
3 6
5 4
```
```
4
5 12
10 11
11 9
30 1
```
```
5
1 6
2 3
4 5
6 7
8 9
```
CODECHEF primpatt
1. **Incorrect algorithm**
```
# Incorrect algorithm
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Input
T = int(input())
for _ in range(T):
    x, y = map(int, input().split())

# Output
    if is_prime(x) and is_prime(y):
        print(0)
    elif is_prime(x):
        print(abs(y))
    elif is_prime(y):
        print(abs(x))
    else:
        print(1)
```

2. **Incorrect input**
```
# Incorrect input
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Input
T = int(input())
for _ in range(T):
    x, y = map(int, input().split())

# Output
    if is_prime(x) and is_prime(y):
        print(0)
    elif is_prime(x):
        print(abs(y))
    elif is_prime(y):
        print(abs(x))
    else:
        print(1)

# Incorrect input: 1 0
```

3. **Incorrect output**
```
# Incorrect output
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Input
T = int(input())
for _ in range(T):
    x, y = map(int, input().split())

# Output
    if is_prime(x) and is_prime(y):
        print(0)
    elif is_prime(x):
        print(abs(y))
    elif is_prime(y):
        print(abs(x))
    else:
        print(1)

# Incorrect output: 1 0
```

4. **Memory errors**
```
# Memory errors
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Input
T = int(input())
for _ in range(T):
    x, y = map(int, input().split())

# Output
    if is_prime(x) and is_prime(y):
        print(0)
    elif is_prime(x):
        print(abs(y))
    elif is_prime(y):
        print(abs(x))
    else:
        print(1)

# Memory errors: T = 1000000000```

5. **Timeout errors**
```
# Timeout errors
def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

# Input
T = int(input())
for _ in range(T):
    x, y = map(int, input().split())

# Output
    if is_prime(x) and is_prime(y):
        print(0)
    elif is_prime(x):
        print(abs(y))
    elif is_prime(y):
        print(abs(x))
    else:
        print(1)

# Timeout errors: T = 1000000000```

6. **Other errors**
```
# Other errors
def is_prime(n):
    if
CODECHEF tashift
```
5
ccadd
bddcc
```
CODEFORCES 1011_B. Planning The Expedition
```
# 1. Incorrect data type
n, m = input().split()
n = int(n)
m = int(m)
food = list(input().split())

# 2. Off-by-one error
print(min(n, m))

# 3. Incorrect logic
print([1, 2, 3])

# 4. Uncaught exception
m = 0
food = list(input().split())

# 5. Memory leak
food = list(input().split())
```
CODEFORCES 1036_C. Classy Numbers
```
1
1 1000000000000000000
```

```
1
999999999999999999 1000000000000000000
```

```
10
1 1000
1024 1024
65536 65536
999999 1000001
1000001 2000000
2000001 3000000
3000001 4000000
4000001 5000000
5000001 6000000
6000001 7000000
```

```
5
1 1000
1024 1024
65536 65536
999999 1000001
999999 1000001
```

```
10
1 1000
1024 1024
65536 65536
999999 1000001
999999 1000001
999999 1000001
999999 1000001
999999 1000001
999999 1000001
999999 1000001
```

```
10
1 1000
1024 1024
65536 65536
999999 1000001
999999 1000001
999999 1000001
999999 1000001
999999 1000001
999999 1000001
999999 1000001
```
CODEFORCES 1059_B. Forgery
```
3 3
###
#.#
###

3 3
###
###
###

4 3
###
###
###
###

5 7
.......
.#####.
.#.#.#.
.#####.
.......
```
CODEFORCES 1080_D. Olya and magical square
```
1
1 1
```
```
1
2 2
```
```
1
3 3
```
```
1
4 4
```
```
1
5 5
```
```
1
6 6
```
```
1
7 7
```
```
1
8 8
```
```
1
9 9
```
```
1
10 10
```
CODEFORCES 10_C. Digital Root
```
1
```
```
4
```
```
5
```
```
6
```
```
10
```
```
100
```
```
1000
```
```
10000
```
CODEFORCES 1121_B. Mike and Children
```
1
1
```
```
2
1 1
```
```
3
1 2 3
```
```
4
1 2 3 4
```
```
5
1 2 3 4 5
```
```
6
1 2 3 4 5 6
```
```
7
1 2 3 4 5 6 7
```
```
8
1 2 3 4 5 6 7 8
```
```
9
1 2 3 4 5 6 7 8 9
```
```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1148_D. Dirty Deeds Done Dirt Cheap
```
1
1
```
CODEFORCES 116_A. Tram
```
#include <stdio.h>

int main() {
    int n;
    scanf(" %d ", &n);
    int a[n], b[n];
    for (int i = 0; i < n; i++) {
        scanf(" %d %d ", &a[i], &b[i]);
    }
    int min_cap = 0;
    for (int i = 0; i < n; i++) {
        min_cap = max(min_cap, a[i] + b[i]);
    }
    printf(" %d ", min_cap);
    return 0;
}
```

**Incorrect input format**
```
2
0 3
2 5
```

**Incorrect output format**
```
5
```

**Incorrect logic**
```
#include <stdio.h>

int main() {
    int n;
    scanf(" %d ", &n);
    int a[n], b[n];
    for (int i = 0; i < n; i++) {
        scanf(" %d %d ", &a[i], &b[i]);
    }
    int min_cap = 0;
    for (int i = 0; i < n; i++) {
        min_cap = min(min_cap, a[i] + b[i]);
    }
    printf(" %d ", min_cap + 1);
    return 0;
}
```

**Off-by-one errors**
```
#include <stdio.h>

int main() {
    int n;
    scanf(" %d ", &n);
    int a[n], b[n];
    for (int i = 0; i < n; i++) {
        scanf(" %d %d ", &a[i], &b[i]);
    }
    int min_cap = 0;
    for (int i = 0; i < n - 1; i++) {
        min_cap = max(min_cap, a[i] + b[i]);
    }
    printf(" %d ", min_cap);
    return 0;
}
```

**Memory leaks**
```
#include <stdio.h>

int main() {
    int n;
    scanf(" %d ", &n);
    int a[n], b[n];
    for (int i = 0; i < n; i++) {
        scanf(" %d %d ", &a[i], &b[i]);
    }
    int min_cap = 0;
    for (int i = 0; i < n; i++) {
        min_cap = max(min_cap, a[i] + b[i]);
    }
    printf(" %d ", min_cap);
    return 0;
}
```

**Race conditions**
```
#include <stdio.h>

int main() {
    int n;
    scanf(" %d ", &n);
    int a[n], b[n];
    for (int i = 0; i < n; i++) {
        scanf(" %d %d ", &a[i], &b[i]);
    }
    int min_cap = 0;
    for (int i = 0; i < n; i++) {
        min_cap = max(min_cap, a[i] + b[i]);
        min_cap = min(min_cap, a[i] + b[i]);
    }
    printf(" %d ", min_cap);
    return 0;
}
```

**Deadlocks**
```
#include <stdio.h>

int main() {
    int n;
    scanf(" %d ", &n);
    int a[n], b[n];
    for (int i = 0; i < n; i++) {
        scanf(" %d %d ", &a[i], &b[i]);
    }
    int min_cap = 0;
    for (int i = 0; i < n; i++) {
        while (a[i] > 0 || b[i
CODEFORCES 1188_A1. Add on a Tree
```
2
1 2

3
1 2
2 3

5
1 2
1 3
1 4
2 5

6
1 2
1 3
1 4
2 5
2 6

7
1 2
1 3
1 4
2 5
2 6
3 7

```
CODEFORCES 1207_A. There Are Two Types Of Burgers
```
1
100 100 100
100 100
```
CODEFORCES 1225_B2. TV Subscriptions (Hard Version)
```
# 1. Incorrect input format

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    print(1)

# 2. Incorrect output format

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    print(1, 2)

# 3. Incorrect algorithm

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    print(n)

# 4. Incorrect data type

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    print(str(n))

# 5. Incorrect memory management

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    print(nums)

# 6. Incorrect exception handling

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    try:
        print(nums[0])
    except IndexError:
        print(0)

# 7. Incorrect error handling

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    try:
        print(nums[0])
    except FileNotFoundError:
        print(0)

# 8. Incorrect testing

t = int(input())
for _ in range(t):
    n, k, d = map(int, input().split())
    nums = list(map(int, input().split()))
    print(1)
```
CODEFORCES 1249_D2. Too Many Segments (hard version)
**Incorrect data type**

```
n, k = map(int, input().split())
segments = []
for _ in range(n):
    segments.append(list(map(int, input().split())))

# Use an incorrect data type to store the number of segments
n = int(n)

# Use an incorrect data type to store the endpoints of a segment
segments[0][0] = int(segments[0][0])
segments[0][1] = int(segments[0][1])

# Print the incorrect results
print(n)
print(segments[0][0], segments[0][1])
```

**Incorrect algorithm**

```
n, k = map(int, input().split())
segments = []
for _ in range(n):
    segments.append(list(map(int, input().split())))

# Use a naive algorithm to find the minimum number of segments to remove
count = 0
for segment in segments:
    if segment[1] - segment[0] > k:
        count += 1

print(count)
```

**Not handling corner cases**

```
n, k = map(int, input().split())
segments = []
for _ in range(n):
    segments.append(list(map(int, input().split())))

# Not handling the corner case when k is 1
if k == 1:
    print(n)
    print(*range(1, n + 1))
    exit()

# Not handling the corner case when all the segments are the same
if all(segment[0] == segment[1] for segment in segments):
    print(0)
    print()
    exit()

# Find the minimum number of segments to remove
count = 0
for segment in segments:
    if segment[1] - segment[0] > k:
        count += 1

print(count)
```

**Not testing your code**

```
n, k = map(int, input().split())
segments = []
for _ in range(n):
    segments.append(list(map(int, input().split())))

# Not testing your code
print(n)
print(*segments)
```

**Not using a debugger**

```
n, k = map(int, input().split())
segments = []
for _ in range(n):
    segments.append(list(map(int, input().split())))

# Not using a debugger
print(n)
print(*segments)
```

**Not asking for help**

```
n, k = map(int, input().split())
segments = []
for _ in range(n):
    segments.append(list(map(int, input().split())))

# Not asking for help
print(n)
print(*segments)
```
CODEFORCES 1268_A. Long Beautiful Integer
```
# 2 ≤ n ≤ 200 000, 1 ≤ k < n
2 1
12

# a_1 ≠ 0, 0 ≤ a_i ≤ 9
3 3
123

# n = k
4 4
1234

# x = 0
2 2
00
```
CODEFORCES 1290_B. Irreducible Anagrams
```
# Problem: Irreducible Anagrams
# Solution:

s = input()
q = int(input())

for _ in range(q):
    l, r = map(int, input().split())
    if l == r:
        print("Yes")
        continue
    if s[l] == s[r]:
        print("Yes")
        continue

    f = False
    for i in range(l, r):
        if s[i] != s[r]:
            f = True
            break

    if f:
        print("No")
    else:
        print("Yes")
```
CODEFORCES 1310_C. Au Pont Rouge
```
# 1310_C. Au Pont Rouge

n, m, k = map(int, input().split())
s = input()

def make_permutations(s, n, m):
    if m == 0:
        return [s]
    res = []
    for i in range(n - m + 1):
        res += make_permutations(s[i + 1:], n - i - 1, m - 1)
    return res

def sort_permutations(permutations):
    return sorted(permutations, reverse=True)

permutations = make_permutations(s, n, m)
sorted_permutations = sort_permutations(permutations)

print(sorted_permutations[k - 1])
```

1. **Incorrect input format**. The input format is not strictly defined, so it is easy to make a mistake and provide incorrect input. For example, if you forget to put a space between the numbers, the program will not be able to parse the input correctly.

```
n,m,k=map(int,input().split())
s=input()
```

2. **Incorrect calculation of the number of possible arrangements**. The number of possible arrangements of m meeting rooms in a string of length n is given by the following formula:

```
n! / (m! * (n - m)!)
```

However, it is easy to make a mistake in the calculation, especially if n and m are large.

```
def make_permutations(s, n, m):
    if m == 0:
        return [s]
    res = []
    for i in range(n - m + 1):
        res += make_permutations(s[i + 1:], n - i - 1, m - 1)
    return res
```

3. **Incorrect sorting of the labels**. The labels should be sorted backward lexicographically. This means that the label with the smallest name should come first, followed by the label with the second smallest name, and so on. It is easy to make a mistake in the sorting algorithm, especially if the labels are long.

```
def sort_permutations(permutations):
    return sorted(permutations, reverse=True)
```

4. **Incorrect output**. The output should be a single string, which is the name of the meeting room printed on the k-th label of the delivery. It is easy to make a mistake in the output, especially if the meeting room name is long.

```
print(sorted_permutations[k - 1])
```
CODEFORCES 1333_A. Little Artem
1
3 3

CODEFORCES 1353_D. Constructing the Array
```
1
100
```

```
1
2
3
4
5
6
```
CODEFORCES 1373_C. Pluses and Minuses
```
1
```
```
+
```
```
2
++
+-
```
```
1
-
```
```
3
+--+-
-+-
+-+
```
```
4
+++
--
++-
-+++
```
```
5
++++++++
+++++-
+++++
+++++-
++++++
```
```
6
++++++++++
++++++++++
++++++++++
++++++++++
++++++++++
++++++++++
```
```
7
+++++++++++++++
+++++++++++++++
+++++++++++++++
+++++++++++++++
+++++++++++++++
+++++++++++++++
+++++++++++++++
```
```
8
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++
```
```
9
++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++
```
CODEFORCES 1396_B. Stoned Game
1
3
1 2 3
2
2
1 1
1 2
CODEFORCES 141_D. Take-off Ramps
```
2 20
5 10 5 5
4 16 1 7
```
CODEFORCES 1438_D. Powerful Ksenia
```
5
4 2 1 7 2
```

```
5
5 5 5 5 5
```

```
4
10 4 49 22
```

```
3
10 100 1000
```
CODEFORCES 1463_C. Busy Robot
```
# 1463C. Busy Robot

def solve():
    n = int(input())
    ts = []
    for _ in range(n):
        t, x = map(int, input().split())
        ts.append((t, x))

    # sort the times
    ts.sort(key=lambda x: x[0])

    # initialize the answer
    answer = 0

    # iterate over the times
    for i in range(n):
        t, x = ts[i]

        # if the robot is already at the target point, don't count it
        if ts[i-1][1] == x:
            continue

        # find the next time that the robot is at the target point
        for j in range(i+1, n):
            if ts[j][1] == x:
                answer += 1
                break

    return answer


for _ in range(int(input())):
    print(solve())
```
CODEFORCES 148_C. Terse princess
10 2 3
5 1 3 6 16 35 46 4 200 99

5 0 0
10 10 6 6 5

2 0 0
2 1 1

5 1 0
5 1 1

1 0 0
-1
CODEFORCES 1512_A. Spy Detected!
```
1
4
11 13 11 11
```

```
5
1 4 4 4 4
```

```
10
3 3 3 3 10 3 3 3 3 3
```

```
3
20 20 10
```
CODEFORCES 1539_E. Game with Cards
```
2 10
3
0 3
0 2
2
0 4
0 2
```
CODEFORCES 166_B. Polygons
1. Incorrect input format
```
3
1 2
4 2
3 -3
4
0 1
1 2
4 1
2 -1
```

2. Incorrect output format
```
3
1 2
4 2
3 -3
4
0 1
1 2
4 1
2 -1

NOO
```

3. Incorrect logic
```
3
1 2
4 2
3 -3
4
0 1
1 2
4 1
2 -1

YES
```

4. Off-by-one errors
```
3
1 2
4 2
3 -3
4
0 1
1 2
4 1
2 -1

NO
```

5. Runtime errors
```
3
1 2
4 2
3 -3
4
0 1
1 2
4 1
2 -1

NO
```

6. Memory errors
```
3
1 2
4 2
3 -3
4
0 1
1 2
4 1
2 -1

NO
```
CODEFORCES 187_C. Weak Memory
```
6 6 3
1 3 6
1 2
2 3
4 2
5 6
4 5
3 4
1 6

6 5 3
1 5 6
1 2
2 3
3 4
4 5
6 3
1 5

4 3 2
1 2 4
1 3
2 4
1 4
```
CODEFORCES 208_A. Dubstep
1. ```
WUBWUBABCDEFG
```
2. ```
WUBWQWUBW
```
3. ```
WUBWUBWUBCWUB
```
4. ```
```
5. ```
WUBWUBABCDWUB
```
CODEFORCES 233_D. Table
```
5 6 1

5 6 2

5 6 3

5 6 4

5 6 5

5 6 6

5 6 7

5 6 8

5 6 9

5 6 10
```
CODEFORCES 259_C. Little Elephant and Bits
```
101
110010
```
CODEFORCES 282_C. XOR and OR
```
1000000
1000000

111
111

10000
10000101
```
CODEFORCES 305_B. Continued Fractions
```
# 5. Incorrect calculation
1 2
3
1 1
```

```
# 6. Floating-point errors
1.0 2.0
3
1.0 1.0
```

```
# 7. Security vulnerabilities
1 2
3
1 1
```
CODEFORCES 331_B1. Shave Beaver!
5
1 3 4 2 5
6
1 1 5
1 3 4
2 2 3
1 1 5
2 1 5
1 1 5
CODEFORCES 353_A. Domino
```
1
2 3
```

```
1
1 6
```

```
2
2 4
6 4
```

```
3
1 4
2 3
4 4
```

```
3
3 3
3 3
3 3
```

```
10
1 3
1 4
1 5
1 6
2 3
2 4
2 5
2 6
3 3
3 4
3 5
3 6
```

```
10
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
```
CODEFORCES 377_B. Preparing for the Contest
```
3 4 9
1 3 1 2
2 1 3
4 3 6
```
CODEFORCES 399_D. Painting The Wall
```
1
0
```

```
1
1
```

```
2
1 1
2 1
```

```
5
2
2 3
4 1
```

```
1000000
1000000
```
CODEFORCES 421_E. Cup Trick
```
3 2
1 3
2 3
```
CODEFORCES 448_C. Painting Fence
1. 5
2 2 1 2 1
2. 2
2 2
3. 1
5
4. 5
1 1 1 1 1
CODEFORCES 46_D. Parking Lot
```
30 1 2
6
1 5
1 4
1 5
2 2
1 5
1 4
```
```
30 1 1
6
1 5
1 4
1 5
2 2
1 5
1 4
```
```
10 1 1
1
1 12
```
CODEFORCES 492_E. Vanya and Field
```
5 5 2 3
0 0
1 2
1 3
2 4
3 1

2 3 1 1
0 0
0 1
1 1
```
CODEFORCES 516_D. Drazil and Morning Exercise

CODEFORCES 543_D. Road Improvement
```
3
1 1
```

```
5
1 2 3 4
```
CODEFORCES 570_A. Elections
```
1 3
1 2 3
```

```
3 4
10 10 3
5 1 6
2 2 2
1 5 7
```

```
1 2
1 2
```
CODEFORCES 591_D. Chip 'n Dale Rescue Rangers
```
1 2 10 5
2 1
-2 0
-2 3
```
CODEFORCES 613_B. Skills
```
3 5 10 1 5
1 3 1
3 5 10 1 339
1 3 1
```
CODEFORCES 633_B. A Trivial Problem
```
1

5

10

0

100000
```
CODEFORCES 661_E. Divisibility Check
1. **Incorrect input format.**

```
1 2 3
```

2. **Incorrect data type.**

```
1 2.3 4
```

3. **Incorrect array size.**

```
1 2 3 4 5 6 7 8 9 10 11
```

4. **Incorrect logic.**

```
1 2 3 4
```

5. **Off-by-one errors.**

```
1 2 3 4 5
```

6. **Memory leaks.**

```
#include <stdio.h>

int main() {
    int a[100];
    int n;
    scanf(" %d ", &n);
    for (int i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    return 0;
}
```

7. **Race conditions.**

```
#include <stdio.h>

int main() {
    int a[100];
    int n;
    scanf(" %d ", &n);
    for (int i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    int x = a[0];
    for (int i = 1; i < n; i++) {
        x = x * a[i];
    }
    printf(" %d ", x);
    return 0;
}
```

8. **Security vulnerabilities.**

```
#include <stdio.h>

int main() {
    char buf[100];
    scanf(" %s ", buf);
    printf(" %s ", buf);
    return 0;
}
```

9. **Bad design.**

```
#include <stdio.h>

int main() {
    int n;
    scanf(" %d ", &n);
    int a[n];
    for (int i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    int max = a[0];
    for (int i = 1; i < n; i++) {
        if (a[i] > max) {
            max = a[i];
        }
    }
    printf(" %d ", max);
    return 0;
}
```
CODEFORCES 685_E. Travelling Through the Snow Queen's Kingdom
```
3 2 1
1 2
1 3 1 2
```

```
5 4 6
1 2
2 3
3 4
3 5
1 3 1 4
1 3 2 4
1 4 4 5
1 4 4 1
2 3 1 4
2 2 2 3
```
CODEFORCES 708_D. Incorrect Flow
```
# 708D. Incorrect Flow

n,m=map(int,input().split())

for _ in range(m):
    a,b,c,d=map(int,input().split())

print(0)
```
CODEFORCES 730_A. Toda 2
2
1 2

2
0
011

3
1 1 1

0
0
CODEFORCES 750_G. New Year and Binary Tree Paths
```
1
```

```
2
```

```
3
```

```
4
```

```
5
```

```
6
```

```
7
```

```
8
```

```
9
```

```
10
```

```
11
```

```
12
```

```
13
```

```
14
```

```
15
```

```
16
```

```
17
```

```
18
```

```
19
```

```
20
```

```
21
```

```
22
```

```
23
```

```
24
```

```
25
```

```
26
```

```
27
```

```
28
```

```
29
```

```
30
```

```
31
```

```
32
```

```
33
```

```
34
```

```
35
```

```
36
```

```
37
```

```
38
```

```
39
```

```
40
```

```
41
```

```
42
```

```
43
```

```
44
```

```
45
```

```
46
```

```
47
```

```
48
```

```
49
```

```
50
```
CODEFORCES 774_E. Big Number and Remainder
**1. Using an incorrect data type**

```
input_int = int(input())
```

**2. Not considering all good shifts**

```
input_str = input()

for i in range(len(input_str)):
    shifted_str = input_str[i:] + input_str[:i]
    if shifted_str.isdigit():
        print(int(shifted_str) % m)
```

**3. Using an incorrect algorithm**

```
input_int = int(input())
m = int(input())

remainder = input_int % m

while remainder > m / 2:
    remainder -= m

print(remainder)
```

**4. Rounding errors**

```
input_int = int(input())
m = int(input())

rounded_int = input_int // m
remainder = input_int % m

if remainder > m / 2:
    remainder -= m

print(remainder)
```

**5. Incorrect output format**

```
input_int = int(input())
m = int(input())

remainder = input_int % m

print(str(remainder))
```
CODEFORCES 799_E. Aquarium decoration
```
4 3 2
3 2 2 1
2
1 2
2
1 3
4 1 3
```
CODEFORCES 819_E. Mister B and Flight to the Moon
1. Incorrect input format

```
3
1 2 3
```

2. Incorrect output format

```
3
3 1 2 3
3 1 2 3
```

3. Incorrect solution

```
3
3 1 2 3
3 1 2 3
4 4 3 2 1
```

4. Runtime errors

```
import sys


def main():
    n = int(input())
    if n == 1:
        print(-1)
    elif n == 2:
        print(1)
        print(3, 1, 2)
    elif n == 3:
        print(2)
        print(3, 1, 2, 3)
        print(3, 1, 3, 2)
    else:
        print(-1)


if __name__ == '__main__':
    main()
```

5. Logical errors

```
import sys


def main():
    n = int(input())
    if n == 1:
        print(-1)
    elif n == 2:
        print(1)
        print(3, 1, 2)
    elif n == 3:
        print(2)
        print(3, 1, 2, 3)
        print(3, 1, 3, 2)
    else:
        for i in range(n):
            print(3, i + 1, (i + 1) % n + 1, (i + 2) % n + 1)


if __name__ == '__main__':
    main()
```
CODEFORCES 845_C. Two TVs
```
1
1 2
```
```
2
1 2
2 3
```
```
3
1 2
2 3
4 5
```
```
4
1 2
2 3
2 3
1 2
```
```
5
1 2
2 3
3 4
4 5
5 6
```
```
10
1 2
3 4
5 6
7 8
9 10
11 12
13 14
15 16
17 18
19 20
```
CODEFORCES 865_E. Hex Dyslexia
1. ```
123
```
2. ```
1234
```
3. ```
ab123c
```
4. ```
0
```
5. ```
1234567890abcdef
```
6. ```
1234567890abcdef
```
7. ```
0
```
CODEFORCES 891_E. Lust
**Incorrect input format**

```
1 1
5
```

**Incorrect variable initialization**

```
1 1
a
```

**Incorrect logic**

```
1 1
5
a
```

**Off-by-one errors**

```
2 1
5 5
```

**Arithmetic errors**

```
2 1
5 5
```

**Memory errors**

```
2 1
5 5
```

**Race conditions**

```
2 1
5 5
```

**Deadlocks**

```
2 1
5 5
```

**Buffer overflows**

```
2 1
5 5
```

**Format string vulnerabilities**

```
2 1
5 5
```
CODEFORCES 913_H. Don't Exceed
```
1
0.5
```
```
1
1.0
```
```
2
0.5
1.0
```
```
6
0.77
1.234567
2.1
1.890
2.9999
3.77
```
CODEFORCES 936_B. Sleepy Game
```
5 6
2 2 3
2 4 5
1 4
1 5
0
1
```

```
3 2
1 3
1 1
0
2
```

```
2 2
1 2
1 1
1
```
CODEFORCES 961_G. Partitions
1. **Incorrect input format**
```
4 2
2 3 2 3
```

2. **Incorrect data type**
```
4 2
abc 3 2 3
```

3. **Off-by-one errors**
```
4 2
1 2 3 4
```

4. **Incorrect modular arithmetic**
```
4 2
1 2 3 4
```

5. **Incorrect use of floating-point numbers**
```
4 2
1.0 2.0 3.0 4.0
```

6. **Incorrect use of recursion**
```
4 2
1 2 3 4
```

7. **Incorrect use of dynamic programming**
```
4 2
1 2 3 4
```

8. **Incorrect use of memoization**
```
4 2
1 2 3 4
```

9. **Incorrect use of bitmasks**
```
4 2
1 2 3 4
```

10. **Incorrect use of bitwise operators**
```
4 2
1 2 3 4
```
CODEFORCES 98_A. Help Victoria the Wise
1. Invalid input format
```
a
```

2. Incorrect output format
```
1
```

3. Incorrect output
```
BOOOOB
```

4. Program does not handle errors correctly
```
YYYYYY
```

5. Inefficient program
```
ROYGBV
```
HACKEREARTH anagrams-revisited-26
```
10
a
b
c
d
e
f
g
h
i
j
```
HACKEREARTH center-in-mass-2
```
1
3
1 0 -4 0 0 3
-1 -2 -1 3 0 0
-1 -1 2 0 3 0
```
HACKEREARTH dice-rolls
1
1 1

2
2 0
1000 1000
HACKEREARTH gemy-anmol
```
3
3 10
3 4 3
2 8
1 8
4 12
4 3 1 5 6 2
```
HACKEREARTH lazy-verma-2
```
1 1
-1
1
```

```
2 3
1 2 3
4 5 6
```

```
3 2
1 2 3
4 5
```

```
10 10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
```
HACKEREARTH monk-at-the-graph-factory
```
# Sample 1: Incorrect counting of the number of edges
3
1 2 3

# Sample 2: Not considering the possibility of multiple edges between two vertices
3
1 2 2

# Sample 3: Not considering the possibility of self-loops in the graph
3
1 2 1

# Sample 4: Not considering the possibility of disconnected graphs
3
1 0 0

# Sample 5: Not considering the possibility of graphs with cycles
3
1 2 1
HACKEREARTH permutation-swaps
```
1
2 1
1 2
2 1
```

```
2
2 1
1 2
2 1
3 1
1 3
1 2
```

```
2
3 1
1 2 3
1 3 2
1 2
```

```
1
3 2
1 2 3
1 3 2
1 2
```

```
1
4 3
1 3 2 4
1 4 2 3
1 2
```

```
4
4 1
1 3 2 4
1 4 2 3
3 4
4 1
1 3 2 4
1 4 2 3
2 4
4 1
1 3 2 4
1 4 2 3
4 1
```

```
4
5 4
1 2 3 4 5
1 2 3 5 4
1 2
3 4
4 5
5 1
```
HACKEREARTH roy-and-rangoli-1
1. ```
3
```
2. ```
1000000
```
3. ```
1000000000
```
4. ```
0
```
5. ```
-1
```
HACKEREARTH subly-again
7 5
HACKEREARTH valentines-day-surprise-gift
```
1
14
```
ATCODER p02604 M-SOLUTIONS Programming Contest 2020 - M's Solution
```
3
1 2 300
3 3 600
1 4 800

5
3 5 400
5 3 700
5 5 1000
5 7 700
7 5 400

6
2 5 1000
5 2 1100
5 5 1700
-2 -5 900
-5 -2 600
-5 -5 2200

8
2 2 286017
3 1 262355
2 -2 213815
1 -3 224435
-2 -2 136860
-3 -1 239338
-2 2 217647
-1 3 141903
```
ATCODER p02735 AtCoder Grand Contest 043 - Range Flip Find Route
```
3 3
.##
.#.
##.
```

```
3 3
.##
.#.
.
```

```
2 2
.
.#
```

```
4 4
..##
...
.
.
```

```
5 5
.#.#.
.#.#
.#.#.
.#.#
.#.#.
```
ATCODER p02869 NIKKEI Programming Contest 2019-2 - Non-triangular Triplets
1
1
3
3
5
1
20
20

ATCODER p03004 AtCoder Beginner Contest 130 - Minimum Bounding Box
```
2
0 3 D
3 0 L

2
-7 -10 U
7 -6 U

5
-7 -10 U
7 -6 U
-8 7 D
-3 3 D
0 -6 R

20
6 -10 R
-4 -9 U
9 6 D
-3 -2 R
0 7 D
4 5 D
10 -10 U
-1 -8 U
10 -6 D
8 -5 U
6 4 D
0 3 D
7 9 R
9 -4 R
3 10 D
1 9 U
1 -6 U
9 -8 R
6 7 D
7 -3 D
```
ATCODER p03144 NIKKEI Programming Contest 2019 - Jewels
```
5 2
1 1
1 2
1 3
2 4
2 5
```
ATCODER p03288 AtCoder Beginner Contest 104 - Rated for Me
1199
1200
4208
0
4209
ATCODER p03444 AtCoder Petrozavodsk Contest 001 - Generalized Insertion Sort
**Incorrect implementation of the algorithm**

```
N = 5
p = [0, 1, 2, 3]
a = [2, 4, 0, 1, 3]

# Incorrect implementation of the algorithm
def rotate(v):
    while v != 0:
        a[v], a[p[v]] = a[p[v]], a[v]
        v = p[v]

# Test the algorithm
for _ in range(25000):
    v = random.randint(0, N - 1)
    rotate(v)

# Check the results
for i in range(N):
    assert a[i] == i
```

**Using incorrect data types**

```
N = 5
p = [0, 1, 2, 3]
a = [2, 4, 0, 1, 3]

# Incorrect data types
def rotate(v):
    a[v], a[p[v]] = str(a[p[v]]), str(a[v])

# Test the algorithm
for _ in range(25000):
    v = random.randint(0, N - 1)
    rotate(v)

# Check the results
for i in range(N):
    assert a[i] == i
```

**Off-by-one errors**

```
N = 5
p = [0, 1, 2, 3]
a = [2, 4, 0, 1, 3]

# Off-by-one errors
def rotate(v):
    while v != 0:
        a[v], a[p[v]] = a[p[v]], a[v]
        v += 1

# Test the algorithm
for _ in range(25000):
    v = random.randint(0, N - 1)
    rotate(v)

# Check the results
for i in range(N):
    assert a[i] == i
```

**Memory leaks**

```
N = 5
p = [0, 1, 2, 3]
a = [2, 4, 0, 1, 3]

# Memory leaks
def rotate(v):
    while v != 0:
        temp = a[v]
        a[v] = a[p[v]]
        a[p[v]] = temp
        v = p[v]

# Test the algorithm
for _ in range(25000):
    v = random.randint(0, N - 1)
    rotate(v)

# Check the results
for i in range(N):
    assert a[i] == i
```

**Undefined behavior**

```
N = 5
p = [0, 1, 2, 3]
a = [2, 4, 0, 1, 3]

# Undefined behavior
def rotate(v):
    a[v], a[p[v]] = a[p[v]], a[v]
    a[v] = 10 / 0

# Test the algorithm
for _ in range(25000):
    v = random.randint(0, N - 1)
    rotate(v)

# Check the results
for i in range(N):
    assert a[i] == i
```

**Race conditions**

```
N = 5
p = [0, 1, 2, 3]
a = [2, 4, 0, 1, 3]

# Race conditions
def rotate(v):
    global a
    while v != 0:
        a[v], a[p[v]] = a[p[v]], a[v]
        v = p[v]

# Test the algorithm
for _ in range(25000):
    v = random.randint(0, N - 1)
    # Other thread may be running this function at the same time
    rotate(v)

# Check the results
for i in range(N):
    assert a[i] == i
```

ATCODER p03604 AtCoder Regular Contest 083 - Collecting Balls
```
2
1 1
1 2
2 1
2 2
```
```
4
3 2
1 2
4 1
4 2
2 2
4 4
2 1
1 3
```
```
4
1 1
2 2
3 3
4 4
1 2
2 1
3 4
4 3
```
```
8
6 2
5 1
6 8
7 8
6 5
5 7
4 3
1 4
7 6
8 3
2 8
3 6
3 2
8 5
1 5
5 8
```
```
3
1 1
1 2
1 3
2 1
2 2
2 3
```
ATCODER p03765 AtCoder Regular Contest 071 - TrBBnsformBBtion
```
S = input()
T = input()
q = int(input())
for _ in range(q):
    a, b, c, d = map(int, input().split())
    if len(S[a:b]) == len(T[c:d]):
        if S[a:b] == T[c:d]:
            print('YES')
        else:
            print('NO')
    else:
        print('NO')
```
ATCODER p03933 square869120Contest #3 - Circle and Many Triangles
```
4 3
6 9
12 220
```
AIZU p00026 Dropping Ink
```
5,0,1
9,0,1
4,4,1
5,5,1
1,6,1
2,6,1
3,6,1
4,6,1
6,6,1
7,6,1
8,6,1
9,6,1
```
AIZU p00157 Russian Dolls
6
1 1
4 3
6 5
8 6
10 10
14 14
5
2 2
5 4
6 6
9 8
15 10
4
1 1
4 3
6 5
8 6
3
2 2
5 4
6 6
4
1 1
4 3
6 5
8 6
4
10 10
12 11
18 15
24 20
0
AIZU p00314 Programming Contest
1. Incorrect input format
```
3
1 2 3
```

2. Incorrect output format
```
3
```

3. Incorrect algorithm
```
5
1 1 1 1 1
```

4. Incorrect error handling
```
1
```

5. Incorrect testing
```
5
1 2 3 4 5
```

6. Incorrect documentation
```
```
AIZU p00484 Books
```
10 5
10 1
14 2
13 3
12 3
14 2
8 2
16 3
11 2
```
AIZU p00670 Spellcasters
```
3 7
1
3
10
0 0

3 10
1
1
1
0 0

100 90
10
90
10
...
10
90
0 0
```
AIZU p00813 GIGA Universe Cup
1
_____*AAA__BBB__CCC__DDD
*AAA_______0-0__0-0___-_
_BBB_____________-___0-0
_CCC_________________0-0
_DDD____________________
AIZU p00944 Post Office Investigation
1. **Incorrect input format**

```
1 2
a 2
```

2. **Incorrect output format**

```
1 2
3
```

3. **Memory leak**

```
#include <stdio.h>

int main() {
    int n, i, a[n], b[n];
    scanf(" %d ", &n);
    for (i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    for (i = 0; i < n; i++) {
        scanf(" %d ", &b[i]);
    }
    return 0;
}
```

4. **Infinite loop**

```
#include <stdio.h>

int main() {
    while (1) {
        ;
    }
    return 0;
}
```

5. **Incorrect algorithm**

```
#include <stdio.h>

int main() {
    int n, i, j, a[n], b[n];
    scanf(" %d ", &n);
    for (i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    for (i = 0; i < n; i++) {
        scanf(" %d ", &b[i]);
    }
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (a[i] == b[j]) {
                printf(" %d ", i);
            }
        }
    }
    return 0;
}
```

6. **Off-by-one error**

```
#include <stdio.h>

int main() {
    int n, i, a[n], b[n];
    scanf(" %d ", &n);
    for (i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    for (i = 0; i < n; i++) {
        scanf(" %d ", &b[i]);
    }
    for (i = 0; i < n - 1; i++) {
        if (a[i] == b[i + 1]) {
            printf(" %d ", i);
        }
    }
    return 0;
}
```

7. **Data race**

```
#include <stdio.h>
#include <pthread.h>

int n, a[n], b[n], count = 0;

void *thread1(void *arg) {
    int i;
    for (i = 0; i < n; i++) {
        if (a[i] == b[i]) {
            count++;
        }
    }
    return NULL;
}

void *thread2(void *arg) {
    int i;
    for (i = 0; i < n; i++) {
        if (a[i] == b[i]) {
            count--;
        }
    }
    return NULL;
}

int main() {
    int i;
    pthread_t t1, t2;
    scanf(" %d ", &n);
    for (i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    for (i = 0; i < n; i++) {
        scanf(" %d ", &b[i]);
    }
    pthread_create(&t1, NULL, thread1, NULL);
    pthread_create(&t2, NULL, thread2, NULL);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    printf(" %d ", count);
    return 0;
}
```

8. **Race condition**

```
#include <stdio.h>
#include <pthread.h>

int n, a[n], b[n], count = 0;

void *thread1(void *arg) {
    int i;
  
AIZU p01077 Curling Puzzle
```
1 10
o........@

3 6
......
.o..@.
......

6 4
....
.oo.
.oo.
....
.@..
....
```
AIZU p01211 Spirograph
```
# Inputs that validate whether an implementation meets each of the requirements of the Spirograph problem

# Incorrect input format

3 2 1
3 2 1

# Incorrect calculation

3 2 1
13.36

# Off-by-one error

3 2 0
6.28

# Floating-point error

3 2 0.0000000001
6.28

# Boundary cases

0 0 0
0
```
AIZU p01347 How to Create a Good Game
3 3
0 1 5
1 2 3
0 2 2
AIZU p01527 Tree Planting
4 4
1 0 1 1
1 0 1 1
1 0 1 1
1 0 1 1
AIZU p01685 Overwriting Game

AIZU p01829 Change a Password
1. Incorrect input format

```
-1
```

2. Negative input

```
-100
```

3. Out-of-bounds input

```
1000000000000000000
```

4. Off-by-one errors

```
201
```

5. Using the wrong data type

```
201.0
```

6. Using the wrong algorithm

```
201
```
AIZU p01964 Revenge of the Endless BFS
```
# 1

N, M = map(int, input().split())
E = [list(map(int, input().split())) for i in range(M)]

ans = 0
visited = [0] * (N + 1)
for i in range(1, N + 1):
    if visited[i] == 0:
        visited[i] = 1
        stack = [i]
        while stack:
            v = stack.pop()
            for e in E:
                if e[0] == v and visited[e[1]] == 0:
                    visited[e[1]] = 1
                    stack.append(e[1])
        ans += 1
print(ans % 10**9 + 7)
```

```
# 2

N, M = map(int, input().split())
E = [list(map(int, input().split())) for i in range(M)]

ans = 0
visited = [0] * (N + 1)
for i in range(1, N + 1):
    if visited[i] == 0:
        ans += 1
        visited[i] = 1
        stack = [i]
        while stack:
            v = stack.pop()
            for e in E:
                if e[0] == v and visited[e[1]] == 0:
                    visited[e[1]] = 1
                    stack.append(e[1])
print(ans % 10**9 + 7)
```

```
# 3

N, M = map(int, input().split())
E = [list(map(int, input().split())) for i in range(M)]

ans = 0
visited = [0] * (N + 1)
for i in range(1, N + 1):
    if visited[i] == 0:
        ans += 1
        visited[i] = 1
        stack = [i]
        while stack:
            v = stack.pop()
            for e in E:
                if e[0] == v and visited[e[1]] == 0:
                    visited[e[1]] = 1
                    stack.append(e[1])
print(ans % 10**9 + 7)
```

```
# 4

N, M = map(int, input().split())
E = [list(map(int, input().split())) for i in range(M)]

ans = 0
visited = [0] * (N + 1)
for i in range(1, N + 1):
    if visited[i] == 0:
        ans += 1
        visited[i] = 1
        stack = [i]
        while stack:
            v = stack.pop()
            for e in E:
                if e[0] == v and visited[e[1]] == 0:
                    visited[e[1]] = 1
                    stack.append(e[1])
print(ans % 10**9 + 7)
```

```
# 5

N, M = map(int, input().split())
E = [list(map(int, input().split())) for i in range(M)]

ans = 0
visited = [0] * (N + 1)
for i in range(1, N + 1):
    if visited[i] == 0:
        ans += 1
        visited[i] = 1
        stack = [i]
        while stack:
            v = stack.pop()
            for e in E:
                if e[0] == v and visited[e[1]] == 0:
                    visited[e[1]] = 1
                    stack.append(e[1])
print(ans % 10**9 + 7)
```
AIZU p02111 Clock
0
45
100
-45
47
AIZU p02251 Change Making
```
100
0
-100
30
```
AIZU p02399 A / B Problem
```
1000000000 1
```

```
1000000000 0
```

```
1000000000 1000000000
```

```
1000000000 -1
```

```
-1000000000 1
```

```
-1000000000 0
```

```
-1000000000 -1000000000
```

```
-1000000000 -1