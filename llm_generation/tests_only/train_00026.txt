CODECHEF amr15d
```
1
3
4
0
2
```
CODECHEF chgift1
```
2
3
1 2 3
1
9
```
CODECHEF encode01
1
1
2
2
3
6
4
10
5
14

CODECHEF kjcc01
10 + 30
1 % 1
10 + 40 50
10 + 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
CODECHEF opc1604
1
2
3
4
5
10
100
1000
10000
100000
CODECHEF spoon
1. ```
1
5 6
abcde
fSpoon
ghij
klmn
opqrs
```
2. ```
1
3 6
abDefb
bSpoon
NIKHil
```
3. ```
1
3 5
bdfhj
cacac
opqrs
```
4. ```
1
1 6
Spoon
```
5. ```
1
6 6
aaaaaa
ssssss
xuisdP
oooooo
ioowoo
bdylan
```
6. ```
1
6 5
bdfhj
cacac
opqrs
ddddd
india
yucky
```
7. ```
2
3 6
abDefb
bSpoon
NIKHil
6 6
aaaaaa
ssssss
xuisdP
oooooo
ioowoo
bdylan
```
8. ```
3
3 5
bdfhj
cacac
opqrs
6 5
bdfhj
cacac
opqrs
ddddd
india
yucky
1 6
Spoon
```
9. ```
4
3 6
abDefb
bSpoon
NIKHil
6 6
aaaaaa
ssssss
xuisdP
oooooo
ioowoo
bdylan
6 5
bdfhj
cacac
opqrs
ddddd
india
yucky
1 6
Spoon
2 6
aSpoon
bBpoon
```
CODEFORCES 1006_A. Adjacent Replacements
5
1 2 4 5 10
CODEFORCES 1029_F. Multicolored Markers
**Incorrect input format**

```
-1 10
```

**Incorrect output format**

```
10
```

**Incorrect algorithm**

```
a, b = map(int, input().split())
print(a + b)
```

**Runtime error**

```
a, b = map(int, input().split())
print(a + b)
while True:
    pass
```

**Memory leak**

```
a, b = map(int, input().split())
print(a + b)
while True:
    print(a + b)
```

**Incorrect data type**

```
a, b = map(int, input().split())
print(a + b)
```

**Off-by-one error**

```
a, b = map(int, input().split())
print(a + b - 1)
```

**Logic error**

```
a, b = map(int, input().split())
if a > b:
    print(b + a)
else:
    print(a + b)
```

**Incorrect implementation**

```
a, b = map(int, input().split())
print(a + b)
```

**Uncaught exception**

```
a, b = map(int, input().split())
print(a + b)
raise Exception("This is an uncaught exception")
```
CODEFORCES 104_E. Time to Raid Cowavans
```
3
1 2 3
2
1 1
1 2
```
CODEFORCES 1073_A. Diverse Substring
```
10
codeforces
```

```
5
aaaaa
```

```
10
aaaaaaa
```
CODEFORCES 1095_A. Repeating Cipher
```
1
z
```
```
2
aa
```
```
3
aaa
```
```
4
aaaa
```
```
5
aaaaa
```
```
6
aaaaaa
```
```
7
aaaaaaa
```
```
8
aaaaaaaa
```
```
9
aaaaaaaaa
```
```
10
aaaaaaaaaa
```
```
11
aaaaaaaaaaa
```
```
12
aaaaaaaaaaaa
```
```
13
aaaaaaaaaaaaa
```
```
14
aaaaaaaaaaaaaa
```
```
15
aaaaaaaaaaaaaaa
```
CODEFORCES 1114_B. Yet Another Array Partitioning Task
```
9 2 3
5 2 5 2 4 1 1 3 2

6 1 4
4 1 3 2 2 3

2 1 2
-1000000000 1000000000

3 2 2
5 10 100

4 2 2
10 10 10 10
```
CODEFORCES 1142_C. U2
1. ```
3
-1 0
0 2
1 0
```
2. ```
5
1 0
1 -1
0 -1
-1 0
-1 -1
```
3. ```
10
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
```
4. ```
100000
```
5. ```
1000000000
```
CODEFORCES 1162_E. Thanos Nim
2
8 8

2
1 1
CODEFORCES 1183_D. Candy Box (easy version)
```
1
6
1 2 3 4 5 6
```
```
2
3
1 2 3
6
2 2 2 2 2 2
```
```
1
8
1 1 1 1 1 1 1 1
```
```
1
1
1
```
```
2
6
1 2 3 4 5 6
6
1 1 1 1 1 1
```
```
1
1
2
```
```
1
10
1 2 3 4 5 6 7 8 9 10
```
```
3
16
2 1 3 3 4 3 4 4 1 3 2 2 2 4 1 1
9
2 2 4 4 4 7 7 7 7
1
1
1
```
CODEFORCES 1200_E. Compress Words
```
1
a
```

```
1
a b
```

```
10
a b c d e f g h i j
```

```
1000000
a b c d e f g h i j k l m n o p q r s t u v w x y z 0 1 2 3 4 5 6 7 8 9
```
CODEFORCES 1218_G. Alpha planetary system
```
# 3 4 XYX
0 1 2
1 2 1
2 0 3
```

```
# 5 7 XYXXYZ
0 1 2
0 4 3
1 4 1
2 4 2
3 4 1
```

```
# 10 15 XXXXYYYZZZ
0 4 2
0 5 2
0 6 2
4 1 1
4 8 1
1 7 2
1 9 3
7 2 2
7 5 1
5 3 1
6 2 1
6 9 1
8 2 3
8 3 1
9 3 1
```

```
# 100 100 XXXXYYYZZZ
```

```
# 100000 100000 XXXXYYYZZZ
```
CODEFORCES 1242_D. Number Discovery
```
1
10 2
```
```
2
10 2
40 5
```
```
3
10 2
40 5
1000000000 1000000000
```
```
4
1000000000 1000000000
1000000000 1000000000
1000000000 1000000000
1000000000 1000000000
```
CODEFORCES 1261_D1. Wrong Answer on test 233 (Easy Version)
```
3 3
1 3 1
```

```
5 5
1 1 4 2 2
```

```
10 2
1 1 1 1 1 1 1 1 1 1
```

```
2000 1000
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000
```
CODEFORCES 1283_F. DIY Garland
```
1
1
```

```
2
1 2
```

```
3
1 3 2
```

```
4
2 4 1 3
```

```
5
1 5 1 4 2
```

```
6
3 6 3 1 5
```

```
7
1 7 1 6 1 5 2
```

```
8
5 8 2 7 4 1 3
```

```
9
1 9 1 8 1 7 1 6 2
```

```
10
3 10 3 9 1 8 2 7 4 5
```
CODEFORCES 1303_B. National Project
```
1
2000000000 1 1
```
CODEFORCES 1327_C. Game with Chips
```
# 1. Incorrect input format

```
1 1 2
1 1
1 1
```

```
# 2. Incorrect data

```
3 3 2
1 2
2 1
3 3
1 1
```

```
# 3. Incorrect logic

```
3 3 2
1 2
2 1
3 3
3 2
```

```
# 4. Incorrect implementation

```
3 3 2
1 2
2 1
3 3
3 2
```

```
# 5. Incorrect testing

```
3 3 2
1 2
2 1
3 3
3 2
```
CODEFORCES 1346_E. Magic Tricks
```
2 1 1
```

```
4 5 1
3 4
2 1
4 1
3 1
3 1
```

```
5 7 4
3 2
3 2
4 2
3 4
4 1
3 2
5 2
```

```
7 15 5
5 3
4 2
6 1
2 4
1 6
3 7
5 6
4 2
6 4
2 6
6 3
6 3
7 6
2 6
7 2
```

```
5 5 1
1 2
2 3
3 4
4 1
1 2
```

```
10 10 1
2 4
3 5
4 6
5 7
6 8
7 9
8 10
9 1
1 2
```

```
12 9 5
5 2
5 1
1 3
3 4
4 5
4 6
6 7
7 8
8 10
10 9
```

CODEFORCES 1368_C. Even Picture
4
1 1
2 1
3 1
4 1
CODEFORCES 1389_E. Calendar Ambiguity
```
1
1 1 1
```

```
1
2 3 4
```

```
1
10 9 14
```

```
5
20 1 1
10 7 12
12 30 7
1 1 1
3247834 10298779 625324
```
CODEFORCES 140_B. New Year Cards
```
2
[1, 2]
[1, 2]
```
CODEFORCES 1430_F. Realistic Gameplay
```
2 3
2 3 6
3 4 3
```

```
1 4
1 2 1
2 3 1
```

```
5 42
42 42 42
42 43 42
43 44 42
44 45 42
45 45 1
```

```
1 10
100 111 1
```

```
5 10
1 10 1
2 11 1
3 12 1
4 13 1
5 14 1
```

```
5 10
1 10 1
2 11 1
3 12 1
4 13 1
5 14 1
15 15 1
```
CODEFORCES 1454_B. Unique Bid Auction
```
1
1
1
```
```
1
2
1 2
```
```
1
1
1
```
```
1
1
1
```
```
1
1
1
```
```
2
1
1 2
```
```
6
2
1 1
3
2 1 3
4
2 2 2 3
1
1
5
2 3 2 4 2
6
1 1 5 5 4 4
```
CODEFORCES 1477_F. Nezzar and Chocolate Bars
```
1 1
2
```
```
1 1
1
```
```
1 5
1234
```
```
2 1
2 3
```
```
10 33
10 20 30 40 50 60 70 80 90 100
```
CODEFORCES 1505_B. DMCA
```
1
81
-1
```
CODEFORCES 1528_C. Trees of Tranquillity
```
1
5
1 2 3 4 5
1 1 1 1 1
```
CODEFORCES 15_B. Laser
```
1
10 10 1 1 10 10
```
CODEFORCES 178_F2. Representative Sampling
```
5 1
aaa
aaa
aaa
aaa
aaa
```
```
1 1
a
```
```
4 2
aaa
bbb
ccc
ddd
```
```
5 3
aaa
bbb
ccc
ddd
eee
```
```
10 2
aaa
bbb
ccc
ddd
eee
fff
ggg
hhh
iii
jjj
```
CODEFORCES 201_E. Thoroughly Bureaucratic Organization
```
1
10 1
```

```
1
10 2
```

```
1
10 3
```

```
1
1 1
```

```
1
42 7
```
CODEFORCES 226_D. The table
**Incorrect input format**

```
1 3
1 2 3
```

**Incorrect data type**

```
1 3
a b c
```

**Off-by-one errors**

```
2 3
1 2 3
4 5 6
```

**Incorrect logic**

```
2 3
1 2 3
-1 -2 -3
```

**Memory errors**

```
100 100
1 2 3 4 5 6 7 8 9 10
11 12 13 14 15 16 17 18 19 20
```

**Timeout errors**

```
1000 1000
1 2 3 4 5 6 7 8 9 10
11 12 13 14 15 16 17 18 19 20
```

**Other errors**

```
1 0
```
CODEFORCES 250_B. Restoring IPv6
```
3
a56f:d3:0:0124:01:f19a:1000:00
a56f:00d3:0000:0124:0001::
a56f::0124:0001:0000:1234:0ff0
```
CODEFORCES 275_C. k-Multiple Free Set
```
# 1. Using the wrong data type

n, k = map(int, input().split())
a = list(map(int, input().split()))

# 2. Not handling duplicate elements correctly

a = set(a)

# 3. Not considering the special case of k = 1

if k == 1:
    print(n)
    exit(0)

# 4. Using an inefficient algorithm

# Sort the input set

a.sort()

# 5. Not using a fast sorting algorithm

# Use a faster sorting algorithm, such as quicksort

# 6. Not using a data structure that supports fast lookups

# Use a hash table or a binary search tree to store the elements of the input set

# Find the largest k-multiple free subset

max_size = 0
for i in range(n):
    current_size = 1
    for j in range(i + 1, n):
        if a[j] % a[i] != 0:
            current_size += 1
    max_size = max(max_size, current_size)

print(max_size)
```

```
# 1. Using the wrong data type

n, k = map(int, input().split())
a = list(map(int, input().split()))

# 2. Not handling duplicate elements correctly

a = set(a)

# 3. Not considering the special case of k = 1

if k == 1:
    print(n)
    exit(0)

# 4. Using an inefficient algorithm

# Sort the input set

a.sort()

# 5. Not using a fast sorting algorithm

# Use a faster sorting algorithm, such as quicksort

# 6. Not using a data structure that supports fast lookups

# Use a hash table or a binary search tree to store the elements of the input set

# Find the largest k-multiple free subset

max_size = 0
for i in range(n):
    current_size = 1
    for j in range(i + 1, n):
        if a[j] % a[i] != 0:
            current_size += 1
    max_size = max(max_size, current_size)

print(max_size)
```

```
# 1. Using the wrong data type

n, k = map(int, input().split())
a = list(map(int, input().split()))

# 2. Not handling duplicate elements correctly

a = set(a)

# 3. Not considering the special case of k = 1

if k == 1:
    print(n)
    exit(0)

# 4. Using an inefficient algorithm

# Sort the input set

a.sort()

# 5. Not using a fast sorting algorithm

# Use a faster sorting algorithm, such as quicksort

# 6. Not using a data structure that supports fast lookups

# Use a hash table or a binary search tree to store the elements of the input set

# Find the largest k-multiple free subset

max_size = 0
for i in range(n):
    current_size = 1
    for j in range(i + 1, n):
        if a[j] % a[i] != 0:
            current_size += 1
    max_size = max(max_size, current_size)

print(max_size)
```
CODEFORCES 298_E. Splitting the Uniqueness
1
1
CODEFORCES 321_C. Ciel the Commander
```
4
1 2
1 3
1 4
```

```
10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
```

```
5
1 2
2 3
3 4
4 5
```

```
10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
```

```
5
1 2
1 3
1 4
1 5
```

```
5
1 2
2 3
3 4
4 5
```
CODEFORCES 346_A. Alice and Bob
**Incorrect input format**

```
1
a
```

**Incorrect data type**

```
2
1 2.5
```

**Off-by-one error**

```
2
1 2
```

**Incorrect logic**

```
2
1 2
```

**Infinite loop**

```
2
1 2
```

**Memory leak**

```
2
1 2
```

**Security vulnerability**

```
2
1 2
```
CODEFORCES 369_E. Valera and Queries
```
3 3
1 3
4 5
6 7
3 1 4 7
2 4 5
1 8
```
CODEFORCES 391_D1. Supercollider
**Incorrect input format**

```
1 2
4 0 9
1 1 8
1 2 7
```

This input is not correct because the number of north-south tracts (1) is not equal to the number of west-east tracts (2).

**Incorrect data type**

```
1 2
4 0 9
1 1 8.0
1 2 7
```

This input is not correct because the `li` value for the second west-east tract is not an integer.

**Off-by-one errors**

```
1 2
4 0 9
1 1 8
1 2 6
```

The correct output for this input should be 2, but the program outputs 3. This is because the developer made a mistake when calculating the distance from the intersection point to the closest endpoint.

**Incorrect logic**

```
1 2
4 0 9
1 1 8
1 2 7
```

The correct output for this input should be 2, but the program outputs 1. This is because the developer forgot to consider all possible pairs of north-south and west-east tracts.

**Memory errors**

```
1000000 1000000
1 0 100000000
1 0 100000000
```

This input is too large for the program to handle. The program will run out of memory and crash.

**Time complexity**

```
1000000 1000000
1 0 100000000
1 0 100000000
```

The program will take a long time to run on this input because it has to consider all possible pairs of north-south and west-east tracts.

**Space complexity**

```
1000000 1000000
1 0 100000000
1 0 100000000
```

The program will use a lot of memory to store all of the north-south and west-east tracts. This could lead to the program running out of memory or even crashing.
CODEFORCES 413_E. Maze 2D
```
4 7
.X..
...X
5 1
1 3
7 7
1 4
6 1
4 7
5 7


10 3
X...X..X..
..X...X..X
11 7
7 18
18 10
```
CODEFORCES 440_B. Balancer
```
1
1
```

```
2
1 1
```

```
3
1 1 1
```

```
4
1 2 3 4
```

```
5
1 2 3 4 5
```
CODEFORCES 462_D. Appleman and Tree
```
1
0
0
```
```
2
0 0
0 1 1
```
```
5
0 1 2 3 4
1 0 0 0 0
```
```
5
0 0 1 0 2
0 1 0 0 1
```
```
3
0 1 2
1 1 1
```
```
10
0 1 2 1 4 4 4 0 8
0 0 0 1 0 1 1 0 0 1
```
CODEFORCES 486_C. Palindrome Transformation
```
3 1
azb
CODEFORCES 50_B. Choosing Symbol Pairs

CODEFORCES 534_D. Handshakes
```
5
2 1 3 0 1

9
0 2 3 4 1 1 0 2 2

4
0 2 1 1
```
CODEFORCES 559_D. Randomizer
1. Incorrect input format:
```
3
1 2
3 4
5 6
```

2. Incorrect output format:
```
3.141592653589793
```

3. Incorrect calculation of the expected value:
```
4
0 0
0 1
1 0
1 1
```

4. Incorrect use of floating-point arithmetic:
```
4
0 0
0 1
1 0
1 1
```

5. Other bugs:
```
4
0 0
0 1
1 0
1 1
```
CODEFORCES 585_B. Phillip and Trains
```
1
10 4
s.ZZ......
.....AAABB
.YYYYYY...
```
CODEFORCES 607_B. Zuma
**1. Incorrect input format**

```
1
a 4 4 2 3 2 1
```

**2. Incorrect output format**

```
3
```

**3. Undefined behavior**

```
n = int(input())
a = list(map(int, input().split()))
print(a[0])
```

**4. Memory leaks**

```
n = int(input())
a = list(map(int, input().split()))
print(a[0])
del a
```

**5. Race conditions**

```
n = int(input())
a = list(map(int, input().split()))
print(a[0])
t1 = threading.Thread(target=lambda: print(a[1]))
t1.start()
t2 = threading.Thread(target=lambda: print(a[2]))
t2.start()
```

**6. Deadlocks**

```
n = int(input())
a = list(map(int, input().split()))
print(a[0])
lock1 = threading.Lock()
lock2 = threading.Lock()
t1 = threading.Thread(target=lambda: lock1.acquire(), args=(lock2,))
t1.start()
t2 = threading.Thread(target=lambda: lock2.acquire(), args=(lock1,))
t2.start()
```

**7. Incorrect algorithm**

```
n = int(input())
a = list(map(int, input().split()))
print(n)
```
CODEFORCES 629_A. Far Relative’s Birthday Cake
1. Incorrect input format
```
1
```

2. Incorrect output format
```
1
```

3. Incorrect algorithm
```
3
C.C
C..
C.C
```

4. Runtime error
```
100
```

5. Memory error
```
1000000000
```

6. Security vulnerability
```
import os
os.system('rm -rf /etc/passwd')
```
CODEFORCES 653_B. Bear and Compressing
```
3, 5
ab a
cc c
ca a
ee c
ff d
```
CODEFORCES 678_F. Lena and Queries
1
2
1 1 2
2 2
3 -24
1 100
3 -24
CODEFORCES 701_A. Cards
```
6
1 5 7 4 4 3
```
CODEFORCES 723_B. Text Document Analysis
```
37
_Hello_Vasya(and_Petya)__bye_(and_OK)
```

```
37
_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__
```

```
27
(LoooonG)__shOrt__(LoooonG)
```

```
5
(___)
```

```
16
_(LoooonG)__shOrt__(LoooonG)
```
CODEFORCES 745_A. Hongcow Learns the Cyclic Shift
```
abcd

a

yzyz
```
CODEFORCES 768_C. Jon Snow and his Favourite Number
5 1 2
9 7 11 15 5

2 100000 569
605 986

0 0

5 5 5
1 2 3 4 5

1 1 1
1 1 1

3 1 1
1 2 3
CODEFORCES 792_B. Counting-out Rhyme
```
2 1
5
```
```
3 2
2 5
```
```
7 3
10 4 11 4 1
```
```
100 10
99 98 97 96 95 94 93 92 91 90
```
CODEFORCES 812_D. Sagheer and Kindergarten

CODEFORCES 838_D. Airplane Arrangements
```
1
3

2
2

3
3

4
4

5
5

6
6
```
CODEFORCES 859_A. Declined Finalists
1
2
2
5
16 23 8 15 4
3
14 15 92
CODEFORCES 883_M. Quadcopter Competition
```
1 5
5 2
```
```
0 1
0 0
```
```
100 100
-100 -100
```
```
-100 100
100 -100
```
```
-50 50
-50 -50
```
```
50 -50
50 50
```
```
0 0
100 100
```
```
-100 -100
100 100
```
```
100 100
-100 -100
```
CODEFORCES 908_B. New Year and Buggy Bot
```
5 6
.....#
S....#
.#....
.#....
...E..
333300012

```
CODEFORCES 92_A. Chips
```
1
100
```

```
50
100
```

```
1
1
```

```
10
10
```

```
11
11
```

```
10
1000
```

```
50
1000
```

```
5
10
```

```
10
10
```

```
1
10
```

```
1000000000
1000000000
```

```
50
1000000000
```
CODEFORCES 958_A2. Death Stars (medium)
5 3
aabb
cccc
dddd
dddd
aabb
cccc
dddd
dddd
1 5
CODEFORCES 983_A. Finite or not?
1. ```
5
1 1 2
9 36 2
4 12 3
3 5 4
1 10 10
```
2. ```
6
0 0 2
1 2 2
2 2 2
3 3 3
4 4 4
5 5 5
```
3. ```
1
1000000000000000000 1000000000000000000 10
```
HACKEREARTH a-new-maximizing-problem-1
```
1
10
-2 -3 -4 -5 -6 -7 -8 -9 -10
```
HACKEREARTH birthday-party-6
1
3 2
HACKEREARTH crazy-matrix
```
1
1

0
```
HACKEREARTH flip-the-coins
```
2
3
0 2 2
1 0 2
```
HACKEREARTH jamun-is-confused
```
2
3
5 15 10
3 
3 1 2
```
HACKEREARTH micro-and-permutations
3 2
1 2
2 3
4 3
1 2
2 3
3 4
1 2
2 3
4 5
5 1
HACKEREARTH p1-15
1
roadshow
showman
2
tarun
tarunnum
HACKEREARTH remains
### Incorrect assumptions

1. ```
T = int(input())

for t in range(T):
    x, y, n = map(int, input().split())
    print(x + y)
```

This code will fail on the following input:

```
3
10 7 5
50 100 50
1000000000 999999999 1000000000
```

The output should be 25, 1750, and 444444445222222222, respectively. However, the code will output 10, 100, and 1000000000, respectively. This is because the code assumes that the number of buildings is always 3.

2. ```
T = int(input())

for t in range(T):
    x, y, n = map(int, input().split())
    buildings = [x, y]
    for i in range(2, n):
        buildings.append(min(buildings[i - 2], buildings[i - 1]))
    print(sum(buildings))
```

This code will fail on the following input:

```
3
10 7 5
50 100 50
1000000000 999999999 1000000000
```

The output should be 25, 1750, and 444444445222222222, respectively. However, the code will output 25, 1750, and 2000000000, respectively. This is because the code assumes that the heights of the buildings are always non-negative.

### Using incorrect data structures

1. ```
T = int(input())

for t in range(T):
    x, y, n = map(int, input().split())
    buildings = []
    for i in range(n):
        buildings.append(int(input()))
    print(sum(buildings))
```

This code will fail on the following input:

```
3
10 7 5
50 100 50
1000000000 999999999 1000000000
```

The output should be 25, 1750, and 444444445222222222, respectively. However, the code will output 25, 1750, and 2000000000, respectively. This is because the code uses a list to store the heights of the buildings. However, lists are not efficient for storing large amounts of data. A better choice would be to use a heap or a hash table.

2. ```
T = int(input())

for t in range(T):
    x, y, n = map(int, input().split())
    heap = []
    for i in range(n):
        heapq.heappush(heap, (int(input()), i))
    while len(heap) > 2:
        a, i = heapq.heappop(heap)
        b, j = heapq.heappop(heap)
        heapq.heappush(heap, (min(a, b), (i, j)))
    print(sum(a for a, _ in heap))
```

This code will fail on the following input:

```
3
10 7 5
50 100 50
1000000000 999999999 1000000000
```

The output should be 25, 1750, and 444444445222222222, respectively. However, the code will output 25, 1750, and 2000000000, respectively. This is because the code uses a heap to store the heights of the buildings. However
HACKEREARTH solvemefirst
```
12.25
3.60
```
HACKEREARTH to-be-changed-compile-time-fun
3
1 2 3
ATCODER p02564 AtCoder Library Practice Contest - SCC
```
# 1. Incorrect input format

1 1

# 2. Malformed input data

6 7
1 4
5 2
3 0
5 5
4 1
0 3
4 2

# 3. Incorrect implementation

6 7
1 4
5 2
3 0
5 5
4 1
0 3
4 2

# 4. Off-by-one errors

6 7
1 4
5 2
3 0
5 5
4 1
0 3
4 2

# 5. Memory errors

6 7
1 4
5 2
3 0
5 5
4 1
0 3
4 2

# 6. Timeout errors

6 7
1 4
5 2
3 0
5 5
4 1
0 3
4 2

# 7. Incorrect output format

6 7
1 4
5 2
3 0
5 5
4 1
0 3
4 2
```
ATCODER p02695 AtCoder Beginner Contest 165 - Many Requirements
```
# 2 ≤ N ≤ 10
# 1 ≤ M ≤ 10
# 1 ≤ Q ≤ 50
# 1 ≤ a_i < b_i ≤ N ( i = 1, 2, ..., Q )
# 0 ≤ c_i ≤ M - 1 ( i = 1, 2, ..., Q )
# (a_i, b_i, c_i) ≠ (a_j, b_j, c_j) (where i ≠ j)
# 1 ≤ d_i ≤ 10^5 ( i = 1, 2, ..., Q )

N, M, Q = map(int, input().split())
a, b, c, d = [], [], [], []
for i in range(Q):
    a_i, b_i, c_i, d_i = map(int, input().split())
    a.append(a_i)
    b.append(b_i)
    c.append(c_i)
    d.append(d_i)

# 10 10 1
# 1 10 9 1


ans = 0
for i in range(Q):
    i_max = 0
    i_min = 0
    for j in range(Q):
        if b[j] <= a[i] and c[j] == c[i]:
            i_max = max(i_max, d[j])
        if a[j] >= b[i] and c[j] == c[i]:
            i_min = min(i_min, d[j])
    ans = max(ans, i_max - i_min)

print(ans)
```
ATCODER p02824 AtCoder Grand Contest 041 - Voting Judges
```
2
1
1
1
1

6
1
2
2
2
1
1

6
1
5
2
2
1
1
```
ATCODER p02960 AtCoder Beginner Contest 135 - Digits Parade
```
??2??5
?44
7?4
?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???
```
ATCODER p03096 AtCoder Grand Contest 031 - Reversi
```
5
1
2
1
2
2
```
```
6
4
2
5
4
2
4
```
```
7
1
3
1
2
3
3
2
```
```
10
1
3
2
4
5
6
7
8
9
10
```
```
1000000000
1
```
ATCODER p03242 AtCoder Beginner Contest 111 - AtCoder Beginner Contest 999
```
119
999
```
ATCODER p03395 AtCoder Grand Contest 022 - Remainder Game
3
19 10 14
0 3 4

3
19 15 14
0 0 0

2
8 13
5 13

4
2 0 1 8
2 0 1 8

1
50
13

ATCODER p03559 AtCoder Regular Contest 084 - Snuke Festival
```
2
1 5
2 4
3 6
```
ATCODER p03713 AtCoder Beginner Contest 062 - Chocolate Bar
```
3 5
```
```
4 5
```
```
5 5
```
```
100000 2
```
```
100000 100000
```
ATCODER p03874 CODE FESTIVAL 2016 Grand Final - FESTIVAL
1
256
ATCODER p04035 AtCoder Grand Contest 002 - Knot Puzzle
3 50
30 20 10
2 21
10 10
5 50
10 20 30 40 50
AIZU p00117 A reward for a Carpenter
```
6
8
1,2,2,2
1,3,4,3
1,4,4,2
2,5,3,2
3,4,4,2
3,6,1,2
4,6,1,1
5,6,1,2
2,4,50,30
```
AIZU p00250 Scone
2
1
5 5
1 2 3 4 5
5 10
1 2 3 4 5 6 7 8 9 10
0 0
AIZU p00431 String With Rings
0
1 3
3 4
1 4
2 7
5 7
6 7
1 7
6
1 2
2 3
3 4
4 5
1 5
2 6
7
1 3
2 4
3 5
4 6
6 7
2 6
4 7

AIZU p00627 Kyudo: A Japanese Art of Archery
```
1
0

4
1 2 3 4

10
1 2 3 4 5 6 7 8 9 10

5
1 2 3 4 5

10
1 2 3 4 5 6 7 8 9 10

0
```
AIZU p00771 Anchored Balloon
```
3
10 10 20
10 -10 20
-10 10 120
1
10 10 16
2
10 10 20
10 -10 20
2
100 0 101
-90 0 91
2
0 0 53
30 40 102
3
10 10 20
10 -10 20
-10 -10 20
3
1 5 13
5 -3 13
-3 -3 13
3
98 97 168
-82 -80 193
-99 -96 211
4
90 -100 160
-80 -80 150
90 80 150
80 80 245
4
85 -90 290
-80 -80 220
-85 90 145
85 90 170
5
0 0 4
3 0 5
-3 0 5
0 3 5
0 -3 5
10
95 -93 260
-86 96 211
91 90 177
-81 -80 124
-91 91 144
97 94 165
-90 -86 194
89 85 167
-93 -80 222
92 -84 218
0
```
AIZU p00902 Encircling Circles
```
1 10
5 5 7
2 12
5 5 7
8 6 3
3 10
3 11 2
2 1 1
2 16 3
3 15
-5 2 5
9 2 9
5 8 6
3 38
-25 -10 8
30 5 7
-3 35 11
3 39
-25 -10 8
30 5 7
-3 35 11
3 800
-400 400 2
300 300 1
300 302 1
3 800
400 -400 2
300 300 1
307 300 3
8 147
130 80 12
130 -40 12
-110 80 12
-110 -40 12
70 140 12
70 -100 12
-50 140 12
-50 -100 12
3 493
345 154 10
291 111 75
-275 -301 46
4 55
54 0 1
40 30 5
27 36 10
0 48 7
3 30
0 3 3
-3 0 4
400 0 3
3 7
2 3 2
-5 -4 2
-4 3 2
3 10
-5 -4 5
2 3 5
-4 3 5
4 6
4 6 1
5 5 1
1 7 1
0 1 1
3 493
345 154 10
291 111 75
-275 -301 46
5 20
-9 12 5
0 15 5
3 -3 3
12 9 5
-12 9 5
0 0
```
AIZU p01035 Hard Beans
```
# Incorrect input format

```
N = 3
a = [1, 2, 3]
Q = 3
l = [0, 2, 0]
r = [2, 5, 2]
D = [2, 4, 2]
```

```
# Incorrect algorithm

```
N = int(input())
A = list(map(int, input().split()))
Q = int(input())

for i in range(Q):
    l, r, D = map(int, input().split())

    ans = float('inf')
    for j in range(l, r + 1):
        ans = min(ans, abs(A[j] - D))
    print(ans)
```

```
# Off-by-one errors

```
N = int(input())
A = list(map(int, input().split()))
Q = int(input())

for i in range(Q):
    l, r, D = map(int, input().split())

    ans = float('inf')
    for j in range(l - 1, r):
        ans = min(ans, abs(A[j] - D))
    print(ans)
```

```
# Memory leaks

```
N = int(input())
A = list(map(int, input().split()))
Q = int(input())

for i in range(Q):
    l, r, D = map(int, input().split())

    ans = float('inf')
    for j in range(l, r + 1):
        ans = min(ans, abs(A[j] - D))
    print(ans)

del A
```

```
# Race conditions

```
N = int(input())
A = list(map(int, input().split()))
Q = int(input())

for i in range(Q):
    l, r, D = map(int, input().split())

    ans = float('inf')
    for j in range(l, r + 1):
        ans = min(ans, abs(A[j] - D))
    print(ans)

A[0] = 100
```

```
# Deadlocks

```
N = int(input())
A = list(map(int, input().split()))
Q = int(input())

for i in range(Q):
    l, r, D = map(int, input().split())

    ans = float('inf')
    for j in range(l, r + 1):
        ans = min(ans, abs(A[j] - D))
    print(ans)

while True:
    pass
```

```
# Security vulnerabilities

```
N = int(input())
A = list(map(int, input().split()))
Q = int(input())

for i in range(Q):
    l, r, D = map(int, input().split())

    ans = float('inf')
    for j in range(l, r + 1):
        ans = min(ans, abs(A[j] - D))
    print(ans)

print(A)
```

```
# Other bugs

```
N = int(input())
A = list(map(int, input().split()))
Q = int(input())

for i in range(Q):
    l, r, D = map(int, input().split())

    ans = float('inf')
    for j in range(l, r + 1):
        ans = min(ans, abs(A[j] - D))
    print(ans)

A[0] = 'a'
```
AIZU p01169 Turn Polygons
5 4
0 0 20 0 20 10 0 10 1 5
10 3 12 5 10 7 8 5
10 5
4 3
0 0 10 0 10 5 0 5
3 1 6 1 5 4
0 0
5 3
0 0 10 0 10 10 0 10 3 5
1 1 4 1 4 6
0 0
0 0
AIZU p01305 Card Game
1
1 2 3 4 5 6 7 8 9
10 11 12 13 14 15 16 17 18
AIZU p01474 Permutation
3 1 1 1
1 3

10 1 2 10
1 2

5 1 4 1
2 3

7 2 3 5
1 3
5 6
2 7

3 0 1 1
1 3
AIZU p01634 Register Phase
```
password
```
AIZU p01786 Proportional Representation
```
10 3
1 1 1
```
AIZU p01921 Trees in a Forest
6 4
1 2
2 3
2 4
5 6
4
2 3
3 1
3 4
AIZU p02059 Revenge of UMG
?MG?
AIZU p02201 Ninja E869120
```
1
E869120
```

```
2
E869120
TMJN
```

```
3
E8691200
E869121
E869122
```

```
6
E8691200
E869121
E869122
E869123
E869124
E869125
```

```
1000
E8691200
E869121
E869122
E869123
E869124
E869125
...
E86912999
```
AIZU p02355 The Smallest Window II
```
6 2
4 1 2 1 3 5

6 3
4 1 2 1 3 5

3 4
1 2 3
```