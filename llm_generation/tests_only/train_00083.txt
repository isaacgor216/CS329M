CODECHEF bytesg
```
Sachin Ramesh Tendulkar
Sach
Ram
sAcH Tendul
sach Tendulkar
Sachin Ram Tendulkar
SAChin TENduLkaR

@
Sachin Ramesh Tendulkar
Sach
Ram
sAcH Tendul
sach Tendulkar
Sachin Ram Tendulkar
Ramesh TENduLkaR

Sachin Ramesh Tendulkar
Sach
Ram
sAcH Tendul
sach Tendulkar
Sachin Ram Tendulkar
SAChin TENduLkaR

SachinRameshTendulkar
Sachin Ramesh Tendulkar
Sach
Ram
sAcH Tendul
sach Tendulkar
Sachin Ram Tendulkar
Ramesh TENduLkaR
```
CODECHEF cooling
1
4
10 30 20 40
30 10 20 40
CODECHEF gmb01
```
1
5 7
10 12 15 4 7 1 3
```
```
2
5 7
10 12 15 4 7 1 3
4 9
12 15 2 14 21 18 4 25 7
```
CODECHEF marcha1
5
3 3
1
1
1
5 11
1
2
4
8
16
5 23
1
2
4
8
16
5 13
1
5
5
10
10
20 132
17
6
4
998
254
137
259
153
154
3
28
19
123
542
857
23
687
35
99
999
CODECHEF qucobic
```
1
1200
1000
```
CODECHEF toffees
1
3
2 2 1

2
3
1 5 4
CODEFORCES 1015_A. Points in Segments
**Incorrect input format:**

```
1 7
1 7
```

**Incorrect algorithm:**

```
n, m = map(int, input().split())
segments = []
for i in range(n):
    segments.append(list(map(int, input().split())))

points = []
for i in range(1, m+1):
    if i not in segments:
        points.append(i)

print(len(points))
print(*points)
```

**Incorrect output format:**

```
1 7
1 7

2
3 4
```

**Runtime errors:**

```
n, m = map(int, input().split())
segments = []
for i in range(n):
    segments.append(list(map(int, input().split())))

points = set()
for i in range(1, m+1):
    if i not in segments:
        points.add(i)

print(len(points))
for p in points:
    print(p)
```

**Memory errors:**

```
n, m = map(int, input().split())
segments = []
for i in range(n):
    segments.append(list(map(int, input().split())))

points = []
for i in range(1, m+1):
    if i not in segments:
        points.append(i)

print(len(points))
print(*points)

# This code will leak memory because the `segments` list is never freed.
```
CODEFORCES 1038_E. Maximum Matching
```
6
2 1 4
1 2 4
3 4 4
2 8 3
3 16 3
1 32 2
```

```
7
1 100000 1
1 100000 2
1 100000 2
4 50000 3
3 50000 4
4 50000 4
3 50000 3
```

```
4
1 1000 1
2 500 2
3 250 3
4 125 4
```
CODEFORCES 1061_A. Coins
```
1 1
```

```
10 10
```

```
100000 100000
```

```
5 20
```

```
3 11
```

```
6 17
```

```
7 16
```
CODEFORCES 1082_G. Petya and Graph
```
2 1
10
1 2 10
```

```
5 3
1 2 3 4 5
1 2 4
2 3 5
```

```
4 4
1 2 3 4
1 2 4
2 3 5
3 4 6
```

```
4 5
1 5 2 2
1 3 4
1 4 4
3 4 5
3 2 2
```

```
3 3
9 7 8
1 2 1
2 3 2
1 3 3
```
CODEFORCES 1102_B. Array K-Coloring
```
1 1
1

1 2
1 2

1 2
2 1

2 2
2 1

2 2
1 1
```
CODEFORCES 1130_B. Two Cakes
```
3
1 1 2 2 3 3

2
2 1 1 2

4
4 1 3 2 2 3 1 4

5
1 2 4 5 3 3 2 1 4 5
```
CODEFORCES 1150_C. Prefix Sum Primes
```
5
1 2 1 2 1
```
```
9
1 1 2 1 1 1 2 1 1
```
CODEFORCES 1172_C2. Nauuo and Pictures (hard version)
```
1 1
0
1
```

```
2 1
0 1
2 1
```

```
2 2
0 1
4 3
```

```
10 10
1 0 0 1 1 1 1 0 0 1
10 20 30 40 50 60 70 80 90 100
```

```
10 10
1 1 1 1 1 1 1 1 1 1
10 20 30 40 50 60 70 80 90 100
```

```
10 10
1 0 1 1 0 1 0 1 0 1
20 30 40 50 60 70 80 90 100 110
```

```
10 10
0 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1
```

```
10 10
0 0 0 0 0 0 0 0 0 0
998244352 0 0 0 0 0 0 0 0 0
```
CODEFORCES 118_E. Bertown roads
```
# 1. Incorrect input format

6 8
1 2
2 3
1 3
4 5
4 6
5 6
2 4
3 5

# 2. Incorrect output format

6 8
1 2
2 3
1 3
4 5
4 6
5 6
2 4
3 5
0

# 3. Incorrect logic

6 7
1 2
2 3
1 3
4 5
4 6
5 6
2 4

# 4. Memory leak

6 8
1 2
2 3
1 3
4 5
4 6
5 6
2 4
3 5

# 5. Synchronization issues

6 8
1 2
2 3
1 3
4 5
4 6
5 6
2 4
3 5

# 6. Deadlock

6 8
1 2
2 3
1 3
4 5
4 6
5 6
2 4
3 5

# 7. Stack overflow

6 8
1 2
2 3
1 3
4 5
4 6
5 6
2 4
3 5
```
CODEFORCES 1209_D. Cow and Snacks
```
5 4
1 2
4 3
1 4
3 4
```
CODEFORCES 1228_C. Primes and Multiplication
```
10 2
20190929 1605
947 987654321987654321
```
CODEFORCES 1250_J. The Parade
```
1
5 2
1 0 2 0 2
```
CODEFORCES 1270_C. Make Good
```
1
3
2 3 2
```
```
2
4 4
```
```
1
1000000000
```
```
3
1000000000 1000000000 1000000000
```
CODEFORCES 1293_A. ConneR and the A.R.C. Markland-N
```
1
5 2 3
1 2 3
```
```
2
10 2 6
1 2 3 4 5 7
```
```
1
100 76 8
76 75 36 67 41 74 10 77
```
CODEFORCES 1313_A. Fast Food Restaurant
```
1
1 1 1
```
```
2
1 0 0
0 0 0
```
```
3
9 1 7
```
```
4
2 2 3
```
```
5
2 3 2
```
```
6
3 2 2
```
```
7
4 4 4
```
```
8
1 2 3
```
```
9
1 3 4
```
```
10
2 4 5
```
```
11
3 5 6
```
```
12
4 6 7
```
```
13
5 7 8
```
```
14
6 8 9
```
```
15
7 9 10
```
```
16
8 10 11
```
```
17
9 11 12
```
```
18
10 12 13
```
```
19
11 13 14
```
```
20
12 14 15
```
CODEFORCES 1335_E1. Three Blocks Palindrome (easy version)
```
1
2
1 1
```
```
1
1
2
1 1
```
```
1
3
1 2 3
```
```
1
4
1 1 1 2
```
```
1
4
1 10 10 1
```
```
1
5
1 1 2 1 1
```
```
1
6
1 1 2 2 3 2 1 1
```
```
1
3
1 3 3
```
```
1
1
26
```
```
1
2
2 1
```
```
1
3
1 1 1
```
```
1
5
1 1 2 2 3
```
```
1
6
1 1 2 1 1 2
```
```
1
7
1 1 2 2 3 2 1 1
```
```
2
5
1 1 2 2 3
5
1 1 2 2 3
```
```
3
5
1 1 2 2 3
5
1 1 2 2 3
5
1 1 2 2 3
```
```
4
5
1 1 2 2 3
5
1 1 2 2 3
5
1 1 2 2 3
5
1 1 2 2 3
```
CODEFORCES 1358_A. Park Lighting
1
3 3
2
4 4
3 4
1 3
5 5
6 6
5 6
7 7
8 8
9 9
10 10
11 11
12 12
13 13
14 14
15 15
16 16
17 17
18 18
19 19
20 20
CODEFORCES 1375_F. Integer Game
```
5 2 6
```

```
3
```

```
0
```

```
First
```

```
2
```

```
3
```
CODEFORCES 1399_B. Gifts Fixing
```
1
3
3 5 6
3 2 3
```
```
2
5
1 2 3 4 5
5 4 3 2 1
3
1 1 1
2 2 2
```
```
3
3
3 5 6
3 2 3
5
1 2 3 4 5
5 4 3 2 1
6
1 1000000000 1000000000 1000000000 1000000000 1000000000
1 1 1 1 1 1
3
10 12 8
7 5 4
```
CODEFORCES 1422_E. Minlexes
```
abcdd
abba
aaaaaaaaa
```
CODEFORCES 1440_C2. Binary Table (Hard Version)
```
1
2 3
101
011
```
CODEFORCES 1467_E. Distinctive Roots in a Tree
```
# 1. Incorrect implementation of the DFS algorithm
5
2 5 1 1 4
1 2
1 3
2 4
2 5

# 2. Incorrect handling of duplicate values
5
2 1 1 1 4
1 2
1 3
2 4
2 5

# 3. Incorrect handling of cycles
5
2 5 1 1 4
1 2
1 3
2 4
2 5

# 4. Incorrect use of global variables
5
2 5 1 1 4
1 2
1 3
2 4
2 5

# 5. Incorrect handling of edge cases
1
1
```
CODEFORCES 1491_H. Yuezheng Ling and Dynamic Tree
```
6 4
1 2 3 3 4
2 3 4
1 2 3 1
2 5 6
2 2 3
```
CODEFORCES 1514_E. Baby Ehab's Hyper Apartment
```
1
4
```

```
2
3 3 0 1 2

0

0

1

0

1

1

2 2 1 1

3
1111
1111
1111
0001
```

```
2
3

1

1
```

```
1
4

0

0

1

1

0

1

1 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```

```
1
4

1

1

1

1

1

1

2 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```

```
1
1

1

1

1
```

```
1
2

0

0

1

1

0

1

1 1 1 0

1 0 1

2 1 1

3
111
111
000
```

```
1
4

1

1

1

1

1

1

2 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```

```
1
4

1

1

1

1

1

1

2 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```

```
1
4

0

0

1

1

1

1

2 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```

```
1
4

1

1

1

1

1

1

2 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```

```
1
4

1

1

1

1

1

1

2 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```

```
1
4

1

1

1

1

1

1

2 3 3 0 1 2

1 0 1

1 0 2

2 2 1 1

3
1111
1111
1111
0001
```
CODEFORCES 1541_E1. Converging Array (Easy Version)
```
2
1 2
1
-1
```
CODEFORCES 169_D. Lemmings
```
1 1 1
1
1
```
```
10 1 1
10
10
```
```
10 1 10
10
1
```
```
10 3 10
10 10 10
1 2 3
```
```
10 3 10
10 10 10
1 3 2
CODEFORCES 18_B. Platforms
```
2 2 5 3
5 4 11 8
```
CODEFORCES 213_B. Numbers
```
1
0 0 0 0 0 0 0 0 0 1

2
1 1 0 0 0 0 0 0 0 0

3
1 1 0 0 0 0 0 0 0 0
```
CODEFORCES 237_B. Young Table
```
# 50

# 3 2 1
# 4 3 5
# 6 1
# 2
# 1 1 2 2
# 2 1 3 1

# 1
# 4
# 4 3 2 1
# 2
# 1 1 1 4
# 1 2 1 3

# 2
# 2 1
# 1 2
```
CODEFORCES 261_E. Maxim and Calculator
```
2 10 3
2 111 100
2 111 11
```
CODEFORCES 285_E. Positions in Permutations
1. ```
1 0
```

2. ```
2 1
```

3. ```
3 2
```

4. ```
4 1
```

5. ```
7 4
```

6. ```
10 5
```
CODEFORCES 30_E. Tricky and Clever Password
```
axx
```
```
abba
```
```
xx
```
```
a
```
```
aa
```
```
xyx
```
```
abcdef
```
```
abab
```
CODEFORCES 333_C. Lucky Tickets
```
0 3
```
```
10 10
```
```
0 1
```
CODEFORCES 356_C. Compartments
**Incorrect input format**

```
1
```

**Incorrect output format**

```
5
```

**Incorrect algorithm**

```
n = int(input())
a = list(map(int, input().split()))

if n == 1:
	if a[0] == 1 or a[0] == 2:
		print(1)
	else:
		print(0)
else:
	ans = 0
	for i in range(n):
		if a[i] == 1 or a[i] == 2:
			ans += 1
	print(ans)
```

**Incorrect data**

```
-1
```

**Incorrect logic**

```
n = int(input())
a = list(map(int, input().split()))

if n == 1:
	if a[0] == 1 or a[0] == 2:
		print(1)
	else:
		print(0)
else:
	ans = 0
	for i in range(n):
		if a[i] == 1 or a[i] == 2:
			ans += 1
	if ans % 2 == 0:
		print(ans // 2)
	else:
		print(ans // 2 + 1)
```

**Incorrect implementation**

```
n = int(input())
a = list(map(int, input().split()))

if n == 1:
	if a[0] == 1 or a[0] == 2:
		print(1)
	else:
		print(0)
else:
	ans = 0
	for i in range(n):
		if a[i] == 1 or a[i] == 2:
			ans += 1
	if ans % 2 == 0:
		print(ans // 2)
	else:
		print(ans // 2 + 1)
```
CODEFORCES 37_B. Computer Game
```
2 10 3
100 3
99 1
```
CODEFORCES 400_A. Inna and Choose Options
```
1
XXXXXXXXXXXX
```

```
2
XXXXXXXXXXXX
XXXXXXXXXXXX
```

```
3
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
```

```
4
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
```

```
5
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
```

```
6
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
XXXXXXXXXXXX
```
CODEFORCES 427_B. Prison Transfer
```
10 100 5
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 44_J. Triminoes
```
2 2
wb
bw

2 2
wb
wb

1 3
wbw

6 10
.w.wbw.wbw
wbwbw.w.w.
bw.wbwbwbw
w.wbw.wbwb
...wbw.w.w
..wbw.wbw.
```
CODEFORCES 472_A. Design Tutorial: Learn from Math
1. **Incorrect input format**

```
11
```

2. **Incorrect output format**

```
1 11
```

3. **Incorrect logic**

```
n = int(input())
print(2, n-2)
```

4. **Memory leaks**

```
n = int(input())
while n > 0:
    n -= 1
```

5. **Race conditions**

```
n = int(input())
x = y = 0
while x < n:
    x += 1
    while y < n:
        y += 1
        if x + y == n:
            break
```

6. **Security vulnerabilities**

```
n = int(input())
print(n, n)
```
CODEFORCES 496_B. Secret Combination
```
1
0

2
10

4
0123

4
1999

5
99999

```
CODEFORCES 51_E. Pentagon
```
1. ```
```
5 5
1 2
2 3
3 4
4 5
5 1
```

2. ```
```
1 0
```

3. ```
```
5 10
1 2
1 3
1 4
1 5
2 3
2 4
2 5
3 4
3 5
4 5
```

4. ```
```
10 20
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
1 10
1 6
2 7
3 8
4 9
5 1
```

5. ```
```
```
```

6. ```
```
```
```
CODEFORCES 547_A. Mike and Frog
```
5
4 2
1 1
0 1
2 3

5
1 2
1 0
1 2
1 1

1023
1 2
1 0
1 2
1 1
```
CODEFORCES 573_C. Bear and Drawing
```
1
```

```
2
1 2
```

```
3
1 2
1 3
```

```
4
1 2
1 3
1 4
```

```
8
1 2
1 3
1 6
6 4
6 7
6 5
7 8
```

```
13
1 2
1 3
1 4
2 5
2 6
2 7
3 8
3 9
3 10
4 11
4 12
4 13
```

```
14
1 2
1 3
1 4
2 5
2 6
2 7
3 8
3 9
3 10
4 11
4 12
4 13
13 14
```
CODEFORCES 595_A. Vitaly and Night
```
2 2
0 0 0 1
1 0 1 1

1 3
1 1 0 1 0 0
```
CODEFORCES 616_D. Longest k-Good Segment
```
10 2
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 635_E. Package Delivery
```
10 4 4
3 5
5 8
6 3
8 4
```
```
16 5 2
8 2
5 1
```
```
3 1 1
```
```
100 100 100
```
CODEFORCES 664_D. Graph Coloring
```
3 3
1 2 B
3 1 R
3 2 B

```

```
6 5
1 3 R
2 3 R
3 4 B
4 5 R
4 6 R

```

```
4 5
1 2 R
1 3 R
2 3 B
3 4 B
1 4 B

```
CODEFORCES 689_B. Mike and Shortcuts
```
3
2 2 3
```
```
5
1 2 3 4 5
```
```
7
4 4 4 4 7 7 7
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
100000
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
```
CODEFORCES 710_F. String Set Queries
1. Incorrect data structure:
```
m = int(input())
d = {}
for i in range(m):
    t, s = input().split()
    if t == "1":
        d[s] = 1
    elif t == "2":
        del d[s]
    else:
        c = 0
        for k in d.keys():
            if s.find(k) != -1:
                c += 1
        print(c)
```

2. Not flushing the output buffer:
```
m = int(input())
d = {}
for i in range(m):
    t, s = input().split()
    if t == "1":
        d[s] = 1
    elif t == "2":
        del d[s]
    else:
        c = 0
        for k in d.keys():
            if s.find(k) != -1:
                c += 1
        print(c)
    sys.stdout.flush()
```

3. Making a mistake in the logic of the program:
```
m = int(input())
d = {}
for i in range(m):
    t, s = input().split()
    if t == "1":
        d[s] = 1
    elif t == "2":
        del d[s]
    else:
        c = 0
        for k in d.keys():
            if s.find(k) != -1:
                c += 1
        print(c)
```

4. Not handling errors correctly:
```
try:
    m = int(input())
    d = {}
    for i in range(m):
        t, s = input().split()
        if t == "1":
            d[s] = 1
        elif t == "2":
            del d[s]
        else:
            c = 0
            for k in d.keys():
                if s.find(k) != -1:
                    c += 1
            print(c)
except:
    print("error")
```

5. Not testing the program thoroughly:
```
m = int(input())
d = {}
for i in range(m):
    t, s = input().split()
    if t == "1":
        d[s] = 1
    elif t == "2":
        del d[s]
    else:
        c = 0
        for k in d.keys():
            if s.find(k) != -1:
                c += 1
        print(c)
```
CODEFORCES 731_F. Video Cards
```
4
3 2 15 9
```
```
4
8 2 2 7
```
```
5
1 2 3 4 5
```
```
12
1 2 3 4 5 6 7 8 9 10 11 12
```
CODEFORCES 756_A. Pavel and barbecue
```
4
4 3 2 1
0 1 1 1
```
CODEFORCES 777_B. Game of Credit Cards
```
1
1
1
```

```
2
10
01
```

```
3
123
321
```

```
3
731
371
```

```
4
1234
4321
```

```
4
9999
9999
```
CODEFORCES 801_E. Vulnerable Kerbals
```
0 5
3 10
2 9 1
```
CODEFORCES 822_B. Crossword solving
**1. The input format is not correct**

```
3 5
abc
xaybz
```

**2. The output format is not correct**

```
3 5
abc
xaybz
```

**3. The program does not work correctly**

```
3 5
abc
xaybz
```

**4. The program has a runtime error**

```
1000000 1000000
a
a
```

**5. The program has a logic error**

```
3 5
abc
xaybz
```
CODEFORCES 847_G. University Classes
1. Incorrect input format:
```
5
1000000
1111111
0000000
1000000
1111111
```

2. Incorrect output format:
```
5
1000000
1111111
0000000
1000000
1111111
```

3. Incorrect logic:
```
5
1000000
1111111
0000000
1000000
1111111
```

4. Off-by-one errors:
```
5
1000000
1111111
0000000
1000000
1111111
```

5. Memory leaks:
```
5
1000000
1111111
0000000
1000000
1111111
```

6. Race conditions:
```
5
1000000
1111111
0000000
1000000
1111111
```

7. Security vulnerabilities:
```
5
1000000
1111111
0000000
1000000
1111111
```
CODEFORCES 869_B. The Eternal Immortality
```
0 10
1 3
0 10
100 101
```
CODEFORCES 895_A. Pizza Separation
```
1
360
```

```
4
90 90 90 90
```

```
3
100 100 160
```

```
1
360
```

```
4
170 30 150 10
```

```
5
180 180 180 180 180
```

```
4
100 100 160 10
```

```
4
170 30 150 10
```
CODEFORCES 916_B. Jamie and Binary Sequence (changed after round)
1. `23 5`
2. `13 2`
3. `1 2`
4. `-100 1`
5. `1000000000 1`
6. `-1000000000 2`
7. `1000000000 2`
8. `1000000000 3`
9. `-1000000000 3`
CODEFORCES 939_C. Convenient For Everybody
```
1
1
1 1
1 1
```
CODEFORCES 964_E. Cutting Rectangle
```
1
1 1 9
```
```
2
2 3 20
2 4 40
```
```
2
1 2 5
2 3 5
```
```
5
1 1 1
1 1 2
2 2 3
2 2 4
1 1 5
```
```
10
2 3 20
2 4 40
1 2 3
1 3 4
3 3 5
3 4 6
4 4 7
5 5 8
6 6 9
```
CODEFORCES 991_F. Concise and clear
1000000007
500000000
10000000000
10000000
1000000000
HACKEREARTH arrange-boxes-1
1

5
1 2 3 4 5
5 1 4 2 3
HACKEREARTH check-if-its-a-check
1
e8 e1
q a4

HACKEREARTH doghouses
1. ```
1
1
```
2. ```
2
1 2
```
3. ```
3
1 2 3
```
4. ```
4
1 2 3 4
```
5. ```
5
2 3 4 1 1
```
6. ```
6
1 3 2 1 2 4
```
7. ```
7
1 3 2 4 1 2 4
```
8. ```
8
1 1 2 3 4 5 6 7
```
9. ```
9
1 1 2 2 3 3 4 5
```
10. ```
10
1 1 1 1 1 1 1 1 1
```
HACKEREARTH gotta-catch-em-all
```
1
1
```

```
2
3 1
```

```
3
1 2 3
```

```
4
1 2 3 4
```

```
5
1 2 3 4 5
```
HACKEREARTH little-jhool-and-his-breakup
1. ```
love
```
2. ```
lov3333333asdafajfgnkdfn33333e
```
3. ```
lovee
```
4. ```
lvoe
```
5. ```
l
```
HACKEREARTH mr-smoothy
1
5
5 5 6 3 4 8
HACKEREARTH prateek-and-theories-3
```
1
5
1 10
2 4
3 5
11 12
12 13
HACKEREARTH samu-and-permutations
```
1
3
2 5 4
```
HACKEREARTH sumit-and-rohil
```
5
b
b
c
c
d
```
HACKEREARTH welcome-to-ooty
3
10 12
7 2
ATCODER p02621 AtCoder Beginner Contest 172 - Calc
1. Incorrect input format:
```
1a
```

2. Incorrect calculation:
```
2
```

3. Off-by-one error:
```
10
```

4. Memory leak:
```
```

5. Race condition:
```
```

6. Security vulnerability:
```
```
ATCODER p02752 Social Infrastructure Information Systems Division  Hitachi Programming Contest 2020 - Preserve Diameter
3
1 2
2 3
ATCODER p02887 AtCoder Beginner Contest 143 - Slimes
```
10
aabbbbaaca

5
aaaaa

20
xxzaffeeeeddfkkkkllq
```
ATCODER p03022 AtCoder Grand Contest 034 - RNG and XOR
```
2
1 1

2
1 2

4
337 780 799 10 796 875 331 223 941 67 148 483 390 565 116 355
ATCODER p03162 Educational DP Contest - Vacation
```
1
1000000000 1000000000 1000000000
```
ATCODER p03305 SoundHound Inc. Programming Contest 2018 -Masters Tournament- - Saving Snuuk
```
4 3 2 3
1 4 1 100
1 2 1 10
1 3 20 1

```
ATCODER p03465 AtCoder Grand Contest 020 - Median Sum
```
# 3
# 1 2 1

# 1
# 58

# 4
# 1 1 1 1

# 5
# 1 2 3 4 5

# 10
# 1 2 3 4 5 6 7 8 9 10
```
ATCODER p03625 AtCoder Beginner Contest 071 - Make a Rectangle
**1. Not handling the case where N is less than 4.**

```
3
1 2 3
```

**2. Not handling the case where all of the sticks have the same length.**

```
4
1 1 1 1
```

**3. Using an incorrect algorithm to find the maximum possible area.**

```
4
1 2 3 4
```

**4. Not handling the case where the input is malformed.**

```
4
a 2 3 4
```

**5. Not handling the case where the output is too large.**

```
1000000000
1 1 1 1 1 1 1 1 1 1
```
ATCODER p03785 AtCoder Grand Contest 011 - Airport Bus
```
2 1 1
1
2

5 3 5
1
2
3
6
12

6 3 3
7
6
2
8
10
6

3 2 1
2
6
9
```
ATCODER p03953 AtCoder Grand Contest 006 - Rabbit Exercise
3
-1 0 2
1 1
2
3
1 -1 1
2 2
2 2
5
0 1 3 6 10
3 10
2 3 4
AIZU p00043 Puzzle
```
3649596966777
6358665788577
9118992346175
9643871425498
7755542764533
1133557799246
```
AIZU p00175 Quaternary Notation
```
-1
7
4
0
12
10
10000
```
AIZU p00331 Sunrise and Sunset
```
-1000 1000
-3 3
3 3
-4 3
1 1
-100 100
-10000 10000
```
AIZU p00504 Gifts
5 4 2
...#
.#.#
.#73
8##.
....
AIZU p00688 Factorization of Quadratic Formula
1 3 -1 -1
AIZU p00830 Pathological Paths
```
2 4
/home
/home/
/home/.
/home/
/home
/home/..
/home
/home
/home
0 0
```
AIZU p00961 Black or White
4 4
BWWB
WBBW
4 3
BWWB
WBBW
4 3
BWWW
BWWW
7 1
BBWBWBW
WBBWWBB
AIZU p01094 Look for the Winner!
1
A
4
A A B B
5
L M N L N
6
K K K K K K
6
X X X Y Z X
10
A A A B A C A C C B
10
U U U U U V V W W W
0
AIZU p01230 Can I go there?
2 1 1
1 2
2 1 2
1 2
3 1 2
1 2
8 8 5778
1 2
2 3
2 4
3 5
5 6
6 7
7 8
4 8
8 8 5777
1 2
2 3
2 4
3 5
5 6
6 7
7 8
4 8
0 0 0
AIZU p01364 Two-Wheel Buggy
```
1 1
180 90 2
1 1
180 180 20
2 10
360 -360 5
-90 360 8
3 2
100 60 9
-72 -72 10
-45 -225 5
0 0
```
AIZU p01546 Sports Days 2
3 9 89
2 0 2
1 0 3
2 0 1
2 0 3
0 1 1
0 1 2
1 2 3
0 1 1
1 0 2
AIZU p01702 Unknown Switches
```
3 10 3
000 0000000000
110 0000001111
101 1111111100
2 2 0
1 1 0
2 1 1
01 1
11 11 10
10000000000 10000000000
11000000000 01000000000
01100000000 00100000000
00110000000 00010000000
00011000000 00001000000
00001100000 00000100000
00000110000 00000010000
00000011000 00000001000
00000001100 00000000100
00000000110 00000000010
0 0 0

3 5 3
000 000000
001 111111
101 111111
1 1 0
1 1 1
1 1 1
01000000000 11000000000
00100000000 10100000000
00010000000 01100000000
00001000000 00010000000
00000100000 00001000000
00000010000 00000100000
00000001000 00000010000
00000000100 00000001000
00000000010 00000000100
0 0 0

3 5 2
000 000000
110 111111
101 111111
1 1 0
1 1 1
01000000000 11000000000
00100000000 10100000000
00010000000 01100000000
00001000000 00010000000
00000100000 00001000000
00000010000 00000100000
00000001000 00000010000
00000000100 00000001000
00000000010 00000000100
0 0 0

3 5 1
000 000000
110 111111
101 111111
1 1 0
1 1 1
01000000000 11000000000
00100000000 10100000000
00010000000 01100000000
00001000000 00
AIZU p01846 jfen

AIZU p01982 Generalized Leap Years
```
3 1988 2014
400
100
Four
1 1000 1999
1
2 1111 3333
2
2
6 2000 3000
5
7
11
9
3
13
0 0 0
```
AIZU p02128 Light
```
10 10 1
6 6
```

```
5 10 3
3 9
2 8
5 1
```

```
1 1 1
1 1
```
AIZU p02269 Dictionary
1. ```
5
insert A
insert T
insert C
find G
find A
```
2. ```
13
insert AAA
insert AAC
insert AGA
insert AGG
insert TTT
find AAA
find CCC
find CCC
insert CCC
find CCC
insert T
find TTT
find T
```
AIZU p02416 Sum of Numbers
1. ```
123
```
2. ```
1234567890
```
3. ```
0
```
4. ```
-1234567890
```
5. ```
  
```