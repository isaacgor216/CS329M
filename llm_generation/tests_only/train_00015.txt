CODECHEF aehash
```
1
1 0 1
```
CODECHEF chefsqua
3
0 0
2 2
3 3

1
100 100

5
0 0
100 100
200 200
100 0
0 100
CODECHEF drctnsrm
```
 1
NEW
```
```
2
NNSSE
NE
```
```
3
NEWNEWS
```
CODECHEF jntuv3
1, -1, 101, "123"
CODECHEF numbers
```
1
2
Kouta 1
Yuka 1
```
```
2
5
Kouta 1
Yuka 1
Mayu 3
Lucy 2
Nana 5
```
```
1
100
Kouta 1
```
```
1
10000
Kouta 1
```
```
10
1
Kouta 1
```
CODECHEF sislove
1
zri

CODEFORCES 1004_C. Sonya and Robots
```
3
1 2 3
```
```
10
1 1 1 1 1 1 1 1 1 1
```
```
5
1 2 3 4 5
```
CODEFORCES 1028_C. Rectangles
```
# Incorrect input format

1
0 0 1 1

# Incorrect algorithm

3
0 0 1 1
1 1 2 2
3 0 4 1

# Incorrect output format

3
0 0 1 1
1 1 2 2
3 0 4 1


# Runtime error

1000000000

# Time limit exceeded

1000000000

# Memory limit exceeded

1000000000
```
CODEFORCES 1046_I. Say Hello
```
1
1 1
0 0

4
2 5
0 0 0 10
5 5 5 6
5 0 10 5
14 7 10 5

5
3 3
0 0 0 10
5 5 5 6
0 10 10 0
14 7 10 5
```
CODEFORCES 1070_H. BerOS File Suggestion
```
1
a
2
a
b
```

This input tests for incorrect data type for input/output. The program should be able to handle inputs of type string and integer.

```
10
a
b
c
d
e
f
g
h
i
j
10
a
b
c
d
e
f
g
h
i
j
```

This input tests for incorrect logic. The program should be able to count the number of files that contain the given substring, and print the name of any such file.

```
5
abc
def
ghi
jkl
mno
5
a
b
c
d
e
```

This input tests for memory leaks. The program should not allocate memory that it does not need.

```
10000
a
10000
a
```

This input tests for synchronization issues. The program should be thread-safe if it is multi-threaded.

```
10000
a
10000
b
```

This input tests for security vulnerabilities. The program should not have any security vulnerabilities.

```
10000
a
10000
a'
```

This input tests for other bugs. The program may crash, or it may not behave as expected.
CODEFORCES 1092_D1. Great Vova Wall (Version 1)
1. 5
2 1 1 2 5

2. 3
4 5 3

3. 2
10 10

4. 3
1 2 3
CODEFORCES 1111_B. Average Superhero Gang Power 
```
10 2 100
1 1 1 1 1 1 1 1 1 1 
```

```
5 2 10
1 2 3 4 5
```

```
100000 100000 1000000000000000000
1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000
```
CODEFORCES 1140_G. Double Tree
```
2
1 2
5 6
1 2
```
```
3
1 2
1 3
2 3
```
```
5
1 2 3 4 5
1 2 1 2
2 3 2 3
3 4 3 4
4 5 4 5
5
1 2
2 3
3 4
4 5
5 1
```
```
5
1 2 3 4 5
1 2 1 2
2 3 2 3
3 4 3 4
4 5 4 5
10
1 2
2 3
3 4
4 5
5 1
1 6
6 7
7 8
8 9
9 10
```
CODEFORCES 1159_E. Permutation recovery
```
1
3
1 2 3
```
```
2
3
1 2 4
2
3 3
```
```
3
3
-1 -1 -1
3
3 4 -1
1
2
```
```
4
4
-1 4 5
```
```
5
3
3 4 5
```
CODEFORCES 1181_E1. A Story of One Country (Easy)
```
1
0 0 1 1
```

```
2
0 0 1 1
1 1 2 2
```

```
3
0 0 1 1
1 1 2 2
2 2 3 3
```

```
4
0 0 1 2
0 2 1 3
1 0 2 1
1 1 2 3
```

```
4
0 0 2 1
1 2 3 3
2 0 3 2
0 1 1 3
```

```
5
0 0 1 1
0 1 1 2
1 0 2 1
1 1 2 2
2 0 2 1
```

```
10
0 0 1 1
0 1 1 2
1 0 2 1
1 1 2 2
2 0 2 1
2 1 2 2
3 0 3 1
3 1 3 2
4 0 4 1
4 1 4 2
```
CODEFORCES 119_D. String Transformation
```
1234
4321
```

```
abc
cba
```

```
123342
233421
```

```
1111111111111111111111111111
1111111111111111111111111111
```

```
100000000000000000000000000000
111111111111111111111111111111
```
CODEFORCES 1217_B. Zmei Gorynich
```
1
3 10
6 3
8 2
```
CODEFORCES 123_D. String
```
aaaa
```
```
abcdef
```
```
abacabadabacaba
```
CODEFORCES 125_E. MST Company
```
1 0 0
```

```
5 3 2
1 2 1
2 3 1
3 4 1
1 4 2
```

```
4 5 2
1 2 1
2 3 1
3 4 1
1 3 3
1 4 2
```

```
3 5 2
1 2 1
2 3 1
3 4 1
1 3 3
1 4 2
1 1 0
```

```
4 5 3
1 2 1
2 3 1
3 4 1
1 3 3
1 4 2
```

```
4 5 2
1 2 1
2 3 1
3 4 1
1 3 3
1 4 2
1 1 1
```

```
5 6 3
1 2 1
2 3 1
3 4 1
1 3 3
1 4 2
1 5 1
```
CODEFORCES 1282_A. Temporarily unavailable
```
1
1 1 0 0
```

```
1
1 1 1 0
```

```
1
1 1 -1 0
```

```
1
2 4 1 1
```

```
1
-10 20 -17 2
```

```
1
-3 2 2 0
```

```
1
-3 1 2 0
```

```
1
2 3 2 3
```

```
1
-1 3 -2 2
```

```
2
1 10 7 1
3 3 3 0
```

```
3
8 2 10 4
8 2 10 100
-10 20 -17 2
```

```
4
1 10 7 1
3 3 3 0
8 2 10 4
8 2 10 100
```

```
5
-10 20 -17 2
-3 2 2 0
-3 1 2 0
2 3 2 3
-1 3 -2 2
```

```
6
1 10 7 1
3 3 3 0
8 2 10 4
8 2 10 100
-10 20 -17 2
-3 2 2 0
```

```
7
1 10 7 1
3 3 3 0
8 2 10 4
8 2 10 100
-10 20 -17 2
-3 2 2 0
2 3 2 3
-1 3 -2 2
```

```
8
1 10 7 1
3 3 3 0
8 2 10 4
8 2 10 100
-10 20 -17 2
-3 2 2 0
2 3 2 3
-1 3 -2 2
```

```
9
1 10 7 1
3 3 3 0
8 2 10 4
8 2 10 100
-10 20 -17 2
-3 2 2 0
2 3 2 3
-1 3 -2 2
```
CODEFORCES 1302_A. Nash equilibrium
```
# 1. Incorrect input format

```
1 2
3 4
```

This input is incorrect because it contains more than two integers on a line.

```
3 5
7 7 7 7 7
7 7 7 7 7
7 7 7 7 7
7 7 7 7 7
```

This input is incorrect because the integers are not in the correct range.

```
# 2. Incorrect output format

```
1 4
```

This output is incorrect because it does not contain two integers.

```
0 0
```

This output is incorrect because it does not contain two integers.

```
# 3. Incorrect algorithm

```
def find_nash_equilibrium(A):
  """Finds a Nash equilibrium in the table A.

  Args:
    A: A table of integers n × m.

  Returns:
    A tuple (x, y) where x and y are the coordinates of the lexicographically
    minimum Nash equilibrium in the table.
  """

  for x in range(n):
    for y in range(m):
      if all(A[x][y] > A[x][y_1] for y_1 in range(m)) and all(
          A[x][y] < A[x_1][y] for x_1 in range(n)):
        return x, y

  return 0, 0


# 4. Runtime error

```
import sys


def find_nash_equilibrium(A):
  """Finds a Nash equilibrium in the table A.

  Args:
    A: A table of integers n × m.

  Returns:
    A tuple (x, y) where x and y are the coordinates of the lexicographically
    minimum Nash equilibrium in the table.
  """

  for x in range(n):
    for y in range(m):
      if all(A[x][y] > A[x][y_1] for y_1 in range(m)) and all(
          A[x][y] < A[x_1][y] for x_1 in range(n)):
        return x, y

  return 0, 0


def main():
  """The main function."""

  n, m = map(int, sys.stdin.readline().split())
  A = []
  for _ in range(n):
    A.append(list(map(int, sys.stdin.readline().split())))

  x, y = find_nash_equilibrium(A)
  print(x, y)


if __name__ == "__main__":
  main()
```

This program will run out of time because it is not using an efficient algorithm.

```
# 5. Memory error

```
import sys


def find_nash_equilibrium(A):
  """Finds a Nash equilibrium in the table A.

  Args:
    A: A table of integers n × m.

  Returns:
    A tuple (x, y) where x and y are the coordinates of the lexicographically
    minimum Nash equilibrium in the table.
  """

  for x in range(n):
    for y in range(m):
      if all(A[x][y] > A[x][y_1] for y_1 in range(m)) and all(
          A[x][y] < A[x_1][y] for x_1 in range(n)):
        return x, y

  return 0, 0


def main():
  """The main function."""

  n, m = map(int, sys.stdin.readline().split())
  A = []
  for _ in range(n):
    A.append(list(map(int, sys.stdin.readline().split())))

  x, y = find_nash_equilibrium(A)
  print(x, y)


if __name__ == "__main__":
  main()
```

This program will run out of memory because it is creating a new table of size n × m every time it calls the find_nash_equilibrium function.

```
# 6. Incorrect data type

```
CODEFORCES 1326_A. Bad Ugly Numbers
1. Incorrect input format:
```
1
a
```
2. Incorrect output format:
```
1
57a
```
3. Undefined behavior:
```
1
-1
```
4. Memory leaks:
```
1000000
1
```
5. Security vulnerabilities:
```
1
5789
```
6. Performance issues:
```
1000000
1000000
```
7. Other bugs:
```
1
123456789
```
CODEFORCES 1344_F. Piet's Palette
1. ```
1 0
```
2. ```
1 1
mix 1 1 R
```
3. ```
1 1
mix 1 1 Y
```
4. ```
1 1
mix 1 1 B
```
5. ```
1 2
mix 1 1 R
mix 1 1 Y
```
6. ```
2 3
mix 1 2 Y
RB 1 2
mix 1 2 W
```
7. ```
3 3
mix 1 2 Y
RB 1 2
mix 1 2 W
```
8. ```
1 3
RY 1 1
YB 1 1
mix 1 1 B
```
9. ```
3 8
mix 2 1 2 R
mix 2 1 3 Y
RY 2 2 3
RB 3 1 2 3
YB 3 1 2 3
mix 1 1 W
mix 1 2 B
mix 1 3 Y
```
CODEFORCES 1366_F. Jog Around The Graph
```
7 8 25
1 2 1
2 3 10
3 4 2
1 5 2
5 6 7
6 4 15
5 3 1
1 7 3
```
CODEFORCES 1387_B2. Village (Maximum)
```
4
1 2
2 3
3 4

7
4 2
5 7
3 4
6 3
1 3
4 5
```
CODEFORCES 1408_F. Two Different
```
1
```
```
2
1 2
```
```
3
1 2
3 1
```
```
4
1 2
3 4
```
```
5
1 2
3 4
5 1
```
```
6
1 2
3 4
5 6
```
```
7
1 2
3 4
5 6
7 1
```
```
8
1 2
3 4
5 6
7 8
```
CODEFORCES 1428_H. Rotary Laser Lock
```
# 5 3
# 4 1 5 2 3

# 3 4
# 1 2 3

# 3 4
# 2 3 1

# 4 4
# 1 2 3 4

# 4 4
# 4 3 2 1
```
CODEFORCES 1452_D. Radio Towers
```
2
3
5
10
200000
```
CODEFORCES 1476_B. Inflation
```
1
3 100
1 1 1
```
```
2
4 1
20100 1 202 202
3 100
1 1 1
```
```
3
5 100
1 1 1 1 1
2 50
1 2 3 4 5
4 100
10 10 10 10 10
```
CODEFORCES 1501_A. Alexey and Train
```
1
2
2 4
10 12
0
```

```
2
4
2 4
10 12
0 2
5
1 4
7 8
9 10
13 15
19 20
1 2 3 4 5
```
CODEFORCES 1526_C2. Potions (Hard Version)
```
1
1000000000
```

```
6
1 2 3 4 5 6
```

```
6
1 2 3 4 5 6
```

```
5
1 -1 -2 -3 -4
```

```
3
-1 2 3
```

```
6
-1000000000 -1000000000 -1000000000 -1000000000 -1000000000 -1000000000
```
CODEFORCES 158_A. Next Round
8 5
10 9 8 7 7 7 5 5


4 2
0 0 0 0
CODEFORCES 178_B3. Greedy Merchants
```
5 6
1 2
2 3
3 4
4 5
5 1
3
1 5
2 4
3 5
```

```
7 8
1 2
2 3
3 4
4 5
5 6
5 7
3 5
4 7
4
1 5
2 4
2 6
4 7
```

```
10 10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 1
4
1 5
2 4
3 5
4 7
```
CODEFORCES 1_B. Spreadsheets
```
1
A1
```

```
2
R1C1
A1
```

```
5
R5C5
R4C5
R3C5
R2C5
R1C5
```
CODEFORCES 224_C. Bracket Sequence
```
(((
```
CODEFORCES 249_A. Robo-Footballer
```
4 10 13 10 3 1

1 4 6 2 2 1

3 10 15 17 9 2
```
CODEFORCES 273_B. Dima and Two Sequences
```
1
1
2
7
```
```
2
1 2
2 3
11
```
```
5
1 2 3 4 5
6 5 4 3 2
1000000007
```
```
10
7 1 3 2 4 6 5 8 9
1 9 8 5 6 4 3 2 7
1000000007
```
CODEFORCES 296_D. Greg and Graph
```
1
0
1
```

```
2
0 5
4 0
1 2
```

```
4
0 3 1 1
6 0 400 1
2 4 0 1
1 1 1 0
4 1 2 3
```

```
6
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
1 2 3 4 5 6
```

```
6
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
1 3 5 4 2 6
```

CODEFORCES 31_B. Sysadmin Bob
```
a@aa@a
a@a@a
@aa@a
CODEFORCES 344_B. Simple Molecules
1. Incorrect input format:
```
1 2 3
```
2. Malformed input data:
```
1 2 a
```
3. Incorrect logic:
```
1 2 3
0 0 0
```
4. Incorrect output format:
```
1 2 3
a b c
```
5. Other bugs:
```
a 2 3
```
CODEFORCES 367_D. Sereja and Sets
```
3 2 2
1 2
2 1 3
```

```
5 1 1
5 4 5 3 2 1
```

```
7 3 1
4 1 3 5 7
2 2 6
1 4
```
CODEFORCES 38_H. The Great Marathon
```
3 2
1 2 1
2 3 1
1 1 1 1
```

```
4 5
1 2 2
2 3 1
3 4 2
4 1 2
1 3 3
1 2 1 1
```

```
3 3
1 2 2
2 3 1
3 1 2
1 1 1 1
```
CODEFORCES 411_B. Multi-core Processor
```
1 1 1
```

```
1 1 1
0
```

```
2 1 1
0 1
```

```
2 1 1
0 0
```

```
3 1 1
1
```

```
3 2 1
1 1
```

```
4 3 5
1 0 0
1 0 2
2 3 1
3 2 0
```

```
4 4 5
1 0 0
1 0 0
2 0 0
3 0 0
```

```
5 5 5
1 0 0 0
0 1 0 0
0 0 1 0
0 0 0 1
0 0 0 0
```

```
10 10 10
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
```
CODEFORCES 439_A. Devu, the Singer and Churu, the Joker
```
3 30
2 2 1
```

```
3 20
2 1 1
```

```
10 100
1 2 3 4 5 6 7 8 9 10
```

```
10 100
5 5 5 5 5 5 5 5 5 5
```

```
100 10000
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 460_C. Present
1. Incorrect input format:
```
1 1 1
```
2. Incorrect output format:
```
1 1 1
```
3. Incorrect logic:
```
1 1 1
```
4. Runtime error:
```
1000000000 1000000000 1
```
5. Memory leak:
```
1000000000 1000000000 1
```
6. Security vulnerability:
```
1000000000 1000000000 1
```
CODEFORCES 484_B. Maximum Value
```
1
999999999
```
```
10
1 2 3 4 5 6 7 8 9
```
```
5
5 4 3 2 1
```
```
5
4 4 4 4 4
```
```
3
5 1 2
```
CODEFORCES 508_B. Anton and currency you all know
```
527
4573
1357997531
```
CODEFORCES 530_H. Points in triangle
1
1 1

2
2 1
1 2
CODEFORCES 557_C. Arthur and Table
```
1
1
1
```
```
2
1 5
3 2
```
```
3
2 4 4
1 1 1
```
```
6
2 2 1 1 3 3
4 3 5 5 2 1
```
```
5
3 4 2 5 5
7 1 5 9 1
```
CODEFORCES 583_A. Asphalting Roads
1. ```
1
```

2. ```
2
1 1
```

3. ```
3
1 1
2 2
3 3
```

4. ```
4
1 1
2 1
1 2
3 3
```

5. ```
5
1 1
2 2
3 3
4 4
5 5
```

6. ```
6
1 1
2 1
3 2
4 3
5 4
6 5
```

7. ```
7
1 1
2 1
3 2
4 3
5 4
6 5
7 6
```

8. ```
8
1 1
2 1
3 2
4 3
5 4
6 5
7 6
8 7
```

9. ```
9
1 1
2 1
3 2
4 3
5 4
6 5
7 6
8 7
9 8
```

10. ```
10
1 1
2 1
3 2
4 3
5 4
6 5
7 6
8 7
9 8
10 9
```
CODEFORCES 605_A. Sorting Railway Cars
1. ```
5
4 1 2 5 3
```
2. ```
4
4 1 3 2
```
3. ```
5
1 2 3 4 5
```
4. ```
10
10 9 8 7 6 5 4 3 2 1
```
5. ```
100000
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
```
CODEFORCES 627_B. Factory Repairs
```
5 2 2 1 8
1 1 2
1 5 3
1 2 1
2 2
1 4 2
1 3 2
2 1
2 3
```
CODEFORCES 651_B. Beautiful Paintings
```
5
20 30 10 50 40
```
```
4
200 100 100 200
```
```
10
100 100 100 100 100 100 100 100 100 100
```
```
10
100 100 100 100 100 90 80 70 60 50
```
```
1
999
```
CODEFORCES 676_E. The Last Fight Between Human and AI
```
1 2
-1
?
```
```
2 100
-10000
0
1
```
```
4 5
?
1
?
1
?
```
```
4 5
?
1
?
1
?
1
```
```
5 5
?
1
1
?
1
?
```
CODEFORCES 69_E. Subsegments
**Incorrect implementation of the sliding window algorithm:**

```
n, k = map(int, input().split())
a = [int(input()) for _ in range(n)]

ans = []
for i in range(n - k + 1):
    window = set(a[i:i + k])
    ans.append(max(window))

print(*ans)
```

**Incorrect handling of edge cases:**

```
n, k = map(int, input().split())
a = [int(input()) for _ in range(n)]

ans = []
for i in range(n - k + 1):
    window = set(a[i:i + k])
    if len(window) == 1:
        ans.append(max(window))
    else:
        ans.append("Nothing")

print(*ans)
```

**Incorrect use of data structures:**

```
n, k = map(int, input().split())
a = [int(input()) for _ in range(n)]

ans = []
for i in range(n - k + 1):
    window = []
    for j in range(i, i + k):
        window.append(a[j])
    ans.append(max(window))

print(*ans)
```

**Incorrect reasoning about the problem:**

```
n, k = map(int, input().split())
a = [int(input()) for _ in range(n)]

ans = []
for i in range(n - k + 1):
    max_ele = a[i]
    for j in range(i + 1, i + k):
        if a[j] > max_ele:
            max_ele = a[j]
    ans.append(max_ele)

print(*ans)
```
CODEFORCES 721_B. Passwords
```
# 5 2
# cba
# abc
# bb1
# abC
# ABC
# abc

# 4 100
# 11
# 22
# 1
# 2
# 22
```
CODEFORCES 742_E. Arpa’s overnight party and Mehrdad’s silent entering
```
3
1 4
2 5
3 6
```
CODEFORCES 766_B. Mahmoud and a Triangle
```
1
1000000000
```

```
2
1 1
```

```
3
1 1 1
```

```
4
1 1 1 1
```

```
5
1 5 3 2 4
```

```
6
1 1 1 1 1 1
```
CODEFORCES 78_A. Haiku
1. Incorrect input format
```
a
b
c
```
2. Incorrect output format
```
YES
```
3. Incorrect calculation of the number of syllables
```
on codeforces
beta round is running
 a rustling of keys
```
4. Incorrect determination of whether the poem is a haiku
```
a
b
c
```
5. Other bugs
```
a
b
c
```
CODEFORCES 810_C. Do you want a date?
```
1
1000000000
```

```
2
1 2
```

```
3
5 2 1
```

```
5
1 2 3 4 5
```

```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 835_F. Roads in the Kingdom
```
3
1 2 4
2 3 5
1 3 1
```

```
5
2 3 7
3 1 9
4 1 8
3 5 4
4 5 5
```

```
10
1 2 1
2 3 2
3 4 3
4 5 4
5 6 5
6 7 6
7 8 7
8 9 8
9 10 9
```

```
100000
1 2 1
2 3 2
3 4 3
4 5 4
5 6 5
6 7 6
7 8 7
8 9 8
9 10 9
```
CODEFORCES 856_B. Similar Words
```
1
3
aba
baba
aaab
```
```
2
aa
a
```
CODEFORCES 883_B. Berland Army
```
5 3 3
0 3 0 0 2
2 4
3 4
3 5

2 2 2
2 1
1 2
2 1

7 6 5
0 4 5 4 1 0 0
6 1
3 6
3 1
7 5
7 1
7 4
```
CODEFORCES 906_B. Seating of Students
```
2 4
```
```
2 1
```
```
1 2
```
```
3 3
```
```
10 10
```
```
100 100
```
CODEFORCES 926_D. Choose Place
```
..-**-..
..-**-..
..-..-..
..-..-..
..-..-..
..-..-..

..-*.-..
..-*.-..
..-*.-..
..-*.-..
..-*.-..
..-*.-..

*--**--*
*--**--*
*--**--*
*--**--*
*--**--*
*--**--*

*.-*.-**
*.-*.-**
*.-*.-**
*.-*.-**
*.-*.-**
*.-*.-**

**-**-*.
*.-*.-**
**-**-**
**-**-**
..-..-..
..-**-..

**-*-.-*
**-*-.-*
**-*-.-*
**-*-.-*
**-*-.-*
**-*-.-*

*--**--*
*--**--*
*--**--*
*--**--*
*--**--*
*--**--*

*--**--*
*--**--*
*--**--*
*--**--*
*--**--*
*--**--*

..-**-..
..-**-..
..-..-..
..-..-..
..-..-..
..-..-..

..-**-..
..-**-..
..-**-..
..-**-..
..-**-..
..-**-..
```
CODEFORCES 955_B. Not simply beatiful strings
```
ababa
zzcxx
yeee
```
CODEFORCES 981_D. Bookshelves
```
10 4
9 14 28 1 7 13 15 29 2 31

10 4
9 14 28 1 7 13 15 29 2 31

7 3
3 14 15 92 65 35 89

10 4
9 14 28 1 7 13 15 29 2 31
```
HACKEREARTH 2a-bear-and-all-permutations-1
```
3
4 987654323
5 11
12 2
```
HACKEREARTH big-p-and-math-15
1 2
HACKEREARTH count-numbers-7
10 1
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
 1 1000000000
1000000000 10000000000
2 3 1 1000000000
1 1000000000
1 1000000000
1000000000 1000000001
2 3
1 1000000000000000000
1 10000000000000000000
1 10000000000000000000
HACKEREARTH finding-dinosaurs-1
```
1 5 100000 1
a 1
```
HACKEREARTH interesting-path
1. Incorrect input format

```
10 1 2 3 4 5 6 7 8 9
```

2. Incorrect output format

```
10 1 2 3 4 5 6 7 8 9
2
```

3. Incorrect algorithm

```
10 1 2 3 4 5 6 7 8 9
```

4. Incorrect data structures

```
10 1 2 3 4 5 6 7 8 9
```

5. Incorrect error handling

```
10 1 2 3 4 5 6 7 8 9
```

6. Incorrect unit tests

```
10 1 2 3 4 5 6 7 8 9
```
HACKEREARTH maximum-prize
5
5 5
1 1 1 1 1
4 0
1 1 1 1
3 1
8 9 8
6 5
100 200 300 400 500 1000
2 1
1 2
HACKEREARTH optimal-permutation
2
2
7
HACKEREARTH range-sum-2
```
# 1. Incorrect input format

1 2

# 2. Incorrect data type

a b

# 3. Incorrect range of values

-1 0

# 4. Incorrect absolute difference

1000000000000 1000000000001

# 5. Incorrect use of the BigInteger class

1000000000000 + 1000000000000

# 6. Incorrect calculation

1000000000000 + -1000000000000

# 7. Incorrect output format

1000000000000
```
HACKEREARTH small-is-cute
**1. Using the wrong data type**

```
n = int(input())
nums = [int(input()) for _ in range(n)]

ans = ""
for num in nums:
    ans += str(num)

print(ans)
```

**2. Not handling negative integers correctly**

```
n = int(input())
nums = [int(input()) for _ in range(n)]

ans = ""
for num in nums:
    if num < 0:
        print("Invalid input")
        exit(1)
    ans += str(num)

print(ans)
```

**3. Not considering the order of the integers**

```
n = int(input())
nums = [int(input()) for _ in range(n)]

nums.sort()

ans = ""
for num in nums:
    ans += str(num)

print(ans)
```

**4. Not handling duplicate integers correctly**

```
n = int(input())
nums = [int(input()) for _ in range(n)]

nums.sort()

ans = ""
for i in range(n):
    ans += str(nums[i])

print(ans)
```

**5. Not handling invalid input correctly**

```
try:
    n = int(input())
    nums = [int(input()) for _ in range(n)]

    ans = ""
    for num in nums:
        ans += str(num)

    print(ans)
except ValueError:
    print("Invalid input")
```
HACKEREARTH the-witches-of-hegwarts-1
```
1
2
3
4
5
```
ATCODER p02553 AtCoder Beginner Contest 178 - Product Max
```
1 2 1 1
3 5 -4 -2
-1000000000 0 -1000000000 0
0 -1 0 1
```
ATCODER p02684 AtCoder Beginner Contest 167 - Teleporter
```
4 5
3 2 4 1

6 727202214173249351
6 5 2 5 3 2
```
ATCODER p02812 AtCoder Beginner Contest 150 - Count ABC
```
3
ABC

10
ZABCDBABCQ

19
THREEONEFOURONEFIVE

33
ABCCABCBABCCABACBCBBABCBCBCBCABCB
ATCODER p02949 AtCoder Beginner Contest 137 - Coins Respawn
```
3 3 10
1 2 20
2 3 30
1 3 45
```
```
2 2 10
1 2 100
2 2 100
```
```
4 5 10
1 2 1
1 4 1
3 4 1
2 2 100
3 3 100
```
```
1 1 0
```
ATCODER p03085 AtCoder Beginner Contest 122 - Double Helix
```
A
G
```
ATCODER p03230 Tenka1 Programmer Beginner Contest - Crossing
3
4
ATCODER p03380 AtCoder Beginner Contest 094 - Binomial Coefficients
1. ```
n = 3
a = [1, 2, 3]
```
2. ```
n = 2
a = [100, 0]
```
3. ```
n = 1
a = [1]
```
4. ```
n = 0
a = []
```
5. ```
n = -1
a = []
```
ATCODER p03545 AtCoder Beginner Contest 079 - Train Ticket
```
0000
0990
9999
```
ATCODER p03699 AtCoder Beginner Contest 063 - Bugged
1. Incorrect variable type
```
3
5 10 15
```

2. Incorrect calculation
```
3
10 10 15
```

3. Incorrect output format
```
3
10 10 15
```

4. Missing error handling
```
3
abc 10 15
```
ATCODER p03854 AtCoder Beginner Contest 049 - Daydream
```
dream
erasedreamer
dreamerer
ATCODER p04021 AtCoder Grand Contest 003 - BBuBBBlesort!
4
2 4 3 1
4
a 4 3 1
4
2 4 4 1
4
1 2 3 4
4
4 3 2 1
AIZU p00105 Book Index
**Incorrect input format**

```
style 12
even 25
introduction 3
easy 9
style 7
document 13
style 21
even 18
1234567890
```

**Malformed data**

```
style 12
even 25
introduction 3
easy 9
style 7
document 13
style 21
even 18
even 18
```

**Incorrect output format**

```
style
12
even
25
introduction
3
easy
9
document
13
style
7 12 21
even
18
18
```

**Bugs in the code**

```
style 12
even 25
introduction 3
easy 9
style 7
document 13
style 21
even 18
word 1
```

**User errors**

```
style 12
even 25
introduction 3
easy 9
style 7
document 13
style 21
even 18
hello world
```
AIZU p00239 Calorie Counting
1
3
1 7 14 47
2 5 35 55
3 6 3 59
10 15 50 400
1
1 8 10 78
2 4 18 33
10 10 50 300
0
AIZU p00410 Dungeon 3
```
5 4
2
1
3
6
4
1 2
2 3
2 4
4 5
```
```
1 1
1
1
```
```
10 10
1
2
3
4
5
6
7
8
9
10
```
```
None
```
AIZU p00615 Traffic Analysis
```
# 1. Incorrect input format
1 1
10
50

# 2. Incorrect output format
4 5
20 35 60 70
15 30 40 80 90
100
```
AIZU p00754 The Balance of the World
```
([(([[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]
```
AIZU p00891 Where's Wally
48 3 3
gAY4I4wA
gIIgIIgg
w4IAYAg4
g
g
w
153 3 3
kkkkkkkkkkkkkkkkkkkkkkkkkg
SSSSSSSSSSSSSSSSSSSSSSSSSQ
JJJJJJJJJJJJJJJJJJJJJJJJJI
g
Q
I
1 1 2
A
A
A
384 3 2
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/A
CDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/AB
A
A
0 0 0
AIZU p01023 Caterpillar
```
5 8 3
#.......
#.####2#
#.#.3..#
#.######
.1Sabcde

5 8 3
.......
.####2#
.#.3..#
.######
.1Sabcde

2 6 2
.1.baS
.2.cde

2 6 2
.1#baS
.2.cde
AIZU p01155 Ruins
```
33 40
57 144
4 5
0 0
```
AIZU p01294 For the Peace
```
3 3
3 4 1 1
2 1 5
2 3 3
3 3
3 2 3 1
2 1 5
2 3 3
0 0
```
AIZU p01463 Runaway Domino
```
3
-10 0
0 0
0 10
-1 0 1
3 0 2
```
AIZU p01622 Twin book report
```
4
1 1
3 1
4 1
2 1
3
5 3
1 2
1 2
1
1000 1000
10
5 62
10 68
15 72
20 73
25 75
30 77
35 79
40 82
45 100
815 283
6
74 78
53 55
77 77
12 13
39 42
1 1
0
```
AIZU p01775 Rescue a Postal Worker
5 6 1 1
1 3 5
1 2 2
2 3 1
3 5 4
3 4 2
4 5 3
3 5
AIZU p01909 Graduation Ceremony
```
RLU
1
```
AIZU p02048 Great Strategy for Bring Up Grade

AIZU p02190 Set
6
8 6 9 1 2 1
AIZU p02344 Weighted Union Find Trees
```
3 6
0 0 1 3
0 0 2 2
1 0 1
1 1 2
0 0 2 1
1 0 2
```
AIZU p02477 Multiplication of Big Integers II
1000000000 1000000000