CODECHEF arrgame2
1
1
2
3
4
2
3
1
3
2
2
CODECHEF clco06
2
345
543
568
865
CODECHEF fest03
3
codechef.com
facebook.com/home/
ssss
CODECHEF lecandy
1
4 7
3 2 3 1
CODECHEF poker
```
# 1. Incorrect input format.

1
AHKQT

# 2. Incorrect card values.

1
10A5

# 3. Incorrect card suits.

1
AHKHQT5

# 4. Incorrect card order.

1
5AHKHQT

# 5. Incorrect output format.

1
AHKHQT royal flush
CODECHEF subbxor
1
5 2
4 1 3 2 7
3
1
5 3
3 4 4 1 2
2
2
1 1
0
2
5 5
1 2 3 4 5
1
3
10 10
9 9 9 9 9 9 9 9 9 9
10

CODEFORCES 100_C. A+B
1. **Incorrect input format**

```
1
2
```

2. **Incorrect calculation of the sum**

```
1000000000000000000
1000000000000000000
```

3. **Incorrect output format**

```
1000000000000000000
```
CODEFORCES 1032_G. Chattering
```
# Incorrect calculation of the number of seconds until all parrots start chattering.

n = int(input())
r = list(map(int, input().split()))

ans = []
for i in range(n):
    ans.append(sum(r[i:i + 2]))

print(*ans)
```

```
# Incorrect calculation of the respect levels of the parrots to the right and to the left of the parrot that starts chattering.

n = int(input())
r = list(map(int, input().split()))

ans = []
for i in range(n):
    if i == 0:
        ans.append(r[0] + r[n - 1])
    elif i == n - 1:
        ans.append(r[i - 1] + r[0])
    else:
        ans.append(r[i] + r[i + 1] + r[i - 1])

print(*ans)
```

```
# Incorrect use of the modulus operator (%).

n = int(input())
r = list(map(int, input().split()))

ans = []
for i in range(n):
    ans.append(sum(r[i:i + 2]) % 2)

print(*ans)
```

```
# Incorrect use of the range() function.

n = int(input())
r = list(map(int, input().split()))

ans = []
for i in range(n):
    ans.append(sum(r[i:i + 2]))

print(*ans)
```

```
# Incorrect use of the enumerate() function.

n = int(input())
r = list(map(int, input().split()))

ans = []
for i, parrot in enumerate(r):
    ans.append(sum(r[i:i + 2]))

print(*ans)
```
CODEFORCES 1055_E. Segments on the Line
```
# 1. Incorrect input format

1 3 1 1
1

# 2. Incorrect implementation of the algorithm

3 3 2 2
1 3 2
1 2
2 3
-1

# 3. Runtime errors

1000000 1000000 1000000 1000000
1 2 3 4 5 6 7 8 9 10
1 1000000
1 1000000
1 1000000
1 1000000
1 1000000
...

# 4. Memory errors

1000000000 1000000000 1000000000 1000000000
1 2 3 4 5 6 7 8 9 10
1 1000000000
1 1000000000
1 1000000000
1 1000000000
1 1000000000
...

# 5. Incorrect output

5 3 3 5
5 5 2 1 1
1 2
2 3
3 4
-1
```
CODEFORCES 1077_F1. Pictures with Kittens (easy version)
```
5 2 3
5 1 3 10 1

10 5 3
10 30 30 70 10 10

4 3 1
1 100 1 1
```
CODEFORCES 1098_E. Fedya the Potter
```
1
100000
```
```
2
1 1
```
```
5
1 2 3 4 5
```
```
5
10 9 8 7 6
```
```
10
20 19 18 17 16 15 14 13 12 11
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
1000
1000
```
```
1000000000
1000000000
```
CODEFORCES 1119_F. Niyaz and Small Degrees
```
1
```
```
2 1 1
```
```
5
1 2 1
1 3 2
1 4 3
1 5 4
```
```
4
1 2 1
2 3 2
3 4 5
4 5 14
```
```
5
1 2 1
1 3 2
2 3 3
3 4 4
4 5 5
```
```
5
1 2 1
2 3 2
3 4 5
4 5 14
5 1 2
```
```
15
1 2 1
1 3 2
1 4 3
1 5 4
2 6 5
2 7 6
3 8 7
3 9 8
4 10 9
4 11 10
5 12 11
5 13 12
6 14 13
7 15 14
```
```
10
1 2 1
1 3 2
1 4 3
1 5 4
2 6 5
2 7 6
3 8 7
3 9 8
4 10 9
4 11 10
```
CODEFORCES 1146_C. Tree Diameter
```
1
5
1 2 1
1 3 2
1 4 3
1 5 4
```
CODEFORCES 1167_C. News Distribution
**Incorrect implementation of the graph traversal algorithm:**

```
10 3
2 1 4 5
2 6 9
1 3 7 8
```

**Incorrect use of the union-find data structure:**

```
10 3
2 1 4 5
2 6 9
1 3 7 8
```

**Incorrect handling of the case where the graph is disconnected:**

```
10 3
2 1 4 5
2 6 9
1 3 7 8
```

**Incorrect handling of the case where the graph has a cycle:**

```
10 3
2 1 4 5
2 6 9
1 3 7 8
```

**Incorrect handling of the case where the graph has multiple sources of the news:**

```
10 3
2 1 4 5
2 6 9
1 3 7 8
```
CODEFORCES 1185_F. Two Pizzas
```
3 4
2 6 7
4 2 3 9 5
3 2 3 9
100 1 7
400 3 3 2 5
100 2 9 2
500 3 2 9 5
```
CODEFORCES 1204_D1. Kirk and a Binary String (easy version)
```
010

110

0001111

0111001100111011101000
CODEFORCES 1221_B. Knights
```
3

5

7

10
```
CODEFORCES 1246_E. To Make 1
**Incorrect input format:**

```
2 4
1 2 3
```

**Incorrect calculation of f(x):**

```
3 2
1 2 3
```

**Incorrect reasoning about the problem:**

```
3 2
1 2 3
```

**Incorrect implementation of the solution:**

```
3 2
1 2 3
```

**Incorrect testing:**

```
3 2
1 2 3
```
CODEFORCES 1266_C. Diverse Matrix
```
2 2
```

```
1 1
1 1
```

```
5 5
```

```
5 5 5 5 5
5 5 5 5 5
5 5 5 5 5
5 5 5 5 5
5 5 5 5 5
```

```
0
```
CODEFORCES 1287_E1. Madhouse (Easy version)
10

aabc
CODEFORCES 1307_E. Cow and Treats
```
5 2
1 1 1 1 1
1 2
1 3
```
CODEFORCES 1330_E. Drazil Likes Heap
```
1
3 2
7 6 3 5 4 2 1
```
```
2
3 2
7 6 5 4 3 2 1
```
```
1
4 3
7 6 3 5
```
CODEFORCES 1350_E. Orac and Game of Life
```
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, m, t;
    scanf(" %d %d %d ", &n, &m, &t);
    int **a;
    a = malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++) {
        a[i] = malloc(m * sizeof(int));
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf(" %d ", &a[i][j]);
        }
    }
    for (int i = 0; i < t; i++) {
        int i, j, p;
        scanf(" %d %d %d ", &i, &j, &p);
        int flag = 0;
        for (int k = -1; k <= 1; k++) {
            for (int l = -1; l <= 1; l++) {
                if (i + k >= 0 && i + k < n && j + l >= 0 && j + l < m && a[i + k][j + l] == a[i][j]) {
                    flag = 1;
                }
            }
        }
        if (flag == 0) {
            printf(" 1 ");
        } else {
            printf(" 0 ");
        }
    }
    return 0;
}
```
CODEFORCES 1371_A. Magical Sticks
1
2
3
100
10000
100000
1000000
10000000
100000000
CODEFORCES 1393_D. Rarity and New Dress
1. ```
3 3
aaa
aaa
aaa
```
2. ```
3 4
abab
baba
abab
```
3. ```
5 5
zbacg
baaac
aaaaa
eaaad
weadd
```
4. ```
1 10
a
```
5. ```
10 10
abcdefghijklmnopqrstuvwxyz
```
CODEFORCES 1418_C. Mortal Kombat Tower
```
1
3
1 1 1
```
```
1
5
1 1 1 1 0
```
```
1
1
1
```
```
5
1 0 0 1 0
```
```
2
4
1 0 1 1
1
```
```
3
1 0 0
```
```
1
10
1 1 1 1 0 0 1 1 1
```
```
1
7
1 0 0 1 1 1 0
```
```
3
10
1 0 0 1 1 1 0 1 1
1
0
```
```
1
10
1 0 0 1 1 1 0 1 1
```
CODEFORCES 1436_B. Prime Square
```
1
4
```
CODEFORCES 145_E. Lucky Queries
```
1 1
4
count
```

This input tests for incorrect input format, incorrect data type, and incorrect logic.

```
1 1
4
switch 1 1
count
```

This input tests for off-by-one errors.

```
5 3
444
count
switch 1 1
count
```

This input tests for memory leaks.

```
1 1
4
count
switch 1 1
count
switch 1 1
count
```

This input tests for race conditions.

```
1 1
4
count
switch 1 1
count
switch 1 1
count
switch 1 1
count
```

This input tests for deadlocks.

```
1 1
4
count
switch 1 1
count
switch 1 1
count
switch 1 1
count
switch 1 1
count
```

This input tests for security vulnerabilities.
CODEFORCES 1486_A. Shifting Stacks
1. ```
1
1
```
2. ```
2
1 2
2 1
```
3. ```
3
1 2 3
3 1 2
3 2 1
```
4. ```
4
1 2 3 4
5 5 5 5
6 6 6 6
```
5. ```
10
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
CODEFORCES 150_E. Freezing with Style
```
6 3 4
1 2 1
2 3 1
3 4 1
4 5 1
5 6 1

6 3 4
1 2 1
2 3 1
3 4 1
4 5 2
5 6 2

5 1 4
1 2 1
1 3 4
3 4 7
3 5 2

8 3 6
1 2 9
2 3 7
3 4 7
4 5 8
5 8 2
3 6 3
2 7 4
```
CODEFORCES 1536_C. Diluc and Kaeya
```
1
10
DDKDKDKD
```
```
4
2
DD
4
DDDDDD
1
D
```
```
2
2
DD
3
DK
```
```
4
5
DDDDD
```
```
1
1
D
```
```
3
3
DDK
6
DDDDDD
```
```
2
2
DD
3
DK
```
```
4
10
DKDKDDDDK
```
CODEFORCES 163_B. Lemmings
```
5 3 2
1 2 3 2 1
1 2 1 2 10
```
CODEFORCES 183_C. Cyclic Coloring
```
4 4
1 2
2 1
3 4
4 3
```

```
5 2
1 4
2 5
```

```
4 5
1 2
2 3
3 1
2 4
4 1
```

```
4 4
1 1
1 2
2 1
1 2
```

```
2 1
1 2
```
CODEFORCES 207_B2. Military Trainings
```
3
2
1
1
```
```
5
2
2
2
2
2
```
CODEFORCES 230_D. Planets
**Incorrect input format**

```
2 0
```

**Incorrect data type**

```
2 1
a 1
```

**Off-by-one errors**

```
4 6
1 2 2
1 3 3
1 4 8
2 3 4
2 4 5
3 4 3
0
1 3
2 3 4
0
```

**Undefined behavior**

```
-1 0
```

**Memory leaks**

```
5 0
```

**Race conditions**

```
4 2
1 2 2
2 1 4
1 3
2 3
```

**Deadlocks**

```
4 2
1 2 2
2 1 4
1 3
2 3
```

**Security vulnerabilities**

```
5 1
1 2 3
```

**Bugs in third-party libraries**

```
5 1
1 2 3
```

**Bugs in the compiler or operating system**

```
5 1
1 2 3
```
CODEFORCES 256_C. Furlo and Rublo and Game
1. **Input that tests for the correct data type**

```
1
1000000000000
```

This input will cause an overflow error if the program uses the `int` data type to store the number of coins.

2. **Input that tests for the correct algorithm**

```
2
1000000000000 1000000000000
```

This input will test whether the program can correctly handle the case where Furlo can make a move that leaves Rublo with no legal moves.

3. **Input that tests for special cases**

```
1
0
```

This input will test whether the program can correctly handle the case where a pile has zero coins.

4. **Input that tests for incorrect variable names**

```
1
a
```

This input will test whether the program can correctly handle the case where a variable name is not descriptive.

5. **Input that tests for missing comments**

```
1
1
```

This input will test whether the program includes any comments.
CODEFORCES 27_C. Unordered Subsequence
```
1
1
```

```
3
1 2 3
```

```
5
67 499 600 42 23
```

```
3
2 3 1
```
CODEFORCES 302_B. Eugeny and Play List
```
# 302B. Eugeny and Play List

n,m=map(int,input().split())
A=[list(map(int,input().split())) for _ in range(n)]
s=sum(A[i][1] for i in range(n))
ans=[0]*m
for i in range(m):
    for j in range(n):
        if A[j][0]*A[j][1]>=i+1:
            ans[i]=j+1
            break

print(*ans)
```
CODEFORCES 329_C. Graph Reconstruction
1. Incorrect input format
```
1 0
```

2. Incorrect data
```
1 2
1 2
```

3. Incorrect logic
```
5 4
1 2
2 3
3 4
4 1
```

4. Runtime error
```
1000000000 1000000000
```

5. Memory error
```
1000000000 1000000000
```

6. Timeout
```
1000000000 1000000000
```
CODEFORCES 350_A. TL
2 3
1 2 3
1 3 4
CODEFORCES 374_B. Inna and Nine
1. **Incorrect input format**

```
123456789123456789
```

2. **Incorrect output format**

```
123456789123456789
```

3. **Incorrect calculation of the number of distinct numbers**

```
123456789123456789
```

4. **Incorrect use of the %lld specifier**

```
123456789123456789
```

5. **Incorrect use of the cin and cout streams**

```
123456789123456789
```

6. **Incorrect use of the %I64d specifier**

```
123456789123456789
```
CODEFORCES 396_D. On Sum of Number of Inversions in Permutations
```
1
1
```
```
2
1 2
```
```
3
1 3 2
```
```
4
1 4 3 2
```
```
5
1 5 4 3 2
```
CODEFORCES 418_E. Tricky Password
1. Incorrect input format
```
5
1 2 3 4 5
3
1 2 3
1 3 3
2 3 4
```

2. Incorrect output format
```
5
1 2 3 4 5
3
1 2 3
1 3 3
2 3 4
1
```

3. Incorrect calculation of the password
```
5
1 2 3 4 5
3
1 2 3
1 3 3
2 3 4
8
```

4. Memory leak
```
5
1 2 3 4 5
3
1 2 3
1 3 3
2 3 4
```

5. Time complexity
```
5
1 2 3 4 5
3
1 2 3
1 3 3
2 3 4
```

6. Incorrect error handling
```
5
1 2 3 4 5
3
1 2 3
1 3 3
2 3 4
```
CODEFORCES 445_C. DZY Loves Physics
```
# 1. Incorrect implementation of Union-Find

2 2
1 2
1 2 1
```

```
# 2. Incorrect implementation of Kruskal's algorithm

5 6
13 56 73 98 17
1 2 56
1 3 29
1 4 42
2 3 95
2 4 88
3 4 63
```

```
# 3. Incorrect implementation of Prim's algorithm

5 6
13 56 73 98 17
1 2 56
1 3 29
1 4 42
2 3 95
2 4 88
3 4 63
```

```
# 4. Incorrect implementation of Dijkstra's algorithm

5 6
13 56 73 98 17
1 2 56
1 3 29
1 4 42
2 3 95
2 4 88
3 4 63
```

```
# 5. Incorrect implementation of Bellman-Ford algorithm

5 6
13 56 73 98 17
1 2 56
1 3 29
1 4 42
2 3 95
2 4 88
3 4 63
```
CODEFORCES 467_D. Fedor and Essay
```
1
R
0
0
```
```
1
r
0
0
```
```
2
Rr
aa
0
2
```
```
1
R
0
1
```
```
3
Rr
a
b
3
xr y
aA xr
zz Z
2
3
```
```
3
AbRb r Zz
4
xR abRb
aA xr
zz Z
xr y
2
6
```
```
2
RuruRu fedya
1
ruruRU fedor
1
10
```
CODEFORCES 48_G. Galaxy Union
```
3
1 2 3
2 3 2
1 3 1
```
CODEFORCES 513_G2. Inversions problem
```
# 513_G2. Inversions problem

n, k = map(int, input().split())
p = list(map(int, input().split()))

for _ in range(k):
    l, r = map(int, input().split())
    p[l:r+1] = p[l:r+1][::-1]

inv = 0
for i in range(n):
    for j in range(i+1, n):
        if p[i] > p[j]:
            inv += 1

print(inv / (n*(n-1) / 2))
```
CODEFORCES 53_E. Dead Ends
```
3 3 2
1 2
2 3
1 3
```
```
4 6 2
1 2
2 3
3 4
4 1
1 3
2 4
```
```
4 6 3
1 2
2 3
3 4
4 1
1 3
2 4
```
CODEFORCES 568_A. Primes or Palindromes?
**1. Incorrect calculation of the number of palindromic numbers**

```
a = int(input())
b = int(input())

def is_palindrome(n):
    s = str(n)
    return s == s[::-1]

def count_palindromic_numbers(n):
    return 2 * (n - 1) // 10 ** floor(log10(n))

if count_palindromic_numbers(a * b) <= a * count_palindromic_numbers(b):
    print(a * b)
else:
    print("Palindromic tree is better than splay tree")
```

**2. Incorrect calculation of the number of primes**

```
a = int(input())
b = int(input())

def is_prime(n):
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_primes(n):
    count = 0
    for i in range(2, n + 1):
        if is_prime(i):
            count += 1
    return count

if count_primes(a * b) <= a * count_primes(b):
    print(a * b)
else:
    print("Palindromic tree is better than splay tree")
```

**3. Incorrect comparison of the number of primes and palindromic numbers**

```
a = int(input())
b = int(input())

def is_prime(n):
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_primes(n):
    count = 0
    for i in range(2, n + 1):
        if is_prime(i):
            count += 1
    return count

def count_palindromic_numbers(n):
    return 2 * (n - 1) // 10 ** floor(log10(n))

if count_primes(a * b) < a * count_palindromic_numbers(b):
    print(a * b)
else:
    print("Palindromic tree is better than splay tree")
```

**4. Incorrect output**

```
a = int(input())
b = int(input())

def is_prime(n):
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_primes(n):
    count = 0
    for i in range(2, n + 1):
        if is_prime(i):
            count += 1
    return count

def count_palindromic_numbers(n):
    return 2 * (n - 1) // 10 ** floor(log10(n))

if count_primes(a * b) <= a * count_palindromic_numbers(b):
    print(a * b)
else:
    print("Palindromic tree is better than splay tree")
```

**5. Other bugs**

```
a = int(input())
b = int(input())

def is_prime(n):
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def count_primes(n):
    count = 0
    for i in range(2, n + 1):
        if is_prime(i):
            count += 1
    return count

def count_palindromic_numbers(n):
    return 2 * (n - 1) // 10 ** floor(log10(n))

if count_primes(a * b) <= a * count_palindromic_numbers(b):
    print(a * b)
else:
    print("Palindromic tree is better than splay tree")
```
CODEFORCES 589_d
**1. Off-by-one error**

```
n = int(input())
people = []
for i in range(n):
    people.append(list(map(int, input().split())))

def get_overlaps(i):
    overlaps = 0
    for j in range(i + 1, n):
        if (people[i][1] <= people[j][1] and people[i][2] >= people[j][1]) or (people[i][1] >= people[j][1] and people[i][1] <= people[j][2]):
            overlaps += 1
    return overlaps

ans = []
for i in range(n):
    ans.append(get_overlaps(i))

print(*ans)
```

**2. Inefficient algorithm**

```
n = int(input())
people = []
for i in range(n):
    people.append(list(map(int, input().split())))

def get_overlaps(i):
    overlaps = 0
    for j in range(i + 1, n):
        if people[i][1] <= people[j][1] and people[i][2] >= people[j][1] or people[i][1] >= people[j][1] and people[i][1] <= people[j][2]:
            overlaps += 1
    return overlaps

ans = []
for i in range(n):
    ans.append(get_overlaps(i))

print(*ans)
```

**3. Incorrect logic**

```
n = int(input())
people = []
for i in range(n):
    people.append(list(map(int, input().split())))

def get_overlaps(i):
    overlaps = 0
    for j in range(i + 1, n):
        if people[i][1] <= people[j][1] and people[i][2] >= people[j][1] or people[i][1] >= people[j][1] and people[i][1] <= people[j][2]:
            overlaps += 1
    return overlaps

ans = []
for i in range(n):
    ans.append(get_overlaps(i))

print(*ans)
```

**4. Incorrect output format**

```
n = int(input())
people = []
for i in range(n):
    people.append(list(map(int, input().split())))

def get_overlaps(i):
    overlaps = 0
    for j in range(i + 1, n):
        if people[i][1] <= people[j][1] and people[i][2] >= people[j][1] or people[i][1] >= people[j][1] and people[i][1] <= people[j][2]:
            overlaps += 1
    return overlaps

ans = []
for i in range(n):
    ans.append(get_overlaps(i))

print(*ans)
```

**5. Runtime errors**

```
n = int(input())
people = []
for i in range(n):
    people.append(list(map(int, input().split())))

def get_overlaps(i):
    overlaps = 0
    for j in range(i + 1, n):
        if people[i][1] <= people[j][1] and people[i][2] >= people[j][1] or people[i][1] >= people[j][1] and people[i][1] <= people[j][2]:
            overlaps += 1
    return overlaps

ans = []
for i in range(n):
    ans.append(get_overlaps(i))

print(*ans)
```
CODEFORCES 611_A. New Year and Days
```
1 of week
4 of week
30 of month
28 of month
```
CODEFORCES 630_P. Area of a Star
```
5 10
```
```
7 10
```
```
11 10
```
```
13 10
```
```
17 10
```
CODEFORCES 65_A. Harry Potter and Three Spells
1, 0, 100, 1, 0, 1
100, 1, 100, 1, 0, 1
100, 10, 200, 20, 300, 30
100, 50, 50, 200, 200, 100
0, 0, 0, 0, 0, 0
1, 1, 0, 1, 1, 1
1, 0, 1, 2, 1, 2
100, 1, 100, 1, 0, 1
CODEFORCES 682_E. Alyona and Triangles
```
3 1000000000
0 0
1 0
0 1
```
CODEFORCES 705_D. Ant Man
```
7 4 3
8 11 12 16 17 18 20
17 16 20 2 20 5 13
17 8 8 16 12 15 13
12 4 16 4 15 7 6
8 14 2 11 17 12 8
```
CODEFORCES 729_A. Interview with Oleg
```
8
ogoogogogo

10
ogogogoogo

1
o

9
ogogoogo
```
CODEFORCES 749_B. Parallelogram is Back
```
# 3 incorrect input formats

# 1. Incorrect number of lines

# Input

0 0
1 0

# Output

Traceback (most recent call last):
  File "test.py", line 13, in <module>
    print(k)
NameError: name 'k' is not defined


# 2. Lines do not contain the correct number of integers

# Input

0 0
1 0
1

# Output

Traceback (most recent call last):
  File "test.py", line 13, in <module>
    print(k)
NameError: name 'k' is not defined


# 3. Integers are not in the correct range

# Input

1001 1001
1001 1001
1001 1001

# Output

Traceback (most recent call last):
  File "test.py", line 13, in <module>
    print(k)
NameError: name 'k' is not defined


# 3 incorrect output formats

# 1. First line does not contain an integer

# Input

0 0
1 0
0 1

# Output

0 0
1 0
0 1


# 2. First line does not contain the correct number of integers

# Input

0 0
1 0
0 1

# Output

3
1 0
0 1


# 3. Lines do not contain the correct number of integers

# Input

0 0
1 0
0 1

# Output

3
1 0
0 1
1


# 3 incorrect calculation of the number of ways to add one new integer point

# Input

0 0
1 0
0 1

# Output

2
1 -1
-1 1


# 3 incorrect generation of the possible coordinates of the fourth point

# Input

0 0
1 0
0 1

# Output

2
1 -1
-1 1
```
CODEFORCES 772_A. Voltage Keepsake
```
3 5
4 3
5 2
6 1
```
CODEFORCES 797_A. k-Factorization
```
100000 2
100000 20
1024 5
```
CODEFORCES 817_C. Really Big Numbers
```
1 0
10 9
25 20
```
CODEFORCES 842_C. Ilya And The Tree
```
1
10
```

```
2
6 2
1 2
```

```
3
6 2 3
1 2
1 3
```
CODEFORCES 863_C. 1-2-3
**Incorrect input format**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Incorrect output format**

```
1 9 
```

**Incorrect logic**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Memory leaks**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Race conditions**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Security vulnerabilities**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Bugs in external libraries**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Incorrect assumptions**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Incorrect implementation**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```

**Other bugs**

```
10 2 1
1 1 1
1 1 1
1 1 1
2 2 2
2 2 2
2 2 2
```
CODEFORCES 888_G. Xor-MST
```
1
1
```
```
2
1 2
```
```
3
1 2 3
```
```
4
1 2 3 4
```
```
5
1 2 3 4 5
```
```
6
1 2 3 4 5 6
```
```
7
1 2 3 4 5 6 7
```
```
8
1 2 3 4 5 6 7 8
```
```
9
1 2 3 4 5 6 7 8 9
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
```
CODEFORCES 911_E. Stack Sorting
```
1
1
1
```
```
5
2
2 4
```
```
5
3
1 2 4
```
```
5
4
1 2 3
```
```
5
1
5
```
```
5
2
4 5
```
```
5
1
3
```
```
5
1
4
```
```
5
1
2
```
```
5
1
1
```
```
10
1
1
```
```
10
1
2
```
```
10
1
3
```
```
10
1
4
```
```
10
1
5
```
```
10
1
6
```
```
10
1
7
```
```
10
1
8
```
```
10
1
9
```
```
10
1
10
```
CODEFORCES 933_C. A Colourful Prospect
```
1
0 0 1
```
```
2
0 0 1
1 1 1
```
```
3
0 0 1
2 0 1
1 1 1
```
```
3
0 0 2
1 1 2
2 2 2
```
```
3
0 0 1
1 1 1
2 2 1
```
CODEFORCES 95_E. Lucky Country
```
5 5
1 2
2 3
3 4
4 5
3 5
```
```
4 3
1 2
2 3
1 3
```
```
5 4
1 2
3 4
4 5
3 5
```
```
5 3
1 2
2 3
3 4
```
```
3 2
1 2
3 2
```
```
1 0
```
```
0 0
```
CODEFORCES 987_C. Three displays
### 1. Input Format Error

```
3
100 101 100
2 4 5
```

### 2. Unexpected Output

```
3
1 2 3
40 30 20
```

### 3. Runtime Error

```
1000000000
1000000000
1000000000
```

### 4. Logical Error

```
3
100 101 100
2 4 5
```

### 5. Undefined Behavior

```
1000000000
1000000000
1000000000
```
HACKEREARTH algorithm-guru
```
1
1 1
1
```
HACKEREARTH bytelandian-conversions
1100000000000000
212212212212212
HACKEREARTH dead-mans-chest
1
1234567
HACKEREARTH game-of-perfectness
1
3
1 1 1
50 0 50
HACKEREARTH kevin-doesnt-like-his-array
```
1
1
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
10
1 1 1 1 1 1 1 1 1
```

```
10
1 2 3 3 2 3 2 3 2
```

```
7
5 4 3 2 1 5 4
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
10
1 2 3 4 5 6 7 8 9 10
```
HACKEREARTH modified-number
1
100
HACKEREARTH panda-and-numbers
```
1
1
3
3
13
```
HACKEREARTH roses-game
1. ```
N=int(input())
A=list(map(int,input().split()))
visited=list(False for i in range(N))
def dfs(i):
	if i==N-1:
		return 'Win'
	if visited[i]:
		return 'Lose'
	visited[i]=True
	return dfs(A[i])
print(dfs(0))
```
2. ```
N=int(input())
A=list(map(int,input().split()))
visited=list(False for i in range(N))
def dfs(i):
	if i==N-1:
		return 'Win'
	if visited[i]:
		return 'Lose'
	visited[i]=True
	return dfs(A[i])
print(dfs(0))
```
3. ```
N=int(input())
A=list(map(int,input().split()))
visited=list(False for i in range(N))
def dfs(i):
	if i==N-1:
		return 'Win'
	if visited[i]:
		return 'Lose'
	visited[i]=True
	return dfs(A[i])
print(dfs(0))
```
4. ```
N=int(input())
A=list(map(int,input().split()))
visited=list(False for i in range(N))
def dfs(i):
	if i==N-1:
		return 'Win'
	if visited[i]:
		return 'Lose'
	visited[i]=True
	return dfs(A[i])
print(dfs(0))
```
5. ```
N=int(input())
A=list(map(int,input().split()))
visited=list(False for i in range(N))
def dfs(i):
	if i==N-1:
		return 'Win'
	if visited[i]:
		return 'Lose'
	visited[i]=True
	return dfs(A[i])
print(dfs(0))
```
HACKEREARTH strange-series
1
1
1
2
3
3
1
3
4
9
5
10
105
10
50
2550

HACKEREARTH unique-ranking
```
3 3
50 60 70
40 60 80
50 60 61
3
3 1 2 3
1 2
2 3 1
```
ATCODER p02589 AtCoder Grand Contest 047 - First Second
```
2
abc
xyx
```

```
3
abcxyx
cyx
abc
```

```
6
b
a
abc
c
d
ab
```

```
5
abc
bca
cba
cab
abc
```

```
10
a
aa
aaa
aaaa
aaaaa
aaaaaa
aaaaaaa
aaaaaaaa
aaaaaaaaa
aaaaaaaa
```
ATCODER p02720 AtCoder Beginner Contest 161 - Lunlun Number
1. 1
2. 100000
3. 0
4. "100000"
5. ```
n = int(input())
print(3234566667)
```
ATCODER p02850 AtCoder Beginner Contest 146 - Coloring Edges on Tree
```
3
1 2
2 3

6
1 2
1 3
1 4
1 5
1 6
```
ATCODER p02987 AtCoder Beginner Contest 132 - Fifty-Fifty
1. ASSA
2. STOP
3. FFEE
4. FREE
5. AAAA
6. ZZZZ
7. ABCD
8. AAAC
9. AABBA
10. AAAABBBB
11. AAAABBBBCC
12. AAAABBBBCCDD
13. AAAABBBBCCDDDD
14. AAAABBBBCCDDDDEEEEEE
ATCODER p03128 AtCoder Beginner Contest 118 - Match Matching
```
5 3
5 4 6
```
```
20 4
3 7 8 4
```
```
101 9
9 8 7 6 5 4 3 2 1
```
```
15 3
5 4 6
```
ATCODER p03271 AtCoder Regular Contest 102 - Revenge of BBuBBBlesort!
5
5
2
1
4
3

4
3
2
4
1

7
3
2
1
6
5
4
7

6
5
3
4
1
2
6
ATCODER p03428 AtCoder Grand Contest 021 - Holes
2
1 1
2 2
ATCODER p03586 Tenka1 Programmer Contest - ModularPowerEquation!!
```
1
2
1000000000
```
ATCODER p03744 AtCoder Regular Contest 072 - Dam
```
3 10
10 10
20 5
4 3
```
ATCODER p03904 CODE FESTIVAL 2016 Elimination Tournament Round 1 (Parallel) - Problem where Commas Separate Digits
0


1000000
123456789


1


111111111


2


123456789


3


123456789


4


123456789


5


123456789


6


123456789


7


123456789


8


123456789


9


123456789


10


123456789


11


123456789


12


123456789


13


123456789


14


123456789


15


123456789


16


123456789


17


123456789


18


123456789


19


123456789


20


123456789


21


123456789
AIZU p00010 Circumscribed Circle of a Triangle
1. **Incorrect calculation of the circumscribed circle center**

```
Input:
3
0 0 2 0 2 2

Output:
1.000 1.000 1.414

Expected:
NaN NaN NaN
```

2. **Incorrect calculation of the circumscribed circle radius**

```
Input:
3
0 0 2 0 2 2

Output:
1.000 1.000 1.414

Expected:
NaN NaN NaN
```

3. **Incorrect rounding of the solution**

```
Input:
3
0 0 2 0 2 2

Output:
1.000 1.000 1.414

Expected:
1.000 1.000 1.4141
```

4. **Incorrect handling of floating-point numbers**

```
Input:
3
0 0 2 0 2 2

Output:
1.000 1.000 1.414

Expected:
1.000 1.000 1.4141
```

5. **Incorrect handling of degenerate triangles**

```
Input:
3
0 0 0 0 0 0

Output:
0.000 0.000 NaN

Expected:
NaN NaN NaN
```

6. **Incorrect handling of input errors**

```
Input:
3
a b c d e f

Output:
Error

Expected:
Error
AIZU p00142 Nature of Prime Numbers
1
2
10001
10000
0
AIZU p00275 The Outcome of Bonze
2
MSSL
4
MMSLSLMM
5
LLLLMMMMMMMMMMMMMLMMMMMMMMMMMMMMMMMMMM
0
AIZU p00463 Amidakuji
```
2 1 5 1
10
1
10
1 1
0 0 0 0
```
AIZU p00653 School of Killifish
```
1 1 1
1
```

```
3 1 1
1
```

```
5 5 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
```

```
1 10 2
1 2 3 4 5 6 7 8 9 10
0 0 0 9
0 0 0 4
0 5 0 9
0 4 0 5
0 0 0
```

```
100000 100000 10
1 1 1 1 1 1 1 1 1 1
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
```

```
100000 100000 100000
1 1 1 1 1 1 1 1 1 1
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
AIZU p00798 Push!!
5 5
0 0 0 0 0
4 2 0 1 1
0 1 0 0 0
1 0 0 0 3
1 0 0 0 0
5 3
4 0 0 0 0
2 0 0 0 0
0 0 0 0 3
7 5
1 1 4 1 0 0 0
1 1 2 1 0 0 0
3 0 0 0 0 0 0
0 1 0 1 0 0 0
0 0 0 1 0 0 0
6 6
0 0 0 0 0 3
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 2 0 0 0 0
4 0 0 0 0 0
0 0
5 5
0 0 0 0 0
4 2 0 1 1
0 1 0 0 0
1 0 0 0 3
1 0 0 0 0
5 3
4 0 0 0 0
2 0 0 0 0
0 0 0 0 3
7 5
1 1 4 1 0 0 0
1 1 2 1 0 0 0
3 0 0 0 0 0 0
0 1 0 1 0 0 0
0 0 0 1 0 0 0
6 6
0 0 0 0 0 3
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 2 0 0 0 0
4 0 0 0 0 0
0 0
0 0
AIZU p00929 There is No Alternative
**Incorrect input format**

```
1 2 3
```

**Incorrect calculation of the minimum spanning tree**

```
4 4
1 2 3
1 3 3
2 3 3
2 4 4
```

**Memory leaks**

```
n = int(input())
for _ in range(n):
    u, v, w = map(int, input().split())
```

**Race conditions**

```
n = int(input())
graph = [[] for _ in range(n)]
for _ in range(n - 1):
    u, v, w = map(int, input().split())
    graph[u - 1].append((v - 1, w))
    graph[v - 1].append((u - 1, w))

def find_mst():
    mst = set()
    visited = [False] * n
    pq = [(0, 0)]
    while pq:
        d, u = heapq.heappop(pq)
        if visited[u]:
            continue
        visited[u] = True
        mst.add(u)
        for v, w in graph[u]:
            if not visited[v] and d + w < pq[v][0]:
                heapq.heappush(pq, (d + w, v))
    return mst


mst = find_mst()
print(*mst)
```

**Deadlocks**

```
n = int(input())
graph = [[] for _ in range(n)]
for _ in range(n - 1):
    u, v, w = map(int, input().split())
    graph[u - 1].append((v - 1, w))
    graph[v - 1].append((u - 1, w))

def find_mst():
    mst = set()
    visited = [False] * n
    pq = [(0, 0)]
    while pq:
        d, u = heapq.heappop(pq)
        if visited[u]:
            continue
        visited[u] = True
        mst.add(u)
        for v, w in graph[u]:
            if not visited[v] and d + w < pq[v][0]:
                heapq.heappush(pq, (d + w, v))
    return mst


def find_cycle(u):
    visited = [False] * n
    stack = [u]
    while stack:
        u = stack.pop()
        if visited[u]:
            return True
        visited[u] = True
        for v, w in graph[u]:
            if not visited[v] and w < pq[v][0]:
                stack.append(v)
    return False


mst = find_mst()
if find_cycle(0):
    print('No')
else:
    print('Yes')
```

**Incorrect use of concurrency**

```
def find_mst(n):
    pq = [(0, 0)]
    visited = [False] * n
    mst = set()
    while pq:
        d, u = heapq.heappop(pq)
        if visited[u]:
            continue
        visited[u] = True
        mst.add(u)
        for v, w in graph[u]:
            if not visited[v] and d + w < pq[v][0]:
                heapq.heappush(pq, (d + w, v))
    return mst


def find_cycle(n):
    visited = [False] * n
    stack = [0]
    while stack:
        u = stack.pop()
        if visited[u]:
            return True
        visited[u] = True
        for v, w in graph[u]:
            if not visited[v] and w < pq[v][0]:
                stack.append(v)
    return False


def main():
    n = int(input())
    graph = [[] for _ in range(n)]
    for _ in range(n - 1):
        u
AIZU p01062 Courage Test
4 1 4
1 2
2 3
3 4
4 1
AIZU p01194 Web 0.5
```
3 0
2 1 3 1

3 1
2 1 3 1
2 1 2 2

5 1
2 1 3 2
2 1 2 2

4 1
1 2 3 2
3 1 4 1

3 2
1 1 3 1
2 1 3 1
2 1 2 2

100 100
1 1 100 100
1 1 99 99
1 1 98 98
...
1 1 1 1
0 0
```
AIZU p01332 Three Silhouettes
4
0 0
100 0
100 100
0 100
4
0 0
100 0
100 100
0 100
0
0
0
AIZU p01499 Rabbit Game Playing
3 1
1
2
3
AIZU p01670 Medical Inspection
```
3 3 2
1 2
2 3
3 1
```

```
3 3 1
1 2
2 3
3 1
```

```
7 6 5
1 3
2 4
3 5
4 6
5 7
6 2
```

```
10 10 10
1 2
1 3
1 4
1 5
2 3
2 4
2 5
3 4
3 5
4 5
```
AIZU p01812 Dark Room
```
4 2 2
1 2
twenty four
3 1
4 2
13
```
AIZU p01947 Ninja Map
```
3
1 2
4 7
8 6
2 3
8 9
5 3
4 6
5 6
7 8
1 4
2 6
5 9
```
AIZU p02096 Add
1
3 0
1 2 3
1
3 1
1 2 3
AIZU p02234 Matrix Chain Multiplication
```
1
10 10
```

```
2
10 10
10 10
```

```
3
10 10
10 10
10 10
```

```
4
10 10
10 10
10 10
10 10
```

```
5
10 10
10 10
10 10
10 10
10 10
```

```
6
10 10
10 10
10 10
10 10
10 10
10 10
```

```
7
10 10
10 10
10 10
10 10
10 10
10 10
10 10
```

```
8
10 10
10 10
10 10
10 10
10 10
10 10
10 10
10 10
```

```
9
10 10
10 10
10 10
10 10
10 10
10 10
10 10
10 10
10 10
```

```
10
10 10
10 10
10 10
10 10
10 10
10 10
10 10
10 10
10 10
10 10
```
AIZU p02380 Triangle
1. Incorrect input format:
```
a b c
```
2. Incorrect calculation of the area:
```
a b 180
```
3. Incorrect calculation of the circumference:
```
a b 181
```
4. Incorrect calculation of the height:
```
a b 0
```
5. Precision errors:
```
a b 89.999999
```