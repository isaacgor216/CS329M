CODECHEF bestbats
1
1 2 3 4 5 6 7 8 9 10 11
3
2 5 1 2 4 1 6 5 2 2 1
6
CODECHEF cn03
```
5 3
1
2
8
4
9
```
CODECHEF forestga
```
1 10 9
```
```
2 10 10
```
```
3 10 10
```
```
2 2 2
5 7 2
2 9
```
```
5 1000000000 1
1000000000 1000000000 1000000000
999999999 1000000000 1000000000
999999998 1000000000 1000000000
999999997 1000000000 1000000000
```
CODECHEF linnum
```
1
5
345 1323 165 98 456
3
```
CODECHEF pree02
1
2016
CODECHEF tadelive
```
5 3 3
1 2 3 4 5
5 4 3 2 1
```
CODEFORCES 1010_E. Store

CODEFORCES 1034_E. Little C Loves 3 III
**Incorrect input format:**

```
1
123
456
```

**Incorrect output format:**

```
123
456
```

**Incorrect calculation of $c_i$:**

```
1
0123
3210


Output

0122
```

**Incorrect implementation of the bitwise operations:**

```
1
0123
3210


Output

0322
```

**Incorrect use of the modulo operator:**

```
1
0123
3210


Output

0322
```
CODEFORCES 1057_B. DDoS
```
# 1. Incorrect input format

n = int(input())
requests = list(map(int, input().split()))

# 2. Incorrect calculation of the longest DDoS-attack

max_requests = 0
max_length = 0
for i in range(n):
    max_requests += requests[i]
    if max_requests > 100 * i:
        max_length = max(max_length, i + 1)

print(max_length)

# 3. Off-by-one error

n = int(input())
requests = list(map(int, input().split()))

max_requests = 0
max_length = 0
for i in range(n):
    max_requests += requests[i]
    if max_requests > 100 * i:
        max_length = i + 1

print(max_length)

# 4. Memory leak

n = int(input())
requests = list(map(int, input().split()))

max_requests = 0
max_length = 0
for i in range(n):
    max_requests += requests[i]
    if max_requests > 100 * i:
        max_length = max(max_length, i + 1)

print(max_length)

# 5. Synchronization issues

n = int(input())
requests = list(map(int, input().split()))

max_requests = 0
max_length = 0
for i in range(n):
    with lock:
        max_requests += requests[i]
        if max_requests > 100 * i:
            max_length = max(max_length, i + 1)

print(max_length)

# 6. Security vulnerabilities

n = int(input())
requests = list(map(int, input().split()))

max_requests = 0
max_length = 0
for i in range(n):
    max_requests += requests[i]
    if max_requests > 100 * i:
        max_length = max(max_length, i + 1)

print(max_length)
```
CODEFORCES 1080_A. Petya and Origami
1. Incorrect input format:
```
n, k = [int(x) for x in input().split()]
```
2. Incorrect calculation:
```
n, k = [int(x) for x in input().split()]
red = n // 2
green = n // 5
blue = n // 8
print(red * k + green * k + blue * k)
```
3. Off-by-one errors:
```
n, k = [int(x) for x in input().split()]
red = n // 2
green = n // 5
blue = n // 8
print(max(red, green, blue) * k + min(red, green, blue))
```
4. Memory leaks:
```
n, k = [int(x) for x in input().split()]
red = n // 2
green = n // 5
blue = n // 8
print(red * k + green * k + blue * k)
```
5. Race conditions:
```
n, k = [int(x) for x in input().split()]
red = n // 2
green = n // 5
blue = n // 8
print(red * k + green * k + blue * k)
```
6. Security vulnerabilities:
```
n, k = [int(x) for x in input().split()]
red = n // 2
green = n // 5
blue = n // 8
print(red * k + green * k + blue * k)
```
CODEFORCES 109_E. Lucky Interval
```
1 1
```
```
1 2
```
```
1234567890 1000000000
```
```
7 10
```
```
7 11
```
```
10 1
```
CODEFORCES 1120_E. The very same Munchhausen
1. ```
2
```
2. ```
3
```
3. ```
10
```
CODEFORCES 1148_A. Another One Bites The Dust
1. Incorrect data type

```
a = input()
b = input()
c = input()
```

2. Incorrect calculation of the maximum length

```
a = int(input())
b = int(input())
c = int(input())

max_length = max(a, b, c)
```

3. Off-by-one error

```
a = int(input())
b = int(input())
c = int(input())

max_length = max(a, b, c) + 1
```

4. Memory leak

```
def get_input():
  return int(input())

a = get_input()
b = get_input()
c = get_input()
```

5. Race condition

```
def get_input():
  return int(input())

a = get_input()
b = get_input()
c = get_input()

def print_output(x):
  print(x)

print_output(a + b + c)
```

6. Deadlock

```
def get_input():
  return int(input())

a = get_input()
b = get_input()
c = get_input()

def print_output(x):
  print(x)

def thread1():
  while True:
    print_output(a + b + c)

def thread2():
  while True:
    print_output(a + b + c)

thread1()
thread2()
```

7. Security vulnerability

```
def get_input():
  return input()

a = get_input()
b = get_input()
c = get_input()

def print_output(x):
  print(x)

print_output(a + b + c)
```
CODEFORCES 1169_C. Increasing by Modulo
```
# 1. Incorrect input format

1 3
0

# 2. Incorrect data type

5 3
0 0 0 1 'a'

# 3. Off-by-one errors

5 3
0 0 0 1 1

# 4. Index out of bounds errors

5 3
0 0 0 1 4

# 5. Arithmetic errors

5 3
0 0 0 1 -1

# 6. Logical errors

5 3
0 0 0 1 0

# 7. Incorrect variable usage

5 3
a 0 0 0 1 2

# 8. Uninitialized variables

5 3
0 0 0 1 2

# 9. Memory leaks

5 3
0 0 0 1 2

# 10. Security vulnerabilities

5 3
0 0 0 1 2
```
CODEFORCES 1187_E. Tree Painting
```
5
1 2
1 3
2 4
2 5
```
CODEFORCES 1206_D. Shortest Cycle
```
# 1
4
3 6 28 9

# 2
5
5 12 9 16 48

# 3
4
1 2 4 8

# 4
10
1 1 1 1 1 1 1 1 1

# 5
5
5 10 15 20 25

# 6
3
1 2 3

# 7
4
3 3 1 7

# 8
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1223_G. Wooden Raft
```
1
9

9
9 10 9 18 9 9 9 28 9

0
```
CODEFORCES 1249_C1. Good Numbers (easy version)
```
1
1
```

```
1
2
```

```
1
3
```

```
1
13
```

```
1
14
```

```
1
3620
```

```
1
10000
```
CODEFORCES 1267_J. Just Arrange the Icons
```
1
1
1
```
```
1
2
2
```
```
1
3
1 2 3
```
```
1
4
1 2 3 4
```
```
1
5
1 2 3 4 5
```
```
1
6
1 2 2 2 2 1
```
```
1
7
1 1 2 2 3 3
```
```
1
8
1 1 1 1 1 2 2
```
```
1
9
1 1 1 1 1 1 1 1
```
```
1
10
1 1 1 1 1 1 1 1 1
```
```
2
10
1 2 3 4 5 6 7 8 9 10
6
1 2 2 2 2 1
```
```
3
11
1 5 1 5 1 5 1 1 1 1 5
6
1 2 2 2 2 1
5
4 3 3 1 2
```
CODEFORCES 128_D. Numbers
```
3
1 2 3

4
1 2 3 2

6
1 1 2 2 2 3

6
2 4 1 1 2 2
CODEFORCES 130_J. Date calculation
1. Incorrect input format

```
1600
367
```

2. Incorrect output format

```
2011
324
1 111
```

3. Incorrect calculation of the number of days in a year

```
2012
367
```

4. Incorrect calculation of the date of the day

```
2012
274
30 10
```

5. Other bugs

```
2012
-1
```
CODEFORCES 1332_E. Height All the Same
```
2 2 1 1
```
CODEFORCES 1353_A. Most Unstable Array
```
1
1000000000 1000000000
```
CODEFORCES 1372_F. Omkar and Modes
```
1
1
```
CODEFORCES 1395_E. Boboniu Walks on Graph
```
3 3 2
1 2 1
1 3 2
2 3 3
```

```
6 13 4
3 5 1
2 5 2
6 3 3
1 4 4
2 6 5
5 3 6
4 1 7
4 3 8
5 2 9
4 2 10
2 1 11
6 1 12
4 6 13
```

```
7 6 3
1 2 1
2 3 2
3 4 3
4 5 4
5 6 5
6 1 6
```

```
1 1 1
```

```
2 2 1
```
CODEFORCES 141_A. Amusing Joke
1. Incorrect input format.
```
```
2. Incorrect output format.
```
```
3. Incorrect logic.
```
```
4. Memory limit exceeded.
```
```
5. Time limit exceeded.
```
```
CODEFORCES 1438_A. Specific Tastes of Andre 
```
1
100
```
```
2
1
2
```
```
3
3
4
5
```
```
4
7
8
9
10
```
CODEFORCES 1462_F. The Treasure of The Segments
```
1
5
1 2
3 4
5 6
7 8
9 10
```
CODEFORCES 1487_G. String Counting
```
# 3 / 4

n = int(input())

c = list(map(int, input().split()))

dp = [[0] * 27 for _ in range(n + 1)]
dp[0][0] = 1

for i in range(n):
    for j in range(27):
        if j == 0:
            dp[i + 1][j] = (dp[i][j] + dp[i][j + 1]) % 998244353
        else:
            dp[i + 1][j] = (dp[i][j - 1] * c[j - 1]) % 998244353

print(dp[n][0])
```

**Incorrect data type:**

```
n = int(input())

c = list(map(int, input().split()))

dp = [[0] * 27 for _ in range(n + 1)]
dp[0][0] = 1

for i in range(n):
    for j in range(27):
        if j == 0:
            dp[i + 1][j] = (dp[i][j] + dp[i][j + 1]) % 2**31-1
        else:
            dp[i + 1][j] = (dp[i][j - 1] * c[j - 1]) % 2**31-1

print(dp[n][0])
```

**Incorrect modulo operator:**

```
n = int(input())

c = list(map(int, input().split()))

dp = [[0] * 27 for _ in range(n + 1)]
dp[0][0] = 1

for i in range(n):
    for j in range(27):
        if j == 0:
            dp[i + 1][j] = (dp[i][j] + dp[i][j + 1])
        else:
            dp[i + 1][j] = (dp[i][j - 1] * c[j - 1])

print(dp[n][0])
```

**Incorrect algorithm:**

```
n = int(input())

c = list(map(int, input().split()))

dp = [[0] * 27 for _ in range(n + 1)]
dp[0][0] = 1

for i in range(n):
    for j in range(27):
        if j == 0:
            dp[i + 1][j] = (dp[i][j] + dp[i][j + 1])
        else:
            dp[i + 1][j] = (dp[i][j - 1] * c[j - 1])

print(dp[n][0])
```

**Not handling special cases:**

```
n = int(input())

c = list(map(int, input().split()))

dp = [[0] * 27 for _ in range(n + 1)]
dp[0][0] = 1

for i in range(n):
    for j in range(27):
        if j == 0:
            dp[i + 1][j] = (dp[i][j] + dp[i][j + 1])
        else:
            dp[i + 1][j] = (dp[i][j - 1] * c[j - 1])

if n == 3:
    print(27 * 26)
else:
    print(dp[n][0])
```

**Not testing your code:**

```
n = int(input())

c = list(map(int, input().split()))

dp = [[0] * 27 for _ in range(n + 1)]
dp[0][0] = 1

for i in range(n):
    for j in range(27):
        if j == 0:
            dp[i + 1][j] = (dp[i][j] + dp[i][j + 1])

CODEFORCES 1511_D. Min Cost String
```
10 4
```
```
5 1
```
```
10 26
```
CODEFORCES 1539_B. Love Song
```
1 1
a
```
CODEFORCES 165_D. Beard Graph
```
3
1 2
2 3
7
3 1 2
3 1 3
3 2 3
2 2
3 1 2
3 1 3
3 2 3

```
CODEFORCES 186_E. Clever Fat Rat
```
1
1
2

2
2 2
1 2
5

1
1
1

2
2 2
1 3
8

3
1 5 1
1 1 1
1 1 1
```
CODEFORCES 207_D7. The Beaver's Problem - 3
```
12345
Document name
Text of the document

Output:
2

Input:
12346
Document name
Text of the document

Output:
1

Input:
12347
Document name
Text of the document

Output:
3

Input:
12348
Document name
Text of the document

Output:
2

Input:
12349
Document name
Text of the document

Output:
1

Input:
12350
Document name
Text of the document

Output:
3

Input:
12351
Document name
Text of the document

Output:
1

Input:
12352
Document name
Text of the document

Output:
3

Input:
12353
Document name
Text of the document

Output:
2
```
CODEFORCES 233_A. Perfect Permutation
1
2
4
10
100
```
2
1
2 1
2 1 4 3
-1
```
CODEFORCES 258_E. Little Elephant and Tree
```
5 1
1 2
1 3
3 5
3 4
2 3

11 3
1 2
2 3
2 4
1 5
5 6
5 7
5 8
6 9
8 10
8 11
2 9
3 6
2 8
```
CODEFORCES 281_E. Game on Tree
```
2
1 2

3
1 2
1 3
```
CODEFORCES 304_D. Rectangle Puzzle II
```
9 9 5 5 2 1
```
CODEFORCES 330_E. Graph Reconstruction
```
# 330E. Graph Reconstruction

n, m = map(int, input().split())
edges = [tuple(map(int, input().split())) for _ in range(m)]

ans = []
for u, v in edges:
    if u > v:
        u, v = v, u

    if u == v:
        print(-1)
        exit()

    ans.append((v, u))

print('\n'.join(map(str, ans)))
```
CODEFORCES 352_C. Jeff and Rounding
```
1
0.000
```

```
2
0.000 0.000
```

```
3
0.000 0.000 0.000
```

```
4
0.000 0.000 0.000 0.000
```

```
5
0.000 0.000 0.000 0.000 0.000
```

```
6
0.000 0.000 0.000 0.000 0.000 0.000
```

```
7
0.000 0.000 0.000 0.000 0.000 0.000 0.000
```

```
8
0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
```

```
9
0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
```

```
10
0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000
```
CODEFORCES 376_D. Maximum Submatrix 2
1. Incorrect input format

```
1 1
2
```

This input is incorrect because it does not have two integers n and m.

2. Incorrect calculation of the maximum submatrix area

```
3 3
010
111
010
```

The maximum submatrix area is 3, but the program outputs 2.

3. Overflow

```
5000 5000
1
```

The maximum submatrix area is 5000, but the program outputs 2147483647.

4. Incorrect use of pointers

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d%d ", &n, &m);
    int a[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf(" %d ", &a[i][j]);
        }
    }
    int max = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (a[i][j] == 1) {
                int count = 1;
                for (int k = j + 1; k < m; k++) {
                    if (a[i][k] == 1) {
                        count++;
                    } else {
                        break;
                    }
                }
                for (int k = i + 1; k < n; k++) {
                    if (a[k][j] == 1) {
                        count++;
                    } else {
                        break;
                    }
                }
                max = max > count ? max : count;
            }
        }
    }
    printf(" %d ", max);
    return 0;
}
```

This program has a number of errors. First, it does not allocate enough memory for the array a. Second, it uses pointers incorrectly. Third, it has an off-by-one error in the calculation of the maximum submatrix area.

5. Incorrect use of dynamic memory

```
#include <stdio.h>
#include <stdlib.h>

int main() {
    int n, m;
    scanf(" %d%d ", &n, &m);
    int *a = (int *)malloc(n * m * sizeof(int));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf(" %d ", &a[i * m + j]);
        }
    }
    int max = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (a[i * m + j] == 1) {
                int count = 1;
                for (int k = j + 1; k < m; k++) {
                    if (a[i * m + k] == 1) {
                        count++;
                    } else {
                        break;
                    }
                }
                for (int k = i + 1; k < n; k++) {
                    if (a[k * m + j] == 1) {
                        count++;
                    } else {
                        break;
                    }
                }
                max = max > count ? max : count;
            }
        }
    }
    printf(" %d ", max);
    free(a);
    return 0;
}
```

This program has a number of errors. First, it does not free the memory allocated for the array a. Second, it has an off-by-one error in the calculation of the maximum submatrix area.

6. Off-by-one errors

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d%d ", &n, &
CODEFORCES 399_A. Pages
1. The input format is not clear.
```
3 1 2
```

2. The output format is not clear.
```
1 2
```

3. The problem statement does not specify what to do if p is less than 1 or greater than n.
```
3 5 2
```

4. The problem statement does not specify what to do if k is less than 1 or greater than n.
```
3 1 0
```

5. The problem statement does not specify what to do if p is equal to 1.
```
1 1 2
```

6. The problem statement does not specify what to do if p is equal to n.
```
10 10 3
```

7. The problem statement does not specify what to do if p is between 1 and n, but not in the range [p - k, p + k].
```
3 2 2
```
CODEFORCES 421_B. Start Up
```
AHA
Z
XO
```
CODEFORCES 447_E. DZY Loves Fibonacci Numbers
```
4 4
1 2 3 4
1 1 4
2 1 4
1 2 4
2 1 3
```
CODEFORCES 46_A. Ball Game
1. ```
2
```
2. ```
10
```
3. ```
3
```
4. ```
5
```
5. ```
100
```
CODEFORCES 492_B. Vanya and Lanterns
```
1 1
```
```
10 10
1 2 3 4 5 6 7 8 9 10
```
```
10 100
1 2 3 4 5 6 7 8 9 10
```
```
10 100
0 100 0 100 0 100 0 100 0 100
```
```
10 100
100 100 100 100 100 100 100 100 100 100
```
CODEFORCES 516_A. Drazil and Factorial
```
1
1

1
4

4
1234
```
CODEFORCES 543_A. Writing Code
```
1 1 1 100
1
```

```
3 3 3 100
1 1 1
```

```
3 6 5 1000000007
1 2 3
```

```
3 5 6 11
1 2 1
```
CODEFORCES 56_C. Corporation Mail
```
MIKE:MAX.,ARTEM:MIKE..,DMITRY:DMITRY.,DMITRY...

A:A..

A:C:C:C:C.....
CODEFORCES 591_A. Wizards' Duel
```
100
50
50
```
```
199
60
40
```
CODEFORCES 612_E. Square Root of Permutation
**1. Using the wrong data type**

```
n = int(input())
p = list(map(int, input().split()))

# This will cause an error because the elements of p are integers, but we are trying to store them in a list of floats.
q = [float(i) for i in p]
```

**2. Using the wrong algorithm**

```
n = int(input())
p = list(map(int, input().split()))

# This algorithm is correct, but it is inefficient.
q = [i for i in range(n)]
for i in range(n):
    q[i], q[p[i]] = q[p[i]], q[i]

if q == p:
    print(*q)
else:
    print(-1)
```

**3. Not handling the corner cases**

```
n = int(input())
p = list(map(int, input().split()))

# This will cause an error because n is less than 1.
if n < 1:
    raise ValueError("n must be at least 1")

# This will cause an error because n is greater than 106.
if n > 106:
    raise ValueError("n must be at most 106")
```

**4. Using incorrect variable names**

```
n = int(input())
p = list(map(int, input().split()))

# These variable names are incorrect because they do not match the variable names used in the problem statement.
q = p2
p2 = p

print(*q)
```

**5. Not commenting your code**

```
n = int(input())
p = list(map(int, input().split()))

# This code is not commented, so it is difficult to understand what it does.
q = [i for i in range(n)]
for i in range(n):
    q[i], q[p[i]] = q[p[i]], q[i]

if q == p:
    print(*q)
else:
    print(-1)
```
CODEFORCES 632_E. Thief in a Shop
```
# 1. The input format is not correct.

1 2
1 2

# 2. The output format is not correct.

3 2
1 2 3
4 5 6

# 3. The program does not account for all possible cases.

3 2
1 2 3
2 3 4

# 4. The program is not efficient.

3 3
3 5 11
9 11 13 15 17 19 21 25 27 33

# 5. The program is not robust.

3 3
3 5 11
9 11 13 15 17 19 21 25 27 33 1234567890
```
CODEFORCES 661_B. Seasons
1. Februaryr
2. 12
3. June
4. December
CODEFORCES 685_B. Kay and Snowflake
```
3 1
1
2
```
```
6 3
1 1 3 3 5 3
1
2
3
```
```
7 4
1 1 3 3 5 3
1
2
3
5
```
```
10 4
1 2 3 4 5 6 7 8 9 10
1
2
3
10
```
CODEFORCES 708_A. Letters Cyclic Shift
**Incorrect input format**

```
a
```

**Incorrect output format**

```
a
```

**Incorrect algorithm**

```
s = input()
print(s[::-1])
```

**Incorrect implementation**

```
s = input()
print(s[::-1])
```

**Runtime errors**

```
s = input()
print(s[::-1])
```

**Incorrect data structures**

```
s = input()
print(s[::-1])
```

**Incorrect logic**

```
s = input()
print(s[::-1])
```
CODEFORCES 72_G. Fibonacci army
1. ```
1
```
2. ```
2
```
3. ```
3
```
4. ```
4
```
5. ```
5
```
6. ```
6
```
7. ```
7
```
8. ```
8
```
9. ```
9
```
10. ```
10
```
11. ```
11
```
12. ```
12
```
13. ```
13
```
14. ```
14
```
15. ```
15
```
16. ```
16
```
17. ```
17
```
18. ```
18
```
19. ```
19
```
20. ```
20
```
CODEFORCES 750_D. New Year and Fireworks
```
4
4 2 2 3

6
1 1 1 1 1 3

1
3
```
CODEFORCES 774_B. Significant Cups
```
3 1 8
4 2
5 5
4 2
3 2

4 3 12
3 4
2 4
3 5
3 4
3 5
5 2
3 4

2 2 2
5 3
6 3
4 2
8 1
```
CODEFORCES 799_B. T-shirt buying
```
# 1. Incorrect input format

n = int(input())
p = list(map(int, input().split()))
a = list(map(int, input().split()))
b = list(map(int, input().split()))
m = int(input())
c = list(map(int, input().split()))

# 2. Incorrect output format

print(1, 2, 3)

# 3. Incorrect data type

n = int(input())
p = list(map(int, input().split()))
a = list(map(str, input().split()))
b = list(map(str, input().split()))
m = int(input())
c = list(map(str, input().split()))

# 4. Incorrect logic

n = int(input())
p = list(map(int, input().split()))
a = list(map(int, input().split()))
b = list(map(int, input().split()))
m = int(input())
c = list(map(int, input().split()))

prices = [p[i] for i in range(n) if a[i] == c[0] or b[i] == c[0]]
print(min(prices))

# 5. Memory leak

n = int(input())
p = list(map(int, input().split()))
a = list(map(int, input().split()))
b = list(map(int, input().split()))
m = int(input())
c = list(map(int, input().split()))

prices = [p[i] for i in range(n) if a[i] == c[0] or b[i] == c[0]]
print(min(prices))

del prices

# 6. Race condition

n = int(input())
p = list(map(int, input().split()))
a = list(map(int, input().split()))
b = list(map(int, input().split()))
m = int(input())
c = list(map(int, input().split()))

prices = [p[i] for i in range(n) if a[i] == c[0] or b[i] == c[0]]
print(min(prices))

prices.append(100)

# 7. Deadlock

n = int(input())
p = list(map(int, input().split()))
a = list(map(int, input().split()))
b = list(map(int, input().split()))
m = int(input())
c = list(map(int, input().split()))

prices = [p[i] for i in range(n) if a[i] == c[0] or b[i] == c[0]]
print(min(prices))

prices.append(100)

# 8. Buffer overflow

n = int(input())
p = list(map(int, input().split()))
a = list(map(int, input().split()))
b = list(map(int, input().split()))
m = int(input())
c = list(map(int, input().split()))

prices = [p[i] for i in range(n) if a[i] == c[0] or b[i] == c[0]]
print(min(prices))

prices.append(10000000000000000000000000000000000000000000000000000000000000000)

# 9. Format string vulnerability

n = int(input())
p = list(map(int, input().split()))
a = list(map(int, input().split()))
b = list(map(int, input().split()))
m = int(input())
c = list(map(int, input().split()))

prices = [p[i] for i in range(n) if a[i] == c[0] or b[i] == c[0]]
print(min(prices))

print('%s' % prices)

# 10. SQL injection vulnerability

n = int(input())
p = list(map(int, input().split()))
a = list(
CODEFORCES 819_B. Mister B and PR Shifts
```
3
1 2 3
```
```
3
2 3 1
```
```
3
3 2 1
```
```
7
1 7 2 3 6 5 4
```
```
7
1 2 3 4 5 6 7
```
```
7
7 6 5 4 3 2 1
```
CODEFORCES 844_E. Upgrading Tree
```
3
1 2
2 3
```

```
7
1 2
2 3
3 4
4 5
5 6
6 7
```

```
7
1 2
2 3
3 4
4 5
5 6
6 7
7 1
```
CODEFORCES 865_B. Ordering Pizza
```
# INPUT 1
3 12
3 5 7
4 6 7
5 9 5

# INPUT 2
6 10
7 4 7
5 8 8
12 5 8
6 11 6
3 3 7
5 9 6
```
CODEFORCES 891_B. Gluttony
```
2
1 2
```
```
4
1000 100 10 1
```
```
2
-1000 1000
```
```
4
-1000 100 10 1
```
```
1
1000000000
```
```
1
-1000000000
```
CODEFORCES 913_E. Logical Expression
```
2
11111000
00001100
```
CODEFORCES 935_E. Fafa and Ancient Mathematics
```
(1?1)
1 0
```
```
(2?(1?2))
1 1
```
```
((1?(5?7))?((6?2)?7))
3 2
```
```
((1?(5?7))?((6?2)?7))
2 3
```
CODEFORCES 961_D. Pair Of Lines
```
5
0 0
0 1
1 1
1 -1
2 2
```
CODEFORCES 989_C. A Mist of Florescence
```
1 1 1 1
2 2 2 2
3 3 3 3
4 4 4 4
5 5 5 5
6 6 6 6
7 7 7 7
8 8 8 8
9 9 9 9
10 10 10 10
```
HACKEREARTH amit-chahals-love-for-juices-and-dhruv-katyals-astrology
1
7
HACKEREARTH car-parking-4
```
3
---B--S-D--S--
DDBDDBDDBDD
--S--S--S--S--
```
HACKEREARTH dfs-2
```
1
1
1
1
1
```
HACKEREARTH gcd-game-11
1
1 1
HACKEREARTH largest-volume-84
1. 1 1
2. 10 20
3. 100 100
4. -1 1
5. 100 101
HACKEREARTH monk-and-tasks
1
4
3 4 7 10
HACKEREARTH perfect-square-5
1
100
4
145
45
33
19
25
5
1
168
10
99
342
13
61
22
31
55
23
117
101
15
62
20
24
16
12
1
17
48
30
100
45
33
19
25
5
1
168
10
99
342
13
61
22
31
55
23
117
101
15
62
20
24
16
12
1
17
48
30
HACKEREARTH roy-and-matrix-sum-1
1
2
3
1000000
HACKEREARTH strings-awesomeness
```
HackerEarthhACKEReARTH
5
1 11
2 15
5 15
7 20
7 22
HACKEREARTH vaishnav-and-factorials
1
250
ATCODER p02601 M-SOLUTIONS Programming Contest 2020 - Magic 2
```
7 2 5
3
```
```
7 4 2
3
```
```
7 7 7
0
```
```
1 2 3
1
```
```
3 4 5
1
```
ATCODER p02732 AtCoder Beginner Contest 159 - Banned K
```
3
1 2 3

4
1 2 3 4

5
3 3 3 3 3

8
1 2 1 4 2 1 4 1
```
ATCODER p02865 NIKKEI Programming Contest 2019-2 - Sum of Two Integers
4
999999
ATCODER p03000 AtCoder Beginner Contest 130 - Bounding
```
3 6
3 4 5

4 9
3 3 3 3

1 1
1
```
ATCODER p03141 NIKKEI Programming Contest 2019 - Different Strokes
```
3
10 10
20 20
30 30
```
```
3
20 10
20 20
20 30
```
```
6
1 1000000000
1 1000000000
1 1000000000
1 1000000000
1 1000000000
1 1000000000
```
ATCODER p03285 AtCoder Beginner Contest 105 - Cakes and Donuts
1. 1
2. 2
3. 3
4. 4
5. 5
6. 6
7. 7
8. 8
9. 9
10. 10
ATCODER p03441 AtCoder Petrozavodsk Contest 001 - Antennas on Tree
```
1
```
```
2
0 1
```
```
5
0 1
0 2
0 3
3 4
```
```
10
2 8
6 0
4 1
7 6
2 3
8 6
6 9
2 4
5 8
```
```
100
0 1
0 2
0 3
0 4
0 5
0 6
0 7
0 8
0 9
```
ATCODER p03599 AtCoder Beginner Contest 074 - Sugar Water
```
1 2 10 20 15 200
```
ATCODER p03760 AtCoder Beginner Contest 058 - ∵∴∵
```
xyz
abc
```
```
atcoderbeginnercontest
atcoderregularcontest
```
```
atcoderbeginnercontest
atcoderregularcontest
```
ATCODER p03922 CODE FESTIVAL 2016 Final (Parallel) - Pair Cards
2
1
1
3
1
1
6
1
2
3
4
5
6
7
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
1
5
6
10
11
11
11
20
21
25
25
26
99
99
99
100
101
102
103
104
105
106
107
108
109
110
AIZU p00023 Circles Intersection
```
# Test case 1:

# Input

2
0.0 0.0 5.0 0.0 0.0 4.0
0.0 0.0 2.0 4.1 0.0 2.0

# Output

2
0

# Test case 2:

# Input

1
0.0 0.0 1.0 0.0 0.0 2.0

# Output

1

# Test case 3:

# Input

1
1.0 1.0 1.0 2.0 2.0 1.0

# Output

2

# Test case 4:

# Input

1
-1.0 -1.0 1.0 0.0 0.0 1.0

# Output

-2
```
AIZU p00154 Sum of Cards
5
1 10
5 3
10 3
25 2
50 2
4
120
500
100
168
7
1 10
3 10
5 10
10 10
25 10
50 10
100 10
3
452
574
787
0
AIZU p00311 Fishing Competition
1. Input Format Error

```
-1 -1
1 1
1 2 5 5
```

2. Division By Zero Error

```
0 0
0 0
1 2 5 5
```

3. Incorrect Calculation of Final Score

```
5 1
3 1
1 2 5 -5
```

4. Incorrect Output Format

```
5 1
3 1
1 2 5 5
hiroshi
```
AIZU p00475 Exposition
1
0 0
AIZU p00667 11224111122411
```
1
11
111111
111111111111
12345
11111111119999999999
11111111113333333333
11111111118888888888
11111111112222222222111111111
11111111110000000000444444444
11224111122411
888888888888999999999999888888888888999999999999999999
666666666666666777333333333338888888888
1111114444441111111444499999931111111222222222222888111111115555
```
AIZU p00810 Super Star
4
10.00000 10.00000 10.00000
20.00000 10.00000 10.00000
20.00000 20.00000 10.00000
10.00000 20.00000 10.00000
4
10.00000 10.00000 10.00000
10.00000 50.00000 50.00000
50.00000 10.00000 50.00000
50.00000 50.00000 10.00000
0
AIZU p00941 Do Geese See God?
Input:
['a', 'abc', '123']
Output:
['a', 'abc', '123']
AIZU p01074 Unhappy Class
```
3 7 3
0 1 1 1
0 1 1 2
1 1 3 4
1 1 1 1
1 2 1 2
2 1 1 3
2 2 2 1

5 10 5
0 1 1 2
0 2 1 2
0 1 2 3
1 2 1 2
1 4 2 3
2 1 1 1
2 1 1 2
3 3 2 3
4 1 1 2
4 2 1 2
```
AIZU p01208 Turn Left
```
4
1 0
A 0 0
2 1
A B 1 0
B A 0 1
4 6
A 0 0
B 0 10
C 10 0
D 10 10
E 5 5
A B
B C
C D
E C
D E
0 0
```
AIZU p01344 Bouldering
```
10
2 2 2
11 11
12 10
14 10
15 10
16 10
17 10
18 10
19 10
20 10
```
AIZU p01512 Tree Allocation
```
3 1
1
2
3 2
1
1
10 4
1
1
2
3
3
4
4
4
5
0 0
```
AIZU p01682 Shipura
```
S< S< 12 >> 2 > >
123 >> 1 >> 1
1000000000   >>129
S<S<S<S<S<2>>>>>
S  <S< S<2013    >>> 11 >>> 10 >
#
```
AIZU p01826 Live Programming
```
1 2
10 200
100

1 1
1000

3 10
100 200 300
100 200 300
100 200 300

3 10
100 200 300
100 200 300
100 200 300

```
AIZU p01961 RPG Maker
```
9 7
.......
.......
*.....*
.......
..@....
.......
*......
.......
....*..
```
AIZU p02108 Donuts Purchase
```
3 2
1 2 1
0 1
1 2
```
AIZU p02248 String Search
```
aabaaa
aa
```

```
xyzz
yz
```

```
abc
xyz
```

```
abcde
abc
```
AIZU p02396 Print Test Cases
3
5
11
7
8
19
0