CODECHEF cdva1501
1
2
3
4
5
6
7
8
9
10
CODECHEF date
1
1/02/2025
CODECHEF ieeet02
```
1
-1
```
CODECHEF mtrick
```
1
3
1 1 1
2 3 1000
ARM
```
CODECHEF rotation
```
# 1. Not handling invalid inputs

1 1
a

# 2. Not handling edge cases

0 0

# 3. Not using the correct data structures

5 5
1 2 3 4 5
R 1

# 4. Not using the correct algorithms

5 5
1 2 3 4 5
R 1
C 4
R 5

# 5. Not testing the program thoroughly

5 5
1 2 3 4 5
R 1
C 4
R 5
A 3
R 2

# 6. Not using version control

5 5
1 2 3 4 5
R 1
C 4
R 5
A 3
R 2

# 7. Not documenting the program

5 5
1 2 3 4 5
R 1
C 4
R 5
A 3
R 2
CODECHEF voters
5 6 5
23
30
42
57
90
21 
23 
35 
57 
90 
92 
21 
23 
30 
57 
90
CODEFORCES 101_B. Buses
**Incorrect input format:**
```
1 1
0 1
```

**Incorrect algorithm:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s == 0 and t == n:
        ways += 1

print(ways)
```

**Off-by-one errors:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```

**Memory leaks:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```

**Race conditions:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```

**Synchronization errors:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```

**Deadlocks:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```

**Security vulnerabilities:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```

**Uncaught exceptions:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```

**Other bugs:**
```
n, m = map(int, input().split())

ways = 0
for i in range(m):
    s, t = map(int, input().split())
    if s <= t:
        ways += 1

print(ways)
```
CODEFORCES 1042_F. Leaf Sets
**Incorrect implementation of the DFS algorithm:**

```
n, k = map(int, input().split())
graph = [[] for _ in range(n)]
for _ in range(n - 1):
    v, u = map(int, input().split())
    graph[v - 1].append(u - 1)
    graph[u - 1].append(v - 1)

visited = [False] * n

def dfs(graph, vertex, visited):
    visited[vertex] = True
    for neighbor in graph[vertex]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited)

dfs(graph, 0, visited)

print(n)
```

**Incorrect calculation of the maximum distance between two leaves:**

```
n, k = map(int, input().split())
graph = [[] for _ in range(n)]
for _ in range(n - 1):
    v, u = map(int, input().split())
    graph[v - 1].append(u - 1)
    graph[u - 1].append(v - 1)

def max_distance(graph, leaf1, leaf2):
    visited = [False] * n
    distance = 0

    # Perform a breadth-first search from each leaf vertex.
    queue1 = [leaf1]
    queue2 = [leaf2]

    # Mark the leaf vertices as visited.
    visited[leaf1] = True
    visited[leaf2] = True

    # While there are still vertices in either queue, dequeue the next vertex and explore its adjacent vertices.
    while queue1 or queue2:
        if queue1:
            vertex = queue1.pop(0)

            # Explore all of the adjacent vertices of the current vertex.
            for neighbor in graph[vertex]:
                if not visited[neighbor]:
                    # Mark the adjacent vertex as visited.
                    visited[neighbor] = True

                    # Update the distance if the adjacent vertex is closer to the other leaf vertex.
                    if distance < abs(neighbor - leaf2):
                        distance = abs(neighbor - leaf2)

        if queue2:
            vertex = queue2.pop(0)

            # Explore all of the adjacent vertices of the current vertex.
            for neighbor in graph[vertex]:
                if not visited[neighbor]:
                    # Mark the adjacent vertex as visited.
                    visited[neighbor] = True

                    # Update the distance if the adjacent vertex is closer to the other leaf vertex.
                    if distance < abs(neighbor - leaf1):
                        distance = abs(neighbor - leaf1)

    return distance

print(max_distance(graph, 0, 1))
```

**Incorrect calculation of the number of beautiful sets:**

```
n, k = map(int, input().split())
graph = [[] for _ in range(n)]
for _ in range(n - 1):
    v, u = map(int, input().split())
    graph[v - 1].append(u - 1)
    graph[u - 1].append(v - 1)

def find_connected_components(graph):
    connected_components = []
    visited = [False] * n

    for i in range(n):
        if not visited[i]:
            connected_component = []
            dfs(graph, i, connected_component, visited)
            connected_components.append(connected_component)

    return connected_components

def dfs(graph, vertex, connected_component, visited):
    visited[vertex] = True
    connected_component.append(vertex)

    for neighbor in graph[vertex]:
        if not visited[neighbor]:
            dfs(graph, neighbor, connected_component, visited)

connected_components = find_connected_components(graph)

print(len(connected_components))
```

**Correct implementation:**

```
n, k = map(int, input().split())
graph = [[] for _ in range(n)]
for _ in range(n - 1):
    v, u =
CODEFORCES 1065_E. Side Transmutations
```
3 1 2
1
```
```
9 2 26
2 3
```
```
12 3 1
2 5 6
```
CODEFORCES 1088_C. Ehab and a 2-operation task
```
# 1. Using the wrong data type for `n` or `a_i`.

```
10
1.2 2.3 3.4 4.5 5.6 6.7 7.8 8.9 10.0
```

# 2. Using the wrong index for an operation.

```
10
1 2 3 4 5 6 7 8 9 10
```

# 3. Using the wrong value for `x`.

```
10
1 2 3 4 5 6 7 8 9 10
```

# 4. Using too many operations.

```
10
1 2 3 4 5 6 7 8 9 10
```

# 5. Not handling the case where the array is already increasing.

```
10
1 2 3 4 5 6 7 8 9 10
```

# 6. Not handling the case where the array is decreasing.

```
10
10 9 8 7 6 5 4 3 2 1
```

# 7. Not handling the case where the array contains duplicate elements.

```
10
1 1 2 3 4 5 6 7 8 9
```
CODEFORCES 1107_C. Brutality
```
4 2
1 5 16 18
baaaa
```
```
5 5
2 4 1 3 1000
aaaaa
```
```
5 4
2 4 1 3 1000
aaaaa
```
```
8 1
10 15 2 1 4 8 15 16
qqwweerr
```
```
6 3
14 18 9 19 2 15
cccccc
```
```
2 1
10 10
qq
```
CODEFORCES 1136_C. Nastya Is Transposing Matrices
```
2 2
1 1
6 1
1 6
1 1

2 2
4 4
4 5
5 4
4 4

3 3
1 2 3
4 5 6
7 8 9
1 4 7
2 5 6
3 8 9
```
CODEFORCES 1154_G. Minimum Possible LCM
```
# Problem: CODEFORCES 1154_G. Minimum Possible LCM

# Input:
5
2 4 8 3 6

# Output:
1 2
```
CODEFORCES 1176_E. Cover it!
1. **Incorrect input format**

```
1
3 3
1 2
2 3
```

This input is incorrect because the number of vertices is not greater than 2.

2. **Incorrect output format**

```
1
1 2 3
```

This output is incorrect because the numbers in the output are not separated by spaces.

3. **Undefined behavior**

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d %d ", &n, &m);
    int a[m][2];
    for (int i = 0; i < m; i++) {
        scanf(" %d %d ", &a[i][0], &a[i][1]);
    }
    return 0;
}
```

This code has undefined behavior because it is accessing the memory of a variable that has not been initialized.

4. **Memory leaks**

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d %d ", &n, &m);
    int a[m][2];
    for (int i = 0; i < m; i++) {
        scanf(" %d %d ", &a[i][0], &a[i][1]);
    }
    return 0;
}
```

This code has a memory leak because it is not freeing the memory that is allocated for the array `a`.

5. **Race conditions**

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d %d ", &n, &m);
    int a[m][2];
    for (int i = 0; i < m; i++) {
        scanf(" %d %d ", &a[i][0], &a[i][1]);
    }
    return 0;
}
```

This code has a race condition because two threads are trying to access the same data at the same time. This can lead to the data being corrupted or incorrect results being produced.

6. **Deadlocks**

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d %d ", &n, &m);
    int a[m][2];
    for (int i = 0; i < m; i++) {
        scanf(" %d %d ", &a[i][0], &a[i][1]);
    }
    return 0;
}
```

This code has a deadlock because two threads are waiting for each other to release a resource, and neither thread can proceed. This can eventually lead to the program freezing or crashing.

7. **Security vulnerabilities**

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d %d ", &n, &m);
    int a[m][2];
    for (int i = 0; i < m; i++) {
        scanf(" %d %d ", &a[i][0], &a[i][1]);
    }
    return 0;
}
```

This code has a security vulnerability because it is using a hard-coded password. This password can be easily guessed by an attacker, and it can be used to gain unauthorized access to the system.

8. **Incorrect algorithm**

```
#include <stdio.h>

int main() {
    int n, m;
    scanf(" %d %d ", &n, &m);
    int a[m][2];
    for (int i = 0; i < m; i++) {
        scanf(" %d %d ", &a[i][0], &a[i][1]);
    }
    return 0;
}
```

This code is using an incorrect algorithm to find the minimum value in an array. This algorithm will not work correctly if the array is sorted in descending order.
CODEFORCES 1195_D1. Submarine in the Rybinsk Sea (easy edition)
```
3
12 33 45
```
```
2
123 456
```
```
1
1
```
```
5
1000000000 1000000000 1000000000 1000000000 1000000000
```
CODEFORCES 1211_H. Road Repair in Treeland
```
1
3
1 2
2 3
```
```
2
6
1 2
1 3
1 4
1 5
1 6
```
```
3
4
1 2
2 3
3 4
```
CODEFORCES 1234_F. Yet Another Substring Reverse
1. ```
abacaba
```
2. ```
abcdecdf
```
3. ```
aabbcc
```
4. ```
abcdeefc
```
5. ```
abc
```
6. ```
a
```
7. ```
b
```
8. ```
t
```
9. ```
tttttt
```
10. ```
abcdefghijklmnopqrstuvwxyz
```
CODEFORCES 1253_E. Antenna Coverage
**Incorrect input format**

```
1 1
1 1
```

**Incorrect output format**

```
1
```

**Insufficient memory**

```
1000000 1000000
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
```

**Incorrect implementation of the dynamic programming algorithm**

```
n, m = map(int, input().split())
antennas = []
for _ in range(n):
    x, s = map(int, input().split())
    antennas.append((x, s))

dp = [0] * (m+1)
for x, s in antennas:
    for i in range(x-s+1, x+s+1):
        dp[i] = max(dp[i], dp[i-s] + 1)

print(dp[-1])
```

**Incorrect implementation of the greedy algorithm**

```
n, m = map(int, input().split())
antennas = []
for _ in range(n):
    x, s = map(int, input().split())
    antennas.append((x, s))

antennas.sort(key=lambda x: x[1], reverse=True)

covered = set()
coins = 0
for x, s in antennas:
    if x not in covered:
        coins += s
        covered.add(x)

print(coins)
```

**Incorrect implementation of the brute force algorithm**

```
n, m = map(int, input().split())
antennas = []
for _ in range(n):
    x, s = map(int, input().split())
    antennas.append((x, s))

def cover(positions):
    for pos in positions:
        if pos not in covered:
            return False
    return True

covered = set()
coins = 0
for i in range(1, m+1):
    for j in range(i, m+1):
        if cover([i, j]):
            coins += min(j-i+1, m-j+i+1)

print(coins)
```

**Incorrect implementation of the math algorithm**

```
n, m = map(int, input().split())

print(n*(n+1)//2)
```
CODEFORCES 1277_D. Let's Play the Words?
```
3
10
0001 0111 1000 0011 0100 1100 1010 0001 0000 0001
1
0
5
0001 0111 1000 0011 0100 1100 1010 0001 0000 0001
0
3
00001 00000 00010
```
CODEFORCES 1297_D. Bonus Distribution 
1
6 2
8 1 2 6 4 3 5

CODEFORCES 1320_E. Treeland and Viruses
```
n = input()

"""
Incorrect data type.
"""

# v = int(n)

"""
Incorrect variable name.
"""

v = n

"""
Incorrect logic.
"""

infected = 0

while infected < v:
    infected += 1

"""
Off-by-one error.
"""

print(infected)

"""
Infinite loop.
"""

while True:
    pass
```
CODEFORCES 133_C. Turing Tape
```
# Hello, World!

238
108
112
0
64
194
48
26
244
168
24
16
162
```

```
# 1234567890

108
141
219
153
73
211
113
203
133
157
165
109
```

```
# !@#$%^&*()_+

64
175
192
223
230
56
40
16
20
24
8
162
```

```
# abcdefghijklmnopqrstuvwxyz

255
127
63
31
15
7
3
1
0
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304
8388608
16777216
33554432
67108864
134217728
268435456
536870912
1073741824
2147483648
4294967296
8589934592
17179869184
34359738368
68719476736
137438953472
274877906944
549755813888
1099511627776
2199023255552
4398046511104
8796093022208
17592186044416
35184372088832
70368744177664
140737488355328
281474976710656
562949953421312
1125899906842624
2251799813685248
4503599627370496
9007199254740992
18014398509481984
36028797018963968
72057594037927936
144115188075855872
288230376151711744
576460752303423488
1152921504606846976
2305843009213693952
4611686018427387904
9223372036854775808
```
CODEFORCES 1361_D. Johnny and James
```
6 2
0 0
1 1
2 2
3 3
0 1
0 2

6 5
0 0
1 1
2 2
3 3
0 1
0 2

13 10
0 0
1 0
2 0
3 0
4 0
5 0
6 0
7 0
8 0
9 0
0 -2
0 1
0 2

10 5
2 2
4 4
3 5
6 10
0 5
0 0
5 0
10 0
0 10
4 7
```
CODEFORCES 1381_E. Origami
```
# 1381E. Origami

import sys

input = sys.stdin.readline

n, q = map(int, input().split())

p = [list(map(int, input().split())) for _ in range(n)]

def ccw(p1, p2, p3):
    return (p2[0] - p1[0]) * (p3[1] - p1[1]) - (p2[1] - p1[1]) * (p3[0] - p1[0])

def intersect(p1, p2, p3, p4):
    return ccw(p1, p2, p3) * ccw(p1, p2, p4) <= 0 and ccw(p3, p4, p1) * ccw(p3, p4, p2) <= 0

def convex_hull(p):
    p.sort()
    hull = []
    n = len(p)
    l = 0
    r = n - 1

    while l < r:
        while l < r and intersect(p[l], p[l + 1], p[r], p[r - 1]):
            r -= 1
        hull.append(p[l])
        l += 1

    while l < r:
        hull.append(p[r])
        r -= 1

    return hull

def area(p):
    s = 0
    for i in range(1, len(p)):
        s += p[i - 1][0] * p[i][1] - p[i - 1][1] * p[i][0]
    return s / 2

hull = convex_hull(p)

for _ in range(q):
    x = int(input())
    ans = 0
    l = 0
    r = len(hull) - 1

    while l < r:
        if hull[l][0] <= x <= hull[r][0]:
            ans += area(hull[l + 1:r])
            l = r
        else:
            if hull[l][0] < x:
                l += 1
            else:
                r -= 1

    print(ans)
```
CODEFORCES 1401_F. Reverse and Swap
```
6 16
1 3 1
3 3
2 1
3 2
4 1 6
1 5 16
4 8 8
3 0
```
CODEFORCES 1424_M. Ancient Language
```
1 1
2
a
```

```
1 1
3
b
```

```
3 2
0
a
aca
1
b
c
```

```
4 4
0
a
aca
acba
1
ab
c
ccb
2
b
bbb
```

```
5 3
0
a
aca
acba
1
ab
c
ccb
2
b
bbb
4
d
ddd
```

```
1 1
100
```
CODEFORCES 1446_D1. Frequency Problem (Easy Version)
```
# 1

n = 4
a = [1, 1, 2, 2]
```

```
# 2

n = 8
a = [1, 1, 1, 5, 4, 1, 3, 1]
```

```
# 3

n = 2
a = [1, 1]
```

```
# 4

n = 100000
a = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
```

```
# 5

n = 100000
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
```

```
# 6

n = 100000
a = [i for i in range(100000)]
```

```
# 7

n = 100000
a = [i for i in range(100000)] + [1]
```

```
# 8

n = 100000
a = [i for i in range(100000)] + [1, 2]
```

```
# 9

n = 100000
a = [i for i in range(100000)] + [1, 2, 3]
```

```
# 10

n = 100000
a = [i for i in range(100000)] + [1, 2, 3, 4]
```
CODEFORCES 1470_D. Strange Housing
```
2
3 2
3 2
2 1
4 2
1 4
2 3
```
CODEFORCES 1497_C2. k-LCM (hard version)
```
1
1 1
```

```
2
10 5
100 10
```
CODEFORCES 151_B. Phone Numbers
**Incorrect input format:**

```
1
5 Gleb
66-66-66
55-55-55
01-01-01
65-43-21
12-34-56
```

This input is incorrect because it does not have a space between the number of phone numbers and the name of the friend. This will cause the program to crash.

**Incorrect logic:**

```
n = int(input())
for i in range(n):
    s, name = input().split()
    nums = []
    for j in range(int(s)):
        nums.append(input())
    # Find the maximum number of taxi numbers
    max_taxi = 0
    for num in nums:
        if num.isdigit() and len(num) == 6 and num.count(num[0]) == 6:
            max_taxi = max(max_taxi, num.count(num[0]))
    # Find the maximum number of pizza delivery numbers
    max_pizza = 0
    for num in nums:
        if num.isdigit() and len(num) == 6 and num[0] < num[1] and num[1] < num[2] and num[2] < num[3] and num[3] < num[4] and num[4] < num[5]:
            max_pizza = max(max_pizza, num.count(num[0]))
    # Find the maximum number of girls' numbers
    max_girls = 0
    for num in nums:
        if num.isdigit() and len(num) == 6 and num.count(num[0]) != 6 and num[0] < num[1] and num[1] < num[2] and num[2] < num[3] and num[3] < num[4] and num[4] < num[5]:
            max_girls = max(max_girls, num.count(num[0]))
    # Print the friends who have the maximum number of each type of number
    if max_taxi == 0:
        print("If you want to call a taxi, you should call:")
        print("None")
    else:
        print("If you want to call a taxi, you should call:")
        print(name)
    if max_pizza == 0:
        print("If you want to order a pizza, you should call:")
        print("None")
    else:
        print("If you want to order a pizza, you should call:")
        print(name)
    if max_girls == 0:
        print("If you want to go to a cafe with a wonderful girl, you should call:")
        print("None")
    else:
        print("If you want to go to a cafe with a wonderful girl, you should call:")
        print(name)
```

This program will not work correctly because it does not correctly identify the taxi numbers, pizza delivery numbers, and girls' numbers. For example, the number "123456" will be incorrectly identified as a taxi number, even though it is not a six-digit number with all the same digits. This will cause the program to output incorrect results.

**Off-by-one errors:**

```
n = int(input())
for i in range(n):
    s, name = input().split()
    nums = []
    for j in range(int(s)):
        nums.append(input())
    # Find the maximum number of taxi numbers
    max_taxi = 0
    for num in nums:
        if num.isdigit() and len(num) == 6 and num.count(num[0]) == 6:
            max_taxi = max(max_taxi, num.count(num[0]))
    # Find the maximum number of pizza delivery numbers
    max_pizza = 0
    for num in nums:
        if num.isdigit() and len(num) == 6 and num[0] < num[1] and num[1] < num[2] and num[2] < num[3] and num[3] < num[4] and num[4] < num[5]:

CODEFORCES 1547_B. Alphabetical Strings
```
1
z
```

```
1
ddcba
```

```
1
1
```

```
1
aa
```

```
1
a
```

```
1
z
```

```
2
ba
ab
```

```
2
bac
ihfcbadeg
```

```
2
xyz
NO
```

```
1
aa
```
CODEFORCES 174_D. Variable, or There and Back Again
```
3 1
1 0 2
1 3
```
```
4 3
1 0 0 2
1 2
2 3
3 4
```
```
3 1
2 0 1
1 3
```
```
3 1
3 0 1
1 2
```
CODEFORCES 194_E. Hamming Distance
```
1 1 1
2 2
2
```
```
2 2 2
2 2
2
```
```
4 4 4
4 4
4
```
```
1 3 4
1 4
2
```
```
4 2 2
3 2
3
CODEFORCES 218_E. Formurosa
```
2
(?^?)
10
?
2
((?^?)&&?)
```
CODEFORCES 242_B. Big Segment
```
1
1 1
```

```
3
1 5
2 3
1 10
```

```
5
1 1
2 3
1 10
7 10
7 7
```

```
10
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
```
CODEFORCES 267_C. Berland Traffic
```
2
3
1 2 2
1 2 4
2 1 1000


7
11
1 2 7
1 2 7
1 3 7
1 4 7
2 3 7
2 5 7
3 6 7
4 7 7
5 4 7
5 6 7
6 7 7
```
CODEFORCES 290_C. WTF?

CODEFORCES 316_B1. EKG
```
1 1
0
```
```
2 1
0 0
```
```
6 1
2 0 4 0 6 0
```
```
6 2
2 3 0 5 6 0
```
```
6 2
0 0 1 0 4 5
```
```
4 1
0 0 0 0
```
```
6 1
2 0 4 0 6 0
```
```
6 2
2 3 0 5 6 0
```
```
6 2
0 0 1 0 4 5
```
```
4 1
0 0 0 0
```
```
6 1
2 0 4 0 6 0
```
```
6 2
2 3 0 5 6 0
```
```
6 2
0 0 1 0 4 5
```
```
4 1
0 0 0 0
```
CODEFORCES 338_E. Optimize!
5 2 10
5 3
1 8 5 5 7
CODEFORCES 361_B. Levko and Permutation
```
1 1
2 1
3 0
4 2
5 2
6 3
7 2
8 3
9 3
10 5
11 4
12 4
13 5
14 4
15 5
16 5
17 5
18 5
19 5
20 5
```
CODEFORCES 384_E. Propagating tree

CODEFORCES 405_D. Toy Sum
```
1
1
```

```
3
1 2 3
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
3
999999 1000000 1000001
```
CODEFORCES 432_E. Square Tiling
```
1 3
```
```
2 2
```
```
3 4
```
CODEFORCES 455_B. A Lot of Games
```
# 1. Incorrect input format

2 3
a
b
```

```
# 2. Incorrect data type

2 3
a
1
```

```
# 3. Incorrect string length

2 3
a
bbbbb
```

```
# 4. Incorrect character set

2 3
a
!
```

```
# 5. Incorrect number of games

2 1000000000
a
b
```

```
# 6. Incorrect number of strings

0 3
a
b
c
```

```
# 7. Incorrect string contents

0 3

```

```
# 8. Incorrect game logic

2 3
a
b
c
```
CODEFORCES 477_E. Dreamoon and Notepad
```
1
2
1
3
1 0 1 1
```
CODEFORCES 500_B. New Year Permutation
```
1
1
```

```
2
1 2
0 0
```

```
3
1 2 3
1 0 0
0 1 0
0 0 1
```

```
4
1 2 3 4
0 0 0 1
0 0 1 0
0 1 0 0
1 0 0 0
```

```
5
4 2 1 5 3
00100
00011
10010
01101
01010
```

```
6
5 2 4 6 1 3
0000011
0000010
0001000
0100100
0010000
1000000
```

```
7
5 2 4 3 6 7 1
0001001
0000000
0000010
1000001
0000000
0010000
1001000
```

```
8
1 2 3 4 5 6 7 8
00000001
00000010
00000100
00001000
00010000
00100000
01000000
10000000
```

```
9
1 2 3 4 5 6 7 8 9
00000001
00000010
00000100
00001000
00010000
00100000
01000000
10000000
00010000
```

```
10
1 2 3 4 5 6 7 8 9 10
00000001
00000010
00000100
00001000
00010000
00100000
01000000
10000000
00010000
10000000
```

```
11
1 2 3 4 5 6 7 8 9 10 11
00000001
00000010
00000100
00001000
00010000
00100000
01000000
10000000
00010000
10000000
00001000
```

```
12
1 2 3 4 5 6 7 8 9 10 11 12
00000001
00000010
00000100
00001000
00010000
00100000
01000000
10000000
00010000
10000000
00001000
00000100
```
CODEFORCES 525_E. Anya and Cubes
```
2 2 30
4 3
```

```
2 2 7
4 3
```

```
3 1 1
1 1 1
```

```
1 0 1
1
```

```
3 1 2
1 2 1
```

```
4 2 3
1 1 1 1
```

```
5 2 10
1 3 2 1 2
```

```
10 3 10
10 10 10 10 10 10 10 10 10 10
```
CODEFORCES 551_A. GukiZ and Contest
```
3
1 3 3

1
1

5
3 5 3 4 5

10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 578_B. "Or" Game
```
3 1 2
1 1 1
```

```
4 2 3
1 2 4 8
```

```
5 4 2
1 2 3 4 5
```

```
7 4 3
1 2 3 4 5 6 7
```

```
1000000 1000000 10
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 59_E. Shortest Path
**Incorrect input format**

```
4 4 1
1 2
2 3
3 4
4 1
1 4 3
```

**Incorrect data type**

```
4 4 1
1 2
2 3
3 4
1 3
a 2 3
```

**Incorrect logic**

```
4 4 1
1 2
2 3
3 4
1 3
1 2 3
1 3 4
```

**Incorrect output format**

```
4 1 2 3 4
```

**Runtime errors**

```
4 4 1
1 2
2 3
3 4
1 3
1 2 3
```

**Logic errors**

```
4 4 1
1 2
2 3
3 4
1 3
1 2 4
```

**Security vulnerabilities**

```
4 4 1
1 2
2 3
3 4
1 3
1 2 3
```

**Usability problems**

```
4 4 1
1 2
2 3
3 4
1 3
1 2 3
```

**Performance problems**

```
4 4 1
1 2
2 3
3 4
1 3
1 2 3
```
CODEFORCES 621_C. Wet Shark and Flowers
```
3 2
1 2
420 421
420420 420421

3 5
1 4
2 3
11 14
```
CODEFORCES 643_A. Bear and Colors
```
2
1 2

4
1 1 1 2

4
1 2 1 2

3
1 1 1

5
1 1 2 2 2
```
CODEFORCES 670_A. Holidays
```
1
2
10
```
CODEFORCES 691_C. Exponential notation
1. Incorrect input format
```
-100
```
2. Incorrect output format
```
1.23400
```
3. Incorrect calculation of exponent
```
1.23400
```
4. Incorrect rounding of decimals
```
1.23400
```
5. Incorrect handling of special cases
```
0
```
6. Other bugs
```
1.23400
```
CODEFORCES 716_C. Plus and Square Root

CODEFORCES 736_E. Chess Championship
```
5 5
8 6 4 2 0
```
CODEFORCES 760_E. Nikita and stack
```
1
1 1 2
```

```
2
1 1 2
2 0
```

```
3
1 1 2
2 1 3
3 0
```

```
5
5 0
4 0
3 1 1
2 1 1
1 1 2
```

```
10
10 1 10
9 1 9
8 1 8
7 1 7
6 1 6
5 1 5
4 1 4
3 1 3
2 1 2
1 0
```
CODEFORCES 784_A. Numbers Joke
1. Incorrect input format
```
a = '1'
```
2. Incorrect calculation
```
a = 3
```
3. Off-by-one error
```
a = 3
```
4. Memory leak
```
a = 3
```
5. Race condition
```
a = 3
```
6. Deadlock
```
a = 3
```
7. Security vulnerability
```
a = 3
```
CODEFORCES 804_F. Fake bullions
```
2 2 1
01
00
5 11000
6 100000
```

```
5 2 1
00000
10000
11011
11000
11010
2 00
1 1
6 100110
1 0
1 0
```

```
6 2 1
010101
000000
101110
011100
000001
100000
1 1
1 1
3 1000
2 000
```
CODEFORCES 82_E. Corridor
```
1 1 2
-1 1
```

```
2 2 4
-1 0
1 2
```

```
1 5 10
0 10
```

```
100 10 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
-500 500
```
CODEFORCES 851_A. Arpa and a research in Mexican wave
```
10 5 3
```

```
10 5 7
```

```
10 5 12
```

```
10 10 10
```

```
10 1 1
```

```
1 1 1
```

```
1000000000 1000000000 1000000000
```

```
1000000000 1000000000 1
```
CODEFORCES 875_C. National Property
```
2 3
2 1
2 1

2 3
2 1
2 1

4 3
4 3 2 2 1
3 1 1 3
3 2 3 3
2 3 1

3 3
3 1 1 3
3 2 3 3
2 3 1
```
CODEFORCES 89_B. Widget Library
```
1
Widget x(10, 10)
```

```
4
Widget a(10, 10)
HBox b
b.pack(a)
b.set_border(5)
```

```
5
Widget x(10, 10)
HBox y
y.pack(x)
x.set_border(5)
```

```
10
Widget a(10, 10)
HBox b
b.pack(a)
a.set_border(5)
b.set_spacing(10)
b.set_border(0)
```

```
12
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
```

```
16
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
y.set_border(5)
x.set_border(10)
```

```
15
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
y.set_border(5)
x.set_border(10)
y.set_border(0)
```

```
20
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
y.set_border(5)
x.set_border(10)
y.set_border(0)
y.set_spacing(0)
```

```
17
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
y.set_border(5)
x.set_border(10)
y.set_border(0)
y.set_spacing(0)
y.set_border(10)
```

```
19
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
y.set_border(5)
x.set_border(10)
y.set_border(0)
y.set_spacing(0)
y.set_border(10)
x.set_border(0)
```

```
15
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
y.set_border(5)
x.set_border(10)
y.set_border(0)
y.set_spacing(0)
x.set_border(0)
```

```
21
Widget x(10, 10)
HBox y
y.pack(x)
y.pack(x)
y.set_spacing(20)
y.set_border(5)
x.set_border(10)
y.set_border(0)
y.set_spacing(0)
y.set_border(10)
x.set_border(0)
y.set_spacing(0)
```
CODEFORCES 920_D. Tanks
```
2 3 5
2 3

1 2 1

2 3 4

2 3

5 2 0
1 3 5 7 9
```
CODEFORCES 949_B. A Leapfrog in the Array
```
# 4 3
# 2
# 3
# 4

# 13 4
# 10
# 5
# 4
# 8
```
CODEFORCES 977_A. Wrong Subtraction
```
# Input 1:
512 4

# Output 1:
50

# Input 2:
1000000000 9

# Output 2:
1

# Input 3:
-1 1

# Output 3:
Traceback (most recent call last):
  File "test.py", line 10, in <module>
    print(solve(n, k))
  File "test.py", line 7, in solve
    if n < 0:
ValueError: invalid literal for int() with base 10: '-1'

# Input 4:
10 0

# Output 4:
10
```
CODEFORCES 996_E. Leaving the Bar
```
1
1000000 0
```
```
3
0 0
1000000 0
-1000000 0
```
```
8
1000000 0
-1000000 0
0 1000000
0 -1000000
1000000 1000000
-1000000 -1000000
0 0
```
HACKEREARTH batman-vs-the-riddler
1
5
86
23
4
HACKEREARTH city-and-soldiers
**Incorrect data type**
```
1 1
1 1 2
```

**Incorrect format**
```
1 1 2
```

**Off-by-one error**
```
2 4
1 1 2
2 2
1 1 3
3 3
```

**Incorrect logic**
```
4 5
1 1 2
2 2
1 3 4
1 4 1
3 1
```

**Memory leak**
```
1000000 1000000
```

**Timeout**
```
1000000 1000000
```

**Incorrect output**
```
10 10
1 1
2 2
3 3
```
HACKEREARTH even-divisors
```
1
10
```
HACKEREARTH help-the-hungry-grasshopper
```
1
-1
```
HACKEREARTH magic-fruit
1
-5
101
a
yes
HACKEREARTH new-game-of-oz
1
6
291 292 295 297 298 299
HACKEREARTH professor-hatims-experiment
```
2
3 3
1 2
2 3
1 3
4 2
1 2
3 4
```
HACKEREARTH sherlock-and-dice
1
1 3 1
2
1 5 4
2 3 3
HACKEREARTH the-colorful-street-1
```
1
2
11 12 13
14 15 16
HACKEREARTH xenny-and-random-cubes-monk
```
10 4
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
a b c d e f g h i
abcd
```
ATCODER p02651 AtCoder Grand Contest 045 - Xor Battle
```
1
2
1 2
0
```
ATCODER p02780 AtCoder Beginner Contest 154 - Dice in Line
5 3
1 2 2 4 5

4 1
6 6 6 6

10 4
17 13 13 12 15 20 10 13 17 11
ATCODER p02915 AtCoder Beginner Contest 140 - Password
1
2
9
ATCODER p03051 diverta 2019 Programming Contest - XOR Partitioning
```
3
1 2 3

3
1 2 2

32
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

24
1 2 5 3 3 6 1 1 8 8 0 3 3 4 6 6 4 0 7 2 5 4 6 2
```
ATCODER p03192 CADDi 2018 for Beginners - 12/22
1000
9999
1234
1222
9592
3456
-1000
12002
9900
0000
999999999
ATCODER p03341 AtCoder Regular Contest 098 - Attention
5
WEEWW
12
WEWEWEEEWWWE
8
WWWWWEEE
ATCODER p03502 AtCoder Beginner Contest 080 - Harshad Number
1. ```
1
```

2. ```
57
```

3. ```
148
```

4. ```
-12
```

5. ```
10**8
```
ATCODER p03662 AtCoder Regular Contest 078 - Fennec VS. Snuke
```
7
3 6
1 2
3 1
7 4
5 7
1 4

4
1 4
4 2
2 3
```
ATCODER p03816 AtCoder Beginner Contest 053 - Card Eater
```
3
1 2 1
```

```
5
1 2 1 3 7
```

```
15
1 3 5 2 1 3 2 8 8 6 2 6 11 1 1
```
ATCODER p03985 Kyoto University Programming Contest 2016 - Hundred Eyes Monster
```
1
0 0 1000000000 1000000000 1000000000
```
AIZU p00073 Surface Area of Quadrangular Pyramid
1. Incorrect input format

```
-1
4
```

2. Incorrect calculation of the surface area

```
6
4
9999999999999
```

3. Floating-point errors

```
6
4.000000000000001
```

4. Off-by-one errors

```
5
4
```

5. Incorrect use of variables

```
x = 6
h = 4
S = 96.000000
```

6. Uninitialized variables

```
x = h = 0
S = 0.000000
```

7. Logical errors

```
x = -1
h = 4
```
AIZU p00205 Rock
1
2
3
4
5
0

1
1
1
1
1
0

1
2
3
4
5
6
7
8
9
0
AIZU p00364 Bange Hills Tower
```
2 3
1 1
2 2
```
AIZU p00572 Dango Maker
```
3 4
RGWR
GRGG
RGWW
```
AIZU p00719 Traveling by Stagecoach
**1. Input should contain a list of cities with distances between them.**
```
10 10 10 1 10
1 2 10
2 3 20
3 4 30
4 5 40
5 6 50
6 7 60
7 8 70
8 9 80
9 10 90
```

**2. Input should contain a list of cities and the tickets available for each city.**
```
10 10 10 1 10
5 1 3
2 3 5
3 4 7
4 5 9
5 6 11
6 7 13
7 8 15
8 9 17
9 10 19
```

**3. Input should contain a list of cities and the distance between them.**
```
10 10 10 1 10
1 2 10
2 3 20
3 4 30
4 5 40
5 6 50
6 7 60
7 8 70
8 9 80
9 10 90
```

**4. Input should contain a list of cities and the tickets available for each city.**
```
10 10 10 1 10
5 1 3
2 3 5
3 4 7
4 5 9
5 6 11
6 7 13
7 8 15
8 9 17
9 10 19
```
AIZU p00859 Slim Span
```
4 5
1 2 3
1 3 5
1 4 6
2 4 6
3 4 7
4 6
1 2 10
1 3 100
1 4 90
2 3 20
2 4 80
3 4 40
2 1
1 2 1
3 0
3 1
1 2 1
3 3
1 2 2
2 3 5
1 3 6
5 10
1 2 110
1 3 120
1 4 130
1 5 120
2 3 110
2 4 120
2 5 130
3 4 120
3 5 110
4 5 120
5 10
1 2 9384
1 3 887
1 4 2778
1 5 6916
2 3 7794
2 4 8336
2 5 5387
3 4 493
3 5 6650
4 5 1422
5 8
1 2 1
2 3 100
3 4 100
4 5 100
1 5 50
2 5 50
3 5 50
4 1 150
0 0
AIZU p00990 ID
5
5*57*
2
3 9


15
2***9*2*6*1199*
9
0 1 2 3 4 6 7 8 9
AIZU p01122 Flipping Colors
4
3 3 1
2 6
-4
3
1 -10
100
5
-2 -2 -2 -2
-1 -1 -1
-1 -1
1
4
-4 7 6
2 3
-1
0
1
1
1
-1
0
2
1 -1
1
1
3
1 2 -1
3 1 -1
2 3 -1
4
3 2 -1
4 1 -1
2 4 -1
4
1 2 -1
3 1 -1
2 3 -1
2
1 -1
2
1 -1
1
1
1
1
1
1
1
0
AIZU p01261 Bitwise Kingdom
3 3
3 5
0 0
AIZU p01421 Reverse Roads
1. ```
1 1
```

2. ```
2 1
1 2
2 1
```

3. ```
3 3
3 2
1 2
3 1
1 3
```

4. ```
5 6
1 2
2 3
3 4
4 5
1 5
2 5
```

5. ```
5 7
1 2
2 3
3 4
4 5
1 5
2 5
1 4
```
AIZU p01575 Dungeon Master
2 2 1
2 2 2
4 4 5
8 8 10
4 4 11
1 2 0
10 10 10
10 10 11
10 10 12
10 10 13
10 10 14
10 10 15
AIZU p01737 Spotlight Movement
```
2 1 1 9 -1
2 2 1 1 -9 1
1 2 -1 -1 9 -1
```
AIZU p01877 Kitsuchiri
10
0 1 2 3 4 4 3 2 1 0
7
2 6 0
2 4 5
7 9 10
2 4 5
3 8 100
4 6 1000
7 7 1000
AIZU p02013 Prime Routing
5 5 1 5
1 2
1 4
2 3
3 4
3 5
AIZU p02156 Ghost
```
3 1
RRL
5 5 1
3 1 10
```
AIZU p02297 Area
```
3
0 0
2 2
-1 1
```

```
4
0 0
1 1
1 2
0 2
```

```
3
0 0
0 1
0 2
```

```
4
0 0
1 0
2 0
3 0
```
AIZU p02444 Rotate
10
1 2 3 4 5 6 7 8 9 10
1
2 6 9
4
1 3 5 7
2 4 6 8
3 5 7 9
4 6 8 10