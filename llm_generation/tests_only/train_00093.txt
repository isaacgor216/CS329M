CODECHEF cb05
```
1
1
```
CODECHEF crz02
1
1
3
2
5
3
10
4
CODECHEF harry
3
abccde
2
acd
bc
abccde
2
ad
bce
mnopq
3
amn
opsp
qrwas
CODECHEF mgcrnk
```
1
2
0 0
```
```
2
2
0 -4
8 0
```
```
2
2
0 -45
-3  0
```
```
3
3
0 -45 0
-3  0 8
0 7 0
```
CODECHEF recipe
1
3
1 1 1
2
3 2 3 4
4 3 15 9 6
CODECHEF tree
```
2 2
1 2
4 1
```
CODEFORCES 1016_D. Vasya And The Matrix
```
2 3
1 4
1 2 3
```

```
3 3
1 7 6
2 15 12
```

```
2 2
1 2
3 4
```
CODEFORCES 103_D. Time to Raid Cowavans
```
3
1 2 3
2
1 1
1 2
```

```
4
2 3 5 7
3
1 3
2 3
2 2
```
CODEFORCES 1062_E. Company
```
3 1
1 2
1
```
CODEFORCES 1084_D. The Fair Nut and the Best Path
1. Incorrect input format:
```
3
1 3 3
1 2 2
1 3 2
```
2. Incorrect data type:
```
3
1 3 3
a 2 2
1 3 2
```
3. Incorrect logic:
```
3
1 3 3
1 2 2
1 3 2
```
This program will output 3, which is incorrect. The correct answer is 4.
4. Memory leak:
```
n = int(input())
w = list(map(int, input().split()))
for _ in range(n-1):
    u, v, c = map(int, input().split())
```
This program will not release the memory allocated for the array w.
5. Synchronization issues:
```
n = int(input())
w = list(map(int, input().split()))
for _ in range(n-1):
    u, v, c = map(int, input().split())
```
This program will not properly synchronize the access to the array w.
6. Race conditions:
```
n = int(input())
w = list(map(int, input().split()))
for _ in range(n-1):
    u, v, c = map(int, input().split())
```
This program will not properly handle race conditions when two threads are trying to access the same data at the same time.
7. Deadlocks:
```
n = int(input())
w = list(map(int, input().split()))
for _ in range(n-1):
    u, v, c = map(int, input().split())
```
This program will deadlock when two threads are both trying to acquire a lock on the same resource.
CODEFORCES 1104_A. Splitting into digits
1
4
27
123456789
CODEFORCES 1131_F. Asya And Kittens
```
5
1 4
2 5
3 1
4 5
```
CODEFORCES 1152_B. Neko Performs Cat Furrier Transform
```
1
```
```
7
```
```
0
```
CODEFORCES 1173_F. Nauuo and Portals
```
3
1 3 2
3 1 2
```
CODEFORCES 1191_D. Tokitsukaze, CSL and Stone Game
```
1
0


2
1 0


2
2 2


3
2 3 1


3
1 2 3


5
2 2 2 2 2


6
1 2 3 4 5 6


7
1 2 3 4 5 6 7
```
CODEFORCES 120_E. Put Knight!
1. ```
1
1
```

2. ```
2
1
2
```

3. ```
3
10
2
3
```

4. ```
4
10000
9999
1
9998
```

5. ```
5
1000000
1000000
1000000
1000000
1000000
```
CODEFORCES 1230_B. Ania and Minimizing
```
5 3
51528
```

```
3 2
102
```

```
1 1
1
```

```
5 5
99999
```

```
1 0
0
```

```
10 1
1
```

```
9 9
99999
```
CODEFORCES 1251_E2. Voting (Hard Version)
```
1
3
1 5
2 10
2 8
```

```
1
7
0 1
3 1
1 1
6 1
1 1
4 1
4 1
```

```
1
6
2 6
2 3
2 8
2 7
4 4
5 5
```
CODEFORCES 1271_D. Portals
**Incorrect input format:**

```
4 3 7
7 4 17
3 0 8
11 2 0
13 3 5
3 1
2 1
4 3
```

**Incorrect output format:**

```
-1
```

**Incorrect logic:**

```
n, m, k = map(int, input().split())
a = []
b = []
c = []
for i in range(n):
    a.append(list(map(int, input().split())))
for i in range(m):
    u, v = map(int, input().split())

def dfs(i, s):
    if i == n:
        return s
    if s < a[i][0]:
        return -1
    ans = -1
    for j in range(i + 1, n):
        if s - a[i][0] + a[j][0] >= k and b[j] + s - a[i][0] >= 0:
            ans = max(ans, dfs(j, s - a[i][0] + a[j][0]) + c[i])
    return ans

print(dfs(0, k))
```

**Memory leak:**

```
n, m, k = map(int, input().split())
a = []
b = []
c = []
for i in range(n):
    a.append(list(map(int, input().split())))
for i in range(m):
    u, v = map(int, input().split())

def dfs(i, s):
    if i == n:
        return s
    if s < a[i][0]:
        return -1
    ans = -1
    for j in range(i + 1, n):
        if s - a[i][0] + a[j][0] >= k and b[j] + s - a[i][0] >= 0:
            ans = max(ans, dfs(j, s - a[i][0] + a[j][0]) + c[i])
    return ans

res = dfs(0, k)
if res == -1:
    print(-1)
else:
    print(res)
```

**Time complexity:**

```
n, m, k = map(int, input().split())
a = []
b = []
c = []
for i in range(n):
    a.append(list(map(int, input().split())))
for i in range(m):
    u, v = map(int, input().split())

def dfs(i, s):
    if i == n:
        return s
    if s < a[i][0]:
        return -1
    ans = -1
    for j in range(i + 1, n):
        if s - a[i][0] + a[j][0] >= k and b[j] + s - a[i][0] >= 0:
            ans = max(ans, dfs(j, s - a[i][0] + a[j][0]) + c[i])
    return ans

res = dfs(0, k)
if res == -1:
    print(-1)
else:
    print(res)
```

**Incorrect data structures:**

```
n, m, k = map(int, input().split())
a = []
b = []
c = []
for i in range(n):
    a.append(list(map(int, input().split())))
for i in range(m):
    u, v = map(int, input().split())

def dfs(i, s):
    if i == n:
        return s
    if s < a[i][0]:
        return -1
    ans = -1
    for j in range(i + 1, n):
        if s - a[i][0] + a[j][0] >= k and b[j] + 
CODEFORCES 1294_E. Obtain a Permutation
```
3 3
3 2 1
1 2 3
4 5 6


5 3
1 2 3
4 5 6
7 8 9
10 11 12


3 4
1 6 3 4
5 10 7 8
9 2 11 12


2 2
5 6
7 8


1 1
1


10 10
1 2 3 4 5 6 7 8 9 10
2 3 4 5 6 7 8 9 10 1
3 4 5 6 7 8 9 10 1 2
4 5 6 7 8 9 10 1 2 3
5 6 7 8 9 10 1 2 3 4
6 7 8 9 10 1 2 3 4 5
7 8 9 10 1 2 3 4 5 6
8 9 10 1 2 3 4 5 6 7
9 10 1 2 3 4 5 6 7 8
10 1 2 3 4 5 6 7 8 9
```
CODEFORCES 1315_E. Double Elimination
```
3 3
1 7 8
```
```
3 4
1 3 5 7
```
```
4 2
3 6
```
```
2 1
4
```
```
4 3
1 2 3
```
```
4 1
5
```
```
5 1
2
```
```
5 2
1 4
```
```
10 4
1 2 4 6
```
```
10 5
1 2 3 4 5
```
CODEFORCES 1337_A. Ichihime and Triangle
```
# Test case 1: Incorrect input format
1
1 3 5 7

# Test case 2: Incorrect output format
1
1 3 5 7
3 4 5

# Test case 3: Incorrect calculation
1
1 3 5 7
1 2 3

# Test case 4: Off-by-one error
1
1 3 5 7
1 2 4

# Test case 5: Incorrect logic
1
1 3 5 7
1 3 4

# Test case 6: Infinite loop
1
1 3 5 7
1 2 3

# Test case 7: Memory leak
1
1 3 5 7
1 2 3

# Test case 8: Stack overflow
1
1 3 5 7
1 2 3

# Test case 9: Segmentation fault
1
1 3 5 7
1 2 3

# Test case 10: Race condition
1
1 3 5 7
1 2 3
```
CODEFORCES 1359_E. Modular Stability
```
10 2
```
```
7 3
```
```
1337 42
```
```
1 1
```
```
500000 1
```
CODEFORCES 1379_F2. Chess Strikes Back (hard version)
```
1 3 3
1 1
1 5
2 4

1 3 3
1 1
1 5
2 4
```
CODEFORCES 139_E. Mushroom Gnomes - 2
```
1 1
2 2 50 50
1 1
```
```
2 1
2 2 50 50
4 2 50 50
3 1
```
```
100 1
1 100 100 0
```
```
100 100
1 100 0 100
2 100 100 0
3 100 100 0
...
100 100 0
```
CODEFORCES 1423_I. Lookup Tables
```
1 2
0 2 1
3 3 3
```
CODEFORCES 1443_B. Saving the City
```
1
1 1
000
```
```
2
1 1
01000010
5 1
01101110
```
```
3
1 1
0000000000
5 1
0000000000
1 100
0000000000
```
CODEFORCES 1468_K. The Robot
1. ```
1
L
```
2. ```
1
R
```
3. ```
1
D
```
4. ```
1
U
```
5. ```
1
U
L
```
6. ```
2
L
R
```
7. ```
3
R
D
U
```
8. ```
4
RUUDL
```
9. ```
5
LLUU
```
10. ```
6
DDDUUUUU
```
11. ```
7
DDUDUD
```
12. ```
8
LRUDLRUDL
```
13. ```
9
LRUDLRUDLR
```
14. ```
10
LRUDLRUDLRD
```
15. ```
11
LRUDLRUDLRDU
```
16. ```
12
LRUDLRUDLRDUU
```
17. ```
13
LRUDLRUDLRDUUD
```
18. ```
14
LRUDLRUDLRDUUDD
```
19. ```
15
LRUDLRUDLRDUUDDU
```
20. ```
16
LRUDLRUDLRDUUDDUD
```
CODEFORCES 1493_E. Enormous XOR
```
7
0010011
1111010

4
1010
1101

10
11111110
11111110
```
CODEFORCES 1516_B. AGAGA XOOORRR
```
1
3
0 1 2
```
CODEFORCES 1543_C. Need for Pink Slips
```
1
0.1 0.1 0.7 0.2

2
0.1 0.2 0.7 0.2
0.3125 0.6561 0.0314 0.2048

4
0.4998 0.4998 0.0004 0.1666
0.2 0.2 0.6 0.2
```
CODEFORCES 171_D. Broken checker
```
1
2
3
4
5
```
CODEFORCES 191_B. Demonstration
```
5 2
8
2 4 5 3 1
```

```
5 2
8
3 2 4 1 5
```

```
5 4
1000000000000000
5 4 3 2 1
```
CODEFORCES 215_B. Olympic Medal
```
3 1 2 3
1 2
3 3 2 1
1 2
```
CODEFORCES 239_B. Easy Tape Programming
```
10 3
1&gt;6&gt;1120&lt;
4 7
7 10
1 4
```
CODEFORCES 263_E. Rhombus
1. Incorrect input format
```
4 4 2
1 2 3 4
1 1 1 1
2 2 2 2
4 3 2 1
```

2. Incorrect output format
```
4 4 2
1 2 3 4
1 1 1 1
2 2 2 2
4 3 2 1

3 2
```

3. Overflow
```
1000 1000 1000
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
```

4. Incorrect calculation of f(a, b)
```
4 4 2
1 2 3 4
1 1 1 1
2 2 2 2
4 3 2 1

3 1
```

5. Incorrect choice of a and b
```
4 4 2
1 2 3 4
1 1 1 1
2 2 2 2
4 3 2 1

1 4
```

6. Other bugs
```
4 4 2
1 2 3 4
1 1 1 1
2 2 2 2
4 3 2 1

3 2
```
CODEFORCES 287_E. Main Sequence
```
2
1 1
0
```
```
3
1 1 1
0
```
```
4
1 1 1 1
1 3
```
```
4
1 2 2 1
2 3 4
```
```
8
2 2 1 1 1 2 2 1
1 3 4 5 6 7 8
```
```
3
1 1 1
1 2 3
```
```
3
1 1 1
0
```
```
1
1
0
```
CODEFORCES 312_E. Fetch the Treasure
```
10 3 5 2
5 50
7 60
8 100
2 2 5
3
1 3
3
3
```
CODEFORCES 335_C. More Reclamation
```
3 1
1 1
```

```
12 2
4 1
8 1
```

```
1 1
1 2
```

```
1 1
2 1
```

```
1 1
2 2
```
CODEFORCES 358_C. Dima and Containers
```
5
1
2
3
4
5
```
CODEFORCES 381_B. Sereja and Stairs
```
5
1 2 3 4 5
```
```
6
1 1 2 2 3 3
```
```
1
1
```
```
2
1 2
```
```
1000000000
1000000000
```
CODEFORCES 402_A. Nuts
```
3 10 3 3
```
```
3 10 1 3
```
```
100 100 1 1000
```
CODEFORCES 42_B. Game of chess unfinished
**Incorrect input format**

```
a6 b4 c8 z8
```

**Incorrect piece positions**

```
a6 b4 c8 a9
```

**Incorrect number of pieces**

```
a6 b4 c8 a8 b8
```

**Checkmate not detected**

```
a6 c4 b6 c8
```

**Other not detected**

```
a6 b4 c8 a1
```

**Incorrect output format**

```
CHECKMATE OTHER a6 b4 c8 a8
```
CODEFORCES 451_E. Devu and Flowers
1. ```
2 1
1 1
```
2. ```
2 3
1 2
```
3. ```
3 5
1 2 1
```
4. ```
4 6
1 2 1 2
```
5. ```
5 10
1 2 3 4 5
```
CODEFORCES 474_D. Flowers
```
# -*- coding: utf-8 -*-
"""
Created on Fri Feb 25 14:24:20 2022

@author: user
"""

t, k = map(int, input().split())
for _ in range(t):
    ai, bi = map(int, input().split())
    print((bi - ai + 1) * (bi - ai + 2) // 2 % 1000000007)
```

**Incorrect input format**

```
1 2
1 2
```

This input is not in the correct format because it does not have two integers separated by a space. This will cause the program to crash.

**Incorrect calculation of the number of ways to eat flowers**

```
t, k = map(int, input().split())
for _ in range(t):
    ai, bi = map(int, input().split())
    print((bi - ai + 1) * (bi - ai + 1) / 2)
```

This code incorrectly calculates the number of ways to eat flowers by dividing by 2 instead of 2. This will result in an incorrect answer.

**Incorrect modulo operation**

```
t, k = map(int, input().split())
for _ in range(t):
    ai, bi = map(int, input().split())
    print((bi - ai + 1) * (bi - ai + 2) // 2 % 1000000008)
```

This code incorrectly performs the modulo operation by using the wrong modulus. This will result in an incorrect answer.

**Incorrect output format**

```
t, k = map(int, input().split())
for _ in range(t):
    ai, bi = map(int, input().split())
    print((bi - ai + 1) * (bi - ai + 2) // 2)
```

This code incorrectly formats the output by not using modulo. This will result in an incorrect output.

**Other bugs**

```
t, k = map(int, input().split())
for _ in range(t):
    ai, bi = map(int, input().split())
    print((bi - ai + 1) * (bi - ai + 2) // 2 % 1000000007)
```

This code has a bug where it does not initialize the variable `ways`. This will cause the program to crash.
CODEFORCES 498_C. Array and Operations
```
# 498C - Array and Operations

# Inputs
n, m = map(int, input().split())
a = list(map(int, input().split()))

# Good pairs
pairs = []
for i in range(m):
    i, j = map(int, input().split())
    pairs.append((i, j))

# Find the maximum number of operations that can be performed
ans = 0
for i in range(n):
    for j in range(i + 1, n):
        if i + j in pairs:
            ans += 1
print(ans)
```

**Test 1:**
```
3 2
8 3 8
1 2
2 3
```

**Expected output:**
```
0
```

**Test 2:**
```
3 2
8 12 8
1 2
2 3
```

**Expected output:**
```
2
```
CODEFORCES 521_D. Shop
```
2 4 3
13 20
1 1 14
1 2 30
2 1 6
3 2 2
```
CODEFORCES 549_A. Face Detection
**Incorrectly counting the number of faces:**

```
n,m=map(int,input().split())
a=[]
for i in range(n):
    a.append(input())
b=[]
for i in range(n-1):
    for j in range(m-1):
        if a[i][j]=='f' and a[i][j+1]=='a' and a[i+1][j]=='c' and a[i+1][j+1]=='e':
            b.append(1)
print(sum(b))
```

**Not considering overlapping faces:**

```
n,m=map(int,input().split())
a=[]
for i in range(n):
    a.append(input())
b=[]
for i in range(n-1):
    for j in range(m-1):
        if a[i][j]=='f' and a[i][j+1]=='a' and a[i+1][j]=='c' and a[i+1][j+1]=='e':
            b.append(1)
print(sum(b))
```

**Using an inefficient algorithm:**

```
n,m=map(int,input().split())
a=[]
for i in range(n):
    a.append(input())
b=[]
for i in range(n-1):
    for j in range(m-1):
        if a[i][j]=='f' and a[i][j+1]=='a' and a[i+1][j]=='c' and a[i+1][j+1]=='e':
            b.append(1)
print(sum(b))
```

**Using incorrect data types:**

```
n,m=map(int,input().split())
a=[]
for i in range(n):
    a.append(input())
b=[]
for i in range(n-1):
    for j in range(m-1):
        if a[i][j]=='f' and a[i][j+1]=='a' and a[i+1][j]=='c' and a[i+1][j+1]=='e':
            b.append(1)
print(sum(b))
```

**Not handling errors correctly:**

```
n,m=map(int,input().split())
a=[]
for i in range(n):
    a.append(input())
b=[]
for i in range(n-1):
    for j in range(m-1):
        if a[i][j]=='f' and a[i][j+1]=='a' and a[i+1][j]=='c' and a[i+1][j+1]=='e':
            b.append(1)
print(sum(b))
```

**Not testing the code correctly:**

```
n,m=map(int,input().split())
a=[]
for i in range(n):
    a.append(input())
b=[]
for i in range(n-1):
    for j in range(m-1):
        if a[i][j]=='f' and a[i][j+1]=='a' and a[i+1][j]=='c' and a[i+1][j+1]=='e':
            b.append(1)
print(sum(b))
```
CODEFORCES 575_C. Party
```
4
1 2 3 4
2 3 4 1
3 4 1 2
4 1 2 3
5 8 7 1
6 9 81 3
55 78 1 6
1 1 1 1
```
CODEFORCES 597_A. Divisibility
```
1 1 10
0 1 2
-1 1 2
1018 1018 1018
1018 1018 1019
```
CODEFORCES 618_C. Constellation
```
3
0 1
1 0
1 1
```
```
5
0 0
0 2
2 0
2 2
1 1
```
```
10
0 0
0 1
1 0
1 1
2 0
2 1
3 0
3 1
4 0
4 1
```
```
100000
0 0
0 1
1 0
1 1
2 0
2 1
3 0
3 1
4 0
4 1
5 0
5 1
6 0
6 1
7 0
7 1
8 0
8 1
9 0
9 1
10 0
10 1
```
CODEFORCES 639_A. Bear and Displayed Friends
```
3 1 5
100 200 300
1 3
2 3
```

```
4 2 8
300 950 500 200
1 3
2 4
2 3
1 1
1 2
2 1
2 2
2 3
```

```
6 3 9
50 20 51 17 99 24
1 3
1 4
1 5
1 2
2 4
2 2
1 1
2 4
2 3
```
CODEFORCES 666_C. Codeword
```
3
a
2 2
1 bc
2 5
```
```
7
a
2 2
1 bc
2 5
3 4
3 5
2 6
2 7
```
```
7
a
2 2
1 bc
2 5
3 4
3 5
2 6
2 7
2 8
```
CODEFORCES 690_A2. Collective Mindsets (medium)
1

3

99

100

101

1000000000
CODEFORCES 712_E. Memory and Casinos
```
3 13
1 3
1 2
2 3
2 1 1
2 1 2
2 1 3
2 2 2
2 2 3
2 3 3
1 2 2 3
2 1 1
2 1 2
2 1 3
2 2 2
2 2 3
2 3 3
```
CODEFORCES 733_D. Kostya the Sculptor
```
2
10 1 1
5 5 5
```
CODEFORCES 757_E. Bash Plays with Functions
```
1
0 30
```
```
5
0 30
1 25
3 65
2 5
4 48
```
```
10
0 100
1 100
2 100
3 100
4 100
5 100
6 100
7 100
8 100
9 100
```
CODEFORCES 779_B. Weird Rounding
```
100 9
1000000000 1
123456789 9
0 1
```
CODEFORCES 802_J. Send the Fool Further! (easy)
```
4
0 1 4
0 2 2
2 3 3

6
1 2 3
0 2 100
1 4 2
0 3 7
3 5 10

11
1 0 1664
2 0 881
3 2 4670
4 2 1555
5 1 1870
6 2 1265
7 2 288
8 7 2266
9 2 1536
10 6 3378
```
CODEFORCES 825_F. String Compression
```
aaaaaaaaaaaaaaaa
```

```
abcab
```

```
cczabababab
```
CODEFORCES 848_D. Shake It!
3 2
4 4
7 3
31 8
CODEFORCES 870_B. Maximum of Maximums of Minimums
**Incorrect input format**
```
1 1
a
```

**Incorrect array splitting**
```
5 2
1 2 3 4 5
```

**Incorrect calculation of the maximum of the minimums**
```
5 2
1 2 3 4 5
```

**Other bugs**
```
5 2
1 2 3 4 5
```
CODEFORCES 897_A. Scarborough Fair
```
1 1
a
```

```
2 2
ab
1 1 a
```

```
3 1
abc
2 3 b
```

```
4 2
aaba
1 2 b
```

```
5 3
wxhak
3 3 h x
1 5 x a
1 3 w g
```

```
6 3
xyyz
1 3 y x
2 5 y z
1 5 z y
```

```
10 5
zxyabcd
3 3 z x
1 3 z y
2 5 z x
3 5 y x
4 5 x z
```
CODEFORCES 918_B. Radio Station
```
1 1
a 1.1.1.1
block 1.1.1.1;
```

```
3 4
a 1.1.1.1
b 2.2.2.2
c 3.3.3.3
block 2.2.2.2;
cf 3.3.3.3;
unblock 1.1.1.1;
```
CODEFORCES 940_B. Our Tanya is Crying Out Loud
```
10
2
3
1
```
```
9
2
3
1
```
```
10
2
1
20
```
```
10
3
4
5
```
```
19
3
4
2
```
```
1
1
1
1
```
```
0
1
1
1
```
CODEFORCES 967_E. Big Secret
1. ```
3
1 2 3
```
2. ```
6
4 7 7 12 31 61
```
3. ```
5
1 2 3 4 5
```
4. ```
10
1 2 3 4 5 6 7 8 9 10
```
5. ```
100
1 2 3 4 5 6 7 8 9 10 ... 99 100
```
CODEFORCES 993_E. Nikita and Order Statistics
```
5 3
1 2 3 4 5
```

```
2 6
-5 9
```

```
6 99
-1 -1 -1 -1 -1 -1
```
HACKEREARTH atul-and-multiplication-2
1
10 10 100
2
1 1 1
100000 1 100000
2
1000000000 1 1000000000
2
100 100 10000
2
100 100 10000
2
-1 -1 -1
HACKEREARTH choclate-weight
10
10 10 10 10 10
11
12
12 12 12 12 12 12 12 12 12 12
12
HACKEREARTH dummy-4
```
1
999999999999999999
```
```
2
999999999999999999
999999999999999999
```
```
3
123456789
987654321
123456789
```
```
10
123456789
987654321
123456789
123456789
123456789
123456789
123456789
123456789
123456789
```
HACKEREARTH guess-the-triangle
```
1.0 1.0
2.0 2.0
3.0 3.0

1.0 1.0
1.1 1.1
1.2 1.2

1.0 1.0
2.0 2.0
3.0 1.0
```
HACKEREARTH little-vaishnavi-and-plywood-1
2
2 3
1 0
HACKEREARTH mystery-14
1
3
1 2 3

HACKEREARTH prison-break-5
3
4
0 1 1 0
0 0 1 0
0 0 0 0
0 1 1 0
4
0 0 0 1
0 0 0 0
1 1 1 0
1 0 0 0
4
0 1 1 0
0 0 1 1
0 0 0 0
0 1 0 0
HACKEREARTH scheduling-of-task
```
1
2 2
```
```
3
2 2
1 1
4 3
```
```
5
2 2
1 1
4 3
10 1
2 1
```
HACKEREARTH tape-december-easy-easy-medium
```
5 3 10
1 2 3 4 5
```
HACKEREARTH will-rick-survive-or-not-2
```
1
2
2
```

```
2
5
2 4 2 5 6
4
2 2 2 2
```

```
2
2
1 2
```
ATCODER p02631 AtCoder Beginner Contest 171 - Red Scarf
4
20 11 9 24

4
20 11 9 24

4
20 11 9 24

2
9 11
ATCODER p02762 AtCoder Beginner Contest 157 - Friend Suggestions
```
4 4 1
2 1
1 3
3 2
3 4
4 1

5 10 0
1 2
1 3
1 4
1 5
3 2
2 4
2 5
4 3
5 3
4 5

10 9 3
10 1
6 7
8 2
2 5
8 4
7 3
10 9
6 4
5 8
2 6
7 5
3 1
```
ATCODER p02897 AtCoder Beginner Contest 142 - Odds of Oddness
1. ```
4
```
2. ```
5
```
3. ```
1
```
4. ```
2
```
5. ```
100
```
ATCODER p03032 AtCoder Beginner Contest 128 - equeue
```
6 4
-10 8 2 1 2 6
```
```
6 4
-6 -100 50 -2 -5 -3
```
```
6 3
-6 -100 50 -2 -5 -3
```
```
6 5
-10 -10 1 2 3
```
```
6 6
-10 -10 1 2 3
```
ATCODER p03173 Educational DP Contest - Slimes
```
1
1000000000
```

```
2
10 10
```

```
3
1000000000 1000000000 1000000000
```

```
4
10 20 30 40
```

```
5
10 10 10 10 10
```

```
6
7 6 8 6 1 1
```
ATCODER p03321 AtCoder Regular Contest 099 - Independence
**Incorrect input format**
```
5 5
1 2
1 3
3 4
3 5
4 5
```

**Incorrect data type**
```
5 5
1 2
1 3
3 4
3 5
4 5
```

**Incorrect algorithm**
```
5 5
1 2
1 3
3 4
3 5
4 5
```

**Incorrect implementation**
```
5 5
1 2
1 3
3 4
3 5
4 5
```

**Incorrect testing**
```
5 5
1 2
1 3
3 4
3 5
4 5
```
ATCODER p03475 AtCoder Beginner Contest 084 - Special Trains
```
3
6 5 1
1 10 1
```

```
4
12 24 6
52 16 4
99 2 2
```

```
4
12 13 1
44 17 17
66 4096 64
```
ATCODER p03640 AtCoder Regular Contest 080 - Grid Coloring
```
1 1
1
1
```

```
3 5
5
1 2 3 4 5
```

```
2 2
3
2 1 1
```
ATCODER p03796 AtCoder Beginner Contest 055 - Training Camp
```
3
```
```
10
```
```
100000
```
ATCODER p03964 AtCoder Beginner Contest 046 - AtCoDeer and Election Report
```
1
1 1
```

```
2
1 2
2 1
```

```
3
1 2
2 1
3 2
```

```
4
1 1
1 1
1 1
1 1
```

```
5
3 10
48 17
31 199
231 23
3 2
```
AIZU p00055 Sequence
```
1.0
2.0
3.0
4.0
5.0
6.0
7.0
8.0
9.0
10.0
```
AIZU p00186 Aizu Chicken
```
1 100 100 1 10
48 9297 240 126 32
20 3010 157 141 7
30 117002 5680 962 15
8 1673 1712 190 22
64 8478 87 54 307
23 5477 117 92 12
50 7558 1396 187 17
279 88677 4522 514 14
0
```
AIZU p00341 Cuboid Made with Bars
```
1 1 3 4 8 9 7 3 4 5 5 5
```

```
1 1 2 2 3 1 2 3 3 3 1 2
AIZU p00537 Railroad Trip
```
4 4
1 3 2 4
120 90 100
110 50 80
250 70 130
```
AIZU p00699 Nets of Dice
```
6
0 0 0 0 0
0 0 0 0 6
0 2 4 5 3
0 0 1 0 0
0 0 0 0 0
0 0 3 0 0
0 0 2 0 0
0 0 4 1 0
0 0 0 5 0
0 0 0 6 0
0 0 0 3 0
0 0 2 5 0
0 4 1 0 0
0 0 6 0 0
0 0 0 0 0
0 6 2 0 0
0 0 4 0 0
0 1 5 0 0
0 0 3 0 0
0 0 0 0 0
0 0 0 0 6
0 2 4 5 3
0 0 1 0 0
0 0 0 0 0
0 0 0 1 0
0 0 0 0 6
0 2 4 5 3
0 0 0 0 0
0 0 0 0 0
0 0 0 1 0
```
AIZU p00840 Mobile Computing
```
1
0.0
1
1
```

```
1
0.5
1
1
```

```
1
0.99
1
1000
```

```
1
1.0
1
1000
```
AIZU p00972 Eulerian Flight Tour
4 2
1 2
3 4
AIZU p01104 Making Lunch Boxes
4 3
110
101
011
110
7 1
1
1
1
1
1
1
1
4 5
10000
01000
00100
00010
6 6
111111
011000
100000
000010
100001
100100
0 0
AIZU p01241 Finding the Top RPS Player
2 1
10 5
15 10
0 0
AIZU p01403 Farey Sequence
```
2
2
5
```
AIZU p01557 ReverseSort
```
5
1 4 3 5 2
```
AIZU p01719 Invest Master
```
2 2 5
3 2
5 4
```
```
1 2 5
6
10000
```
```
2 3 5
4 5
6 3
8 5
```
```
3 3 10
10 9 6
8 7 3
7 5 1
```
AIZU p01857 Eggs
```
3
5 1
5 2
1 2
```
AIZU p01992 Shiritori Compression
1
apple
AIZU p02138 U and U
2000000000 2000000000
1000000000 1000000000
1000000000 1000000000
1000000000 1000000000
AIZU p02279 Rooted Trees
```
1
0 0
```
```
2
0 1 1
1 0
```
```
3
0 2 1 2
1 0
2 0
```
```
4
1 3 3 2 0
0 0
3 0
2 0
```
```
5
0 3 1 4 5
1 0
2 0
3 4
4 0
5 0
```
```
6
0 3 1 4 5
1 0
2 0
3 4
4 0
5 0
```
```
7
0 3 1 4 5
1 0
2 0
3 4
4 0
5 0
```
```
8
0 3 1 4 5
1 0
2 0
3 4
4 0
5 0
```
```
9
0 3 1 4 5
1 0
2 0
3 4
4 0
5 0
```
```
10
0 3 1 4 5
1 0
2 0
3 4
4 0
5 0
```
AIZU p02426 Bit Mask
```
1
1
2
1 0
0 0
```