CODECHEF atom
```
2
2 2 7
2 2 8
```
CODECHEF clperm
2
5 2
3 5
5 1
1
CODECHEF flow008
1
1
-5
CODECHEF lelemon
```
1
3 1
1
```
CODECHEF power2
1
5
CODECHEF submin
```
5
4 1 2 3 4
4
3
4
6
1
```
CODEFORCES 100_G. Name the album
1. Incorrect input format
```
1
123a 2002
2
123a
123b
```

2. Incorrect output format
```
1
123a 2002
2
123a
123b
```
Output: 123

3. Incorrect data
```
1
123a 2002
2
123a
123b
```
Year is not in the range [1900, 2011].

4. Incorrect algorithm
```
1
123a 2002
2
123a
123b
```
The algorithm should find the album name that has not been used before, but it finds the album name that was used as long ago as possible.

5. Incorrect implementation
```
1
123a 2002
2
123a
123b
```
The code is incorrectly implemented, resulting in a runtime error.
CODEFORCES 1033_D. Divisors
```
3
1
2
3
```

```
1
86028121
```

```
8
4606061759128693
4606066102679989
4606069767552943
4606063116488033
4606063930903637
4606064745319241
4606063930904021
4606065559735517
```

```
3
4
8
16
```
CODEFORCES 1056_B. Divide Candies
**1. Using the wrong data type**

```
n, m = map(int, input().split())
print((n**2 + m - 1) // m)
```

**2. Using the wrong formula**

```
n, m = map(int, input().split())
print(n**2 // m)
```

**3. Not considering the edge cases**

```
n, m = map(int, input().split())
if n == 1:
    print(1)
elif m == 1:
    print(n**2)
else:
    print((n**2 + m - 1) // m)
```

**4. Making a mistake in the implementation**

```
n, m = map(int, input().split())
print((n**2 + m - 1) // m + 1)
```

**5. Not testing the code**

```
n, m = map(int, input().split())
if n == 1:
    assert print(1) == 1
elif m == 1:
    assert print(n**2) == n**2
else:
    assert print((n**2 + m - 1) // m + 1) == (n**2 + m - 1) // m + 1
```
CODEFORCES 1078_C. Vasya and Maximum Matching
```
1
```

```
4
1 2
1 3
1 4
```

```
2
```

```
3
1 2
2 3
```

```
1
```
CODEFORCES 1099_C. Postcard
```
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 15 19:25:30 2022

@author: 100752324
"""

s = input()
k = int(input())

i = 0
j = 0
ans = ""
while i < len(s):
    if s[i] != "*" and s[i] != "?":
        ans += s[i]
        i += 1
    else:
        if i == 0:
            print("Impossible")
            exit()
        if j >= k:
            print("Impossible")
            exit()
        if s[i] == "*":
            ans += ans[j]
            j += 1
        else:
            j += 1
            
if len(ans) != k:
    print("Impossible")
else:
    print(ans)
```
CODEFORCES 111_B. Petya and Divisors
```
1
1 0
```

```
2
4 0
4 1
```

```
3
4 0
4 1
4 2
```

```
4
4 0
4 1
4 2
4 3
```

```
5
4 0
4 1
4 2
4 3
4 4
```

```
6
4 0
4 1
4 2
4 3
4 4
4 5
```

```
7
4 0
4 1
4 2
4 3
4 4
4 5
4 6
```

```
8
4 0
4 1
4 2
4 3
4 4
4 5
4 6
4 7
```

```
9
4 0
4 1
4 2
4 3
4 4
4 5
4 6
4 7
4 8
```

```
10
4 0
4 1
4 2
4 3
4 4
4 5
4 6
4 7
4 8
4 9
```
CODEFORCES 1146_G. Zoning Restrictions
```
3 3 3
1 1 1 1000
2 2 3 1000
3 3 2 1000

4 10 2
2 3 8 76
3 4 7 39
```
CODEFORCES 1167_G. Low Budget Inception
```
10 10
0 10 10 20 20 30 30 40 40 50
10
0 10 20 30 40 50 60 70 80 90
```
CODEFORCES 1186_C. Vus the Cossack and Strings
```
01100010
00110
```
```
1010111110
0110
```
```
0110000011010010
0110000011010010
```
CODEFORCES 1205_B. Shortest Cycle
```
# Incorrect bitwise operation

n = int(input())
a = list(map(int, input().split()))
for i in range(n):
    for j in range(i + 1, n):
        if a[i] & a[j] != 0:
            print(-1)
            exit()
print(n)
```

```
# Incorrect use of the modulus operator

n = int(input())
a = list(map(int, input().split()))
for i in range(n):
    for j in range(i + 1, n):
        if a[i] % a[j] != 0:
            print(-1)
            exit()
print(n)
```

```
# Incorrect use of the range operator

n = int(input())
a = list(map(int, input().split()))
for i in range(0, n):
    for j in range(i + 1, n - 1):
        if a[i] & a[j] != 0:
            print(-1)
            exit()
print(n)
```

```
# Incorrect use of the list comprehension

n = int(input())
a = list(map(int, input().split()))
print(len([[i, j] for i in range(n) for j in range(i + 1, n) if a[i] & a[j] != 0]))
```

```
# Incorrect use of the set comprehension

n = int(input())
a = list(map(int, input().split()))
print(len({(i, j) for i in range(n) for j in range(i + 1, n) if a[i] & a[j] != 0}))
```

```
# Incorrect use of the dictionary comprehension

n = int(input())
a = list(map(int, input().split()))
print(len({(i, j): a[i] & a[j] for i in range(n) for j in range(i + 1, n)}))
```

```
# Incorrect use of the filter function

n = int(input())
a = list(map(int, input().split()))
print(len(filter(lambda x: len({y for y in range(n) if x[0] & y != 0 and x[1] & y != 0}) == 2, [(i, j) for i in range(n) for j in range(i + 1, n)])))
```

```
# Incorrect use of the map function

n = int(input())
a = list(map(int, input().split()))
print(len(map(lambda x: len({y for y in range(n) if x[0] & y != 0 and x[1] & y != 0}), [(i, j) for i in range(n) for j in range(i + 1, n)])))
```

```
# Incorrect use of the reduce function

n = int(input())
a = list(map(int, input().split()))
print(reduce(lambda x, y: x if len({z for z in range(n) if x[0] & z != 0 and x[1] & z != 0} == 2 and len({z for z in range(n) if y[0] & z != 0 and y[1] & z != 0} == 2) else y, [(i, j) for i in range(n) for j in range(i + 1, n)]))
```

```
# Incorrect use of the enumerate function

n = int(input())
a = list(map(int, input().split()))
print(len(list(enumerate([(i, j) for i in range(n) for j in range(i + 1, n) if a[i] & a[j] != 0]))))
```
CODEFORCES 1221_F. Choose a Square
```
1
1 1 1
```
```
2
1 1 -1
2 2 1
```
```
3
1 1 1
2 2 2
3 3 3
```
```
5
0 0 2
1 0 -5
1 1 3
2 3 4
1 4 -4
```
```
6
0 0 2
1 0 -5
1 1 3
2 3 4
1 4 -4
3 1 -1
```
```
10
0 0 2
1 0 -5
1 1 3
2 3 4
1 4 -4
3 1 -1
4 2 5
5 3 6
6 4 7
7 5 8
```
CODEFORCES 1248_C. Ivan the Fool and the Probability Theory
```
1 1
2 2
3 3
4 5
5 5
100000 100000
```
CODEFORCES 1266_G. Permutation Concatenation
```
2
10
```
CODEFORCES 1288_B. Yet Another Meme Problem
```
1
1 1
```
```
1
1 2
```
```
1
100 101
```
```
1
1000000000 1000000001
```
```
1
1000000000 1000000000
```
```
3
1 11
4 2
191 31415926
```
CODEFORCES 130_B. Gnikool Ssalg
```
secrofedoc
!ssalg-gnikool5
```
CODEFORCES 1331_E. Jordan Smiley
1. Incorrect input format:

```
1 2 3
```

2. Overflow:

```
64 64
```

3. Off-by-one errors:

```
0 64
```

4. Incorrect logic:

```
27 28
```

5. Uncaught exceptions:

```
a 1
```
CODEFORCES 1351_C. Skier

CODEFORCES 1371_E1. Asterism (Easy Version)
```
10 3
9 8 7 6 5 4 3 2 1
```
CODEFORCES 1394_B. Boboniu Walks on Graph
```
4 6 3
4 2 1
1 2 2
2 4 3
4 1 4
4 3 5
3 1 6
```

```
5 5 1
1 4 1
5 1 2
2 5 3
4 3 4
3 2 5
```

```
6 13 4
3 5 1
2 5 2
6 3 3
1 4 4
2 6 5
5 3 6
4 1 7
4 3 8
5 2 9
4 2 10
2 1 11
6 1 12
4 6 13
```
CODEFORCES 1418_G. Three Occurrences
1. ```
10
1 2 3 4 1 2 3 1 2 3
```
2. ```
10
1 2 3 4 5 6 7 8 9 10
```
3. ```
1
1
```
CODEFORCES 1436_F. Sum Over Subsets
```
2
1 1
2 1
```

```
4
1 1
2 1
3 1
6 1
```

```
1
1 5
```
CODEFORCES 1461_D. Divide and Summarize
```
2
5 5
1 2 3 4 5
1
8
9
12
6
5 5
3 1 3 1 3
1
2
3
9
11
```
CODEFORCES 1486_E. Paired Payment
**Incorrect input format**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

**Incorrect data type**

```
5 6
1 2 'a'
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

**Mismatched dimensions**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
4 5 7
```

**Incorrect logic**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

Output:

```
0 98 49 25 114 -1
```

The correct output should be:

```
0 98 49 25 114
```

**Off-by-one errors**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

Output:

```
0 98 49 25 114 0
```

The correct output should be:

```
0 98 49 25 114
```

**Memory leaks**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

Output:

```
0 98 49 25 114
```

The program should not leak any memory.

**Race conditions**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

Output:

```
0 98 49 25 114
```

The program should not have any race conditions.

**Deadlocks**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

Output:

```
0 98 49 25 114
```

The program should not have any deadlocks.

**Buffer overflows**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

Output:

```
0 98 49 25 114
```

The program should not have any buffer overflows.

**Security vulnerabilities**

```
5 6
1 2 3
2 3 4
3 4 5
4 5 6
1 5 1
2 4 2
```

Output:

```
0 98 49 25 114
```

The program should not have any security vulnerabilities.
CODEFORCES 1510_F. Fiber Shape
```
3 4
0 0
1 0
0 1


4 5
0 0
1 0
1 1
0 1


5 17
0 0
2 -1
3 0
4 3
-1 4
```
CODEFORCES 1538_A. Stone Game
1
5
1 5 4 3 2
1
2
5
2 1 3 4 5
8
4 2 3 1 8 6 7 5
4
3 4 2 1
4
2 3 1 4
CODEFORCES 164_A. Variable, or There and Back Again
**Incorrect input format**

```
4 3
1 0 0 2
1 2
2 3
3 4
```

**Incorrect output format**

```
1 1 1 1 1
```

**Off-by-one errors**

```
4 3
1 0 0 2
1 2
2 3
3 4
```

**Memory leaks**

```
4 3
1 0 0 2
1 2
2 3
3 4
```

**Incorrect data structures**

```
4 3
1 0 0 2
1 2
2 3
3 4
```

**Incorrect algorithms**

```
4 3
1 0 0 2
1 2
2 3
3 4
```

**Bugs in your logic**

```
4 3
1 0 0 2
1 2
2 3
3 4
```
CODEFORCES 185_B. Mushroom Scientists
1
0 0 0
1 0 0
3
2 0 0
3 1 1
0
2 2 2
CODEFORCES 207_C3. Game with Two Trees
```
2
1 1 a
2 1 a
```
```
1
3
```
CODEFORCES 231_C. To Add or Not to Add
**Incorrect input format:**

```
1 0
```

**Incorrect output format:**

```
1 1
```

**Incorrect calculation of the maximum number of occurrences:**

```
5 3
6 3 4 0 2
```

**Incorrect calculation of the minimum number that reaches the given maximum:**

```
5 3
5 5 5
```

**Incorrect handling of edge cases:**

```
0 0
```

**Incorrect use of variables:**

```
n, k = map(int, input().split())
a = list(map(int, input().split()))
```

**Incorrect use of functions:**

```
def max_occurrences(a, k):
  """
  Finds the maximum number of occurrences of a number in an array.

  Args:
    a: An array of integers.
    k: The maximum number of operations that can be performed.

  Returns:
    The maximum number of occurrences of a number in the array.
  """

  max_occurrences = 0
  for i in range(len(a)):
    for j in range(k):
      if a[i] + j > max_occurrences:
        max_occurrences = a[i] + j
  return max_occurrences

```

**Incorrect use of data structures:**

```
def min_number_that_reaches_maximum(a, k, max_occurrences):
  """
  Finds the minimum number that reaches the given maximum.

  Args:
    a: An array of integers.
    k: The maximum number of operations that can be performed.
    max_occurrences: The maximum number of occurrences of a number in the array.

  Returns:
    The minimum number that reaches the given maximum.
  """

  min_number = 10 ** 9 + 7
  for i in range(len(a)):
    if a[i] + k >= max_occurrences:
      min_number = min(min_number, a[i])
  return min_number

```

**Incorrect logic:**

```
def main():
  n, k = map(int, input().split())
  a = list(map(int, input().split()))
  max_occurrences = max_occurrences(a, k)
  min_number = min_number_that_reaches_maximum(a, k, max_occurrences)
  print(max_occurrences, min_number)

if __name__ == "__main__":
  main()
```

**Incorrect error handling:**

```
try:
  main()
except FileNotFoundError:
  print("File not found")
```
CODEFORCES 257_B. Playing Cubes
```
3 1
```
```
2 4
```
```
1 3
```
```
1 1
```
```
10 10
```
```
1000000 1000000
```
CODEFORCES 280_B. Maximum Xor Secondary
```
5
5 2 1 4 3
```

```
5
9 8 3 5 7
```

```
5
1 2 3 4 5
```
CODEFORCES 303_A. Lucky Permutation Triple
**Incorrect input format**

```
1000000000
```

**Incorrect output format**

```
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
```

**Incorrect logic**

```
n=int(input())
a=[0]*n
b=[0]*n
c=[0]*n
for i in range(n):
    a[i]=i
    b[i]=i
    c[i]=i
print(a)
print(b)
print(c)
```

**Runtime error**

```
n=int(input())
a=[0]*n
b=[0]*n
c=[0]*n
for i in range(n):
    a[i]=i
    b[i]=i
    c[i]=i
print(a)
print(b)
print(c)
1/0
```

**Time limit exceeded**

```
n=int(input())
while n>0:
    n-=1
    print(1)
```
CODEFORCES 32_B. Borze
```
.-.


--.


-..-.--
```
CODEFORCES 350_E. Wrong Floyd
3 3 2
1 2
CODEFORCES 375_A. Divisible by Seven
1689
18906
1234
1234567
16890a
000123456789
CODEFORCES 397_C. On Number of Decompositions into Multipliers
```
1
15
```
```
3
1 1 2
```
```
2
5 7
```
```
1
1000000000
```
```
10
1 1 1 1 1 1 1 1 1 1
```
```
5
10 9 8 7 6
```
CODEFORCES 41_D. Pawn
```
3 3 1
123
456
789
```
```
2 2 10
98
75
```
```
3 3 0
123
456
789
```
CODEFORCES 446_B. DZY Loves Modification
```
2 2 2 2
1 3
2 4

2 2 5 2
1 3
2 4

2 2 5 1
100 100
100 100
```
CODEFORCES 468_C. Hack it!
126444381000032
2333333 2333333333333
CODEFORCES 490_C. Hacking Cypher
1. Incorrect input format:
```
1009 1000
```

2. Incorrect output format:
```
116401024
97 1024


YES
11640
1024
120
12 1


NO
```

3. Incorrect solution:
```
120
12 1


NO
```

4. Time complexity:
```
120
12 1


NO
```

5. Space complexity:
```
120
12 1


NO
```
CODEFORCES 514_C. Watto and Mechanism
```
2 1
abc
cba
```

```
1 1
aa
```

```
1 1
a
```

```
5 5
aa
ab
ac
bc
ba
ac
```

```
6 6
a
ab
ac
bc
ba
cba
ba
```

```
4 4
aaaa
aaab
aaac
aaad
aaac
```
CODEFORCES 540_D. Bad Luck Island
```
1 2 2
1 1 3
2 1 2
```
CODEFORCES 568_E. Longest Increasing Subsequence
10
1 2 3 4 5 6 7 8 9 10
1
10
4
1 2 3 4
CODEFORCES 58_C. Trees
```
3
2 2 2


4
1 2 2 1


0


1
1


3
2 1 1


3
1 2 3


10
1 1 2 3 4 5 6 7 8 9


10
9 8 7 6 5 4 3 2 1 0
CODEFORCES 611_E. New Year and Three Musketeers
1
10
10 20 30
10
CODEFORCES 631_B. Print Check
### Incorrect input format

```
1 1 1
1 1 1
```

This input is incorrect because the number of rows and columns do not match.

### Incorrect output format

```
1 1 1
1 1 1
```

This output is incorrect because it does not contain a newline character after each row.

### Incorrect implementation of the algorithm

```
n, m, k = map(int, input().split())
for _ in range(k):
    op, i, a = map(int, input().split())
    if op == 1:
        for j in range(m):
            print(a, end=' ')
    else:
        for j in range(n):
            print(a, end=' ')
```

This implementation is incorrect because it does not check if the input is valid. For example, it will crash if the number of rows or columns is zero.

### Runtime errors

```
n, m, k = map(int, input().split())
for _ in range(k):
    op, i, a = map(int, input().split())
    if op == 1:
        for j in range(m):
            print(a, end=' ')
    else:
        for j in range(n):
            print(a, end=' ')
```

This implementation will run out of time on large inputs because it does not use any optimizations.

### Memory errors

```
n, m, k = map(int, input().split())
for _ in range(k):
    op, i, a = map(int, input().split())
    if op == 1:
        for j in range(m):
            print(a, end=' ')
    else:
        for j in range(n):
            print(a, end=' ')
```

This implementation will use a lot of memory on large inputs because it does not use any data structures to store the table.

### Correct input format

```
3 3 3
1 1 3
2 2 1
1 2 2
```

This input is correct because the number of rows, columns, and operations are all valid.

### Correct output format

```
3 1 3 
2 2 2 
0 1 0 
```

This output is correct because it contains a newline character after each row and the numbers are correctly formatted.

### Correct implementation of the algorithm

```
n, m, k = map(int, input().split())
table = [[0] * m for _ in range(n)]
for _ in range(k):
    op, i, a = map(int, input().split())
    if op == 1:
        for j in range(m):
            table[i - 1][j] = a
    else:
        for j in range(n):
            table[j][i - 1] = a
for row in table:
    print(*row)
```

This implementation is correct because it correctly reads the input, checks if the input is valid, implements the algorithm correctly, and prints the output in the correct format.

### Runtime optimizations

```
n, m, k = map(int, input().split())
table = [[0] * m for _ in range(n)]
for _ in range(k):
    op, i, a = map(int, input().split())
    if op == 1:
        table[i - 1] = [a] * m
    else:
        table = [[table[j][i - 1] for j in range(n)] for i in range(m)]
for row in table:
    print(*row)
```

This implementation is faster than the previous one because it uses a data structure to store the table.

### Memory optimizations

```
n, m, k = map(int, input().split())
table = [[0] * m for _ in range(n)]
for _ in range(k):
    op, i, a = map(int, input().split())
    if op == 1:
        table[i - 1][:] = [a] * m

CODEFORCES 65_E. Harry Potter and Moving Staircases
```
1 0
```
```
6 4
1 2
1 3
2 3
4 5
```
```
5 5
1 2
1 3
3 4
3 5
4 5
```
```
10 10
1 2
1 3
2 3
4 5
5 6
6 7
7 8
8 9
9 10
```
CODEFORCES 683_D. Chocolate Bar
```
1
1 1 1
```

```
1
2 2 3
```

```
1
3 3 4
```

```
2
1 1 1
2 2 2
```

```
5
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
```
CODEFORCES 706_C. Hard problem
```
2
1 2
ba
ac
```
```
3
1 3 1
aa
ba
ac
```
```
2
5 5
bbb
aaa
```
```
2
3 3
aaa
aa
```
CODEFORCES 729_E. Subordinates
```
# 3 2
# 2 0 2

# 5 3
# 1 0 0 4 1

# 10 9
# 1 1 1 1 1 1 1 1 1

# 3 1
# 3 2 1

# 1 1
# 1
```
CODEFORCES 74_A. Room Leader
```
1
Petr 0 0 0 0 0 0
```
```
2
Petr 0 0 0 0 0 0
tourist 0 0 0 0 0 0
```
```
3
Petr 0 0 0 0 0 0
tourist 0 0 0 0 0 0
Egor 0 0 0 0 0 0
```
```
4
Petr 0 0 0 0 0 0
tourist 0 0 0 0 0 0
Egor 0 0 0 0 0 0
c00lH4x0R 0 0 0 0 0 0
```
```
5
Petr 0 0 0 0 0 0
tourist 0 0 0 0 0 0
Egor 0 0 0 0 0 0
c00lH4x0R 0 0 0 0 0 0
some_participant 0 0 0 0 0 0
```
```
6
Petr 0 0 0 0 0 0
tourist 0 0 0 0 0 0
Egor 0 0 0 0 0 0
c00lH4x0R 0 0 0 0 0 0
some_participant 0 0 0 0 0 0
dummy 0 0 0 0 0 0
```
CODEFORCES 772_E. Verifying Kingdom
```
5
1 2 3
1 2 4
2 4 1
2 3 5
2 4 3
-1
-1 1 1 2 2 3 3 6 6
```
CODEFORCES 797_E. Array Queries
```
3
1 1 1
3
1 1
2 1
3 1
```
CODEFORCES 818_A. Diplomas and Certificates
```
18 2
9 10
1000000000000 5
1000000000000 499999999999
CODEFORCES 843_B. Interactive LowerBound
1. **Incorrect input format**
```
1 1 1
```

2. **Incorrect output format**
```
1 ? 1
```

3. **Memory limit exceeded**
```
5 1 1000000000
1000000000 1
1000000000 1
1000000000 1
1000000000 1
1000000000 1
```

4. **Time limit exceeded**
```
5 1 1000000000
1000000000 1
1000000000 1
1000000000 1
1000000000 1
1000000000 1
```

5. **Wrong answer**
```
5 1 1000000000
1000000000 1
1000000000 1
1000000000 1
1000000000 1
1000000000 1
! 1000000000
```

6. **Out of bounds**
```
5 1 1000000000
1000000000 1
1000000000 1
1000000000 1
1000000000 1
1000000000 1
? 6
```

7. **Infinite loop**
```
5 1 1000000000
1000000000 1
1000000000 1
1000000000 1
1000000000 1
1000000000 1
? 1
```

8. **Other bugs**
```
5 1 1000000000
1000000000 1
1000000000 1
1000000000 1
1000000000 1
1000000000 1
! -1
```
CODEFORCES 863_G. Graphic Settings
```
1
3
1

1
3
2

2
3 2
1 1

3
3 3 3
1 2 3

4
3 3 3 3
1 1 1 1
```
CODEFORCES 889_D. Symmetric Projections
1. ```
1
```
2. ```
2
0 0
0 0
```
3. ```
4
0 0
1 0
0 1
1 1
```
4. ```
3
1 2
-1 2
0 0
```
5. ```
5
0 0
1 0
2 0
0 1
0 -1
```
6. ```
6
1 0
0 1
-1 0
0 -1
1 1
-1 -1
```
7. ```
7
1 1
-1 1
0 0
-1 0
1 -1
0 1
1 0
```
8. ```
8
1 2
-1 2
0 0
-1 0
1 1
-1 1
0 -1
0 1
```
9. ```
9
1 1
-1 1
0 0
-1 0
1 1
-1 1
0 -1
0 1
2 2
```
10. ```
10
1 1
-1 1
0 0
-1 0
1 1
-1 1
0 -1
0 1
2 2
1 2
```
CODEFORCES 912_B. New Year's Eve
```
1 1
5 3
10 1
100 100
```
CODEFORCES 934_B. A Prosperous Lot
```
1
2
```
CODEFORCES 960_D. Full Binary Tree Queries
```
1
3 1
```
```
1
1 1 1
```
```
5
3 12
1 2 1
3 12
2 4 -1
3 8
```
```
5
3 14
1 5 -3
3 14
1 3 1
3 14
```
CODEFORCES 988_A. Diverse Team
1. Incorrect input format:

```
5 3 15 13 15 15 12
```

2. Incorrect output format:

```
5 3
15 13 15 15 12
NO
```

3. Incorrect logic:

```
5 3
15 13 15 15 12
YES
1 2 3
```

4. Memory errors:

```
5 3
15 13 15 15 12
YES
1 2 3 4 5
```

5. Time complexity:

```
5 3
15 13 15 15 12
YES
1 2 3 4 5
```

6. Incorrect data structures:

```
5 3
15 13 15 15 12
YES
1 2 3 4 5
```

7. Bugs in the code:

```
5 3
15 13 15 15 12
YES
1 2 3 4 5
```
HACKEREARTH alphanumeric-string
1
test123456
HACKEREARTH calculate-lcm
1
2 4
HACKEREARTH decreasing-paths
2
1 2
1 3
HACKEREARTH game-of-strings-2
1
a1

HACKEREARTH kings-race-8
1
5 5
10 20 30 40 50
7 7 7 7 7
HACKEREARTH monk-and-champions-league
1. **Incorrect input format**
```
1 2
1 2
```
This input is incorrect because the first line does not contain two integers separated by a space.

2. **Incorrect output format**
```
1 2
1 2
3
```
This output is incorrect because it is not a number.

3. **Incorrect logic**
```
1 2
1 2
2
```
This program is incorrect because it does not correctly calculate the maximum possible pounds that the club will gain. The correct answer is 3.

4. **Runtime errors**
```
1 2
1 2
```
This program may run into a runtime error if the input is too large. For example, if the input is 1000000 1000000, the program may run out of memory.

5. **Memory leaks**
```
1 2
1 2
```
This program may leak memory if the input is too large. For example, if the input is 1000000 1000000, the program may leak memory because it does not free the memory that it allocates.
HACKEREARTH pankaj-and-his-in-laws
```
1
1
```
```
1
-1
```
```
2
1 2
```
```
3
1 2 3
```
```
4
1 2 3 4
```
```
5
1 2 3 4 5
```
```
6
650 945 -832 -999 678 702
```
```
7
650 945 -832 -999 678 702 1000
```
```
8
1 2 3 4 5 6 7 8
```
```
9
1 2 3 4 5 6 7 8 9
```
```
10
1 2 3 4 5 6 7 8 9 10
```
HACKEREARTH roy-and-code-streak
3
6
1 0
2 1
3 1
4 1
5 1
6 0
5
1 1
2 0
3 1
1 1
2 1
4
1 1
2 1
2 1
3 1
HACKEREARTH string-partition
```
2
1 6
30901
2 85
07565
```
HACKEREARTH utkarsh-and-distributing-books-february-easy
```
1
2
5 5
```
ATCODER p02593 AtCoder Grand Contest 047 - Rooks
```
6
1 8
6 10
2 7
4 4
9 3
5 1


5
5 5
100 100
70 20
81 70
800 1


10
2 5
4 4
13 12
12 13
14 17
17 19
22 22
16 18
19 27
25 26
```
ATCODER p02724 AtCoder Beginner Contest 160 - Golden Coins
```
0
1
1000000000
```
ATCODER p02855 DISCO Presents Discovery Channel Code Contest 2020 Qual - Strawberry Cakes

ATCODER p02991 AtCoder Beginner Contest 132 - Hopscotch Addict
```
# -*- coding: utf-8 -*-
"""
Created on Tue Mar 15 10:58:38 2022

@author: takashi
"""

N, M = map(int, input().split())

graph = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().split())
    graph[u - 1].append(v - 1)

s, t = map(int, input().split())

def bfs(s):
    q = [s]
    visited = [False] * N
    visited[s] = True
    ans = 0
    while q:
        ans += 1
        v = q.pop(0)
        for u in graph[v]:
            if not visited[u]:
                visited[u] = True
                q.append(u)
    return ans

print(bfs(s) - 2)
```

**Input 1:**
```
4 4
1 2
2 3
3 4
4 1
1 3
```

**Input 2:**
```
3 3
1 2
2 3
3 1
1 2
```

**Input 3:**
```
2 0
1 2
```

**Input 4:**
```
6 8
1 2
2 3
3 4
4 5
5 1
1 4
1 5
4 6
1 6
```
ATCODER p03132 Yahoo Programming Contest 2019 - Ears
**Incorrect understanding of the problem**

```
L = int(input())
A = list(map(int, input().split()))

for i in range(L):
    if A[i] % 2 == 0:
        print(0)
        break
    else:
        print(1)
```

**Incorrect implementation of the algorithm**

```
L = int(input())
A = list(map(int, input().split()))

print(max(max(A) - min(A), 0))
```

**Incorrect testing**

```
L = int(input())
A = list(map(int, input().split()))

min_ops = float('inf')
for i in range(L):
    for j in range(L):
        ops = 0
        for k in range(L):
            if A[k] > A[i] and A[k] < A[j]:
                ops += 1
        min_ops = min(min_ops, ops)

print(min_ops)
```

**Submitting the wrong solution**

```
L = int(input())
A = list(map(int, input().split()))

print(L)
```

**Not reading the problem carefully enough**

```
L = int(input())
A = list(map(int, input().split()))

print(0)
```
ATCODER p03275 AtCoder Beginner Contest 107 - Median of Medians
```
3
10 30 20
```
```
1
10
```
```
10
5 9 5 9 8 9 3 5 4 3
```
ATCODER p03432 AtCoder Grand Contest 021 - Trinity
2
3
ATCODER p03591 CODE FESTIVAL 2017 qual A - Snuke's favorite YAKINIKU
```
YAKINIKU
TAKOYAKI
YAK
```
ATCODER p03748 AtCoder Grand Contest 013 - Piling Up
```
# 2 3
# 1000 10
# 1000 3000
```
ATCODER p03910 CODE FESTIVAL 2016 Final - Exactly N points
4
1
4
2
3
2
1
1
10
1
1
1
1
1
1000000000

AIZU p00014 Integral
```
10
20
30
40
50
60
70
80
90
100
110
120
130
140
150
160
170
180
190
200
```
AIZU p00146 Lupin The 4th
```
# 40000000000000000000
# 1
# 1 1 1
# 1 1 1
```
AIZU p00279 Happy End Problem
3
0 0
3 0
5 2
3
3
4
5
AIZU p00467 Sugoroku
10 5
0
0
5
6
-3
8
1
8
-4
0
1
3
5
1
5
10 10
0
-1
-1
4
4
-5
0
1
-6
0
1
5
2
4
6
5
5
4
1
6
0 0
AIZU p00659 Popularity Estimation

AIZU p00802 Telescope
4 3
0.0 0.25 0.5 0.666666666666666666667
4 4
0.0 0.25 0.5 0.75
30 15
0.00 0.03 0.06 0.09 0.12 0.15 0.18 0.21 0.24 0.27
0.30 0.33 0.36 0.39 0.42 0.45 0.48 0.51 0.54 0.57
0.61 0.64 0.66 0.69 0.72 0.75 0.78 0.81 0.84 0.87
40 20
0.351 0.353 0.355 0.357 0.359 0.361 0.363 0.365 0.367 0.369
0.371 0.373 0.375 0.377 0.379 0.381 0.383 0.385 0.387 0.389
0.611 0.613 0.615 0.617 0.619 0.621 0.623 0.625 0.627 0.629
0.631 0.633 0.635 0.637 0.639 0.641 0.643 0.645 0.647 0.649
0 0
AIZU p00933 Exhibition
1 2 3 4 5 6
100 100 100 100 100 100 100
5 5 5
6 5 1 2 3
6 6 6 6 6 6 6
AIZU p01066 Reflection Warp Machine
**Incorrect input format**

```
n = 3
x0, y0 = 0, 0
x1, y1 = 0, 1
x2, y2 = 1, 0
lines = 2
print(lines)
```

**Incorrect output format**

```
n = 3
x0, y0 = 0, 0
x1, y1 = 0, 1
x2, y2 = 1, 0
lines = 2
print(lines)
```

**Incorrect algorithm**

```
n = 3
x0, y0 = 0, 0
x1, y1 = 0, 1
x2, y2 = 1, 0
lines = 2
print(lines)
```

**Incorrect data types**

```
n = '3'
x0, y0 = '0', '0'
x1, y1 = '0', '1'
x2, y2 = '1', '0'
lines = 2
print(lines)
```
AIZU p01199 Flame of Nucleus
1
0
1
100
100
1 1 1
1 2 1
1000 0
0 1000
AIZU p01336 THE BYDOLM@STER
```
1 1
A
0

3 10
Dobkeradops
7 5 23 10
PataPata
1 1 2 1
dop
5 3 11 14

2 300
Bydo System Alpha
7 11 4 7
Green Inferno
300 300 300 300
```
AIZU p01503 Tampopo Machine
1 2 3 4 5

1 1 1 1 1

[1, 2, 3, 4, 5]

[1, 2, 3, 4, 5, 6]

[1, 2, 3, 4, 5, 6, 7]
AIZU p01674 Rings
```
0.0 0.0 0.0
1.0 0.0 0.0 0.0 1.0 0.0
1.0 0.0 0.5
1.0 0.0 0.0 0.0 0.0 1.0
```
AIZU p01816 Bit Operation Game
6 3
T=T|X
T=T|Y
T=T|Y
T=T^Y
T=T&X
0 1
0 2
1 3
1 4
2 5
5 6
3 5
0 0
AIZU p01951 Low Range-Sum Matrix
```
1 1 1 1
1
```

```
1 1 1 1
-1
```

```
1 1 1 1
10
```

```
2 2 1 10
0 0
0 0
```

```
3 3 2 10
5 3 7
2 6 1
3 4 1
```

```
3 3 3 10
1 2 3
4 5 6
7 8 9
```

```
2 3 1 5
9 8 -2
-2 -5 -3
```

```
3 3 2 10
5 3 7
2 6 1
3 4 1
```
AIZU p02100 Factorization
```
x^3-81x^2-1882x-1800
```
AIZU p02238 Depth First Search
```
4
1 1 2
2 1 4
3 0
4 1 3
```
```
6
1 2 2 3
2 2 3 4
3 1 5
4 1 6
5 1 6
6 0
```
AIZU p02384 Dice II
```
1 2 3 4 5 6
3
6 5
1 3
3 2
```