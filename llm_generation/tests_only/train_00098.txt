CODECHEF cc1
```
1
1
1 1
```
```
1
2
1 1
```
```
1
3
1 1
```
```
2
4
1 1 3 3
4
1 1 1 3
```
```
3
4
1 1 3 3
5
1 1 1 1
6
1 1 1 1 1
```
CODECHEF csixierl

CODECHEF hes
```
4
4 4
1 6
9 10
1 3
```
CODECHEF misterm
1
2
10
1 2 4 5 6 7 9 10
CODECHEF ren2013k
1. **Incorrect implementation of the GCD algorithm.**

```
Test case 1:

1 3

Expected output:

3

Actual output:

1
```

The incorrect implementation of the GCD algorithm in the program returns `1` instead of `3`.

2. **Incorrect handling of negative numbers.**

```
Test case 2:

-10 15

Expected output:

-5

Actual output:

5
```

The incorrect handling of negative numbers in the program returns `5` instead of `-5`.

3. **Incorrect handling of floating-point numbers.**

```
Test case 3:

1.0 2.0

Expected output:

1

Actual output:

0
```

The incorrect handling of floating-point numbers in the program returns `0` instead of `1`.

4. **Incorrect handling of overflow.**

```
Test case 4:

2 ** 63 2 ** 63

Expected output:

2 ** 63

Actual output:

OverflowError
```

The incorrect handling of overflow in the program causes an `OverflowError`.

5. **Incorrect handling of special cases.**

```
Test case 5:

0 1

Expected output:

1

Actual output:

0
```

The incorrect handling of special cases in the program returns `0` instead of `1`.
CODECHEF tsort
1. ```
10
1
2
3
4
5
6
7
8
9
```
2. ```
10
10
9
8
7
6
5
4
3
2
1
```
3. ```
10
a
b
c
d
e
f
g
h
i
j
```
4. ```
10
10
10
10
10
10
10
10
10
10
10
```
5. ```
10
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
```
6. ```
10
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
```
7. ```
10
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
```
8. ```
10
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
```
CODEFORCES 1017_B. The Bits
```
5
01011
11001
```
```
6
011000
010011
```
```
10
0111110011
0000000101
```
```
10
1010000010
0000000100
```
```
1
1
```
CODEFORCES 1040_D. Subway Pursuit
```
# 1. Invalid input

n, k = map(int, input().split())
print('1 2')
print('Bad')

# 2. Incorrect logic

n, k = map(int, input().split())
print('1 2')
print('Yes')
print('3 4')
print('Yes')

# 3. Memory leaks

n, k = map(int, input().split())
print('1 2')
print('Yes')
print('3 4')
print('Yes')

# 4. Timeout

n, k = map(int, input().split())
print('1 2')
print('Yes')
print('3 4')
print('Yes')

# 5. Incorrect output

n, k = map(int, input().split())
print('1 2')
print('Bad')
```
CODEFORCES 1063_D. Candies for Children
```
4 1 4 12
5 3 4 10
10 5 5 1
5 4 5 6
```
CODEFORCES 1085_C. Connect Three
1. **Incorrect input format.**

```
1 2 3 4
```

2. **Incorrect output format.**

```
1 2 3
```

3. **Incorrect solution.**

```
0 0
1 1
2 2
```

4. **Time limit exceeded.**

```
1000 1000 1000 1000 1000 1000
```

5. **Memory limit exceeded.**

```
1000000 1000000 1000000 1000000 1000000 1000000
```

6. **Incorrect data.**

```
-1 2
3 4
5 6
```

7. **Unexpected errors.**

```
0 0
1 1
2 2
```

```
0 0
1 1
2 2
```
CODEFORCES 1105_A. Salem and Sticks 
```
3
10 1 4
```
```
5
1 1 2 2 3
```
```
1
100
```
```
10
10 10 10 10 10 10 10 10 10 10
```
CODEFORCES 1132_D. Stressful Training
2 4
3 2
4 2

1 5
4
2

1 6
4
2

2 2
2 10
3 15
CODEFORCES 1152_F2. Neko Rules the Catniverse (Large Version)
```
3 3 1
4 2 1
5 5 4
100 1 2
```
CODEFORCES 1174_E. Ehab and the Expected GCD Problem
```
2
3
6
```
CODEFORCES 1193_A. Amusement Park
```
2 1
1 2
```

```
3 3
1 2
2 3
1 3
```

```
4 4
1 2
2 3
3 4
4 1
```

```
5 5
1 2
2 3
3 4
4 5
5 1
```

```
6 6
1 2
2 3
3 4
4 5
5 6
6 1
```

```
7 7
1 2
2 3
3 4
4 5
5 6
6 7
7 1
```

```
8 8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 1
```

```
9 9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 1
```
CODEFORCES 1210_C. Kamil and Making a Stream
5
4 5 6 0 8
1 2
1 3
1 4
4 5

```
5
4 5 6 0 8
1 2
1 3
1 4
4 5
```
CODEFORCES 1231_A. Dawid and Bags of Candies
1. Incorrect input format:
```
1,2,3,4
```
2. Incorrect output format:
```
Yes
```
3. Incorrect algorithm:
```
1 2 3 4
```
4. Off-by-one error:
```
1 2 3 4
```
5. Memory leak:
```
while True:
    pass
```
6. Race condition:
```
import threading

def f1():
    global x
    x = 1

def f2():
    global x
    x = 2

t1 = threading.Thread(target=f1)
t2 = threading.Thread(target=f2)
t1.start()
t2.start()
t1.join()
t2.join()

print(x)
```
7. Deadlock:
```
import threading

def f1():
    global x
    x = 1
    y = threading.Semaphore(0)
    y.acquire()

def f2():
    global x
    x = 2
    y = threading.Semaphore(0)
    x.acquire()

t1 = threading.Thread(target=f1)
t2 = threading.Thread(target=f2)
t1.start()
t2.start()
t1.join()
t2.join()

print(x)
```
CODEFORCES 1252_D. Find String in a Grid
```
3 3 5
ABC
BCD
DAB
ABC
BC
BD
AC
A

2 3 3
AAA
AAA
A
AAA
AAAAA
```
CODEFORCES 1272_C. Yet Another Broken Keyboard
```
1. Incorrect input format:
```
1 2
a
b
```

```
2. Incorrect data type:
```
1 2
a
10
```

```
3. Off-by-one errors:
```
1 2
a
b c
```

```
4. Incorrect logic:
```
1 2
a
b
```

```
5. Memory leaks:
```
1 2
a
b
```

```
6. Race conditions:
```
1 2
a
b
```

```
7. Security vulnerabilities:
```
1 2
a
b
```
CODEFORCES 1295_D. Same GCDs
```
1
4 9
```
```
2
5 10
42 9999999967
```
```
3
1 10
1000000000 1000000001
1000000000 9999999999
```
CODEFORCES 1316_D. Nash Matrix
```
2
1 1 1 1
2 2 2 2

2
2 2 -1 -1
1 1 -1 -1

3
-1 -1 -1 -1 -1 -1
-1 -1 2 2 -1 -1
-1 -1 -1 -1 -1 -1

3
-1 -1 -1 1 -1 -1
-1 -1 1 2 -1 -1
-1 -1 1 3 -1 -1
```
CODEFORCES 1337_F. Yui and Mahjong Set
1. Incorrect input format:
```
3
1 1
```
2. Incorrect output format:
```
3
1 1
! 3 1 1 0 0
```
3. Incorrect logic:
```
4
1 6
+ 1
+ 2
+ 3
+ 4
! 1 0 1 1 0
```
4. Memory errors:
```
100
1000000000 1000000000
```
5. Timeout errors:
```
50
1000000000 1000000000
```
6. Other errors:
```
5
2 5
```
CODEFORCES 135_D. Cycle
```
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    vector<vector<char>> table(n, vector<char>(m));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> table[i][j];
        }
    }

    int ans = 0;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (table[i][j] == '1') {
                int len = 1;
                queue<pair<int, int>> q;
                q.push({i, j});
                table[i][j] = '0';
                while (!q.empty()) {
                    int x = q.front().first;
                    int y = q.front().second;
                    q.pop();

                    if (x > 0 && table[x - 1][y] == '1') {
                        len++;
                        q.push({x - 1, y});
                        table[x - 1][y] = '0';
                    }

                    if (x < n - 1 && table[x + 1][y] == '1') {
                        len++;
                        q.push({x + 1, y});
                        table[x + 1][y] = '0';
                    }

                    if (y > 0 && table[x][y - 1] == '1') {
                        len++;
                        q.push({x, y - 1});
                        table[x][y - 1] = '0';
                    }

                    if (y < m - 1 && table[x][y + 1] == '1') {
                        len++;
                        q.push({x, y + 1});
                        table[x][y + 1] = '0';
                    }
                }

                ans = max(ans, len);
            }
        }
    }

    cout << ans << endl;

    return 0;
}
```
CODEFORCES 137_E. Last Chance
```
Abo
OEIS
auBAAbeelii
AaaBRAaaCAaaDAaaBRAaa
EA
CODEFORCES 13_E. Holes
```
1 1
1
```

```
2 1
1 1
1 1
```

```
1 1
1 1
0 1 2
1 1
```

```
1 2
1 1
1 1
```

```
2 1
1 1
1 1
```
CODEFORCES 1423_N. BubbleSquare Tokens
```
# 2
1 2
1 2
```

```
# 3
3 3
1 2
1 3
2 3
```

```
# 1
1
```

```
# 2
2 0
```

```
# 1
1
```

```
# 0
```

```
# 1
2
```

```
# 10
10 5
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
1 4 1
2 6 1
3 8 1
4 7 1
5 9 1
6 10 1
7 3 1
8 2 1
9 1 1
10 5 1
```
CODEFORCES 1444_A. Division
```
1
10 4
```
```
2
10 4
12 6
```
```
3
10 4
12 6
179 822
```
```
4
1000000000 2
1000000000 3
1000000000 4
1000000000 5
```
```
5
1234567890 123456789
1234567890 123456788
1234567890 123456787
1234567890 123456786
1234567890 123456785
```
```
6
1000000000 1000000001
1000000000 1000000002
1000000000 1000000003
1000000000 1000000004
1000000000 1000000005
```
```
7
1 1000000000
1000000000 1
1000000001 1
1000000002 1
1000000003 1
1000000004 1
1000000005 1
```
CODEFORCES 1469_B. Red and Blue
```
1
1
1
1
1
```
```
2
1
1
1
-1
```
```
2
1
1
2
-1
```
```
1
0
0
0
```
```
4
6 -5 7 -3
3
2 3 -4
2
1 1
4
10 -3 2 2
5
-1 -2 -3 -4 -5
5
-1 -2 -3 -4 -5
1
0
1
0
```
CODEFORCES 1494_D. Dogeforces
```
3
2 5 7
5 1 7
7 7 4
```
CODEFORCES 1517_C. Fillomino 2
1. ```
n = int(input())
s = list(map(int, input().split()))

if n == 1:
  print(1)
  exit()

def solve(i):
  if i == n:
    return 1
  for j in range(i+1, n+1):
    if s[j-1] == i+1 and s[i] == j:
      s[j-1] = -1
      s[i] = -1
      solve(i+1)
      return 1
  return 0

if solve(1):
  for i in range(n):
    print(*s[:i+1])
else:
  print(-1)
```

2. ```
n = int(input())
s = list(map(int, input().split()))

if n == 1:
  print(1)
  exit()

def solve(i):
  if i == n:
    return 1
  for j in range(i+1, n+1):
    if s[j-1] == i+1 and s[i] == j:
      s[j-1] = -1
      s[i] = -1
      solve(i+1)
      return 1
  return 0

if solve(1):
  for i in range(n):
    print(*s[:i+1])
else:
  print(-1)
```

3. ```
n = int(input())
s = list(map(int, input().split()))

if n == 1:
  print(1)
  exit()

def solve(i):
  if i == n:
    return 1
  for j in range(i+1, n+1):
    if s[j-1] == i+1 and s[i] == j:
      s[j-1] = -1
      s[i] = -1
      solve(i+1)
      return 1
  return 0

if solve(1):
  for i in range(n):
    print(*s[:i+1])
else:
  print(-1)
```

4. ```
n = int(input())
s = list(map(int, input().split()))

if n == 1:
  print(1)
  exit()

def solve(i):
  if i == n:
    return 1
  for j in range(i+1, n+1):
    if s[j-1] == i+1 and s[i] == j:
      s[j-1] = -1
      s[i] = -1
      solve(i+1)
      return 1
  return 0

if solve(1):
  for i in range(n):
    print(*s[:i+1])
else:
  print(-1)
```

5. ```
n = int(input())
s = list(map(int, input().split()))

if n == 1:
  print(1)
  exit()

def solve(i):
  if i == n:
    return 1
  for j in range(i+1, n+1):
    if s[j-1] == i+1 and s[i] == j:
      s[j-1] = -1
      s[i] = -1
      solve(i+1)
      return 1
  return 0

if solve(1):
  for i in range(n):
    print(*s[:i+1])
else:
  print(-1)
```

6. ```
n = int(input())
s = list(map(int, input().split()))

if n == 1:
  print(1)
  exit()

def solve(i):
  if i == n:
    return 1
  for j in range(i+1, n+1):
    if s[j-1] == i+1 and s[i] == j:
      s[j-1] = -1
      s[i] = -1
      solve(i+1)
      return 1
CODEFORCES 1545_B. AquaMoon and Chess
1. **Incorrect modular arithmetic.**

```
def solve(n, s):
    dp = [[0] * (n + 1) for _ in range(n + 1)]
    dp[0][0] = 1
    for i in range(n):
        for j in range(n):
            if s[i] == '1':
                dp[i + 1][j + 2] += dp[i][j]
                dp[i + 1][j - 2] += dp[i][j]
    return dp[n][n] % 998244353
```

2. **Off-by-one errors.**

```
def solve(n, s):
    dp = [[0] * (n + 1) for _ in range(n + 1)]
    dp[0][0] = 1
    for i in range(n):
        for j in range(1, n + 1):
            if s[i] == '1':
                dp[i + 1][j + 2] += dp[i][j]
                dp[i + 1][j - 2] += dp[i][j]
    return dp[n][n]
```

3. **Incorrect use of memoization.**

```
def solve(n, s):
    dp = [[-1] * (n + 1) for _ in range(n + 1)]
    return dfs(n, s, 0, 0, dp)

def dfs(n, s, i, j, dp):
    if i >= n or j >= n:
        return 0
    if dp[i][j] != -1:
        return dp[i][j]
    if s[i] == '1':
        dp[i][j] = dfs(n, s, i + 1, j + 2, dp) + dfs(n, s, i + 1, j - 2, dp)
    else:
        dp[i][j] = dfs(n, s, i + 1, j, dp) + dfs(n, s, i + 1, j + 1, dp) + dfs(n, s, i + 1, j - 1, dp)
    return dp[i][j]
```

Here are some program inputs that will validate whether an implementation meets each of these requirements:

1. **Incorrect modular arithmetic.**

```
t = int(input())
for _ in range(t):
    n = int(input())
    s = input()
    if solve(n, s) % 998244353 != 1287:
        print("Incorrect modular arithmetic")
        exit()
```

2. **Off-by-one errors.**

```
t = int(input())
for _ in range(t):
    n = int(input())
    s = input()
    if solve(n, s) != 3:
        print("Off-by-one errors")
        exit()
```

3. **Incorrect use of memoization.**

```
t = int(input())
for _ in range(t):
    n = int(input())
    s = input()
    if solve(n, s) != 1:
        print("Incorrect use of memoization")
        exit()
```
CODEFORCES 172_A. Phone Code
```
4
00209
00219
00999
00909
```
CODEFORCES 192_B. Walking in the Rain
```
4
10 3 5 10
```

```
5
10 2 8 3 5
```

```
1
1000000
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
100
2 3 4 5 6 7 8 9 10 100
```
CODEFORCES 216_B. Forming Teams
**1. Using an incorrect data type for the number of students or the number of pairs of archenemies.**

```
n, m = map(int, input().split())
```

**2. Not handling the case where a student has more than two archenemies.**

```
n, m = map(int, input().split())
enemy = [[] for _ in range(n)]
for _ in range(m):
    a, b = map(int, input().split())
    enemy[a - 1].append(b - 1)
    enemy[b - 1].append(a - 1)

for i in range(n):
    if len(enemy[i]) > 2:
        print(n)
        exit()
```

**3. Not handling the case where there are no two students who are not archenemies.**

```
n, m = map(int, input().split())
enemy = [[] for _ in range(n)]
for _ in range(m):
    a, b = map(int, input().split())
    enemy[a - 1].append(b - 1)
    enemy[b - 1].append(a - 1)

if len(set(sum(enemy, []))) == n:
    print(n)
else:
    print(n - 1)
```

**4. Not handling the case where the input is malformed.**

```
n, m = map(int, input().split())

if n < 2 or n > 100:
    print(-1)
elif m < 1 or m > 100:
    print(-1)
```

**5. Using an incorrect algorithm to solve the problem.**

```
n, m = map(int, input().split())
enemy = [[] for _ in range(n)]
for _ in range(m):
    a, b = map(int, input().split())
    enemy[a - 1].append(b - 1)
    enemy[b - 1].append(a - 1)

team1 = set()
team2 = set()
for i in range(n):
    if len(enemy[i]) == 0:
        team1.add(i)
    elif len(enemy[i]) == 1:
        team1.add(i)
        team2.add(enemy[i][0])
    else:
        print(n)
        exit()

print(len(team1) + len(team2) - 1)
```

**6. Not testing your program thoroughly.**

```
n, m = map(int, input().split())
enemy = [[] for _ in range(n)]
for _ in range(m):
    a, b = map(int, input().split())
    enemy[a - 1].append(b - 1)
    enemy[b - 1].append(a - 1)

for i in range(n):
    if len(enemy[i]) > 2:
        print(-1)
        exit()

if len(set(sum(enemy, []))) == n:
    print(n)
else:
    print(n - 1)
```
CODEFORCES 23_B. Party
```
1
7
```
CODEFORCES 264_E. Roadside Trees
```
5 10
1 1 1
1 2 2
1 3 3
1 4 4
1 5 5
2 1
2 2
2 3
2 4
2 5
```
CODEFORCES 288_E. Polo the Penguin and Lucky Numbers
```
4
7
```
```
474
777
```
```
1000000000
1000000000
```
```
1
1
```
CODEFORCES 313_E. Ilya and Two Numbers
```
4 7
5 4 3 2
5 6 5 4
```
CODEFORCES 336_B. Vasily the Bear and Fly
```
1 1

2 2

5 2

10 1

10 2

100 10
```
CODEFORCES 359_C. Prime Number
```
# 2 2
# 2 2

# 3 3
# 1 2 3

# 2 2
# 29 29

# 4 5
# 0 0 0 0
```
CODEFORCES 382_B. Number Busters
```
1 1 2 1 1

1 2 3 2 6

4 2 3 1 7

1 0 10 1 10

1 1 2 1 1
```
CODEFORCES 403_A. Searching for Graph
```
1
6 0
```
```
2
5 1
6 2
```
```
1
5 2
```
```
1
3 0
```
```
1
1 0
```
CODEFORCES 430_B. Balls Game
```
# 430B. Balls Game

n, k, x = map(int, input().split())
a = list(map(int, input().split()))

cnt = 0
for i in range(n):
    if a[i] == x:
        cnt += 1
        if i+1 < n and a[i+1] == x:
            cnt += 1
        if i-1 >= 0 and a[i-1] == x:
            cnt += 1

print(n - cnt)
```

**Incorrect input format:**

```
1 2 2
1 1 2 2 1 1
```

**Incorrect output format:**

```
6
```

**Incorrect logic:**

```
n, k, x = map(int, input().split())
a = list(map(int, input().split()))

cnt = 0
for i in range(n):
    if a[i] == x:
        cnt += 1
        if i+1 < n and a[i+1] == x:
            cnt += 1
        if i-1 >= 0 and a[i-1] == x:
            cnt += 1

print(cnt)
```

**Runtime errors:**

```
n, k, x = map(int, input().split())
a = list(map(int, input().split()))

cnt = 0
for i in range(n):
    if a[i] == x:
        cnt += 1
        if i+1 < n and a[i+1] == x:
            cnt += 1
        if i-1 >= 0 and a[i-1] == x:
            cnt += 1

print(cnt)

a = [1]
```

**Memory leaks:**

```
n, k, x = map(int, input().split())
a = list(map(int, input().split()))

cnt = 0
for i in range(n):
    if a[i] == x:
        cnt += 1
        if i+1 < n and a[i+1] == x:
            cnt += 1
        if i-1 >= 0 and a[i-1] == x:
            cnt += 1

print(cnt)

del a
```
CODEFORCES 452_E. Three strings
```
abc
bc
cbc
```
CODEFORCES 475_C. Kamal-ol-molk's Painting
```
# 475_C. Kamal-ol-molk's Painting

n, m = map(int, input().split())

grid = [list(input()) for _ in range(n)]

def dfs(i, j, x, y):
    if i < 0 or i >= n or j < 0 or j >= m:
        return 0
    if grid[i][j] != 'X':
        return 0

    grid[i][j] = '.'
    return 1 + dfs(i+x, j+y, x, y)

ans = 10**9
for i in range(n):
    for j in range(m):
        if grid[i][j] == 'X':
            ans = min(ans, dfs(i, j, 1, 0) + dfs(i, j, 0, 1))

if ans == 10**9:
    print(-1)
else:
    print(ans)
```
CODEFORCES 499_C. Crazy Town
```
1 1
-1 -1
2
0 1 0
1 0 0
```
```
1 1
-1 -1
3
1 0 0
0 1 0
1 1 -3
```
```
1 1
-1 -1
4
1 0 0
0 1 0
1 1 -3
0 0 -1
```
```
1 1
-1 -1
1
0 0 0
```
```
1 1
-1 -1
0
```
CODEFORCES 522_D. Closest Equals
```
10 3
3 9 3 3 3 9 9 9 9 9
1 10
1 9
1 10
```
CODEFORCES 549_F. Yura and Developers
```
# 549_F. Yura and Developers

n, k = map(int, input().split())
a = list(map(int, input().split()))

count = 0
for i in range(n):
    for j in range(i+1, n):
        total = a[j]-a[i]
        if total%k == 0:
            count += 1

print(count)
```
CODEFORCES 575_H. Bots
1. ```
1
```
2. ```
2
```
3. ```
3
```
4. ```
4
```
5. ```
5
```
6. ```
6
```
7. ```
7
```
8. ```
8
```
9. ```
9
```
10. ```
10
```
CODEFORCES 598_C. Nearest vectors
```
1
```

```
4
0 1
1 0
1 1
-1 0
```

```
2
1 0
0 1
```

```
6
-4 -5
-4 -6
-1 0
0 -1
1 0
1 1
```
CODEFORCES 61_A. Ultra-Fast Mathematician
1. Input may contain leading zeros:

 ```
0000000
0000000
```

2. Input may contain very long numbers:

```
1000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000000000000000000000000000000000000000
```

3. Output may contain leading zeros:

```
1
0
```

4. Output may contain very long numbers:

```
1000000000000000000000000000000000000000000000000000000000000000
```

5. Input numbers may not be of the same length:

```
1000000000000000000000000000000000000000000000000000000000000000
1000000000000000000000000000000000000000000000000000000000000000000000000000000000
```

6. Input numbers may not contain only 0s and 1s:

```
1a2b3c4d5e6f7g8h9
0000000000000000000000000000000000000000000000000000000000000000
```

7. Input numbers may not be integers:

```
NaN
Infinity
```
CODEFORCES 639_F. Bear and Chemistry
```
6 5 4
1 2
2 3
3 4
2 4
5 6
2 0
4 2
2 1
6 2
3 4
3 2
6 3 4
2 5
4 6
2 1
1 2
1 2
```
CODEFORCES 667_C. Reberland Linguistics
```
abacabaca
abaca
abaca
abaca

a
abaca
```
CODEFORCES 690_C1. Brain Network (easy)
```
4 4
1 2
2 3
3 1
4 1
```
```
6 5
1 2
2 3
3 4
4 5
3 6
```
```
1 0
```
```
3 0
```
```
4 1
1 2
```
```
5 0
```
CODEFORCES 713_E. Sonya Partymaker
```
6
3
1 3 5
```
```
6
2
1 6
```
```
406
6
1 2 3 204 205 206
```
CODEFORCES 734_C. Anton and Making Potions
```
20 3 2
10 99
2 4 3
20 10 40
4 15
10 80
```
CODEFORCES 758_C. Unfair Poll
```
1 3 8 1 1
4 2 9 4 2
5 5 25 4 3
100 100 1000000000000000000 100 100
```
CODEFORCES 77_A. Heroes
```
0

2
Anka likes Chapay
Chapay likes Anka
10000 50 50

3
Troll likes Dracul
Dracul likes Anka
Snowy likes Hexadecimal
210 200 180
```
CODEFORCES 802_O. April Fools' Problem (hard)
```
1 1

5 5
1 2 3 4 5

100000 1
1 1 1 1 1 1 1 1 1 1

500000 500000
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 827_D. Best Edge Weight
```
4 4
1 2 2
2 3 2
3 4 2
4 1 3
```
CODEFORCES 849_D. Rooter's Song
```
5 10 10
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0

5 10 10
1 1 10
1 4 13
1 7 1
1 8 2
2 2 0

3 2 3
1 1 2
2 1 1
1 1 5

3 2 3
1 1 2
2 1 1
1 1 5

4 5 5
1 1 1
1 2 2
1 3 3
1 4 4
```
CODEFORCES 871_A. Maximum splitting
```
1
6
```

```
1
2
```

```
3
1
2
3
```

```
2
4
8
```

```
10
12
16
24
32
48
64
96
128
256
```
CODEFORCES 898_A. Rounding
```
5

113

1000000000

5432359

-5
```
CODEFORCES 919_B. Perfect Number
```
1
2
3
4
5
6
7
8
9
10000
```
CODEFORCES 946_A. Partition
```
1
1
```
```
2
1 2
```
```
3
1 -2 0
```
```
4
-4 -3 -2 -1
```
```
5
-5 -5 -5 -5 -5
```
```
6
16 23 16 15 42 8
```
CODEFORCES 96_D. Volleyball
```
100 100
1 100
1 2 10
1 3 11
1 4 12
1 5 13
1 6 14
1 7 15
1 8 16
1 9 17
1 10 18
2 3 20
3 4 21
4 5 22
5 6 23
6 7 24
7 8 25
8 9 26
9 10 27
10 1 28
1 2 30
1 3 31
1 4 32
1 5 33
1 6 34
1 7 35
1 8 36
1 9 37
1 10 38
2 3 40
3 4 41
4 5 42
5 6 43
6 7 44
7 8 45
8 9 46
9 10 47
10 1 48
```
CODEFORCES 994_D. Open Communication
```
2 2
1 2 3 4
1 5 3 4

2 2
1 2 3 4
1 5 6 4

2 3
1 2 4 5
1 2 1 3 2 3
```
HACKEREARTH baahubali-and-the-closest-strategy
5 3
3 12 17 33 34
1
51
30
HACKEREARTH chotu-and-distinct-elements
2
6
6 2 1 3 2 1
3
1 1 1
HACKEREARTH e-musical-sequences
```
1
1 10 1
```
```
4 10 4
1 3 3 7
```
```
4 10 5
1 3 3 7
```
```
1 2 12345678987654321
1
```
HACKEREARTH handshake
```
1
2
```
HACKEREARTH lottery-tickets-1
```
1
4
1 10 100
10 20 50
20 30 100
30 40 100
```
HACKEREARTH mystery-7-1
1
d
HACKEREARTH problem-2-10
100 100

1000000000 1000000000
HACKEREARTH security-breach-1
1
23695632789
HACKEREARTH test-152
1
1
a
HACKEREARTH writing-in-shorthand
**Incorrect input format**

```
1 1
amit b
amit
```

**Incorrect output format**

```
1 1
amit b
amit

b
```

**Incorrect data**

```
1 1
amit b
amit c
```

**Memory limit exceeded**

```
100000 100000
```

**Time limit exceeded**

```
1000000000 1000000000
```

**Incorrect solution**

```
1 1
amit b
amit

amitb
```
ATCODER p02636 AtCoder Grand Contest 046 - Secret Passage
```
0001
110001
11101111011111000000000110000001111100011111000000001111111110000000111111111
```
ATCODER p02767 AtCoder Beginner Contest 156 - Rally
```
2
1 4
```

```
7
14 14 2 13 56 2 37
```
ATCODER p02902 AtCoder Beginner Contest 142 - Pure
```
4 5
1 2
2 3
2 4
4 1
4 3

4 5
1 2
2 3
2 4
1 4
4 3

6 9
1 2
2 3
3 4
4 5
5 6
5 1
5 2
6 1
6 2
```
ATCODER p03037 AtCoder Beginner Contest 127 - Prison
```
4 2
1 3
2 4
```

```
10 3
3 6
5 7
6 9
```

```
100000 1
1 100000
```

```
0 0
```
ATCODER p03178 Educational DP Contest - Digit Sum
1. ```
30
4
```
2. ```
1000000009
1
```
3. ```
98765432109876543210
58
```
ATCODER p03326 AtCoder Beginner Contest 100 - Patisserie ABC
```
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 18 18:43:08 2022

@author: mchan
"""

n,m=map(int,input().split())
ss=[list(map(int,input().split())) for i in range(n)]
ss.sort(key=lambda x:(-x[0],x[1],x[2]))
ans=0
for i in range(m):
    ans+=ss[i][0]+ss[i][1]+ss[i][2]
print(ans)
```
ATCODER p03480 AtCoder Beginner Contest 083 - Wide Flip
```
010
100000000
00001111
```
ATCODER p03647 AtCoder Regular Contest 079 - Cat Snuke and a Voyage
```
3 2
1 2
2 3
```
```
4 3
1 2
2 3
3 4
```
```
100000 1
1 99999
```
```
5 5
1 3
4 5
2 3
2 4
1 4
```
ATCODER p03803 AtCoder Beginner Contest 054 - One Card Poker
```
8 6
1 1
13 1
```
ATCODER p03971 CODE FESTIVAL 2016 qual B - Qualification simulator
10 2 3
abccabaabb
AIZU p00060 Card Game
1 2 3
5 6 9
8 9 10
AIZU p00191 Baby Tree
3 3
1.3 3.0 0.5
2.4 2.1 1.0
3.0 0.8 1.2
2 2
1.0 1.0
1.0 1.0
0 0
AIZU p00346 Quiet Town
4 5
1 2 2
1 3 2
2 3 1
2 4 2
3 4 1
AIZU p00542 Selecting Subjects
```
100
34
76
42
10
0
```
```
15
twenty one
15
42
15
62
```
```
0
0
0
0
0
0
```
```
100
100
100
100
100
100
```
```
-100
-100
-100
-100
-100
-100
```
```
0
100
100
100
100
100
```
AIZU p00706 Get Many Persimmon Trees
```
1
10 10
1 1
1 1
10 10
0
```
AIZU p00845 How I Wonder What You Are!
3
100 0 500
-500.243 -200.1 -300.5
0 300 200
2
1 1 1 0.65
-1 0 0 1.57
3
1 0 0
0 1 0
0 0 1
4
1 -1 -1 0.9553
-1 1 -1 0.9554
-1 -1 1 0.9553
-1 1 -1 0.9554
3
1 0 0
0 1 0
0 0 1
4
1 -1 -1 0.9553
-1 1 -1 0.9553
-1 -1 1 0.9553
-1 1 -1 0.9553
0
AIZU p00977 Colorful Tree
```
5
1 2
2 3
3 4
2 5
1 2 1 2 3
11
Q 1
Q 2
Q 3
Q 4
U 5 1
Q 1
U 3 2
Q 1
Q 2
U 5 4
Q 1
```
```
5
1 2
2 3
3 4
2 5
1 2 1 2 3
11
Q 1
Q 2
Q 3
Q 4
U 5 1
Q 1
U 3 2
Q 1
Q 2
U 5 4
Q 1
```
```
5
1 2
2 3
3 4
2 5
1 2 1 2 3
11
Q 1
Q 2
Q 3
Q 4
U 5 1
Q 1
U 3 2
Q 1
Q 2
U 5 4
Q 1
```
AIZU p01109 Income Inequality
7
15 15 15 15 15 15 15
4
10 20 30 60
10
1 1 1 1 1 1 1 1 1 100
7
90 90 90 90 90 90 10
7
2 7 1 8 2 8 4
0
AIZU p01247 Japanese Style Pub
3
0.7 0.1 0.2
0.1 0.8 0.1
0.0 0.0 1.0
4 3 2
8
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125
2 2 2 2 2 2 2 2
2
1 0
1 0
2 2
0
AIZU p01408 Brilliant Stars
4 3
1 2
1 3
1 4

11 5
1 2
3 4
5 6
7 8
9 10
AIZU p01562 Area Folding
```
1
0 0
```

```
1000000000 1000000000
```

```
1000000000 -1000000000
```

```
5
0 0
1 1
1 0
0 1
0 0
```

```
21
1 1
-1 1
-1 2
-2 2
-2 1
-1 1
-1 -1
-2 -1
-2 -2
-1 -2
-1 -1
1 -1
1 -2
2 -2
2 -1
1 -1
1 1
2 1
2 2
1 2
1 1
```

```
16
0 0
1 0
1 1
0 1
0 2
0 3
1 3
1 2
2 2
2 3
3 3
3 2
3 1
2 1
2 0
3 0
```

```
7
26 52
33 12
-51 68
16 61
43 -26
87 24
12 10
```
AIZU p01724 Phutball
```
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
......O........
......X........

...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
......O........
...............

...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
......O........
................

...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
......O........
...............

...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
......O........
...............

...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
......O........
...............

...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
...............
......O........
...............
```
AIZU p01862 How To Make Stars
2
10 5
AIZU p01997 Right triangle
1 2

2 1

1 1

3 4

0 0
AIZU p02143 Painting
```
5 3
1 4
3 7
0 1000
```

```
14 12
1 4
2 3
0 5
1 4
1 2
0 8
0 2
0 10
0 1
0 8
3 10
1 10
```
AIZU p02284 Binary Search Tree II
1. Incorrect implementation of the binary search tree data structure.

```
insert 30
insert 88
insert 12
insert 1
insert 20
find 12
insert 17
insert 25
find 16
print
```

2. Incorrect implementation of the insert and find operations.

```
insert 1
insert 2
insert 3
find 1
find 2
find 3
print
```

3. Incorrect implementation of the inorder and preorder tree walks.

```
insert 1
insert 2
insert 3
print
print
```

4. Incorrect handling of errors.

```
insert -1
insert 0
insert 1
insert 2
insert 3
print
```
AIZU p02431 Vector
1
0 1
0 3
1 0
0 4
2
1 0
1 1
1 2