CODECHEF banrob
```
1
2 0.5
```
CODECHEF cmb03
1
1010110010 10110
0
0000000000 10110
CODECHEF flow014
1
53 0.6 5602
CODECHEF levy
```
1
1000000000000000000
```
CODECHEF prb01
```
5
23
13
20
1000
99991
```
CODECHEF taand
```
1
0
```
CODEFORCES 1010_B. Rocket
1. **The program may not terminate after receiving the answer 0.**

```
2 2
2
1
```

2. **The program may not receive an answer 0 from the rocket, even if the distance to Mars is uniquely determined by the already received rocket's answers.**

```
5 2
3
1 0
```

3. **The program may receive an incorrect answer from the rocket.**

```
5 2
3
0 1
```

4. **The program may exceed the time limit.**

```
10^9 30
10^9
```

5. **The program may produce incorrect output.**

```
5 2
3
0 0
```
CODEFORCES 1034_B. Little C Loves 3 II
1. 2 2
2. 3 3
3. 1 1
4. -1 1
5. 1000000000 1000000000
6. 1 1000000000
7. 1000000000 1
CODEFORCES 1056_G. Take Metro
```
# 1. Incorrect input format

input = """10 4
3 1"""

# 2. Incorrect calculation of the exit station

input = """10 4
3 5"""

# 3. Incorrect handling of edge cases

input = """2 0
1 1"""

# 4. Incorrect use of pointers

input = """10 4
3 1"""

# 5. Incorrect use of dynamic memory

input = """10 4
3 1"""
```
CODEFORCES 107_C. Arrangement
```
1 2001 0
```

This input is incorrect because the number of professors is 1, but the number of pairs of seats is 0. This is not possible because there must be at least one pair of seats in order to have a seniority relation.

```
3 2001 3
1 2
2 3
3 1
```

This input is incorrect because the given seniority relations are contradictory. In particular, the first relation states that professor 1 is more senior than professor 2, but the second relation states that professor 2 is more senior than professor 1. This is a contradiction, and so the program should not be able to find a valid arrangement of professors.

```
10 3630801 0
```

This input is incorrect because the number of professors is 10, but the year is 3630801. This is not possible because the GUC will run out of arrangements after the year 3630800.

```
10 2001 10
1 2
1 3
2 4
2 5
3 6
3 7
4 8
4 9
5 10
```

This input is incorrect because the number of pairs of seats is 10, but the number of professors is only 10. This is not possible because there must be at least one professor for each seat.

```
3 2001 2
1 2
2 3
```

This input is correct. The program should be able to find a valid arrangement of professors for this input.

```
10 2020 6
1 2
1 3
2 4
2 5
3 6
3 7
```

This input is correct. The program should be able to find a valid arrangement of professors for this input.
CODEFORCES 109_B. Lucky Probability
```
1 10 1 10 2
5 6 8 10 1
```
CODEFORCES 1120_B. Once in a casino
```
3
223
322
```
```
2
1 1
2 -1
```
```
3
20
42
```
```
2
1 1
1 1
```
```
2
35
44
```
```
-1
```
CODEFORCES 1147_D. Palindrome XOR
```
10100
10110
1???10
1?0?10
1?????????????????????????????????????
1
```
CODEFORCES 1168_E. Xor Permutations
```
2
0 1 2 3
```
```
2
0 0 0 0
```
```
2
0 1 2 2
```
```
10
0 1 2 3 4 5 6 7 8 9
```
CODEFORCES 1187_B. Letters Shop
```
10
arrayhead
5
arya
harry
ray
r
areahydra
```
CODEFORCES 1206_A. Choose Two Numbers
```
1
20
2
10 20
```
```
3
3 2 2
5
1 5 7 7 9
```
```
4
1 3 5 7
4
7 5 3 1
```
CODEFORCES 1223_D. Sequence Sorting
```
1
3
1 2 3
```
CODEFORCES 1249_A. Yet Another Dividing into Teams
```
1
1
50
```
```
1
4
1 2 3 4
```
```
1
5
1 2 3 4 5
```
```
2
3
2 3 1
5
1 2 3 4 5
```
CODEFORCES 1267_G. Game Relics
```
1 100
```
```
2 20
25 100
```
```
3 20
25 100 100
```
```
4 30
60 50 60 80
```
CODEFORCES 128_A. Statues
```
# Incorrect input format

.......A
........
........
........
........
........
........
M.......


# Incorrect output format

.......A
........
........
........
........
........
........
M.......
WIN1


# Incorrect logic

.......A
........
........
........
........
........
........
M.......
LOSE


# Off-by-one errors

.......A
........
........
........
........
.S......
S.......
MS......
WIN


# Memory leaks

.......A
........
........
........
........
........
........
M.......
WIN


# Race conditions

.......A
........
........
........
........
........
........
M.......
WIN


# Synchronization issues

.......A
........
........
........
........
........
........
M.......
WIN


# Deadlocks

.......A
........
........
........
........
........
........
M.......
WIN


# Security vulnerabilities

.......A
........
........
........
........
........
........
M.......
WIN


# Usability issues

.......A
........
........
........
........
........
........
M.......
WIN
```
CODEFORCES 130_G. CAPS LOCK ON
```
1. Using the wrong encoding

input: ```
cOdEfOrCeS
```
output: ```
cOdEfOrCeS
```

2. Not handling special characters correctly

input: ```
cOdEfOrCeS, 123!@#$%^&*()
```
output: ```
CODEFORCES, 123!@#$%^&*()
```

3. Not handling invalid input correctly

input: ```
cOdEfOrCeS, 123!@#$%^&*()
```
output: ```
```

4. Not using the most efficient algorithm

input: ```
cOdEfOrCeS
```
output: ```
CODEFORCES
```

5. Not testing your code thoroughly

input: ```
cOdEfOrCeS, 123!@#$%^&*()
```
output: ```
CODEFORCES, 123!@#$%^&*()
```
CODEFORCES
```
ulr#4:befunge-RULES!
CODEFORCES 1332_B. Composite Coloring
```
3
3
6 10 15
2
4 9
23
437 519 865 808 909 391 194 291 237 395 323 365 511 497 781 737 871 559 731 697 779 841 961
```
CODEFORCES 1352_E. Special Elements
```
1
6
1 1 2 3 4 5
```
CODEFORCES 1372_C. Omkar and Baseball
```
2
5
1 2 3 4 5
7
3 2 4 5 1 6 7
```
CODEFORCES 1395_B. Boboniu Plays Chess
```
3 3 2 2
3 4 2 2
```
CODEFORCES 1419_D2. Sage's Birthday (hard version)
```
3
1 3 2

11
3 2 5 1 3 2 5 1 3 2

10
1 3 5 7 1 3 5 7 1 3
```
CODEFORCES 1437_E. Make It Increasing
```
# 1. Incorrect input format

n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

# 2. Incorrect data type

n, k = 10, 3
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [2, 4, 9]

# 3. Out-of-bounds errors

n, k = 10, 3
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [-1, 11, 12]

# 4. Undefined behavior

n, k = 10, 10
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# 5. Infinite loops

n, k = 10, 1
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1]

# 6. Memory leaks

n, k = 10, 1
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1]

# 7. Security vulnerabilities

n, k = 10, 1
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = ['a', 'b', 'c']

# 8. Other bugs

n, k = 10, 1
a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
b = [1]
```
CODEFORCES 1462_C. Unique Number
```
1
1
```
```
1
5
```
```
1
15
```
```
1
50
```
CODEFORCES 1487_D. Pythagorean Triples
3
3
6
9

CODEFORCES 1511_A. Review Site
```
1
1
1
```
```
2
2
1 2
```
```
3
3
1 2 3
```
```
4
2
1 2 3 4
```
```
5
1
1 1 1 1 1
```
```
3
3
3 3 2
```
CODEFORCES 1538_F. Interesting Function
```
1
1 1000000000
```
CODEFORCES 165_A. Supercentral Point
```
8
1 1
4 2
3 1
1 2
0 2
0 1
1 0
1 3
```
CODEFORCES 186_B. Growing Mushrooms
```
2 3 3 50
2 4
4 2

4 1 1 1
544 397
280 101
280 101
693 970

1 1000 1000 0
1000 1 1
```
CODEFORCES 207_D4. The Beaver's Problem - 3
```
# 1. Incorrect input format

1
doc1
This is the first document.

# 2. Incorrect output format

1
doc1
This is the first document.

# 3. Incorrect logic

1
doc1
This is the first document.

# 4. Runtime errors

1
doc1
This is the first document.

# 5. Memory leaks

1
doc1
This is the first document.
```
CODEFORCES 232_C. Doe Graphs
```
1
1
5
```
```
10
1
2
3
4
5
6
7
8
9
10
```
```
10
3
4
5
6
7
8
9
10
1
2
```
```
10
5
6
7
8
9
10
1
2
3
4
```
```
10
1
1
2
3
4
5
6
7
8
9
```
CODEFORCES 258_B. Little Elephant and Elections
```
7
8
```
CODEFORCES 281_B. Nearest Fraction
1. ```
3 7 6
```
2. ```
7 2 4
```
3. ```
100 100 100
```
4. ```
1 2 1000
```
5. ```
1000000000 1000000000 1000000000
```
CODEFORCES 304_A. Pythagorean Theorem II
```
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
```
CODEFORCES 330_B. Road Construction
**Incorrect input format**

```
1 1
1 1
```

**Incorrect output format**

```
1
1 2
```

**Incorrect logic**

```
5 3
1 2
3 4
```

**Memory leaks**

```
5 3
1 2
3 4
```

**Synchronization issues**

```
5 3
1 2
3 4
```

**Security vulnerabilities**

```
5 3
1 2
3 4
```
CODEFORCES 351_E. Jeff and Permutation
```
2
1 2

3
-2 0 1

9
-2 0 -1 0 -1 2 1 0 -1
```
CODEFORCES 376_A. Lever
```
=^=

456^789==

^45=123

^91=

^99=

^123456789=
CODEFORCES 398_C. Tree and Array
5
1 2 1
2 3 2
3 4 3
4 5 4

CODEFORCES 420_D. Cup Trick
2 1
2 1

3 1
2

3 2
1 2
1 1

3 3
1 3
2 3
1 3
CODEFORCES 447_B. DZY Loves Strings
```
1
2
1000 1000 1000
```
```
ab
0
1 1 1
```
```
abc
1
1 1 1
```
```
abc
2
1 2 3
```
```
abcd
1
1 1 1 1
```
```
abcd
2
1 2 3 4
```
```
abcd
3
1 2 3 4
```
CODEFORCES 469_C. 24 Game
1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

42

43

44

45

46

47

48

49

50

51

52

53

54

55

56

57

58

59

60

61

62

63

64

65

66

67

68

69

70

71

72

73

74

75

76

77

78

79

80

81

82

83

84

85

86

87

88

89

90

91

92

93

94

95

96

97

98

99

100

101

102

103

104

105
CODEFORCES 491_B. New York Hotel
```
# Incorrect input format

1 1
```

```
# Incorrect output format

1 1
1000000000
```

```
# Incorrect data

-1 1
```

```
# Off-by-one errors

1 1
2
1 1
2
```

```
# Incorrect algorithm

1 1
2
1 2
2
```

```
# Memory leaks

1 1
1
```

```
# Race conditions

1 1
1
```

```
# Security vulnerabilities

1 1
1
```
CODEFORCES 515_C. Drazil and Factorial
```
1
0
```

```
5
43210
```

```
1
5
```

```
3
155
```

```
2
01
```
CODEFORCES 542_D. Superhero's Job
```
1
3
24
```
CODEFORCES 569_E. New Language
```
VC
2 1
1 V 2 C
aa
```
```
VC
2 1
1 C 2 V
bb
```
```
VCC
4 3
1 C 2 V
2 C 3 V
3 V 4 V
abac
```
```
VC
1 0

```
```
VCC
4 4
1 C 2 C
2 C 3 V
3 V 4 V
acccc
```
CODEFORCES 590_C. Three States
```
1 5
1#2#3
```
```
1 5
1#2#3
```
```
4 5
11..2
#..22
#.323
.#333
```
```
5 5
11..1
11..1
11..1
11..1
11..1
```
```
5 5
11..1
11..1
11..1
11..1
1#2#3
```
```
5 5
11..1
11..1
11..1
11..1
2#3#3
```
```
5 5
11..1
11..1
11..1
11..1
3#3#3
```
```
5 5
11..1
11..1
11..1
11..1
12#3#3
```
```
5 5
11..1
11..1
11..1
11..1
13#2#3
```
CODEFORCES 612_B. HDD is Outdated Technology
```
3
3 1 2
```
```
5
1 3 5 4 2
```
```
1
1
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
100000
1 2 3 4 5 6 7 8 9 100000
```
CODEFORCES 632_B. Alice, Bob, Two Teams
5
1 2 3 4 5
ABABA
CODEFORCES 660_E. Different Subsets For All Tuples
```
1 3
```

```
2 2
```

```
3 3
```
CODEFORCES 683_I. Loader
```
3 3
..Y
.BX
..T
```
```
3 3
.BY
...
TXX
```
```
3 3
.B.
..Y
.T.
```
```
3 3
XXX
..Y
..B
```
```
2 2
..
B.
```
```
2 2
Y.
.B
```
```
3 3
..Y
.BX
...
```
```
4 4
...X
...X
Y...
...B
```
```
5 5
..X..
..X..
..X..
..X..
..X..
```
```
10 10
...XXX.XX...
...XXX.XX...
...XXX.XX...
...XXX.XX...
...XXX.XX...
...XXX.XX...
...XXX.XX...
...XXX.XX...
...XXX.XX...
...XXX.XX...
```
CODEFORCES 707_C. Pythagorean Triples
```
1
3
6
17
67
```
CODEFORCES 72_D. Perse-script
1. Incorrect function calls:

```
substr("hello", 1, 5)
```

2. Incorrect arguments:

```
substr("hello", 0, 0)
```

3. Unbalanced parentheses:

```
concat("Hello", "World)
```

4. Undefined functions:

```
foo("Hello")
```

5. Incorrect string literals:

```
concat(Hello, World)
```
CODEFORCES 750_A. New Year and Hurry
3 222
4 190
7 1
CODEFORCES 773_E. Blog Post Rating
```
# -*- coding: utf-8 -*-
"""
Created on Fri Apr 22 10:10:50 2022

@author: akhil
"""


def main():
    n = int(input())
    a = list(map(int, input().split()))

    dp = [[0 for _ in range(50001)] for _ in range(n + 1)]

    dp[0][0] = 1

    for i in range(1, n + 1):
        for j in range(50001):
            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i - 1]] + 1)

    for i in range(n + 1):
        print(dp[i][0])


if __name__ == "__main__":
    main()
```
CODEFORCES 798_D. Mike and distribution
```
5
8 7 4 8 3
4 2 5 3 7
```
CODEFORCES 818_F. Level Generation
```
1
2
```
CODEFORCES 844_B. Rectangles
```
1 1
0
```
```
1 1
1
```
```
3 3
1 0 1
0 1 0
1 0 1
```
```
2 3
1 0 1
0 1 0
```
```
10 10
0 0 0 1 1 0 0 0 0 0
1 0 1 1 0 0 0 0 0 0
0 1 1 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
```
CODEFORCES 864_E. Fire
```
# 5
# 3 7 4
# 2 6 5
# 3 7 6
# 5 6 1
# 3 3 5

2
2
2 3 

# 1
# 5 6 1

1
1
1 

# 3
# 5 10 10
# 4 5 10
# 2 2 10

1
1
1 

# 3
# 5 10 10
# 4 5 10
# 2 2 10

2
2
2 3 
CODEFORCES 88_D. Vasya and Types
```
2
typedef void* t
typeof t
```
CODEFORCES 913_B. Christmas Spruce
```
4
1
1
1
```

```
7
1
1
1
2
2
2
```

```
8
1
1
1
1
3
3
3
```
CODEFORCES 935_B. Fafa and the Gates
```
1
U

6
RURUUR

7
URRRUUU

10
URRRURURRU

100
RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
```
CODEFORCES 961_A. Tetris
```
1 1
1
```

```
1 1
2
```

```
3 9
1 1 2 2 2 3 1 2 3
```

```
3 6
1 1 2 1
```

```
5 10
1 3 5 1 4 2 5 4 3 2
```
CODEFORCES 988_F. Rain and Umbrellas
```
10 2 4
3 7
8 10
0 10
3 4
8 1
1 2
```
```
10 1 1
0 9
0 5
```
```
10 1 1
0 9
1 5
```
HACKEREARTH ambar-the-gardener-a-3
1
100
1000
0
HACKEREARTH captain-strategy
```
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 27 12:21:44 2017

@author: shubham
"""

def solve(n,m,arr,queries):
    
    # create a graph where nodes are soldiers and edges represent 
    # relationship between soldiers
    
    graph = [[0 for i in range(n)] for j in range(n)]
    
    # populate the graph with relationships between soldiers
    
    for i in range(n-1):
        u,v = map(int,queries[i].split())
        graph[u-1][v-1] = 1
        graph[v-1][u-1] = 1
        
    # create a dictionary where keys are soldiers and values are their
    # parents
    
    parents = {i:i for i in range(n)}
    
    # find the root of the tree
    
    root = 1
    while parents[root] != root:
        root = parents[root]
    
    # find the parent of each soldier
    
    for i in range(n):
        parents[i] = find_parent(i,root,parents)
        
    # find the sum of energy levels of all soldiers under the given soldier
    
    def find_sum_energy(soldier):
        sum_energy = arr[soldier-1]
        for i in range(n):
            if parents[i] == soldier:
                sum_energy += find_sum_energy(i)
        return sum_energy
    
    # iterate through all queries and print the sum of energy levels
    # of all soldiers under the given soldier
    
    for query in queries:
        if query[0] == 'U':
            soldier,energy = map(int,query[1:].split())
            arr[soldier-1] = energy
        else:
            soldier = int(query[1:])
            print(find_sum_energy(soldier))

if __name__ == '__main__':
    n,m = map(int,input().split())
    arr = list(map(int,input().split()))
    queries = [input() for i in range(m)]
    solve(n,m,arr,queries)
```
HACKEREARTH detective-holmes-and-gba
1
9 16 2
HACKEREARTH gayle-and-his-legacy-7
1
2 7
3 6
2 4
HACKEREARTH ladder-to-heaven-1
1. ```
2
10
100
```

2. ```
2
10
100
```
HACKEREARTH monk-and-multiplication
```
1
1

2
1 2

3
1 2 3

4
1 2 3 4

5
1 2 3 4 5
```
HACKEREARTH pattern
2
HACKEREARTH roy-and-hamming-distance
1. ```
3
#$%
```
2. ```
4
@%#$
```
3. ```
1
A
```
4. ```
2
AA
```
5. ```
6
@#$%*&
```
6. ```
7
A#$%*&
```
7. ```
94
@#$%*&ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
```
HACKEREARTH string-venture
1. ```
Hello World
```
2. ```
abc
```
3. ```
abcdefghijklmnopqrstuvwx
```
HACKEREARTH v-number
3
33
234
1230
ATCODER p02598 AtCoder Beginner Contest 174 - Logs
2 3
7 9

3 0
3 4 5

10 10
158260522 877914575 602436426 24979445 861648772 623690081 433933447 476190629 262703497 211047202
ATCODER p02729 AtCoder Beginner Contest 159 - The Number of Even Pairs
```
0 0
1 0
1 1
0 1
2 1
3 0
```
ATCODER p02862 AtCoder Beginner Contest 145 - Knight
```
# 1. Using the wrong modulo operator

X, Y = map(int, input().split())

print(X % 10**9 + 7)

# 2. Using the wrong variable names

X, Y = map(int, input().split())

x, y = 0, 0

while x < X and y < Y:
    if x + 1 <= X and y + 2 <= Y:
        x += 1
        y += 2
    elif x + 2 <= X and y + 1 <= Y:
        x += 2
        y += 1

print(x * y % 10**9 + 7)

# 3. Using the wrong algorithm

X, Y = map(int, input().split())

dp = [[0] * (Y + 1) for _ in range(X + 1)]

dp[0][0] = 1

for i in range(1, X + 1):
    for j in range(1, Y + 1):
        dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % 10**9 + 7

print(dp[X][Y])

# 4. Not handling edge cases correctly

X, Y = map(int, input().split())

if X < 1 or Y < 1:
    print(0)
elif X == 1 and Y == 1:
    print(0)
else:
    dp = [[0] * (Y + 1) for _ in range(X + 1)]

    dp[0][0] = 1

    for i in range(1, X + 1):
        for j in range(1, Y + 1):
            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % 10**9 + 7

    print(dp[X][Y])
```
ATCODER p02996 AtCoder Beginner Contest 131 - Megalomania
```
1
1 1
```
```
1
1 1000000000
```
```
10
1 3
2 6
3 9
4 12
5 15
6 18
7 21
8 24
9 27
10 30
```
ATCODER p03137 AtCoder Beginner Contest 117 - Streamline
```
2 5
10 12 1 2 14
```
```
3 7
-10 -3 0 9 -100 2 17
```
```
100 1
-100000
```
ATCODER p03282 AtCoder Beginner Contest 106 - To Infinity
```
# -*- coding: utf-8 -*-

"""
Created on Fri Jan  7 16:31:28 2022

@author: s152084
"""


def main():
    S = input()
    K = int(input())

    num = 0
    for i, c in enumerate(S):
        if c == '2':
            num += 2 ** (i + 1)
        else:
            num += 1

    if K <= num:
        print(S[K - 1])
    else:
        print(S[K - num - 1])


if __name__ == '__main__':
    main()
```

**Incorrect string format:**

```
S = 'a'
K = 1
```

**Incorrect date:**

```
S = '1234'
K = 5 * 10**15 + 1
```

**Incorrect K-value:**

```
S = '1234'
K = -1
```

**Incorrect calculation:**

```
S = '1234'
K = 5 * 10**15
```

**Incorrect output:**

```
S = '1234'
K = 5 * 10**15
```
ATCODER p03437 AtCoder Petrozavodsk Contest 001 - Two Integers
```
8 6
3 3
3 1
8 1
10 10
```
ATCODER p03596 CODE FESTIVAL 2017 qual A - Squeezing Slimes
```
1
1
```
```
2
3 3
```
```
4
2 1 2 2
```
```
1
1
```
```
10
3 1 4 1 5 9 2 6 5 3
```
ATCODER p03753 square869120Contest #4 - Calendar 2
```
# The following program inputs are valid:

# 1. The input format is correct.

7 7 3
1 3 5

# 2. The output format is correct.

4

# 3. The constraints are correct.

# 4. The scoring is correct.

# 5. The examples are correct.

# 6. The problem is well-defined.

# 7. The problem is not too easy.

# 8. The problem is not too hard.

```
ATCODER p03917 CODE FESTIVAL 2016 Final - Reverse Grid
```
2 2
cf
cf

1 12
codefestival

```
AIZU p00020 Capitalize
1. ```
this is a pen.
```
2. ```
this is a pen..
```
3. ```
1234567890
```
4. ```
this is a pen1234567890.
```
5. ```
@#$%^&*()_+
```
AIZU p00151 Grid
```
5
00011
00101
01000
10101
00010
2
01
00
0
```
AIZU p00308 Unknown Germ

AIZU p00472 A Traveler
2 1
1
6 1
2 3 4 5 6
1 2 3 4 5 6 2 1 2 3 4 5 6
3 1
6 5 4
2 3 1 1 2 3 1 1 1 1 2 3 1 1 1 1 2 3 1 1
5 5
1 2 3 4 5
1 1 1 1 1
2 1
1
1 1
2 1
1
1 1
1 1
2 1
1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
5 5
1 2 3 4 5
1 1 1 1 1
1 1
1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
AIZU p00664 Cosmic Market

AIZU p00807 Beehives
1. ```
1
aaaeff
```
2. ```
1
aaaeff
```
3. ```
2
aaaeff
aaaeff
```
4. ```
2
aaaeff
aaaeff
```
5. ```
10
aaaeee
aaaeff
-
aaaeff
aaaeee
-
aaaeff
aaaeff
-
aaaeff
aaaeff
-
aaaeff
aaaeff
-
aaaeff
aaaeff
-
aaaeff
aaaeff
```
AIZU p00938 Wall Clocks
```
1 1 1
5 5 N
5 5 S
```
AIZU p01071 Monochrome Tile
```
5 4
5
1 1 3 3
3 2 4 2
4 3 5 4
1 4 5 4
4 1 4 1
```
AIZU p01205 Goofy Converter
```
4 4
4 3 2 2
5 4
5 4 3 2 1
4 4
4 3 2 3
0 0
```
AIZU p01341 Save your cats
```
3 3
0 0
3 0
0 4
1 2
2 3
3 1
```
```
4 3
0 0
-100 0
100 0
0 100
1 2
1 3
1 4
```
```
6 7
2 0
6 0
8 2
6 3
0 5
1 7
1 2
2 3
3 4
4 1
5 1
5 4
5 6
```
```
6 6
0 0
0 1
1 0
30 0
0 40
30 40
1 2
2 3
3 1
4 5
5 6
6 4
```
AIZU p01508 Longest Lane
4
0 0
10 0
10 10
0 10
0
3
0 0
1 0
0 1
AIZU p01679 SIRO Challenge
```
2 1 1 1 10
1 2 3
2 4
2 1 1 1 9
1 2 3
2 4
4 2 2 4 50
1 2 5
3 4 5
2 15
3 15
4 6 3 1 29
1 2 20
3 2 10
4 1 5
3 1 5
2 4 3
3 4 4
2 1
4 5
3 3
0 0 0 0 0

2 1 1 1 10
1 2 3
2 4
2 1 1 1 9
1 2 3
2 4
4 2 2 4 50
1 2 5
3 4 5
2 15
3 15
4 6 3 1 29
1 2 20
3 2 10
4 1 5
3 1 5
2 4 3
3 4 4
2 1
4 5
3 3
0 0 0 0 0

2 1 1 1 10
1 2 3
2 4
2 1 1 1 9
1 2 3
2 4
4 2 2 4 50
1 2 5
3 4 5
2 15
3 15
4 6 3 1 29
1 2 20
3 2 10
4 1 5
3 1 5
2 4 3
3 4 4
2 1
4 5
3 3
0 0 0 0 0

2 1 1 1 10
1 2 3
2 4
2 1 1 1 9
1 2 3
2 4
4 2 2 4 50
1 2 5
3 4 5
2 15
3 15
4 6 3 1 29
1 2 20
3 2 10
4 1 5
3 1 5
2 4 3
3 4 4
2 1
4 5
3 3
0 0 0 0 0
```
AIZU p01823 Marching Course
```
1 2 1
```

```
1 1 1
```

```
1 2 1 1 2 1 1 2 1 1
```

```
2 1 2 1 2 1 2 1 2 1
```

```
1 1 1 1 1 1 1 1 1 1
```
AIZU p01958 Prime-Factor Prime
```
1 9
10 20
575 57577
180 180
9900001 10000000
999000001 1000000000
```
AIZU p02105 Zombie Hunter
10 10 11
1 1 0
1 0 1
2 2 2
3 3 5
4 1 3
5 1 3
5 5 -1
AIZU p02245 8 Puzzle
1 3 0
4 2 5
7 8 6
AIZU p02391 Small
1 2
4 3
5 5
-1 0
0 0
1000 1001
-1001 -1000
123456789 123456789
