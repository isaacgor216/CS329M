CODECHEF cg01
1
3 7 6
3
CODECHEF delsum
1
4 2
1 2 3 4
2
3 2
1 2 3
CODECHEF iitk1p07
1
1 1 1000000007

2
3 2 5

3
10 1000000007 1000000007

4
65537 1 1000000007

5
11111111111111 1000000007 1000000007
CODECHEF nc1401
1
1
A
CODECHEF rrplayer
```
1
10
```
CODECHEF wout
1
5 2
2 3
1 2
2 3
1 2
2 3
CODEFORCES 1023_A. Single Wildcard Pattern Matching
1. **Incorrect use of the wildcard character.**

```
n, m = map(int, input().split())
s = input()
t = input()
if '*' in s:
    if s[s.index('*')+1:] != t[t.index('*')+1:]:
        print('NO')
    else:
        print('YES')
else:
    if s != t:
        print('NO')
    else:
        print('YES')
```

2. **Incorrect handling of the empty string.**

```
n, m = map(int, input().split())
s = input()
t = input()
if s == '' or t == '':
    print('NO')
elif '*' in s:
    if s[s.index('*')+1:] != t[t.index('*')+1:]:
        print('NO')
    else:
        print('YES')
else:
    if s != t:
        print('NO')
    else:
        print('YES')
```

3. **Incorrect handling of the case of the letters.**

```
n, m = map(int, input().split())
s = input()
t = input()
if s.lower() != t.lower():
    print('NO')
else:
    print('YES')
```

4. **Incorrect handling of the length of the strings.**

```
n, m = map(int, input().split())
s = input()
t = input()
if n != m:
    print('NO')
else:
    if '*' in s:
        if s[s.index('*')+1:] != t[t.index('*')+1:]:
            print('NO')
        else:
            print('YES')
    else:
        if s != t:
            print('NO')
        else:
            print('YES')
```

5. **Incorrect handling of the special characters.**

```
n, m = map(int, input().split())
s = input()
t = input()
if '*' in s or '*' in t:
    print('NO')
else:
    print('YES')
```

6. **Incorrect handling of the boundary conditions.**

```
n, m = map(int, input().split())
s = input()
t = input()
if n < 1 or m < 1:
    print('NO')
else:
    if '*' in s:
        if s[s.index('*')+1:] != t[t.index('*')+1:]:
            print('NO')
        else:
            print('YES')
    else:
        if s != t:
            print('NO')
        else:
            print('YES')
```

7. **Incorrect handling of the errors.**

```
n, m = map(int, input().split())
s = input()
t = input()
try:
    if '*' in s:
        if s[s.index('*')+1:] != t[t.index('*')+1:]:
            print('NO')
        else:
            print('YES')
    else:
        if s != t:
            print('NO')
        else:
            print('YES')
except:
    print('NO')
```
CODEFORCES 1044_B. Intersecting Subtrees
```
1
3
1 2
2 3
1
1
1
2
2
1
```
```
2
6
1 2
1 3
1 4
4 5
4 6
4
1 3 4 5
3
3 5 2
3
6
1 2
1 3
1 4
4 5
4 6
3
1 2 3
3
4 1 6
5
```
```
1
9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
3
1 2 8
3
1 8 3
3
9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
3
1 2 3
3
4 1 6
5
```
CODEFORCES 1067_A. Array Without Local Maximums 
```
3
1 -1 2
```
```
2
-1 -1
```
```
2
1 1
```
```
3
1 1 2
```
```
10
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1
```
CODEFORCES 1089_K. King Kog's Reception
1. ```
1
```
2. ```
1
+ 2 2
```
3. ```
3
+ 2 2
+ 4 2
+ 5 2
```
4. ```
19
? 3
+ 2 2
? 3
? 4
+ 5 2
? 5
? 6
+ 1 2
? 2
? 3
? 4
? 5
? 6
? 7
? 9
- 8
? 2
? 3
? 6
```
5. ```
10
+ 1 1
+ 2 2
+ 3 3
+ 4 4
+ 5 5
+ 6 6
+ 7 7
+ 8 8
+ 9 9
+ 10 10
```
CODEFORCES 1108_E1. Array and Segments (Easy version)
```
1 0
1000000
```

```
5 4
2 -2 3 1 2
1 3
4 5
2 5
1 3
```

```
5 4
2 -2 3 1 4
3 5
3 4
2 4
2 5
```

```
1 0
1000000
```

```
5 5
2 -2 3 1 2
1 5
2 5
3 5
4 5
```

```
5 1
2 -2 3 1 2
1 3
```

```
1 0
1000000
```

```
10 6
-854 -732 200 107 -995 -920 -379 -879 499 608
1 5
2 4
5 6
6 7
8 9
```
CODEFORCES 1138_A. Sushi for Two
```
7
2 2 2 1 1 2 2

6
1 2 1 2 1 2

9
2 2 1 1 1 2 2 2 2
```
CODEFORCES 1156_C. Match Points
**1. Using the wrong data type for the input/output.**

```
n, z = map(int, input().split())
x = list(map(int, input().split()))
print(len(set(x)))
```

**2. Using an incorrect algorithm.**

```
n, z = map(int, input().split())
x = list(map(int, input().split()))
x.sort()
res = 0
for i in range(n):
    if i + z - 1 < n:
        res += 1
print(res)
```

**3. Using incorrect boundary conditions.**

```
n, z = map(int, input().split())
if n < 2 or z < 1:
    print(-1)
else:
    x = list(map(int, input().split()))
    x.sort()
    res = 0
    for i in range(n):
        if i + z - 1 < n:
            res += 1
    print(res)
```

**4. Using incorrect variable names.**

```
n, z = map(int, input().split())
x = list(map(int, input().split()))
num_points = len(x)
for i in range(num_points):
    for j in range(i + z - 1, num_points):
        if x[i] != x[j]:
            print(x[i], x[j])
```

**5. Making a logic error.**

```
n, z = map(int, input().split())
x = list(map(int, input().split()))
x.sort()
res = 0
for i in range(n):
    if x[i] + z < x[i + 1]:
        res += 1
print(res)
```
CODEFORCES 1178_F1. Short Colorful Strip
```
1 1
1

3 3
1 2 3

7 7
1 2 3 4 5 6 7
```
CODEFORCES 1196_E. Connected Component on a Chessboard
```
1
1 1
```
CODEFORCES 1213_G. Path Queries
```
# Test case 1

7 5
1 2 1
3 2 3
2 4 1
4 5 2
5 7 4
3 6 2
5 2 3 4 1

# Test case 2

1 2
1 2

# Test case 3

3 3
1 2 1
2 3 2
1 3 2
```
CODEFORCES 1237_C1. Balanced Removals (Easier)
```
6
3 1 0
0 3 0
2 2 0
1 0 0
1 3 0
0 1 0
```

```
8
0 1 1
1 0 1
1 1 0
1 1 1
2 2 2
3 2 2
2 3 2
2 2 3
```
CODEFORCES 1255_B. Fridge Lockers
```
3
4 4
1 1 1 1
3 1
1 2 3
3 3
1 2 3

```
CODEFORCES 1279_A. New Year Garland
```
1
1 1 1
```
```
1
1 1 2
```
```
1
100 1 2
```
```
2
1 1 1
2 2 2
```
```
10
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
6 6 6
7 7 7
8 8 8
9 9 9
10 10 10
```
CODEFORCES 1299_D. Around the World
```
6 8
1 2 0
2 3 1
2 4 3
2 6 2
3 4 8
3 5 4
5 4 5
5 6 6

7 9
1 2 0
1 3 1
2 3 9
2 4 3
2 5 4
4 5 7
3 6 6
3 7 7
6 7 8

4 4
1 2 27
1 3 1
1 4 1
3 4 0
```
CODEFORCES 1322_B. Present
```
2
1 2
```
```
3
1 2 3
```
```
3
1000000000 1000000000 1000000000
```
```
4
1 2 3 4
```
```
5
2 1 3 4 5
```
CODEFORCES 1341_A. Nastya and Rice
```
1
10 20 3 101 18
```
CODEFORCES 1363_A. Odd Selection
1
3 2
1 2 3
1
1 1
1
1 1000
2
2 1
50 51
1
1001
1
1002
2
1002 1001
1
1003
2
1003 1002
1
1004
CODEFORCES 1383_C. String Transformation 2
1
3
abc
bca
3
abc
abc
3
abc
cba
3
abc
abr
3
abc
acb
3
abc
bcd
3
abc
bac
3
abc
abd
3
abc
bcdd
3
abc
bcdda
2
abc
acb
1
a
a
2
bc
ca
2
ab
ba
1
b
b
1
a
a
2
a
ab
1
z
z
1
z
z
CODEFORCES 1404_C. Fixed Point Removal
```
13 5
2 2 3 9 5 4 6 5 7 8 3 11 13
3 1
0 0
2 4
5 0
0 12
```
CODEFORCES 1425_I. Impressive Harvesting of The Orchard
```
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  1 09:04:45 2022

@author: zhiyuan
"""

n,q=map(int,input().split())
a=list(map(int,input().split()))
P=list(map(int,input().split()))

def find(i):
    if i==P[i]:return i
    return find(P[i])

#def dfs(v):
#    for u in v:
#        if a[u]<=0:continue
#        a[u]-=1
#        dfs(u)

def dfs(v):
    for u in v:
        if a[u]<=0:continue
        a[u]-=1
        a[find(u)]-=1
        dfs(u)

for i in range(q):
    x=int(input())
    v=[]
    while x!=1:
        v.append(x)
        x=P[x]
    v.append(1)
    dfs(v)
    s=0
    c=0
    for j in v:
        if a[j]>0:s+=1
    print(s,c)
```
CODEFORCES 1447_F1. Frequency Problem (Easy Version)
**Incorrect input format**

```
1
```

**Incorrect output format**

```
1 1 2 2 3 3 3
3
```

**Incorrect logic**

```
n = int(input())
a = list(map(int,input().split()))
for i in range(n-1):
    if a[i] == a[i+1]:
        print(i+1)
```

**Memory limit exceeded**

```
n = int(input())
a = list(map(int,input().split()))
for i in range(n):
    for j in range(i+1,n):
        if a[i] == a[j]:
            print(j-i+1)
```

**Time limit exceeded**

```
n = int(input())
a = list(map(int,input().split()))
for i in range(n-1):
    for j in range(i+1,n):
        if a[i] == a[j]:
            print(j-i+1)
```
CODEFORCES 1472_F. New Year's Puzzle
1. Incorrect input format
```
t = int(input())
while t:
    t -= 1
    n, m = map(int, input().split())
    res = "YES"
    for _ in range(m):
        r, c = map(int, input().split())
        if r == 1 and c > n//2:
            res = "NO"
        elif r == 2 and c < n//2:
            res = "NO"
    print(res)
```

2. Incorrect output format
```
t = int(input())
while t:
    t -= 1
    n, m = map(int, input().split())
    res = "YES"
    for _ in range(m):
        r, c = map(int, input().split())
        if r == 1 and c > n//2:
            res = "no"
        elif r == 2 and c < n//2:
            res = "no"
    print(res)
```

3. Off-by-one errors
```
t = int(input())
while t:
    t -= 1
    n, m = map(int, input().split())
    res = "YES"
    for _ in range(m):
        r, c = map(int, input().split())
        if r == 1 and c > n:
            res = "NO"
        elif r == 2 and c < 1:
            res = "NO"
    print(res)
```

4. Undefined behavior
```
t = int(input())
while t:
    t -= 1
    n, m = map(int, input().split())
    res = "YES"
    for _ in range(m):
        r, c = map(int, input().split())
        if r == 1 and c > n-1:
            res = "NO"
        elif r == 2 and c < 1:
            res = "NO"
    print(res)
```

5. Using the wrong data type
```
t = int(input())
while t:
    t -= 1
    n, m = map(int, input().split())
    res = "YES"
    for _ in range(m):
        r, c = map(int, input().split())
        if r == 1 and c > n:
            res = "NO"
        elif r == 2 and c < 1:
            res = "NO"
    print(res)
```

6. Using the wrong algorithm
```
t = int(input())
while t:
    t -= 1
    n, m = map(int, input().split())
    res = "YES"
    for _ in range(m):
        r, c = map(int, input().split())
        if r == 1 and c > n//2:
            res = "NO"
        elif r == 2 and c < n//2:
            res = "NO"
    print(res)
```
CODEFORCES 1499_A. Domino on Windowsill
```
1
1 0 1
1 0
```
```
1
1 1 1
0 0
```
```
1
3 0 0
0 0
```
```
1
0 0 0
0 0
```
```
1
4 3 1
2 2
```
```
4
4 3 1
2 2
```
```
5
5 4 3
3 1
```
CODEFORCES 1520_F2. Guess the K-th Zero (Hard version)
```
10 3
2
1
0
1
```
```
10 5
2
3
1
0
4
```
```
10 5
1
2
4
0
1
```
```
10 10
1
1
0
0
1
0
1
0
0
1
```
CODEFORCES 154_D. Flatland Fencing
**1. Incorrect input format**

```
0 2 0 4
```

**2. Incorrect calculation of the winning move**

```
0 2 1 1
```

**3. Incorrect output format**

```
0 2 0 4
FIRST
```

**4. Other bugs**

```
0 2 0 4
FIRST
5
```
CODEFORCES 176_B. Word Cut
```
ab
ab
2

ab
ba
2

ababab
ababab
1

ab
a
1
```
CODEFORCES 196_D. The Next Good String
```
3
aaaaaaa
```

```
3
zzyzzzz
```

```
4
abbabbbabbb
```
CODEFORCES 21_D. Traveling Graph
1. Incorrect input format:
```
1 0
```

2. Incorrect data type:
```
3 3
1 2 1.0
2 3 1
3 1 1
```

3. Off-by-one errors:
```
3 3
1 2 1
2 3 1
3 1 1
```

4. Cycle detection:
```
3 3
1 2 1
2 3 1
3 1 2
```

5. Minimum cycle length:
```
3 3
1 2 1
2 3 1
3 1 10
```
CODEFORCES 244_A. Dividing Orange
```
2 2
4 1
```
```
2 2
5 1
```
```
3 1
2
```
```
3 2
2 1
```
CODEFORCES 269_D. Maximum Waterfall
```
2 10
1 0 1
2 1 1
```
```
6 5
4 2 8
3 1 2
2 2 3
2 6 12
1 0 7
1 8 11
```
```
5 6
4 1 6
3 2 7
5 9 11
3 10 15
1 13 16
```
```
5 6
4 1 6
3 2 7
5 9 11
3 10 15
1 13 16
```
```
6 5
4 2 8
3 1 2
2 2 3
2 6 12
1 0 7
1 8 11
```
```
6 5
4 2 8
3 1 2
2 2 3
2 6 12
1 0 7
1 8 11
```
```
10 12
3 2 5
7 3 9
4 7 10
1 7 11
8 8 10
1 9 10
1 10 11
9 10 11
6 10 12
5 11 12
```
CODEFORCES 292_A. SMSC
```
1
1000000 10
```
CODEFORCES 316_E3. Summer Homework
```
# 316_E3. Summer Homework

n, m = map(int, input().split())
a = list(map(int, input().split()))

fib = [0, 1]
for i in range(2, n + 1):
    fib.append(fib[i - 1] + fib[i - 2])

for _ in range(m):
    t, l, r = map(int, input().split())

    if t == 1:
        a[l - 1] = r
    elif t == 2:
        print(fib[r] - fib[l - 2])
    else:
        for i in range(l - 1, r):
            a[i] += d
```
CODEFORCES 33_D. Knights
```
2 1 1
0 0
3 3
2 0 0
1 2

2 3 1
0 0
4 4
1 0 0
2 0 0
3 0 0
1 2

10 10 10
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
1 2

10 10 10
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
1 9
```
CODEFORCES 363_A. Soroban
1. **Incorrect input format**

```
2345678910
```

2. **Incorrect output format**

```
2
O-|OO-OO
```

3. **Incorrect calculation of the value of a digit**

```
35
O-|-OOO-O
```

4. **Incorrect printing of the rods**

```
13
O-|OOO-O
O-|O-OOO
```

5. **Other bugs**

```
0
O-|OO-OO
```
CODEFORCES 386_D. Game with Points
3
1 2 3
*
*
*
*

3
1 2 3
*a*
*b*
*c*

4
1 2 4
*aba
a*ab
ba*b
abb*
CODEFORCES 407_C. Curious Array
```
5 1
0 0 0 0 0
1 5 0
```
```
10 2
1 2 3 4 5 0 0 0 0 0
1 6 1
6 10 2
```
```
10 3
1 2 3 4 5 6 7 8 9 10
1 6 1
6 10 2
1 10 3
```
CODEFORCES 434_D. Nanami's Power Plant
```
3 3
0 1 0
0 1 1
0 1 2
0 3
1 2
-100 100
1 2 0
2 3 0
3 1 0

```
CODEFORCES 457_A. Golden System
```
# Incorrect implementation of the golden number calculation.
1000
111

# Incorrect handling of strings with leading zeros.
010
10

# Incorrect comparison of numbers.
1000
111

# Off-by-one errors.
010
011

# Memory errors.

CODEFORCES 479_D. Long Jumps
```
3 250 185 230
0 185 250
```
CODEFORCES 501_D. Misha and Permutations Summation
```
2
0 1
0 1
```

```
2
0 1
1 0
```

```
3
1 2 0
2 1 0
```

```
4
0 1 3 2
1 2 3 0
```

```
5
1 2 4 0 3
3 0 4 1 2
```
CODEFORCES 527_B. Error Correct System
1. ```
n = int(input())
s = input()
t = input()

def hamming_distance(s, t):
  return len(s) + len(t) - 2 * common_length(s, t)

def common_length(s, t):
  count = 0
  for i in range(n):
    if s[i] == t[i]:
      count += 1
  return count

print(hamming_distance(s, t))
print(-1, -1)
```

2. ```
n = int(input())
s = input()
t = input()

def hamming_distance(s, t):
  return len(s) + len(t) - 2 * common_length(s, t)

def common_length(s, t):
  count = 0
  for i in range(n):
    if s[i] == t[i]:
      count += 1
  return count

print(hamming_distance(s, t))
print(-1, -1)
```

3. ```
n = int(input())
s = input()
t = input()

def hamming_distance(s, t):
  return len(s) + len(t) - 2 * common_length(s, t)

def common_length(s, t):
  count = 0
  for i in range(n):
    if s[i] == t[i]:
      count += 1
  return count

print(hamming_distance(s, t))
print(-1, -1)
```

4. ```
n = int(input())
s = input()
t = input()

def hamming_distance(s, t):
  return len(s) + len(t) - 2 * common_length(s, t)

def common_length(s, t):
  count = 0
  for i in range(n):
    if s[i] == t[i]:
      count += 1
  return count

print(hamming_distance(s, t))
print(-1, -1)
```

5. ```
n = int(input())
s = input()
t = input()

def hamming_distance(s, t):
  return len(s) + len(t) - 2 * common_length(s, t)

def common_length(s, t):
  count = 0
  for i in range(n):
    if s[i] == t[i]:
      count += 1
  return count

print(hamming_distance(s, t))
print(-1, -1)
```
CODEFORCES 552_E. Vanya and Brackets
1. ```
3+5*7+8*4
```

2. ```
2+3*5
```

3. ```
3*4*5
```

4. ```
9
```

5. ```
123456789*+
```

6. ```
9*+
```

7. ```
1*2*3*4*5*6*7*8*9
```

8. ```
```

9. ```
```

10. ```
```
CODEFORCES 579_E. Weakness and Poorness
```
# 3
# 1 2 3

# 4
# 1 2 3 4

# 10
# 1 10 2 9 3 8 4 7 5 6

# 40
# -7043 1947 -5959 4344 -3938 -1953 5596 -2912 -8889 2645 -3693 5130 -5161 6522 6219 -4793 7884 -6516 1600 -475 1390 5858 -1543 1328 -6609 -5874 2831 3875 8971 -9220 -2324 1096 -1315 1152 6242 -3411 3216 1246 -8606 2943 9415 -8487 4364 7597 -9111 -5444 8955 5586 -7299 -1512 7588 2550 -5228 -5198 -5989 1573 7272 -3609 -3229 -9425 -1562 8652 -2362 -9855 7781 -6633 -7350 -7903 9205 4351 -8125 -2828 -1214 9167 2917 -7369 -9667 -7812 4097 3054 6923 6355 -9240 -9387 -3387 -3955 -9168 -696 2730 -2898 -8718 8981 3287 1677 3817 6902 -3681 3002 7200 -3790 -2103 5655 5544 -2170 1547 6601 8782 4209 6540 3251 -9184 4516 -5283 -2015 -2912 6091 9956 -3574 -8632 9619 -1568 -7623 -5317 3719 -8919 -5159 -1753 -6066 3969 6214 -4933 6902 7020 3056 649 9536 5878 -8829 -3275 1153 -9042 -1039 -6779 9006 -1653 6721 2864 6313 2110 4467 1561 6854 -7544 4660 5424 7444 -8938 5662 -9131 9736 -4495 5315 5645 9486 -1410 8384 6835 -1375 8760 8287 1298 2434 4224 1664 1264 6690 8134 -7658 3540 5136 -3632 1908 -6792 2326 6879 -5622 2200 2279 8611 -3691 4684 2706 5
CODEFORCES 600_D. Area of Two Circles' Intersection
**1. Incorrect calculation of the distance between the centers of the circles.**

```
input()
input()

x1, y1, r1 = map(int, input().split())
x2, y2, r2 = map(int, input().split())

d = sqrt((x1 - x2)**2 + (y1 - y2)**2)

if d < r1 + r2:
    print(0)
else:
    print(pi * r1 * r2 * (1 - cos(acos((r1**2 + d**2 - r2**2)/(2 * r1 * d)))))
```

**2. Incorrect calculation of the intersection points of the circles.**

```
input()
input()

x1, y1, r1 = map(int, input().split())
x2, y2, r2 = map(int, input().split())

d = sqrt((x1 - x2)**2 + (y1 - y2)**2)

if d < r1 + r2:
    print(0)
else:
    t = (r1**2 + d**2 - r2**2)/(2 * r1 * d)

    x = x1 + t * (x2 - x1)
    y = y1 + t * (y2 - y1)

    print(x, y)
```

**3. Incorrect calculation of the area of the intersection of the circles.**

```
input()
input()

x1, y1, r1 = map(int, input().split())
x2, y2, r2 = map(int, input().split())

d = sqrt((x1 - x2)**2 + (y1 - y2)**2)

if d < r1 + r2:
    print(0)
else:
    theta = acos((r1**2 + d**2 - r2**2)/(2 * r1 * d))

    area = pi * r1 * r2 * (1 - cos(theta))

    print(area)
```

**4. Incorrect rounding of the area of the intersection.**

```
input()
input()

x1, y1, r1 = map(int, input().split())
x2, y2, r2 = map(int, input().split())

d = sqrt((x1 - x2)**2 + (y1 - y2)**2)

if d < r1 + r2:
    print(0)
else:
    theta = acos((r1**2 + d**2 - r2**2)/(2 * r1 * d))

    area = pi * r1 * r2 * (1 - cos(theta))

    area = round(area, 6)

    print(area)
```

**5. Incorrect output of the area of the intersection.**

```
input()
input()

x1, y1, r1 = map(int, input().split())
x2, y2, r2 = map(int, input().split())

d = sqrt((x1 - x2)**2 + (y1 - y2)**2)

if d < r1 + r2:
    print(0)
else:
    theta = acos((r1**2 + d**2 - r2**2)/(2 * r1 * d))

    area = pi * r1 * r2 * (1 - cos(theta))

    area = round(area, 6)

    print("%.6f" % area)
```
CODEFORCES 623_A. Graph and String
```
1 1
1 1
```

```
2 1
1 2
```

```
3 2
1 2
2 3
```

```
4 2
1 2
2 3
```

```
4 3
1 2
1 3
3 4
```

```
5 3
1 2
2 3
3 4
```

```
5 4
1 2
2 3
3 4
4 5
```

```
6 4
1 2
2 3
3 4
4 5
```

```
6 5
1 2
2 3
3 4
4 5
5 6
```
CODEFORCES 644_C. Hostname Aliases
```
1
http://abacaba.ru/test
```

```
10
http://abacaba.ru/test
http://abacaba.ru/
http://abacaba.com
http://abacaba.com/test
http://abacaba.de/
http://abacaba.ru/test
http://abacaba.de/test
http://abacaba.com/
http://abacaba.com/t
http://abacaba.com/test
```

```
14
http://c
http://ccc.bbbb/aba..b
http://cba.com
http://a.c/aba..b/a
http://abc/
http://a.c/
http://ccc.bbbb
http://ab.ac.bc.aa/
http://a.a.a/
http://ccc.bbbb/
http://cba.com/
http://cba.com/aba..b
http://a.a.a/aba..b/a
http://abc/aba..b/a
```
CODEFORCES 671_C. Ultimate Weirdness of an Array
```
1
1
```

```
2
1 2
```

```
3
2 3 4
```

```
4
1 2 3 4
```

```
5
1 2 3 4 5
```

```
6
1 2 3 4 5 6
```

```
7
1 2 3 4 5 6 7
```

```
8
1 2 3 4 5 6 7 8
```

```
9
1 2 3 4 5 6 7 8 9
```

```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 696_F. ...Dary!
1. ```
4
-41 67
-16 20
25 25
-36 85
```
2. ```
7
-7 54
-5 31
-2 17
20 19
32 23
34 27
26 57
```
CODEFORCES 717_G. Underfail
```
6
abacba
2
aba 6
ba 3
3
```

```
6
abacba
2
aba 6
ba 3
4
```

```
6
abacba
2
aba 6
ba 3
5
```

```
6
abacba
2
aba 6
ba 3
6
```

```
6
abacba
2
aba 6
ba 3
1
```

```
6
abacba
3
aba 6
ba 3
ca 4
3
```

```
6
abacba
3
aba 6
ba 3
ca 4
4
```

```
6
abacba
3
aba 6
ba 3
ca 4
5
```

```
6
abacba
3
aba 6
ba 3
ca 4
6
```
CODEFORCES 739_C. Alyona and towers
```
10
1 2 3 4 5 6 7 8 9 10
3
1 5 2
2 2 1
4 4 1
```
CODEFORCES 762_B. USB vs. PS/2
```
2 1 1
4
5 USB
6 PS/2
3 PS/2
7 PS/2
```
CODEFORCES 785_C. Anton and Fairy Tale
1. ```
5 2
```
2. ```
8 1
```
3. ```
10 3
```
4. ```
1000000000 1000000000
```
5. ```
1000000000 1000000001
```
CODEFORCES 807_C. Success Rate
```
1
1 1 0 1
```
CODEFORCES 831_D. Office Keys
```
1 2 10
11
15 7
```
CODEFORCES 852_E. Casinos and travel
```
1
1 2
```
CODEFORCES 876_F. High Cry
```
5
3 2 1 6 5
```
CODEFORCES 900_A. Find Extra One
```
2
1 1
2 2
```
```
3
1 1
2 2
-1 -1
```
```
3
1 1
2 1
4 60
```
```
4
1 1
2 2
-1 1
-2 2
```
```
5
1 1
2 2
3 3
4 4
5 5
```
```
10
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
10 10
```
CODEFORCES 922_E. Birds
```
2 12 0 4
3 4
4 2

2 12 0 4
3 4
5 2

1 1000000000 1000000000 1000000000
1

2 1000000000 0 1000000000
1000000000
```
CODEFORCES 950_A. Left-handers, Right-handers and Ambidexters
1. ```
1 4 2
```
2. ```
5 5 5
```
3. ```
0 2 0
```
4. ```
-1 1 1
```
5. ```
1.5 2 3
```
6. ```
"1 4 2"
```
7. ```
[1, 4, 2]
```
8. ```
{'l': 1, 'r': 4, 'a': 2}
```
CODEFORCES 978_D. Almost Arithmetic Progression
```
1
1
```
```
2
1 2
```
```
5
1 1 1 1 1
```
```
5
1 2 3 4 5
```
```
6
1 2 3 4 5 6
```
```
6
1 4 2 1 3 5
```
CODEFORCES 998_C. Convert to Ones
```
5 1 10
01000

5 10 1
01000

7 2 3
1111111

10 1 10
011000001011

10 10 1
100000000001

10 10 1
000000000000
```
HACKEREARTH beautiful-primes
1
3
2 3 5
2 1 1
HACKEREARTH coincide
1
1 2 3
HACKEREARTH fare-evaluator-2
3
1 2
5 3
61 3
HACKEREARTH humpty-dumpty
```
1
3
0 0
1
1
2
2
5 4
2
5
1
3 4
4
```
HACKEREARTH mahabirs-queries
**Incorrect input format:**
```
1 1
1
1
```
**Incorrect output format:**
```
1 1
1 1
```
**Incorrect calculation:**
```
3 3
1 2 3
4 5 6
7 8 9
90

1 2 3
4 5 6
7 8 9
```
**Memory leak:**
```
3 3
1 2 3
4 5 6
7 8 9
90
```
**Time complexity:**
```
3 3
1 2 3
4 5 6
7 8 9
90
```
**Space complexity:**
```
3 3
1 2 3
4 5 6
7 8 9
90
```
HACKEREARTH no-of-1s-0s
1
0
HACKEREARTH puzzleria
1
5 2
1
3 4
1
3 5
1
4 5
HACKEREARTH shil-and-birthday-present
5
1 4 3 2 5
HACKEREARTH the-hound-vs-the-mountain-2
```
1
00000000 00000000
```
HACKEREARTH xsquare-and-two-strings-1
1
p
p
ATCODER p02660 AtCoder Beginner Contest 169 - Div Game
```
24
1
64
1000000007
997764507000
```
ATCODER p02789 AtCoder Beginner Contest 152 - AC or WA
1
1

3
2

3
3
ATCODER p02925 AtCoder Beginner Contest 139 - League
```
3
2 3
1 3
1 2

4
2 3 4
1 3 4
4 1 2
3 1 2

3
2 3
3 1
1 2
```
ATCODER p03060 AtCoder Beginner Contest 125 - Resale
```
1
1
50
```
```
5
13 21 6 19
11 30 6 15
```
```
3
10 2 5
6 3 4
```
ATCODER p03204 AtCoder Grand Contest 029 - Wandering TKHS
```
5
1 4
2 3
3 4
```
ATCODER p03351 AtCoder Beginner Contest 097 - Colorful Transceivers
```
1 10 10 1
1 100 2 10
```
ATCODER p03511 Code Festival Team Relay (Parallel) - Coinage
6
at
code

6
at
code

8
coding
festival

8
same
same

10
coin
age
ATCODER p03672 AtCoder Beginner Contest 066 - ss
```
abaababaab
xxxx
abcabcabcabc
akasakaakasakasakaakas
%^&*(
```
ATCODER p03827 AtCoder Beginner Contest 052 - Increment Decrement
5
IIDID
ATCODER p03994 CODE FESTIVAL 2016 qual A - Next Letter
```
xyz
4

a
25

codefestival
100
```
AIZU p00082 Flying Jenny
```
2 3 1 4 0 1 0 1
4 2 3 2 2 2 1 1
```
AIZU p00214 Autumnal Illumination
1
1
0 0 0 1 1 1 1 0
0
1
1
0 0 0 1 1 1 1 0
0
AIZU p00374 Iron Bars
```
6 0 2 4
1
2
3
4
5
6
```
AIZU p00591 Advanced Algorithm Class
```
1
1
```

```
2
1 2
2 1
```

```
3
1 2 3
4 5 6
7 8 9
```

```
0
```

```
3
1 2 3
7 8 9
4 5 6
```

```
5
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
```
AIZU p00728 ICPC Score Totalizer Software
```
3
1000
342
0
5
2
2
9
11
932
5
300
1000
0
200
400
8
353
242
402
274
283
132
402
523
0
```
AIZU p00868 Spherical Mirrors
```
# 3
-20 -20 -24
100 100 100 30
10 8 3 5
-70 -70 -84 5
# 4
0 47 84
-23 41 42 8
45 -10 14 19
-5 28 47 12
-27 68 34 14
# 0
```
AIZU p00999 Rental DVD Shop NEO
```
70 100 340 4 200
1 1 4
70 100 340 4 200
0 1 3
70 100 340 4 200
1 1 2
0 0 0 0 0
AIZU p01131 Keitai Message
```
1
55666055505550666011011111090666077705550301110
```
AIZU p01270 Restrictive Filesystem
0
6
W 0 2
W 1 2
D 0
W 2 4
R 3
R 1
1
R 1000000000
0
3
W 0 1
W 1 1
D 0
W 2 1
R 1
R 2
1
R 3
-1
2
W 0 1
W 1 1
D 0
W 2 1
R 1
R 2
1
R 3
-1
5
W 0 1
W 1 1
D 0
W 2 1
R 0
R 1
1
R 2
1
R 3
-1
1
W 0 1
R 0
-1
0

AIZU p01440 Revenge of Champernowne Constant
1. Incorrect input format:
```
45678
67891011
21
314159265358979
```
2. Incorrect output format:
```
45678
67891011
21
314159265358979
```
3. Incorrect calculation:
```
45678
67891011
21
314159265358979
```
4. Incorrect termination:
```
45678
67891011
21
314159265358979
#
```
5. Other bugs:
```
45678
67891011
21
314159265358979
```
AIZU p01589 Strange Currency System
1. ```
2
1 2
```

2. ```
3
1 4 5
```

3. ```
5
1 2 4 8 16
```

4. ```
10
1 2 4 8 16 32 64 128 256 512
```

5. ```
10
1 2 3 4 5 6 7 8 9 10
```
AIZU p01746 Directions
1
1 0 1

1
2 2 1

2
1 2 1
2 3 1

3
0 1 1
0 1 2
-1 -1 1
AIZU p01886 Share the Ruins Preservation
```
1
0 0
```
AIZU p02023 Ravage
1. **Incorrect input format**

```
1
2 3
```

2. **Incorrect output format**

```
4
1 4
3 6
2 7
5 8
```

3. **Incorrect algorithm**

```
4
1 4
3 6
2 7
5 8
```

4. **Incorrect implementation**

```
4
1 4
3 6
2 7
5 8
```

5. **Incorrect testing**

```
4
1 4
3 6
2 7
5 8
```

6. **Incorrect documentation**

```
4
1 4
3 6
2 7
5 8
```
AIZU p02165 Blaster
```
4 5
_####
B##
_####
_###_
```

```
5 5
_____
_____
_____
_____
_____
```

```
8 5
_###_
_#_B#
_####
____#
###_#
#####
###_#
####_
```

```
4 5
_####
B##
_####
_###_
```

```
4 5
_#B##

B##
_
```

AIZU p02306 Incircle of a Triangle
1. **Incorrect calculation of the incircle center**

```
# Test case 1
x1, y1 = 1, -2
x2, y2 = 3, 2
x3, y3 = -2, 0

# Expected output:
cx = 0.53907943898209422325
cy = -0.26437392711448356856
r = 1.18845545916395465278

# Actual output:
cx = 0.53907943898209422325
cy = -0.26437392711448356856
r = 1.18845545916395465278
```

2. **Incorrect calculation of the incircle radius**

```
# Test case 2
x1, y1 = 0, 3
x2, y2 = 4, 0
x3, y3 = 0, 0

# Expected output:
cx = 1.00000000000000000000
cy = 1.00000000000000000000
r = 1.00000000000000000000

# Actual output:
cx = 1.00000000000000000000
cy = 1.00000000000000000000
r = 1.00000000000000000000
```

3. **Using incorrect data types**

```
# Test case 3
x1, y1 = 1, -2
x2, y2 = 3, 2
x3, y3 = -2, 0

# Expected output:
cx = 0.53907943898209422325
cy = -0.26437392711448356856
r = 1.18845545916395465278

# Actual output:
cx = 0.5390794389820942
cy = -0.2643739271144836
r = 1.1884554591639547
```

4. **Using floating-point arithmetic**

```
# Test case 4
x1, y1 = 1, -2
x2, y2 = 3, 2
x3, y3 = -2, 0

# Expected output:
cx = 0.53907943898209422325
cy = -0.26437392711448356856
r = 1.18845545916395465278

# Actual output:
cx = 0.53907943898209422325
cy = -0.26437392711448356856
r = 1.18845545916395465278
```

5. **Not handling degenerate cases**

```
# Test case 5
x1, y1 = 0, 0
x2, y2 = 0, 0
x3, y3 = 0, 0

# Expected output:
# Error: The triangle has zero area.

# Actual output:
# Error: The triangle has zero area.
```

6. **Using an incorrect algorithm**

```
# Test case 6
x1, y1 = 1, -2
x2, y2 = 3,
AIZU p02453 Lower Bound
**Program inputs for testing correctness of an implementation of the lower bound algorithm:**

1. **Off-by-one error:**

```
n = 4
a = [1, 2, 2, 4]
q = 3
k = [2, 3, 5]
```

The expected output is:

```
1
3
4
```

2. **Incorrect use of binary search:**

```
n = 4
a = [1, 2, 3, 4]
q = 4
k = [4]
```

The expected output is:

```
4
```

3. **Incorrect handling of duplicate values:**

```
n = 4
a = [1, 1, 2, 3]
q = 1
k = [1]
```

The expected output is:

```
0
```

4. **Incorrect handling of out-of-bounds queries:**

```
n = 4
a = [1, 2, 3, 4]
q = 1
k = [0]
```

The expected output is:

```
n
```

5. **Incorrect handling of empty arrays:**

```
n = 0
a = []
q = 1
k = [0]
```

The expected output is:

```
-1
```