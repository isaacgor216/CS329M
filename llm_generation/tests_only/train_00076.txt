CODECHEF brokphon
```
3
7
1 1 1 3 3 3 2
5
1 3 1 1 1
4
5 5 5 5
```
CODECHEF commute
1
5
0 2 1
0 3 2
0 4 3
0 5 4
0 6 5
CODECHEF gcdq
```
1
4 3
1 2 3 4
1 1
2 2
4 4
```
CODECHEF luckystr
```
1 1
4
4
```

```
1 1
7
7
```

```
1 2
4
7
4
```

```
2 3
4
7
447
447
```

```
2 4
47
744
7444
447
```

```
2 4
47
744
7444
7774
```

```
2 5
47
744
7444
7774
77777777777777777777777777777777777777777777774
```

```
2 1
4
4
```

```
1 1
4
4
```
CODECHEF prpotion
```
1
5 10 5 2
3 4 5 6
1 2 3 4
5 6 7 8
```
CODECHEF tic02
1
1
CODEFORCES 1012_F. Passports
```
2 1
3 1 1
6 1 1
```
CODEFORCES 1037_F. Maximum Reduction
```
3 2
9 1 10
```
```
5 3
5 8 7 1 9
```
```
10 3
1 1 1 1 1 1 1 1 1
```
CODEFORCES 1060_B. Maximum Sum of Digits
1. **Incorrect input format**

```
-1
```

2. **Incorrect output format**

```
12345678901234567890
```

3. **Incorrect algorithm**

```
n = int(input())
print(n * 9)
```

4. **Incorrect data type**

```
n = input()
print(sum(map(int, n)))
```

5. **Off-by-one error**

```
n = int(input())
print(n - 1 + n)
```

6. **Infinite loop**

```
while True:
    n = int(input())
```

7. **Stack overflow**

```
def f(n):
    if n == 0:
        return 0
    return f(n - 1) + n

n = int(input())
print(f(n))
```

8. **Memory leak**

```
def f(n):
    if n == 0:
        return 0
    return f(n - 1) + n

n = int(input())
print(f(n))
```

9. **Race condition**

```
n = int(input())
a = 0
b = 0
while True:
    a += 1
    b += 1
    if a + b == n:
        break
print(a + b)
```

10. **Deadlock**

```
n = int(input())
a = 0
b = 0
while True:
    if a == n:
        continue
    a += 1
    if b == n:
        continue
    b += 1
print(a + b)
```
CODEFORCES 1081_H. Palindromic Magic
```
aa
aba

aaba
abaa
CODEFORCES 1101_B. Accordion
```
[:|:]:|
```
```
[a:b:|]
```
```
|]:[|:]
```
```
[a:b|:|c:d|]
```
```
[a:b|:|c:d|:|e]
```
```
[a:b|:|c:d|:|e|:f|]
```
CODEFORCES 1129_E. Legendary Tree
```
5

5

1 2 3
2
4 5
2
ANSWER
1 2
2 3
3 4
2 5
```
CODEFORCES 114_A. Cifera
```
5
25

3
8

2
4

1
1

10
1000000000

1
1000000001
```
CODEFORCES 1170_F. Wheels
```
# 1. Incorrect input format

n, m, k = [int(x) for x in input().split()]
a = [int(x) for x in input().split()]
```

```
# 2. Incorrect data type

n, m, k = ['1', '2', '3']
a = ['4', '5', '6']
```

```
# 3. Off-by-one errors

n, m, k = [1, 1, 0]
a = [1]
```

```
# 4. Indexing errors

n, m, k = [1, 1, 0]
a = [1]
print(min(a))
```

```
# 5. Arithmetic errors

n, m, k = [1, 1, 0]
a = [1]
print(min(a) + 1)
```

```
# 6. Logic errors

n, m, k = [1, 1, 0]
a = [1]
print(min(a) - 1)
```

```
# 7. Implementation errors

n, m, k = [1, 1, 0]
a = [1]
print(min(a) + 2)
```
CODEFORCES 1189_D2. Add on a Tree: Revolution
```
5
1 2 2
2 3 4
3 4 10
3 5 18

```
CODEFORCES 1208_E. Let Them Slide
```
# 1. Incorrect input format

1 1
```

```
# 2. Incorrect array indexing

3 3
1 2 3 4 5 6
```

```
# 3. Incorrect array bounds checking

3 3
1 2 3 4 5 6
```

```
# 4. Incorrect array slicing

3 3
1 2 3 4 5 6
```

```
# 5. Incorrect array merging

3 3
1 2 3 4 5 6
```

```
# 6. Incorrect array sorting

3 3
1 2 3 4 5 6
```

```
# 7. Incorrect array searching

3 3
1 2 3 4 5 6
```

```
# 8. Incorrect array manipulation

3 3
1 2 3 4 5 6
```

```
# 9. Incorrect array output

3 3
1 2 3 4 5 6
```
CODEFORCES 1227_D2. Optimal Subsequences (Hard Version)
```
5
1 2 3 4 5
4
2 1
2 2
3 1
5 5
```

```
3
10 20 10
6
1 1
2 1
2 2
3 1
3 2
3 3
```

```
6
1 2 1 3 1 2
9
2 1
2 2
3 1
3 2
3 3
1 1
7 1
7 7
7 4
```

```
7
1 2 1 3 1 2 1
9
2 1
2 2
3 1
3 2
3 3
1 1
7 1
7 7
7 4
```

```
10
1 5 3 7 2 1 5 2 8 3
10
1 1
2 1
3 1
4 1
5 1
6 1
7 1
8 1
9 1
10 1
```
CODEFORCES 1250_C. Trip to Saint Petersburg
**Incorrect input format:**
```
1 2
1 2 3
```

**Incorrect data type:**
```
1 2
1 2 3.0
```

**Off-by-one errors:**
```
4 5
1 1 3
3 3 11
5 5 17
7 7 4
```

**Index out of bounds errors:**
```
4 5
1 1 3
3 3 11
5 5 17
7 7 4
```

**Arithmetic errors:**
```
4 5
1 1 3
3 3 11
5 5 17
7 7 4
```

**Logic errors:**
```
4 5
1 1 3
3 3 11
5 5 17
7 7 4
```
CODEFORCES 126_A. Hot Bath
```
1, 100, 10, 10, 10
100, 100, 10, 10, 100
100, 100, 10, 10, 101
100, 100, 10, 10, 1000000000
```
CODEFORCES 1291_F. Coffee Varieties (easy version)
```
4 2
N
N
Y
N
N
N
N

4 2
N
N
Y
N
N
N
N
```
CODEFORCES 1312_A. Two Regular Polygons
```
2
6 3
7 3
```
 ```
2
10 3
10 4
```
```
1
4 2
```
CODEFORCES 1334_E. Divisor Paths
```
12
3
4 4
12 1
3 4
```
CODEFORCES 1354_G. Find a Gift
```
1
3 1
```
CODEFORCES 1374_E2. Reading Books (hard version)
6 3 1
6 0 0
11 1 0
9 0 1
21 1 1
10 1 0
8 0 1

6 3 2
6 0 0
11 1 0
9 0 1
21 1 1
10 1 0
8 0 1
CODEFORCES 1398_B. Substring Removal Game
```
1
0000000000000
```
```
1
1111111111111
```
```
1
1010101010101
```
```
2
1010101010101
1111111111111
```
```
2
0000000000000
0111111111111
```
CODEFORCES 1421_C. Palindromifier
```
abba

abacabab

abbc

abc

a

```
CODEFORCES 143_B. Help Kingdom of Far Far Away 2
```
2012
0.000
-0.00987654321
-12345678.9
```
CODEFORCES 1466_G. Song of the Sirens
1. **Incorrect use of mod operator**

```
n, q = map(int, input().split())
s_0, t = input(), input()
for _ in range(q):
    k, w = map(str, input().split())
    k = int(k)
    l = len(s_0)
    mod = 10**9+7
    occurrences = 0
    s = s_0
    for i in range(k):
        s += t[i] + s_0
    for i in range(l):
        if s[i:i+len(w)] == w:
            occurrences += 1
    print(occurrences % mod)
```

2. **Incorrect use of substrings**

```
n, q = map(int, input().split())
s_0, t = input(), input()
for _ in range(q):
    k, w = map(str, input().split())
    k = int(k)
    l = len(s_0)
    mod = 10**9+7
    occurrences = len(s[i]) - len(w) + 1
    print(occurrences % mod)
```

3. **Incorrect use of the sliding window technique**

```
n, q = map(int, input().split())
s_0, t = input(), input()
for _ in range(q):
    k, w = map(str, input().split())
    k = int(k)
    l = len(s_0)
    mod = 10**9+7
    occurrences = 0
    s = s_0
    for i in range(l):
        if s[i:i+len(w)] == w:
            occurrences += 1
        i += len(w) - 1
    print(occurrences % mod)
```
CODEFORCES 1491_A. K-th Largest Value
**1. Not handling edge cases properly.**

```
1 0
```

This input should cause the program to crash because it does not handle the case where the array is empty.

**2. Not using the most efficient data structure.**

```
5 5
1 1 0 1 0
2 3
1 2
2 3
2 1
2 5
```

This input should cause the program to run slowly because it does not use a heap to store the k largest elements in the array.

**3. Making a mistake in the implementation.**

```
5 5
1 1 0 1 0
2 3
1 2
2 3
2 1
2 5
```

This input should cause the program to return the wrong answer because it does not correctly update the heap when it modifies an element in the array.

**4. Not testing your code.**

```
5 5
1 1 0 1 0
2 3
1 2
2 3
2 1
2 5
```

This input should cause the program to fail the test cases because it does not correctly handle all of the edge cases.

**5. Not using a debugger.**

```
5 5
1 1 0 1 0
2 3
1 2
2 3
2 1
2 5
```

This input should cause the program to be difficult to debug because it does not use a debugger to help track down the bugs.
CODEFORCES 1513_D. GCD and MST
```
1
5 5
1 2 3 4 5
```
```
2
2 5
10 10
2 5
3 3
```
```
3
4 5
5 2 4 9
8 8
5 3 3 6 10 100 9 15
```
```
4
5
1 2 3 4 5
```
CODEFORCES 1540_C2. Converging Array (Hard Version)
```
3
2 3 4
2 1
5
-1 0 1 -100000 100000
```
CODEFORCES 168_B. Wizards and Minimal Spell
```
#   include &lt;cstdio&gt;

using namespace std;

int main     (   ){
puts("Hello # World"); #
#
}
```

```
#

#
```
CODEFORCES 188_H. Stack
12+3*66*+

149
CODEFORCES 20_C. Dijkstra?
1. **Incorrect data type for input/output.**

```
2 1
1 2 1
```

This input is invalid because the number of vertices is not greater than 2.

2. **Incorrect logic.**

```
3 3
1 2 1
2 3 1
1 3 1
```

This input is invalid because the graph has a cycle. The algorithm should return -1 in this case.

3. **Off-by-one errors.**

```
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1
```

This input is valid, but the algorithm should return 1 4 3 5 instead of 1 4 3 5 1.

4. **Memory leaks.**

```
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1
```

This input is valid, but the algorithm should free the memory allocated for the data structures used in the algorithm.

5. **Race conditions.**

```
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1
```

This input is valid, but the algorithm should be thread-safe.

6. **Deadlocks.**

```
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1
```

This input is valid, but the algorithm should not deadlock.

7. **Stack overflows.**

```
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1
```

This input is valid, but the algorithm should not cause a stack overflow.

8. **Buffer overflows.**

```
5 6
1 2 2
2 5 5
2 3 4
1 4 1
4 3 3
3 5 1
```

This input is valid, but the algorithm should not cause a buffer overflow.
CODEFORCES 235_E. Number Challenge
**1. Incorrect input format**

```
1 2 3
```

**2. Incorrect calculation**

```
1 1 1
```

**3. Modulo arithmetic**

```
1000000000 1000000000 1000000000
```

**4. Off-by-one errors**

```
1 2 3
```

**5. Incorrect use of the modulo operator**

```
10 10 10
```

**6. Incorrect use of the factorial function**

```
10 10 10
```
CODEFORCES 260_C. Balls and Boxes

CODEFORCES 284_C. Cows and Sequence
```
5
1 2 2
3
1 3 3
2 1
3
```
CODEFORCES 309_C. Memory for Arrays
```
5 3
8 4 3 2 2
3 2 2

5 3
8 4 3 2 2
3 2 2

2 2
1 1
0 0

10 6
1 1 1 1 1 1 1 1 1 1
0 0 0 0 0 0

1 1
1 1
```
CODEFORCES 332_A. Down the Hatch!
**1. Incorrect input format**

```
4
abbba
```

This input is not correctly formatted, because it does not contain a newline character after the number 4. This could cause the program to crash or to output incorrect results.

**2. Incorrect output format**

```
4
abbba

1
```

This output is not correctly formatted, because it does not have a newline character after the number 1. This could cause the program to crash or to output incorrect results.

**3. Memory leaks**

```
4
abbba
```

This program does not properly release memory that it has allocated. This could lead to the program running out of memory and crashing.

**4. Race conditions**

```
4
abbba
```

This program is not thread-safe, which could lead to incorrect results or the program crashing.

**5. Deadlocks**

```
4
abbba
```

This program could deadlock, which means that it will stop responding and the user will not be able to interact with it.

**6. Security vulnerabilities**

```
4
abbba
```

This program could contain security vulnerabilities, which could allow attackers to gain access to the system or steal data.

**7. Bugs in the algorithm**

```
4
abbba
```

This program contains bugs in the algorithm that it is using, which could lead to incorrect results or the program crashing.

**8. Incorrect assumptions**

```
4
abbba
```

This program makes incorrect assumptions about the input data, which could lead to incorrect results or the program crashing.

**9. Incorrect implementation**

```
4
abbba
```

This program is incorrectly implemented, which could lead to incorrect results or the program crashing.

**10. Lack of testing**

```
4
abbba
```

This program has not been properly tested, which could lead to bugs being present in the program.
CODEFORCES 355_A. Vasya and Digital Root
1. ```
1 0
```
2. ```
5 3
```
3. ```
1 1
```
4. ```
10 0
```
5. ```
1000 1
```
CODEFORCES 379_B. New Year Present
1. **Incorrect input format.**
```
1
100
```
2. **Incorrect variable declaration.**
```
n = int(input())
a = input().split()
```
3. **Incorrect logic.**
```
n = int(input())
a = input().split()
ans = []
for i in range(n):
    if a[i] > 0:
        ans.append('P')
    else:
        if len(ans) > 0 and ans[-1] == 'P':
            ans.append('R')
        else:
            ans.append('L')
print(''.join(ans))
```
4. **Incorrect error handling.**
```
n = int(input())
a = input().split()
try:
    ans = []
    for i in range(n):
        if a[i] > 0:
            ans.append('P')
        else:
            if len(ans) > 0 and ans[-1] == 'P':
                ans.append('R')
            else:
                ans.append('L')
    print(''.join(ans))
except Exception as e:
    print(e)
```
5. **Incorrect testing.**
```
# Test case 1
n = 2
a = [1, 2]
ans = ['PRPLRP']
assert(ans == solve(n, a))

# Test case 2
n = 4
a = [0, 2, 0, 2]
ans = ['RPRRPLLPLRRRP']
assert(ans == solve(n, a))

# Test case 3
n = 2
a = [0, -1]
ans = ['R', 'P']
assert(ans == solve(n, a))
```
CODEFORCES 39_I. Tram
```
1 2
1 2
```
```
5 5
1 2
2 3
3 4
4 5
5 1
```
CODEFORCES 425_E. Sereja and Sets
```
3 1
3 2
2 0
2 2
```
CODEFORCES 44_C. Holidays
```
10 5
1 2
2 3
4 5
7 8
9 10
```

```
10 5
1 2
2 3
4 5
7 7
7 10
```

```
10 5
1 2
3 3
5 7
7 7
7 10
```

```
10 5
1 2
3 3
4 6
7 7
8 10
```

```
1 1
```

```
100 1
1 100
```

```
100 100
1 1
2 2
...
100 100
```

```
100 100
1 1
2 2
...
1 100
```

```
-1 1
```

```
1000000000 1
1 1000000000
```

```
1000000000 1000000000
1 1
...
1000000000 1000000000
```
CODEFORCES 470_G. Hamming Distance
AABB
ABBA
CODECHEF
Input

AAA
AAA


Output

0


Input

A
B


Output

1


Input

ABABBA
ABABBA


Output

0


Input

ABBA
ABABB


Output

1
CODEFORCES 494_E. Sharti
```
5 2 1
1 1 3 3
2 2 4 4
```

```
12 5 7
3 4 5 6
1 2 1 2
4 5 9 9
8 6 12 10
12 4 12 4
```

```
5 1 1
1 1 5 5
```

```
5 1 2
1 1 5 5
```
CODEFORCES 519_C. A and B and Team Training
1. ```
1 2
```
2. ```
0 0
```
3. ```
100 100
```
4. ```
10 10
```
5. ```
10 11
```
6. ```
11 10
```
7. ```
5 5
```
8. ```
5 6
```
9. ```
6 5
```
10. ```
5 6
```
CODEFORCES 545_D. Queue
```
5
15 2 1 5 3
```
CODEFORCES 572_A. Arrays
```
# 572_A. Arrays

nA, nB = map(int, input().split())
k, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

if (k > nA or m > nB):
    print("NO")
    exit(0)

a.sort()
b.sort()

if (a[k-1] < b[0]):
    print("YES")
else:
    print("NO")
```
CODEFORCES 593_D. Happy Tree Party
```
# 593_D. Happy Tree Party

def main():
    n, m = map(int, input().split())
    adj = [[] for _ in range(n)]
    for i in range(n - 1):
        u, v, w = map(int, input().split())
        adj[u - 1].append((v - 1, w))
        adj[v - 1].append((u - 1, w))

    edges = [[] for _ in range(n)]
    for i in range(m):
        t, u, v, y = map(int, input().split())
        if t == 1:
            edges[u - 1].append((v - 1, y))
        else:
            edges[u - 1].append((v - 1, w))

    def dfs(u, par, s):
        s *= adj[u][par][1]
        for v, w in edges[u]:
            if v == par:
                continue
            dfs(v, u, s)
        return s

    ans = []
    for i in range(m):
        t, u, v, y = map(int, input().split())
        if t == 1:
            ans.append(dfs(u - 1, -1, y))
        else:
            for v, w in edges[u - 1]:
                edges[u - 1][v][1] = w
    print(*ans)


if __name__ == '__main__':
    main()
```
CODEFORCES 615_B. Longtail Hedgehog
```
8 6
4 5
3 5
2 5
1 2
2 8
6 7
```
CODEFORCES 634_D. Package Delivery
1. **Incorrect input format**
```
10 4 4
3 5
5 8
6 3
8 4
```

2. **Incorrect algorithm**
```
16 5 2
8 2
5 1
```

3. **Off-by-one errors**
```
10 4 4
3 5
5 8
6 3
8 4
```

4. **Memory errors**
```
10 4 4
3 5
5 8
6 3
8 4
```

5. **Time limit errors**
```
10 4 4
3 5
5 8
6 3
8 4
```
CODEFORCES 663_B. International Olympiad
1
IAO'1
CODEFORCES 687_E. TOF
```
3 3
1 2
2 3
3 1
```
```
6 7
1 2
2 3
3 1
3 4
4 5
5 6
6 4
```
CODEFORCES 70_D. Professor's task
1. Incorrectly handling duplicate points:
```
3
1 0 0
1 2 0
1 2 2
2 1 0
```

2. Incorrectly handling points that are not on the convex hull:
```
3
1 0 0
1 2 0
1 2 2
2 1 1
```

3. Incorrectly handling points that are on the border of the convex hull:
```
3
1 0 0
1 2 0
1 2 2
2 1 0
2 2 1
```

4. Incorrectly handling degenerate triangles:
```
3
1 0 0
1 2 0
1 2 2
2 1 0
2 2 0
```
CODEFORCES 730_K. Roads Orientation Problem
```
# 730_K. Roads Orientation Problem

def dfs(cur, visited, inc):
    visited[cur] = True
    for next_city in graph[cur]:
        if not visited[next_city]:
            dfs(next_city, visited, inc)
    inc[cur] = 1 - inc[cur]

n, m, s, t = map(int, input().split())
graph = {i: [] for i in range(1, n + 1)}
for _ in range(m):
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

visited = [False] * (n + 1)
inc = [0] * (n + 1)
dfs(s, visited, inc)

if inc[t] == 0:
    print("Yes")
    for i in range(1, n + 1):
        for j in graph[i]:
            if inc[i] == 0:
                print(i, j)
            else:
                print(j, i)
else:
    print("No")
```
CODEFORCES 755_A. PolandBall and Hypothesis
```
1
```
```
2
```
```
3
```
```
4
```
```
5
```
```
6
```
```
7
```
```
8
```
```
9
```
```
10
```
CODEFORCES 776_B. Sherlock and his girlfriend
```
# 1. Using the wrong data type for `n`.
n = 100001 # This will cause an overflow error.

# 2. Using the wrong algorithm.
def color_jewelry(n):
  # This algorithm will not find the optimal solution.
  colors = [1] * n
  for i in range(2, n + 1):
    for j in range(i + 1, n + 1):
      if j % i == 0:
        colors[j - 1] = colors[i - 1]
  return colors

# 3. Not handling special cases correctly.
def color_jewelry(n):
  # This algorithm does not handle the case where n is 1 correctly.
  if n == 1:
    return [1]
  else:
    return color_jewelry(n - 1) + [1]

# 4. Making a mistake in your code.
def color_jewelry(n):
  # This code has a bug.
  colors = [1] * n
  for i in range(2, n + 1):
    for j in range(i + 1, n + 1):
      if j % i == 0:
        colors[j - 1] = colors[i - 1]
  return colors
```
CODEFORCES 7_C. Line
```
# 7_C. Line

a, b, c = map(int, input().split())

if a == 0:
    if b == 0:
        print(-1)
    else:
        print(0, -c // b)
elif b == 0:
    print(-c // a, 0)
else:
    x = -c // (a * b)
    y = -(a * x + c) // b
    print(x, y)
```

**Incorrect input format:**

```
a b c
```

**Division by zero:**

```
0 0 1
```

**Floating-point errors:**

```
1e-10 1e-10 1
```

**Off-by-one errors:**

```
1 2 3
```

**Infinite loops:**

```
0 0 0
```

**Memory errors:**

```
1000000000000000000 1000000000000000000 1000000000000000000
```
CODEFORCES 820_E. Mister B and Beacons on Field
```
1
1 1 1
5 5 5
1000 1 1000
```
CODEFORCES 846_F. Random Query
```
1
1
```

```
2
1 1
```

```
2
2 2
```

```
3
1 2 3
```

```
4
1 2 3 4
```

```
5
1 2 3 4 5
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
100
1 2 3 4 5 6 7 8 9 10 ... 99 100
```

```
1000000
1 2 3 4 5 6 7 8 9 10 ... 999999 1000000
```
CODEFORCES 868_B. Race Against Time
```
12 30 45 3 11
12 0 1 12 1
3 47 0 4 9
```
CODEFORCES 893_E. Counting Arrays
```
# Problem: https://codeforces.com/contest/893/problem/E

# Inputs:

2
6 3
4 2

# Expected outputs:

36
6
```
CODEFORCES 915_B. Browser
```
10 5 1 5
```
```
6 3 2 4
```
```
6 3 1 3
```
```
5 2 1 5
```
```
5 1 2 5
```
```
10 3 1 9
```
CODEFORCES 938_C. Constructing Tests
```
1
1
```
CODEFORCES 963_C. Cutting Rectangle
```
1
1 1 9


2
2 3 20
2 4 40


2
1 2 5
2 3 5
```
CODEFORCES 990_F. Flow Control
```
1
-1
0
```
```
1
-1
1
1 2
```
```
4
3 -10 6 1
5
1 2
3 2
2 4
3 4
3 1
```
```
4
3 -10 6 4
5
1 2
3 2
2 4
3 4
3 1
5 4
```
```
5
0 -10 6 1 2
6
1 2
2 3
3 4
4 5
5 1
```
HACKEREARTH aprileasy-easy-non-linear-recurrences
```
1 2 3 4 5 6
2
2 
3
```
HACKEREARTH chandu-and-his-interns
1
2
3
6
10
100
1000
10000
100000
1000000
10000000
100000000
1000000000
HACKEREARTH distance
```
1 1
1 1
```

```
10 10
10 10
```

```
1 1
2 2
```

```
10 10
1 1
```

```
1 1
10 10
```
HACKEREARTH good-morning-1
1
1 3
2
3 10
4 25
HACKEREARTH listing-names-2
1
a

HACKEREARTH monks-encounter-with-polynomial
```
1
3 4 5 6
```
```
3
3 4 5 5
```
```
3
3 4 5 150
```
HACKEREARTH possible-sums-5
1. ```
1
3
1 2 3
```
2. ```
1
0
```
3. ```
1
100
```
4. ```
2
1
1
5
5 1 3 2 7
```
5. ```
3
2
1 1
3
1 2 3
4
1 2 4 8
```
6. ```
4
5
1 2 3 4
5
5 1 3 2 7
6
1 2 3 4 5 6
7
7
1 2 3 4 5 6 7
```
HACKEREARTH sabotage-1
```
5 6
1 2
2 3
3 4
4 5
5 1
2 4
```
```
3 3
2 1
1 2
2 1
```
```
2 1
1 2
```
```
5 5
1 2
2 3
3 4
4 5
5 2
```
```
5 10
1 2
2 3
3 4
4 5
5 1
1 2
2 3
3 4
4 5
```
```
10 15
1 2
2 3
3 4
4 5
5 1
1 6
6 7
7 8
8 9
9 10
10 1
1 7
7 2
2 9
```
```
1000 1000
1 2
2 3
3 4
4 5
5 1
1 2
2 3
3 4
4 5
```
```
1000 1000
1 2
2 3
3 4
4 5
5 1
1 2
2 3
3 4
4 5
```
HACKEREARTH sum-of-medians-1
```
2
5
10
```
HACKEREARTH walter-jesse-and-hcf
1
2 3 1

ATCODER p02614 AtCoder Beginner Contest 173 - H and V
```
2 3 2
..#
###

2 3 4
..#
```
ATCODER p02745 Panasonic Programming Contest 2020 - Three Substrings
```
a?c
der
cod

atcoder
atcoder
???????
```
ATCODER p02880 AtCoder Beginner Contest 144 - 81
10
50
81
0
ATCODER p03014 AtCoder Beginner Contest 129 - Lamp
```
4 6
#..#..
.....#
....#.
#.#...

4 6
..#..
.....#
....#.
.#...

8 8
..#...#.
....#...
......
..###..#
...#..#.
....#.
...#...
.#..#
```
ATCODER p03155 AISing Programming Contest 2019 - Bulletin Board
```
3
2
3

100
1
1

5
4
2
```
ATCODER p03298 AtCoder Grand Contest 026 - String Coloring

ATCODER p03456 AtCoder Beginner Contest 086 - 1 21
1, 21
100, 100
12, 10
ATCODER p03617 AtCoder Grand Contest 019 - Ice Tea Store
```
# Q H S D
# N
20 30 70 90
3

10000 1000 100 10
1

10 100 1000 10000
1

12345678 87654321 12345678 87654321
123456789
```
ATCODER p03775 AtCoder Beginner Contest 057 - Digits in Multiplication
1. ```
10000
```
2. ```
1000003
```
3. ```
9876543210
```
4. ```
10000000000
```
ATCODER p03944 AtCoder Beginner Contest 047 - Snuke's Coloring 2 (ABC Edit)
**Incorrect input format**

```
5 4 2
2 1 1
3 3 4
```

**Incorrect data type**

```
W H N
5.0 4.0 2
2 1 1
3 3 4
```

**Out-of-bounds access**

```
W H N
10 10 5
1 6 1
4 1 3
6 9 4
9 4 2
3 1 3
```

**Arithmetic overflow**

```
W H N
1000000000 1000000000 1
1 1 1
```

**Memory leak**

```
W H N
100 100 100
1 1 1
2 2 2
...
100 100 100
```
AIZU p00036 A Figure on Surface
00000000
00000000
01100000
00110000
00000000
00000000
00000000
00000000

00011110
00000000
00000000
00000000
00000000
00000000
00000000
00000000

00000000
00000000
00110000
00110000
00000000
00000000
00000000
00000000
AIZU p00168 Kannondou
1
10
20
25
0
AIZU p00324 Bilateral Trade
1. **Incorrect input format.**
```
1
10
```
2. **Incorrect output format.**
```
1
```
3. **Incorrect algorithm.**
```
5
18
102
-155
53
32
```
4. **Incorrect data.**
```
4
1
1
-1
-1
```
5. **Incorrect implementation.**
```
5
18
102
-155
53
32
```
AIZU p00496 Night Market
5 20 14
8 9
2 4
7 13
6 3
5 8
AIZU p00681 Wall Breaker KND
```
1 1
0 0
1 0
0 0
0 0
1

3 3
1 1
1 1 1
1 1
1 1 1
1 1
1 1 1
1 1 1
1 1
1 1
1 1
1 1
1 1
1

4 5
0 0 1 0 0
1 0 0 0 1
1 0 1 0 1
1 0 1 0 1
1 1 1 0 0
0 0 0 1 1
4 4
0 1
2 2
0 0
1 0
4 4
0 1
2
0 0
```
AIZU p00823 Molecular Formula
1. INVALID_MOLECULAR_FORMULA

H 1
He 4
C 12
O 16
F 19
Ne 20
Cu 64
Cc 333
END_OF_FIRST_PART
H2C
(MgF)2As
Cu(OH)2
H((CO)2F)99
0

2. MULTIPLE_COPIES_OF_SAME_ATOMIC_SYMBOL

H 1
He 4
C 12
O 16
F 19
Ne 20
Cu 64
Cc 333
END_OF_FIRST_PART
H2C
(MgF)2As
Cu(OH)2
H((CO)2F)99
0

3. ATOMIC_SYMBOL_THAT_DOES_NOT_APPEAR_IN_THE_ATOMIC_TABLE

H 1
He 4
C 12
O 16
F 19
Ne 20
Cu 64
Cc 333
END_OF_FIRST_PART
H2C
(MgF)2As
Cu(OH)2
H((CO)2F)99
0

4. MOLECULAR_WEIGHT_THAT_IS_GREATER_THAN_1000

H 1
He 4
C 12
O 16
F 19
Ne 20
Cu 64
Cc 333
END_OF_FIRST_PART
H2C
(MgF)2As
Cu(OH)2
H((CO)2F)99
0

5. MOLECULAR_WEIGHT_THAT_IS_NEGATIVE

H 1
He 4
C 12
O 16
F 19
Ne 20
Cu 64
Cc 333
END_OF_FIRST_PART
H2C
(MgF)2As
Cu(OH)2
H((CO)2F)99
0

6. MOLECULAR_WEIGHT_THAT_IS_NOT_AN_INTEGER

H 1
He 4
C 12
O 16
F 19
Ne 20
Cu 64
Cc 333
END_OF_FIRST_PART
H2C
(MgF)2As
Cu(OH)2
H((CO)2F)99
0
AIZU p00954 Skinny Polygon
```
1
1 1

2
1 1
2 2

3
1 1
2 2
3 3

4
1 1
2 2
3 3
4 4

5
0 0
1 1
2 2
3 3
4 4
```
AIZU p01087 ICPC Calculator
```
1
9
4
+
.1
.2
.3
9
+
.0
.+
..*
...1
...*
....1
....2
..0
10
+
.+
..6
..2
.+
..1
..*
...7
...6
.3
0
```
AIZU p01223 Saizo
2
10 100
AIZU p01357 Lapin Noir
```
2
1 -1 3 -1 3 1 1 3 -1 3 -1 1
3 0 4 0 4 1 3 2 2 2 2 1
3
1 1
-1 -1
2 4
```
AIZU p01539 A Holiday of Miss Brute Force
```
0 0 0 2
0
2 2
```

```
0 0 0 2
6
0 1
1 0
1 -1
0 -1
-1 -1
-1 0
2 2
```

```
0 0 0 2
1
0 1
2 2
```

```
0 0 0 1
1
0 1
```

```
0 0 1 2
1
0 1
```

```
0 0 2 1
1
0 1
```

```
0 0 -1 1
1
0 1
```

```
0 0 1 -1
1
0 1
```

```
0 0 2 -2
1
0 1
```

```
0 0 -2 -2
1
0 1
```

```
0 0 0 -2
1
0 1
```

```
0 0 -1 0
1
0 1
```

```
0 0 1 0
1
0 1
```

```
0 0 0 0
1
0 1
```

```
0 0 -1 -1
1
0 1
```

```
0 0 1 1
1
0 1
```
AIZU p01695 JAG-channel
6
hoge
.fuga
..foobar
..jagjag
...zigzag
.piyo
8
jagjag
.hogehoge
..fugafuga
...ponyoponyo
....evaeva
....pokemon
...nowawa
.buhihi
8
hello
.goodmorning
..howareyou
.goodafternoon
..letshavealunch
.goodevening
.goodnight
..gotobed
3
caution
.themessagelengthislessthanorequaltofifty
..sothelengthoftheentirelinecanexceedfiftycharacters
0
AIZU p01839 A-un Breathing
4
A
Un
A
Un
AIZU p01975 Mapping
```
5
1 2 3 4 5
4 5 1 2 3
```
AIZU p02121 Chinol Choco
```
2 1
0 0 5 5
3 3 6 6
2 2


2 2
0 0 6 0
7 0 3 0
4 0
5 0
```
AIZU p02261 Stable Sort
1. ```
5
H4 C9 S4 D2 C3
```
2. ```
2
S1 H1
```
3. ```
3
H9 D9 S9
```
4. ```
3
S3 H3 D3
```
5. ```
4
C1 D1 H1 S1
```
6. ```
1
S1
```
7. ```
10
S1 H1 C1 D1 S2 H2 C2 D2 S3 H3 C3 D3
```
8. ```
10
S1 H1 C1 D1 S2 H2 C2 D2 S3 H3 C3 D3
```
9. ```
20
S1 H1 C1 D1 S2 H2 C2 D2 S3 H3 C3 D3 S4 H4 C4 D4 S5 H5 C5 D5 S6 H6 C6 D6 S7 H7 C7 D7 S8 H8 C8 D8 S9 H9 C9 D9
```
10. ```
20
S1 H1 C1 D1 S2 H2 C2 D2 S3 H3 C3 D3 S4 H4 C4 D4 S5 H5 C5 D5 S6 H6 C6 D6 S7 H7 C7 D7 S8 H8 C8 D8 S9 H9 C9 D9
```
AIZU p02409 Official House
```
1
1 1 1 9
```

```
2
1 1 1 9
1 2 2 7
```

```
3
1 1 1 9
1 2 2 7
4 3 8 1
```

```
4
1 1 1 9
1 2 2 7
4 3 8 1
1 4 10 9
```

```
5
1 1 1 9
1 2 2 7
4 3 8 1
1 4 10 9
1 1 1 10
```

```
6
1 1 1 9
1 2 2 7
4 3 8 1
1 4 10 9
1 1 1 10
-1 1 1 2
```

```
7
1 1 1 9
1 2 2 7
4 3 8 1
1 4 10 9
1 1 1 10
-1 1 1 2
9 9 9 9
```