CODECHEF cb03
5
a
abc
palindrome
abba
aabcbaa
CODECHEF crypt05
1
5
10
15
20
99
0
CODECHEF guess
1
1 2
2 3
3
1 1
1 2
2 3
CODECHEF mes
1
shubham
shubham
CODECHEF reciicha
```
2
1 2
2 1
```
CODECHEF traveler
```
1
A
1
A
1
1
A
```
CODEFORCES 1016_C. Vasya And The Mushrooms
**1. Incorrect input format**

```
3
1 2 3
6 5 4
```

**2. Incorrect output format**

```
123456
```

**3. Undefined behavior**

```
3
1 2 3
4 5 6
```

**4. Time complexity**

```
3
1 2 3
4 5 6
```

**5. Memory usage**

```
3
1 2 3
4 5 6
```

**6. Incorrect algorithm**

```
3
1 2 3
4 5 6
```

**7. Incorrect implementation**

```
3
1 2 3
4 5 6
```
CODEFORCES 103_C. Russian Roulette
1. ```
n, k, p = map(int, input().split())
q = []
for i in range(p):
    q.append(int(input()))

slots = ['.'] * n

idx = 0
for i in range(n):
    if i >= k:
        slots[i] = '.'
    else:
        slots[i] = 'X'

for i in range(p):
    print(slots[q[i]])
```

2. ```
n, k, p = map(int, input().split())
q = []
for i in range(p):
    q.append(int(input()))

slots = ['.'] * n

idx = 0
for i in range(k):
    slots[idx] = 'X'
    idx += 1

for i in range(p):
    print(slots[q[i]])
```

3. ```
n, k, p = map(int, input().split())
q = []
for i in range(p):
    q.append(int(input()))

slots = ['.'] * n

idx = 0
for i in range(k):
    slots[idx] = 'X'
    idx += 1

slots.sort(reverse=True)

for i in range(p):
    print(slots[q[i]])
```

4. ```
n, k, p = map(int, input().split())
q = []
for i in range(p):
    q.append(int(input()))

slots = ['.'] * n

idx = 0
for i in range(k):
    slots[idx] = 'X'
    idx += 1

slots.sort(reverse=True)

for i in range(p):
    print(slots[q[i]])
```

5. ```
n, k, p = map(int, input().split())
q = []
for i in range(p):
    q.append(int(input()))

slots = ['.'] * n

idx = 0
for i in range(k):
    slots[idx] = 'X'
    idx += 1

slots.sort(reverse=True)

for i in range(p):
    print(slots[q[i]])
```
CODEFORCES 1062_D. Fun with Integers
```
2
4
100000
```
CODEFORCES 1084_C. The Fair Nut and String
```
abbaa
```
```
baaaa
```
```
agaa
```
CODEFORCES 1103_E. Radix sum
```
2
5 6
```
```
4
5 7 5 7
```
```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1131_E. String Multiplication
```
2
a
b
```
```
3
ab
c
ab
```
```
4
a
b
a
b
```
```
5
a
a
a
a
a
```
CODEFORCES 1152_A. Neko Finds Grapes
```
# 1. Incorrect variable type
n, m = [int(i) for i in input().split()]
chests = [int(i) for i in input().split()]
keys = [int(i) for i in input().split()]

# 2. Incorrect variable name
n, m = [int(i) for i in input().split()]
chests = [int(i) for i in input().split()]
keys = [int(i) for i in input().split()]

# 3. Incorrect logic
n, m = [int(i) for i in input().split()]
chests = [int(i) for i in input().split()]
keys = [int(i) for i in input().split()]

# 4. Off-by-one error
n, m = [int(i) for i in input().split()]
chests = [int(i) for i in input().split()]
keys = [int(i) for i in input().split()]

# 5. Infinite loop
n, m = [int(i) for i in input().split()]
chests = [int(i) for i in input().split()]
keys = [int(i) for i in input().split()]

# 6. Memory leak
n, m = [int(i) for i in input().split()]
chests = [int(i) for i in input().split()]
keys = [int(i) for i in input().split()]
```
CODEFORCES 1173_E2. Nauuo and Pictures (hard version)
**Incorrect modular arithmetic**

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
w = list(map(int, input().split()))

ans = []
for i in range(n):
    if a[i] == 1:
        ans.append(w[i] + m)
    else:
        ans.append(w[i] - m)

for i in ans:
    print(i % 998244353)
```

**Using the wrong modulus**

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
w = list(map(int, input().split()))

ans = []
for i in range(n):
    if a[i] == 1:
        ans.append(w[i] + m)
    else:
        ans.append(w[i] - m)

for i in ans:
    print(i % 10)
```

**Using incorrect algorithms**

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
w = list(map(int, input().split()))

ans = []
for i in range(n):
    if a[i] == 1:
        ans.append(w[i] + m)
    else:
        ans.append(w[i] - m)

for i in ans:
    print(i // 998244353)
```

**Not testing your code**

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
w = list(map(int, input().split()))

ans = []
for i in range(n):
    if a[i] == 1:
        ans.append(w[i] + m)
    else:
        ans.append(w[i] - m)

for i in ans:
    print(i)
```

**Using a calculator**

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
w = list(map(int, input().split()))

ans = []
for i in range(n):
    if a[i] == 1:
        ans.append(w[i] + m)
    else:
        ans.append(w[i] - m)

for i in ans:
    print(int(i))
```
CODEFORCES 1191_C. Tokitsukaze and Discard Items
**Incorrect input format:**
```
10 4 5
3 5 7 10 a
```

**Incorrect data type:**
```
10 4 5
3 5 7 10.0
```

**Incorrect logic:**
```
10 4 5
3 5 7 10
```

**Off-by-one errors:**
```
10 4 5
3 5 7 10
```

**Memory leaks:**
```
10 4 5
3 5 7 10
```

**Race conditions:**
```
10 4 5
3 5 7 10
```

**Deadlocks:**
```
10 4 5
3 5 7 10
```

**Security vulnerabilities:**
```
10 4 5
3 5 7 10
```
CODEFORCES 120_C. Winnie-the-Pooh and honey
```
10 3
2 3 4 5 6 7 8 9 10

```
CODEFORCES 1230_A. Dawid and Bags of Candies
```
1 7 11 5
7 3 2 5
```
CODEFORCES 1251_E1. Voting (Easy Version)
```
1
3
1 5
2 10
2 8
```

```
2
7
0 1
3 1
1 1
6 1
1 1
4 1
4 1
```

```
3
6
2 6
2 3
2 8
2 7
4 4
5 5
```
CODEFORCES 1271_C. Shawarma Tent
**Incorrect input format**
```
1 0 0
```

**Incorrect output format**
```
1
1 1
```

**Incorrect algorithm**
```
n, s_x, s_y = map(int, input().split())
houses = []
for _ in range(n):
    x, y = map(int, input().split())
    houses.append((x, y))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        if houses[i][0] == houses[j][0] or houses[i][1] == houses[j][1]:
            continue
        ans = max(ans, abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1]))

print(ans)
```

**Incorrect data structures**
```
n, s_x, s_y = map(int, input().split())
houses = []
for _ in range(n):
    x, y = map(int, input().split())
    houses.append((x, y))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        if houses[i][0] == houses[j][0] or houses[i][1] == houses[j][1]:
            continue
        distance = abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1])
        if distance > ans:
            ans = distance

print(ans)
```

**Incorrect implementation**
```
n, s_x, s_y = map(int, input().split())
houses = []
for _ in range(n):
    x, y = map(int, input().split())
    houses.append((x, y))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        if houses[i][0] == houses[j][0] or houses[i][1] == houses[j][1]:
            continue
        distance = abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1])
        if distance > ans:
            ans = distance
            best_i = i
            best_j = j

print(ans)
print(houses[best_i][0], houses[best_i][1])
```

**Runtime errors**
```
n, s_x, s_y = map(int, input().split())
houses = []
for _ in range(n):
    x, y = map(int, input().split())
    houses.append((x, y))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        if houses[i][0] == houses[j][0] or houses[i][1] == houses[j][1]:
            continue
        distance = abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1])
        if distance > ans:
            ans = distance
            p_x = houses[i][0]
            p_y = houses[i][1]

print(ans)
print(p_x, p_y)
```

**Memory errors**
```
n, s_x, s_y = map(int, input().split())
houses = []
for _ in range(n):
    x, y = map(int, input().split())
    houses.append((x, y))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        if houses[i][0] == houses[j][0] or houses[i][1] == houses[j][1]:
            continue
        distance = abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1])
        if distance > ans:
            ans = distance
CODEFORCES 1294_D. MEX maximizing
```
10 3
0
1
2
2
0
0
10
7
4
5
```
CODEFORCES 1315_D. Recommendations
```
5
3 7 9 7 8
5 2 5 7 5
```
CODEFORCES 1336_F. Journey
```
8 4 1
1 7
1 2
2 5
4 6
6 3
6 2
6 8
7 8
3 8
2 6
4 1
```
CODEFORCES 1359_D. Yet Another Yet Another Task
1. Incorrect input format:
```
5
5 -2 10 -1 4 5
```
2. Incorrect output format:
```
5.0
```
3. Incorrect calculation of the maximum score:
```
5
5 -2 10 -1 4
4
```
4. Incorrect choice of the segment:
```
5
5 -2 10 -1 4
3
```
5. Incorrect removal of the card by Bob:
```
5
5 -2 10 -1 4
1
```
6. Incorrect calculation of the final score:
```
5
5 -2 10 -1 4
5
```
CODEFORCES 1379_F1. Chess Strikes Back (easy version)
```
1 3 3
1 1
1 5
2 4
```
```
3 2 7
4 2
6 4
1 3
2 2
2 4
4 4
3 1
```
CODEFORCES 139_D. Digits Permutations
198
500
CODEFORCES 1423_H. Virus
```
5 12 1
1 1 2
1 1 3
1 3 4
2 4
2 5
3
2 1
1 1 2
1 3 2
2 1
3
2 1
```
CODEFORCES 1443_A. Kids Seating
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
CODEFORCES 1468_J. Road Reform
```
1
4 5 7
4 1 3
1 2 5
2 3 8
2 4 1
3 4 4
```
CODEFORCES 1493_C. K-beautiful Strings
```
1
3 2
abd
```

```
1
3 1
abc
```

```
1
4 3
aaaa
```

```
1
9 3
abaabaaaa
```
CODEFORCES 1515_I. Phoenix and Diamonds
```
3 5
2 3 4
1 5 1
0 2 4
3 6
1 3 3
3 10
2 2 3
3 30
```
CODEFORCES 1543_B. Customising the Track
```
3
3
1 2 3
4
0 1 1 0
10
8 3 6 11 5 2 1 7 10 4
```
CODEFORCES 171_C. A Piece of Cake
```
1 2 3 4
```
CODEFORCES 191_A. Dynasty Puzzles
```
3
abc
ca
cba
```
CODEFORCES 215_A. Bicycle Chain
```
# 1
2
4 5
3
12 13 15

# 2
4
1 2 3 4
5
10 11 12 13 14

# 3
3
1 3 5
3
2 4 6

# 4
2
2 3
3
1 4 5

# 5
2
1 2
3
1 2 3

# 6
3
2 3 4
3
1 2 3
```
CODEFORCES 239_A. Two Bags of Potatoes
1. ```
1 1 1
```
2. ```
1 1 10
```
3. ```
10 6 40
```
4. ```
10 6 41
```
5. ```
1000000000 1000000000 1000000000
```
CODEFORCES 263_D. Cycle in Graph
```
3 3 2
1 2
2 3
3 1

4 6 3
4 3
1 2
1 3
1 4
2 3
2 4
```
CODEFORCES 287_D. Shifting
```
2

3

4

5

6

7

8

9

10
```
CODEFORCES 312_D. Cats Transport
```
2 1 1
1
2 0
```
```
3 1 1
1
1 0
```
```
5 3 2
1 3 5
1 0
2 1
```
```
4 6 2
1 3 5
1 0
2 1
4 9
1 10
2 10
3 12
```
```
8 5 4
1 3 5
1 0
3 7 1
4 7 1
5 7 1
6 7 1
7 7 1
```
```
10 10 5
1 5 1
2 4 2
3 3 3
4 2 4
5 1 5
6 0 6
7 1 7
8 2 8
9 3 9
10 4 10
```
CODEFORCES 335_B. Palindrome
```
1. Incorrect input format

```
input

abc

output

```

```

2. Incorrect output format

```
input

abba

output

```
ba

```

3. Incorrect algorithm

```
input

abba

output

```
a

```

4. Runtime error

```
input

aaaaaaaaaa

output

```

```

5. Memory error

```
input

aaaaaaaaaa

output

```

```

6. Incorrect data type

```
input

aaaaaaaaaa

output

```

```

7. Off-by-one error

```
input

abba

output

```
ab

```

8. Other bugs

```
input

aaaaaaaaaa

output

```

```
CODEFORCES 358_B. Dima and Text Messages
```
3
i
love
you
<3i<3love<23you<3

3
i
am
not
<3i&lt;&gt;3am&lt;3the&lt;3&lt;main&lt;3in&lt;3the&lt;3&gt;&lt;3family&lt;3

3
i
love
you
<3i<3love<3you<3

3
i
love
you
<3i<3love<3you<3

3
i
love
you
<3i<3love<3you<3

3
i
love
you
<3i<3love<3you<3

3
i
love
you
<3i<3love<3you<3

3
i
love
you
<3i<3love<3you<3

3
i
love
you
<3i<3love<3you<3

3
i
love
you
<3i<3love<3you<3
```
CODEFORCES 381_A. Sereja and Dima
1. Incorrect input format:
```
1
a
```

2. Incorrect output format:
```
1 2 3
```

3. Off-by-one errors:
```
4
1 2 3 4
```

4. Indexing errors:
```
4
1 2 3 4
```

5. Logic errors:
```
4
1 2 3 4
```

6. Memory leaks:
```
4
1 2 3 4
```

7. Race conditions:
```
4
1 2 3 4
```

8. Deadlocks:
```
4
1 2 3 4
```

9. Security vulnerabilities:
```
4
1 2 3 4
```
CODEFORCES 401_E. Olympic Games
```
1 1
1 2 100
```
```
1 2
1 5 100
```
```
1 3
1 5 100
2 10 200
```
CODEFORCES 42_A. Guilty — to the kitchen!
1. ```
1 100
1
40
```
2. ```
2 100
1 1
25 30
```
3. ```
2 100
1 1
60 60
```
4. ```
2 100
10 10
20 30
```
5. ```
2 100
10 10
20 30
```
6. ```
2 100
10 10
20 30
```
7. ```
2 100
10 10
20 30
```
8. ```
2 100
10 10
20 30
```
9. ```
2 100
10 10
20 30
```
10. ```
2 100
10 10
20 30
```
CODEFORCES 451_D. Count Good Substrings
**Incorrect input:**
```
a
```

**Incorrect output:**
```
0 0
```

**Incorrect code:**
```
s = input()
count_even = 0
count_odd = 0
for i in range(len(s)):
    for j in range(i + 1, len(s) + 1):
        if s[i:j] == s[j - 1:i - 1:-1]:
            if j % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
print(count_even, count_odd)
```

**Correct input:**
```
bb
```

**Correct output:**
```
1 2
```

**Correct code:**
```
s = input()
count_even = 0
count_odd = 0
for i in range(len(s)):
    if s[i] == s[i - 1]:
        count_even += 1
    else:
        count_odd += 1
print(count_even, count_odd)
```
CODEFORCES 474_C. Captain Marmot
**Incorrect input format:**
```
4
1 1 0 0
-1 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-2 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-1 1 0 0
-1 1 0 0
-1 1 0 0
```

**Off-by-one errors:**
```
4
1 1 0 0
-1 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-1 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-1 1 0 0
-1 1 0 0
-1 1 -2 0
```

**Incorrect logic:**
```
4
1 1 0 0
-1 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-2 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-1 1 0 0
-1 1 0 0
-1 1 0 0
```

**Memory errors:**
```
4
1 1 0 0
-1 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-2 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-1 1 0 0
-1 1 0 0
-1 1 0 0
```

**Timeout errors:**
```
4
1 1 0 0
-1 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-2 1 0 0
-1 1 0 0
1 -1 0 0
1 1 0 0
-1 1 0 0
-1 1 0 0
-1 1 0 0
```
CODEFORCES 498_B. Name That Tune
```
2 2
50 2
10 1
```
CODEFORCES 521_C. Pluses everywhere
```
3 1
108
3 2
108
```
CODEFORCES 548_E. Mike and Foam
```
5 6
1 2 3 4 6
1
2
3
4
5
1
```
CODEFORCES 575_B. Bribes
```
5
1 2 0
2 3 0
5 1 1
3 4 1
5
5 4 5 2 2
```
CODEFORCES 596_E. Wilbur and Strings
```
1 1 2
0
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
0000000000000
2413423432432
```
CODEFORCES 618_B. Guess the Permutation
```
2
0 1
1 0
```
```
5
0 2 2 1 2
2 0 4 1 3
2 4 0 1 3
1 1 1 0 1
2 3 3 1 0
```
```
3
0 1 2
1 0 2
2 1 0
```
```
1
0
```
```
2
0 1
1 0
```
CODEFORCES 638_D. Three-dimensional Turtle Super Computer 
```
# 3d_turtle_super_computer.py

"""
This program solves the 3d turtle super computer problem.

The problem is described here:
https://codeforces.com/problemset/problem/638/D

The program takes as input the dimensions of the super computer,
and the state of each CPU. It then outputs the number of critical CPUs.

A critical CPU is a CPU that controls other CPUs, but is not controlled by any other CPUs.

"""


def main():
    """
    Main function.

    """

    n, m, k = map(int, input().split())

    # Create a 3d array to store the state of each CPU.

    states = [[[0 for _ in range(k)] for _ in range(m)] for _ in range(n)]

    # Read the state of each CPU from the input.

    for i in range(n):
        for j in range(m):
            states[i][j] = [int(c) for c in input()]

    # Find all critical CPUs.

    critical_cpus = []

    for i in range(n):
        for j in range(m):
            for k in range(k):
                if states[i][j][k] == 1:
                    if not is_critical(i, j, k, states):
                        critical_cpus.append((i, j, k))

    # Print the number of critical CPUs.

    print(len(critical_cpus))


def is_critical(i, j, k, states):
    """
    Returns True if the given CPU is critical.

    """

    # Check if the CPU controls any other CPUs.

    controls = get_controlled_cpus(i, j, k, states)

    if len(controls) == 0:
        return False

    # Check if the CPU is controlled by any other CPUs.

    controlled_by = get_controlled_by_cpus(i, j, k, states)

    if len(controlled_by) > 0:
        return False

    return True


def get_controlled_cpus(i, j, k, states):
    """
    Returns a list of all the CPUs that the given CPU controls.

    """

    controlled_cpus = []

    # Check if the CPU controls the CPU to the right.

    if i < n - 1 and states[i + 1][j][k] == 1:
        controlled_cpus.append((i + 1, j, k))

    # Check if the CPU controls the CPU below.

    if j < m - 1 and states[i][j + 1][k] == 1:
        controlled_cpus.append((i, j + 1, k))

    # Check if the CPU controls the CPU in front.

    if k < k - 1 and states[i][j][k + 1] == 1:
        controlled_cpus.append((i, j, k + 1))

    return controlled_cpus


def get_controlled_by_cpus(i, j, k, states):
    """
    Returns a list of all the CPUs that control the given CPU.

    """

    controlled_by_cpus = []

    # Check if the CPU is controlled by the CPU to the left.

    if i > 0 and states[i - 1][j][k] == 1:
        controlled_by_cpus.append((i - 1, j, k))

    # Check if the CPU is controlled by the CPU above.

    if j > 0 and states[i][j - 1][k] == 1:
        controlled_by_cpus.append((i, j - 1, k))

    # Check if the CPU is controlled by the CPU behind.

    if k > 0 and states[i][j][k - 1] == 1:
        controlled_by_cpus.append((i
CODEFORCES 666_B. World Tour
```
8 9
1 2
2 3
3 4
4 1
4 5
5 6
6 7
7 8
8 5
```
CODEFORCES 690_A1. Collective Mindsets (easy)
```
1
```

```
4
```

```
10
```

```
1000000000
```
CODEFORCES 712_D. Memory and Scores
```
1 2 2 1
```

```
1 1 1 2
```

```
2 12 3 1
```
CODEFORCES 733_C. Epidemic in Monstropolis
**Incorrect input format:**

```
1
1
1
1
```

**Incorrect output format:**

```
1 2
```

**Incorrect logic:**

```
n = int(input())
a = list(map(int, input().split()))
k = int(input())
b = list(map(int, input().split()))
i = 0
while i < n - k:
    if a[i] < b[i]:
        print('NO')
        break
    i += 1
else:
    print('YES')
    for i in range(n - k):
        if i == 0 and a[i] > a[i + 1]:
            print(i + 1, 'L')
        else:
            print(i + 1, 'R')
```

**Memory errors:**

```
n = int(input())
a = list(map(int, input().split()))
k = int(input())
b = list(map(int, input().split()))
i = 0
while i < n - k:
    if a[i] < b[i]:
        print('NO')
        break
    i += 1
else:
    print('YES')
    for i in range(n - k):
        if i == 0 and a[i] > a[i + 1]:
            print(i + 1, 'L')
        else:
            print(i + 1, 'R')
```

**Time errors:**

```
n = int(input())
a = list(map(int, input().split()))
k = int(input())
b = list(map(int, input().split()))
i = 0
while i < n - k:
    if a[i] < b[i]:
        print('NO')
        break
    i += 1
else:
    print('YES')
    for i in range(n - k):
        if i == 0 and a[i] > a[i + 1]:
            print(i + 1, 'L')
        else:
            print(i + 1, 'R')
```

**Other bugs:**

```
n = int(input())
a = list(map(int, input().split()))
k = int(input())
b = list(map(int, input().split()))
i = 0
while i < n - k:
    if a[i] < b[i]:
        print('NO')
        break
    i += 1
else:
    print('YES')
    for i in range(n - k):
        if i == 0 and a[i] > a[i + 1]:
            print(i + 1, 'L')
        else:
            print(i + 1, 'R')
```
CODEFORCES 757_D. Felicity's Big Secret Revealed
```
4
1011
```
```
10
```
```
2
10
```
```
1
```
```
4
1111
```
```
6
```
```
10
```
```
1
```
```
20
01100001001111010100
```
```
612
```
```
100
```
```
50
```
```
30
00010000100000100000100000100000100000100000100000
```
```
11314
```
```
1000000000000000000000000000000000000000000000000000000000000000
```
```
106303593
```
CODEFORCES 779_A. Pupils Redistribution
1. ```
4
5 4 4 4
5 5 4 5
```

2. ```
6
1 1 1 1 1 1
5 5 5 5 5 5
```

3. ```
1
5
3
```

4. ```
9
3 2 5 5 2 3 3 3 2
4 1 4 1 1 2 4 4 1
```
CODEFORCES 802_I. Fake News (hard)
```
1
a
```

```
1
aa
```

```
10
abcd
```

```
14
ccc
```

```
12
abcc
```
CODEFORCES 825_E. Minimal Labels
```
3 3
1 2
1 3
3 2

3 3
1 2
2 3
3 1

3 3
2 1
1 3
3 2

4 5
3 1
4 1
2 3
3 4
2 4

5 4
3 1
2 1
2 3
4 5
```
CODEFORCES 848_C. Goodbye Souvenir
```
7 6
1 2 3 1 3 2 1
2 3 7
2 1 3
1 7 2
1 3 2
2 1 6
2 5 7
```
```
5 5
1 1 2 4 2 3
1 1 4
2 2 3
1 1 7
2 4 5
1 1 7
```
```
10 7
1 2 3 4 5 6 7 8 9
2 6 7
2 1 8
1 7 1
2 1 9
```
CODEFORCES 870_A. Search for Pretty Integers
```
2 3
4 2
5 7 6

2 3
4 2
1 7 6

8 8
1 2 3 4 5 6 7 8
8 7 6 5 4 3 2 1

1 1
1

0 0

1 0
1
```
CODEFORCES 896_E. Welcome home, Chtholly
```
10 10
1 2 3 4 5 6 7 8 9 10
1 1 10 7
2 1 10 1
1 1 10 1
2 1 10 1
2 1 10 1
```
CODEFORCES 918_A. Eleven
1. **Incorrect implementation of the Fibonacci sequence.**

```
n = int(input())

fibonacci = [0, 1]
for i in range(2, n + 1):
    fibonacci.append(fibonacci[i - 2] + fibonacci[i - 1])

print("".join(["O" if i in fibonacci else "o" for i in range(1, n + 1)]))
```

2. **Off-by-one errors.**

```
n = int(input())

fibonacci = [0, 1]
for i in range(2, n + 2):
    fibonacci.append(fibonacci[i - 2] + fibonacci[i - 1])

print("".join(["O" if i in fibonacci else "o" for i in range(1, n + 1)]))
```

3. **Incorrect use of the modulo operator.**

```
n = int(input())

fibonacci = [0, 1]
for i in range(2, n + 1):
    fibonacci.append(fibonacci[i - 2] + fibonacci[i - 1])

print("".join(["O" if i % 3 == 0 else "o" for i in range(1, n + 1)]))
```

4. **Incorrect use of the conditional operator.**

```
n = int(input())

fibonacci = [0, 1]
for i in range(2, n + 1):
    fibonacci.append(fibonacci[i - 2] + fibonacci[i - 1])

print("".join(["O" if i == fibonacci[i - 2] + fibonacci[i - 1] else "o" for i in range(1, n + 1)]))
```

5. **Incorrect use of the for loop.**

```
n = int(input())

fibonacci = [0, 1]
for i in range(2, n + 1):
    fibonacci.append(fibonacci[i - 2] + fibonacci[i - 1])

print("".join(["O" if i in range(1, n + 1) else "o" for i in fibonacci]))
```

6. **Incorrect use of the break statement.**

```
n = int(input())

fibonacci = [0, 1]
for i in range(2, n + 1):
    fibonacci.append(fibonacci[i - 2] + fibonacci[i - 1])

print("".join(["O" if i == fibonacci[i - 2] + fibonacci[i - 1] else "o" for i in range(1, n + 1)]) if i == 5 else "")
```

7. **Incorrect use of the else statement.**

```
n = int(input())

fibonacci = [0, 1]
for i in range(2, n + 1):
    fibonacci.append(fibonacci[i - 2] + fibonacci[i - 1])

print("".join(["O" if i == fibonacci[i - 2] + fibonacci[i - 1] else "o" for i in range(1, n + 1)]) if i == 5 else "o")
```
CODEFORCES 940_A. Points on the line
```
# 1. Incorrect input format

```
1 1
2 1 4

```
# 2. Incorrect output format

```
3 1
2 1 4
1

```
# 3. Incorrect algorithm

```
3 1
2 1 4
2

```
# 4. Incorrect data structures

```
3 1
2 1 4
2

```
# 5. Incorrect implementation

```
3 1
2 1 4
2

```
# 6. Runtime errors

```
3 1
2 1 4
2

```
# 7. Logic errors

```
3 1
2 1 4
2

```
# 8. User errors

```
3 1
2 1 4
2
```
CODEFORCES 967_D. Resource Distribution
```
# Problem: CODEFORCES 967_D. Resource Distribution
# Author: tzuyu

n, s1, s2 = map(int, input().split())
c = list(map(int, input().split()))

c.sort(reverse=True)

if s1+s2 > sum(c):
    print('No')
else:
    print('Yes')

    k1 = int(s1/sum(c))
    k2 = int(s2/sum(c))
    print(k1, k2)

    print(*c[:k1])
    print(*c[k1:k1+k2])
```
CODEFORCES 993_D. Compute Power
```
6
8 10 9 9 8 10
1 1 1 1 1 1
```
```
6
8 10 9 9 8 10
1 10 5 5 1 10
```
```
6
8 10 9 9 8 10
1 10 10 10 10 10
```
HACKEREARTH attack-or-be-attacked
```
1 1 1 1
2 2 1 2
3 3 1 2
4 4 1 2
5 5 1 2
6 6 1 2
7 7 1 2
8 8 1 2
9 9 1 2
10 10 1 2
1 2 1 2
3 4 1 2
5 6 1 2
7 8 1 2
9 10 1 2
```
HACKEREARTH chintu-and-his-girlfriend
3 2
abcde
aabaa
asdba
HACKEREARTH dummy-3-1
1
3
1 2 3
HACKEREARTH guess-the-permutation-easy-contest
```
# ELEMENT
1 1
# ELEMENT
2 4
# ELEMENT
3 5
# ELEMENT
4 6
# ELEMENT
5 7
# ELEMENT
6 1
# ELEMENT
7 8
# ELEMENT
8 9
# ELEMENT
9 10
# ELEMENT
10 11
# ELEMENT
11 13
# ELEMENT
12 15
# ELEMENT
13 16
# ELEMENT
14 12
# ELEMENT
15 2
# ELEMENT
16 14
# PERMUTATION
```
HACKEREARTH little-stuart-and-evil-hackers-2
```
1
1 2
```
HACKEREARTH mystery-12
1
5 6
7
HACKEREARTH primestring
1
a
2
ab
abc
3
ababb
abcab
aabbccdd
HACKEREARTH saxie-and-strings
1
4

HACKEREARTH tablets
1. ```
10
1
2
3
4
5
6
7
8
9
10
```
2. ```
3
10
10
10
```
3. ```
4
1
1
1
1
```
4. ```
3
1
1
1
```
5. ```
6
5
5
5
5
5
```
HACKEREARTH who-will-survive-in-the-end
4
5
11
45
23987443
ATCODER p02630 AtCoder Beginner Contest 171 - Replacing
```
# 4
# 1 2 3 4
# 3
# 1 2
# 3 4
# 2 4

# 4
# 1 1 1 1
# 3
# 1 2
# 2 1
# 3 5

# 2
# 1 2
# 3
# 1 100
# 2 100
# 100 1000
```
ATCODER p02761 AtCoder Beginner Contest 157 - Guess The Number
```
3 3
1 7
3 2
1 7
```
```
3 2
2 1
2 3
```
```
3 1
1 0
```
ATCODER p02896 AtCoder Grand Contest 039 - Min Product Sum
**1. Incorrect calculation of the minimum value**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

print(sum(min_values) % D)
```

**2. Incorrect use of modulo arithmetic**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

print((sum(min_values) % D) + 1)
```

**3. Off-by-one errors**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

print(sum(min_values) + 1)
```

**4. Incorrect use of pointers**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

print(sum(min_values))
```

**5. Incorrect use of arrays**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

print(sum(min_values[1:]))
```

**6. Incorrect use of functions**

```
N, M, K, D = map(int, input().split())

def min_value(array):
  return min(array)

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

print(min_value(min_values))
```

**7. Incorrect use of variables**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

a = sum(min_values)
print(a)
```

**8. Incorrect use of control flow statements**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

if sum(min_values) == 0:
  print(0)
else:
  print(1)
```

**9. Incorrect use of exceptions**

```
N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

try:
  print(sum(min_values))
except Exception as e:
  print(e)
```

**10. Incorrect use of comments**

```
# This is a comment

N, M, K, D = map(int, input().split())

min_values = []
for i in range(N):
  min_values.append(min(list(map(int, input().split()))))

print(sum(min_values))
```
ATCODER p03031 AtCoder Beginner Contest 128 - Switches
```
2 2
2 1 2
1 2
0 1

2 3
2 1 2
1 1
1 2
0 0 1

5 2
3 1 2 5
2 2 3
1 0
```
ATCODER p03172 Educational DP Contest - Candies
```
3 4
1 2 3
```
```
1 10
9
```
```
2 0
0 0
```
```
4 100000
100000 100000 100000 100000
```
ATCODER p03318 AtCoder Beginner Contest 101 - Snuke Numbers
1
10
100
1000
10000
100000
1000000
10000000
100000000
1000000000
ATCODER p03474 AtCoder Beginner Contest 084 - Postal Code
3 4
269-6650

1 1
-

1 2
7444
ATCODER p03637 AtCoder Beginner Contest 069 - 4-adjacent
3
1 10 100
3
1 2 3
3
1 4 1
2
1 1
6
2 7 1 8 2 8
ATCODER p03794 Mujin Programming Challenge 2017 - Oriented Tree
```
4
1 2
1 3
1 4
```
```
4
1 2
2 3
3 4
```
```
6
1 2
1 3
1 4
2 5
2 6
```
```
10
2 4
2 5
8 3
10 7
1 6
2 8
9 5
8 6
10 6
```
ATCODER p03963 AtCoder Beginner Contest 046 - Painting Balls with AtCoDeer
1
2
2
1
1000
1
AIZU p00054 Sum of Nth decimal places
```
1 2 3
2 3 4
5 4 3
4 3 2
```
AIZU p00184 Tsuruga Castle
2
1
4
6
8
10
12
14
16
18
20
22
24
26
28
30
32
34
36
38
40
42
44
46
48
50
52
54
56
58
60
62
64
66
68
70
72
74
76
78
80
82
84
86
88
90
92
94
96
98
100
102
104
106
108
110
112
114
116
118
120
0
AIZU p00340 Rectangle
1 2 3 4
1 1 3 4
1 1 2 2
2 1 1 2
4 4 4 10
1 2 4 5
1 3 1 3
2 2 2 2
5 2 3 3
1 1 1 1
AIZU p00534 Silk Road
```
3 5
10
25
15
50
30
15
40
30
```
AIZU p00698 Missing Numbers
```
3 3
? ? 70 105
? 50 ? 150
30 60 90 180
45 150 240 435

2 2
? ? 40
? ? 40
40 40 80

2 3
? 30 40 90
50 60 70 180
70 90 110 270

0
```
AIZU p00839 Organize Your Train
3 5
0W 1W
0W 2W
0W 2E
0E 1E
1E 2E
aabbccdee
-
-
-
-
bbaadeecc
4 6
0E 1W
0E 2W
1E 2W
2E 0W
0W 2E
ababab
-
-
aaabbb
-
-
0 0
AIZU p00971 Shortest Common Non-Subsequence
```
0101
1100001

101010101
010101010

11111111
00000000
```
AIZU p01103 A Garden with Ponds
3 3
2 3 2
2 1 2
2 3 1
3 5
3 3 4 3 3
3 1 0 2 3
3 3 4 3 2
7 7
1 1 1 1 1 0 0
1 0 0 0 1 0 0
1 0 1 1 1 1 1
1 0 1 0 1 0 1
1 1 1 1 1 0 1
0 0 1 0 0 0 1
0 0 1 1 1 1 1
6 6
1 1 1 1 2 2
1 0 0 2 0 2
1 0 0 2 0 2
3 3 3 9 9 9
3 0 0 9 0 9
3 3 3 9 9 9
0 0
AIZU p01240 Oil Company
1. Incorrect input format
```
1
1 1
```
2. Incorrect output format
```
1
10000000000000
```
3. Incorrect logic
```
1
2 2
1 2
```
4. Memory leaks
```
1
2 2
1 2
```
5. Synchronization issues
```
1
2 2
1 2
```
6. Security vulnerabilities
```
1
2 2
1 2
```
7. Other bugs
```
1
2 2
1 2
```
AIZU p01402 Anipero
```
100 2 2 2
A 5 6
B 7 8
C 1 2
D 3 4
27 2 3 3
A 8 10
B 8 10
C 6 7
D 5 4
E 8 9
27 2 3 2
A 8 10
B 8 10
C 6 7
D 5 4
E 8 9
44 3 6 5
YamatoNoHito 9 10
ZettoNoHito 9 10
TMR 10 10
SkillNoGroup 8 10
NanaSama 6 9
FRPSD 6 8
Magi3rdDeshi 5 7
Magi13thDeshi 2 2
MagicalItoh 4 6
0 0 0 0
AIZU p01556 ConvexCut
**Incorrect input format**

```
1
100 100
```

**Incorrect data type**

```
4
100 100
'a' 'b'
0 0
100 0
```

**Incorrect logic**

```
4
100 100
0 100
0 0
100 0
```

**Off-by-one errors**

```
4
100 100
0 100
0 0
100 1
```

**Floating-point errors**

```
4
100 100
0 100
0 0
100 0.000001
```

**Memory errors**

```
1000000
```

**Timeout errors**

```
1000000000000000000
```

**Security vulnerabilities**

```
```
AIZU p01711 Idempotent Filter
```
0000000011111111000000001111111100000000111111110000000011111111000000001111111100000000111111110000000111111111
1000000011111111000000001111111100000000111111110000000011111111000000001111111100000000111111110000000011111111
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
```
AIZU p01856 Typhoon
```
7 5
0 0 0 0 0
0 1 1 1 0
0 2 2 2 0
0 3 3 3 0
0 2 2 2 0
0 1 1 1 0
0 0 0 0 0
```
AIZU p01991 Namo.. Cut
3
1 2
1 3
2 3
1
1 3

AIZU p02137 Special Chat
```
5700
1333
100000
```
AIZU p02278 Minimum Cost Sort
1. ```
1
1
```
2. ```
1
1000000000
```
3. ```
5
5 1 4 2 3
```
4. ```
5
1 5 3 4 2
```
5. ```
5
1 2 3 4 5
```
6. ```
5
1 2 3 4 5
```
AIZU p02425 Bit Flag
```
1
```
```
1 0
```
```
1 1
```
```
1 2
```
```
2 1
```
```
0 0
```
```
0 1
```
```
0 2
```
```
0 3
```
```
3 3
```
```
4
```
```
5
```
```
6
```
```
7
```
```
8
```