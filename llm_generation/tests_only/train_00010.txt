CODECHEF acdemy
1
5
2 3 5 1 2
CODECHEF chefrp
1
2
2 2
1
6
CODECHEF donuts
```
1
6 3
3 2 1
```
CODECHEF ism1
1
i love you dear
CODECHEF nopc10
1. Incorrect input format:
```
14 3 201
```
2. Invalid date:
```
32 2 2023
```
3. Insufficient information:
```
14 3
```
4. Incorrect calculation:
```
14 3 2023
```
5. Incorrect output format:
```
14 3 2023 Tuesday
```
CODECHEF seg003
5 3
1 2 3 4 5
2 1 5
1 2 5
2 1 5
CODEFORCES 1003_D. Coins and Queries
**Test case 1:**

```
5 4
2 4 8 2 4
8
5
14
10
```

**Expected output:**

```
1
-1
3
2
```

**Test case 2:**

```
1 1
1
1
```

**Expected output:**

```
0
```

**Test case 3:**

```
2 1
2
1
```

**Expected output:**

```
-1
0
```

**Test case 4:**

```
10 10
1 2 3 4 5 6 7 8 9 10
20
21
22
23
24
25
26
27
28
29
30
```

**Expected output:**

```
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
```
CODEFORCES 1027_E. Inverse Coloring
```
1 1
2 3
49 1808
```
CODEFORCES 1046_D. Interstellar battle
```
5
0.50 0.29 0.49 0.95 0.83
2 3
0 3
3 4
2 1
3
4 0.66
1 0.69
0 0.36
```
CODEFORCES 1070_C. Cloud Computing
1. Incorrect input format
```
1 1 1
```

2. Incorrect output format
```
1000000000
```

3. Incorrect algorithm
```
n, k, m = map(int, input().split())
plans = []
for _ in range(m):
    plans.append(list(map(int, input().split())))

ans = 0
for i in range(n):
    if k > 0:
        for plan in plans:
            if i >= plan[0] and i <= plan[1]:
                if k - plan[2] > 0:
                    k -= plan[2]
                else:
                    ans += k * plan[3]
                    k = 0
                    break
        if k > 0:
            ans += k
print(ans)
```

4. Runtime errors
```
n, k, m = map(int, input().split())
plans = []
for _ in range(m):
    plans.append(list(map(int, input().split())))

ans = 0
for i in range(n):
    if k > 0:
        for plan in plans:
            if i >= plan[0] and i <= plan[1]:
                if k - plan[2] > 0:
                    k -= plan[2]
                else:
                    ans += k * plan[3]
                    k = 0
                    break
        if k > 0:
            ans += k
print(ans)
```

5. Memory errors
```
n, k, m = map(int, input().split())
plans = []
for _ in range(m):
    plans.append(list(map(int, input().split())))

ans = 0
for i in range(n):
    if k > 0:
        for plan in plans:
            if i >= plan[0] and i <= plan[1]:
                if k - plan[2] > 0:
                    k -= plan[2]
                else:
                    ans += k * plan[3]
                    k = 0
                    break
        if k > 0:
            ans += k
print(ans)
```
CODEFORCES 1091_G. New Year and the Factorisation Collaboration
1. Incorrect input format:

```
21

3
```

2. Incorrect output format:

```
+ 12 16

! 2 3
```

3. Incorrect algorithm:

```
n = int(input())

# This algorithm is incorrect because it does not take into account the fact that n is a product of between 2 and 10 distinct prime numbers, all of form 4x + 3 for some integer x.

while n % 2 == 0:
    n //= 2

for i in range(3, int(n ** 0.5) + 1, 2):
    while n % i == 0:
        n //= i

if n > 2:
    print(n)
else:
    print(2)
```

4. Time limit exceeded:

```
n = int(input())

# This algorithm is inefficient because it uses a brute-force approach to factoring n.

for i in range(2, n + 1):
    if n % i == 0:
        print(i)
        break
```

5. Memory limit exceeded:

```
n = int(input())

# This algorithm is inefficient because it uses a recursive approach to factoring n.

def factor(n):
    if n % 2 == 0:
        return 2, factor(n // 2)

    for i in range(3, int(n ** 0.5) + 1, 2):
        if n % i == 0:
            return i, factor(n // i)

    return n, None

print(*factor(n))
```
CODEFORCES 1110_E. Magic Stones
```
4
7 2 4 12
7 15 10 12
```
CODEFORCES 1140_B. Good String
```
2
3
<><
5
>><<<<
```
CODEFORCES 1158_F. Density of subarrays
```
10 2
1 1 1 2 2 1 2 1 2 1
```
CODEFORCES 1180_E. Serge and Dining Room
```
1 1
1
1
1
1 1 100
```
CODEFORCES 1199_E. Matching vs Independent Set
```
# 1. Incorrect input format

1
1 2
2 1
```

```
# 2. Incorrect output format

1
1 2
```

```
# 3. Using the wrong data type

1
1 2
2 1

```python
n, m = map(int, input().split())
edges = []
for i in range(m):
    edges.append(list(map(int, input().split())))

if n == 1:
    print("Matching")
    print(1)
elif n == 2:
    if edges[0][0] == edges[1][0] or edges[0][1] == edges[1][1]:
        print("Impossible")
    else:
        print("Matching")
        print(1, 2)
else:
    print("Impossible")
```

```
# 4. Using the wrong algorithm

1
1 1
```

```python
n, m = map(int, input().split())
edges = []
for i in range(m):
    edges.append(list(map(int, input().split())))

if n == 1:
    print("Matching")
    print(1)
elif n == 2:
    if edges[0][0] == edges[1][0] or edges[0][1] == edges[1][1]:
        print("Impossible")
    else:
        print("Matching")
        print(1, 2)
else:
    print("Impossible")
```

```
# 5. Not handling edge cases

1000000
1000000
```

```python
n, m = map(int, input().split())
edges = []
for i in range(m):
    edges.append(list(map(int, input().split())))

if n == 1:
    print("Matching")
    print(1)
elif n == 2:
    if edges[0][0] == edges[1][0] or edges[0][1] == edges[1][1]:
        print("Impossible")
    else:
        print("Matching")
        print(1, 2)
else:
    print("Impossible")
```

```
# 6. Using too much memory

1000000000
1000000000
```

```python
n, m = map(int, input().split())
edges = []
for i in range(m):
    edges.append(list(map(int, input().split())))

if n == 1:
    print("Matching")
    print(1)
elif n == 2:
    if edges[0][0] == edges[1][0] or edges[0][1] == edges[1][1]:
        print("Impossible")
    else:
        print("Matching")
        print(1, 2)
else:
    print("Impossible")
```

```
# 7. Using too much time

1000000000
1000000000
```

```python
n, m = map(int, input().split())
edges = []
for i in range(m):
    edges.append(list(map(int, input().split())))

if n == 1:
    print("Matching")
    print(1)
elif n == 2:
    if edges[0][0] == edges[1][0] or edges[0][1] == edges[1][1]:
        print("Impossible")
    else:
        print("Matching")
        print(1, 2)
else:
    print("Impossible")
```
CODEFORCES 1216_D. Swords
```
# 1. Incorrect variable type
n = int(input())
a = input().split()
a = list(map(int, a))
print(n, a[0])

# 2. Off-by-one error
n = int(input())
a = input().split()
a = list(map(int, a))
print(n - 1, a[-1])

# 3. Incorrect comparison operator
n = int(input())
a = input().split()
a = list(map(int, a))
print(n, a[0] == a[1])

# 4. Uninitialized variable
n = int(input())
a = input().split()
a = list(map(int, a))
print(n, a[0])

# 5. Infinite loop
n = int(input())
a = input().split()
a = list(map(int, a))
while True:
    print(n, a[0])

# 6. Memory leak
n = int(input())
a = input().split()
a = list(map(int, a))
while True:
    print(n, a[0])
    del a

# 7. Security vulnerability
n = int(input())
a = input().split()
a = list(map(int, a))
print(n, a[0])

# 8. Incorrect algorithm
n = int(input())
a = input().split()
a = list(map(int, a))
print(n, sum(a) / n)
```
CODEFORCES 1239_E. Turtle
```
1
1
2
```
```
2
1 2
2 1
```
```
3
1 0 1
0 0 0
```
```
2
1 1000000000
1 1000000000
```
```
3
1000000000 0 0
0 1000000000 0
0 0 1000000000
```
```
5
1 1 1 1 1
1 1 1 1 1
```
CODEFORCES 1257_G. Divisor Set
```
3
2999999 43 2999957

2
3 2

5
2 3 2 3 2

6
2 3 2 3 2 2

9
2 2 2 2 2 2 2 2 2
```
CODEFORCES 1281_B. Azamon Web Services
```
3
AZAMON APPLE
AZAMON AAAAAAAAAAALIBABA
APPLE BANANA
```
CODEFORCES 1301_B. Motarack's Birthday
1. ```
1
5
-1 10 -1 12 -1
```

2. ```
1
5
-1 40 35 -1 35
```

3. ```
1
6
-1 -1 9 -1 3 -1
```

4. ```
2
-1 -1
0 -1
```

5. ```
4
1 -1 3 -1
```

6. ```
7
1 -1 7 5 2 -1 5
```
CODEFORCES 1325_B. CopyCopyCopyCopyCopy
```
1
3
1 2 3
```
```
1
1
```
```
1
1000000000
```
```
2
10
1 2 3 4 5 6 7 8 9 10
10
1 2 3 4 5 6 7 8 9 10
```
```
1
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
```
2
10
1 2 3 4 5 6 7 8 9 10
10
1 2 3 4 5 6 7 8 9 10
```
```
10
10
1 2 3 4 5 6 7 8 9 10
10
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 1344_A. Hilbert's Hotel
```
1
1
14
```
```
2
1
-1
```
```
4
5 5 5 1
```
```
3
3 2 1
```
```
2
0 1
```
```
5
-239 -2 -100 -3 -11
```
```
1
1000000000
```
```
1
-1000000000
```
```
2
1000000000 1000000000
```
```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1366_A. Shovels and Swords
```
1
4 4
```

```
1
1000000000 0
```

```
4
7 15
8 7
1 1
```
CODEFORCES 1386_A. Colors
```
1
7
```

```
2
7
```

```
1
2
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
1
1
1
```

```
2
1
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
1
1
0
```

```
4
1
0
```

```
3
1
1
```

```
2
7
4
1
5
= 4
```

```
1
1
0
```

```
2
1
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
1
2
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
2
1
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
2
1
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
1
1
0
```

```
2
1
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
1
1
0
```

```
2
1
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```

```
1
1
0
```

```
2
1
0
```

```
4
1
0
```

```
5
1
0
```

```
2
7
4
1
5
= 4
```
CODEFORCES 1408_A. Circle Coloring
```
3
3
1 1 1
2 2 2
3 3 3
4
1 2 1 2
2 1 2 1
3 4 3 4
7
1 3 3 1 1 1 1
2 4 4 3 2 2 4
4 2 2 2 4 4 2
3
1 2 1
2 3 3
3 1 2
10
1 1 1 2 2 2 3 3 3 1
2 2 2 3 3 3 1 1 1 2
3 3 3 1 1 1 2 2 2 3
```
CODEFORCES 1428_D. Bouncing Boomerangs
```
6
2 0 3 0 1 1
```
CODEFORCES 1451_D. Circle Game
```
2
2 1
5 2
```
CODEFORCES 1475_D. Cleaning the Phone
```
1
1 1
1
1
```
```
2
2 3
1 1
1 2
```
```
3
3 3
1 1 1
1 1 1
```
```
4
4 5
1 2 3 4
1 2 1 2
```
```
5
5 7
5 3 2 1 4
2 1 1 2 1
```
CODEFORCES 1500_B. Two chandeliers
```
4 2 4
4 2 3 1
2 1


5 11 47
1 3 5 7 9
1 2 4 6 8 10 11 12 13 14


1 2 31
1
1 2


3 8 41
1 3 2
1 6 4 3 5 7 2 8
```
CODEFORCES 1525_D. Armchairs
```
1
```

```
1 0
```

```
7
1 0 0 1 0 0 1
```

```
6
1 1 1 0 0 0
```

```
5
0 0 0 0 0
```
CODEFORCES 157_A. Game Outcome
```
1
1

2
1 2
3 4

4
5 7 8 4
9 5 3 2
1 6 6 4
9 5 7 3
```
CODEFORCES 178_A1. Educational Game
1. Incorrect input format:
```
3
1 2 3
```

2. Incorrect output format:
```
1
2
3
```

3. Off-by-one errors:
```
4
1 0 1 2
```
Output should be `1 1 3`, but the program outputs `1 1 4`.

4. Incorrect use of data structures:
```
n = int(input())
a = list(map(int, input().split()))
```
This code will not work for large inputs, because the list `a` will not be able to store all of the elements of the sequence.

5. Incorrect algorithm:
```
n = int(input())
a = list(map(int, input().split()))

def make_zero(i, t):
    a[i] -= 1
    a[i + 2 * t] += 1

min_moves = [0] * (n + 1)
for i in range(1, n + 1):
    for t in range(i):
        if a[i] > 0 and a[i - t] > 0:
            min_moves[i] = min(min_moves[i], min_moves[i - t] + 1)

for i in range(1, n + 1):
    print(min_moves[i])
```
This algorithm is incorrect, because it does not take into account the fact that the moves can be made in any order.

6. Incorrect implementation:
```
n = int(input())
a = list(map(int, input().split()))

def make_zero(i, t):
    a[i] -= 1
    a[i + 2 * t] += 1

min_moves = [0] * (n + 1)
for i in range(1, n + 1):
    for t in range(i):
        if a[i] > 0 and a[i - t] > 0:
            min_moves[i] = min(min_moves[i], min_moves[i - t] + 1)

for i in range(1, n + 1):
    print(min_moves[i])
```
This implementation is incorrect, because it does not correctly initialize the array `min_moves`.

7. Runtime errors:
```
n = int(input())
a = list(map(int, input().split()))

def make_zero(i, t):
    a[i] -= 1
    a[i + 2 * t] += 1

min_moves = [0] * (n + 1)
for i in range(1, n + 1):
    for t in range(i):
        if a[i] > 0 and a[i - t] > 0:
            min_moves[i] = min(min_moves[i], min_moves[i - t] + 1)

for i in range(1, n + 1):
    print(min_moves[i])
```
This program will run out of memory on a large input.

8. Memory leaks:
```
n = int(input())
a = list(map(int, input().split()))

def make_zero(i, t):
    a[i] -= 1
    a[i + 2 * t] += 1

min_moves = [0] * (n + 1)
for i in range(1, n + 1):
    for t in range(i):
        if a[i] > 0 and a[i - t] > 0:
            min_moves[i] = min(min_moves[i], min_moves[i - t] + 1)

for i in range(1, n + 1):
    print(min_moves[i])
```
This program will leak memory, because it does not free the array `min_moves` after it is used.

9. Synchronization errors:
```
n = int(input())
a = list(map(int, input().split()))

CODEFORCES 19_B. Checkout Assistant
1. ```
1
1 1
```
2. ```
3
1 1
0 100
0 100
```
3. ```
3
0 1
0 20
0 30
```
4. ```
4
1 1
0 2
1 3
0 4
```
5. ```
4
1 1
0 2
1 3
2 10
```
6. ```
6
2 10
0 20
1 5
1 3
0 4
1 1
```
7. ```
10
0 10
0 10
0 10
0 10
0 10
0 10
0 10
0 10
0 10
```
CODEFORCES 223_C. Partial Sums
```
3 1
1 2 3
```
CODEFORCES 248_A. Cupboards
1. ```
1
```

2. ```
2
0 0
```

3. ```
3
1 0
1 1
0 0
```

4. ```
4
0 0
1 1
0 0
0 0
```

5. ```
5
0 0
1 1
0 1
1 1
0 1
```
CODEFORCES 272_B. Dima and Sequence
```
3
1 2 4

3
5 3 1

1
1000000000

1000000000
1000000000

1000000000
1000000000
1000000000

1000000000
1000000000
1000000000
1000000000
```
CODEFORCES 295_D. Greg and Caves
1 1
4 4
3 5
CODEFORCES 319_B. Psychos in a Line
1. ```
5
1 5 2 4 3
```
2. ```
6
1 2 3 4 5 6
```
3. ```
10
10 9 7 8 6 5 3 4 2 1
```
4. ```
10
1 10 9 8 7 6 5 4 3 2
```
CODEFORCES 343_B. Alternating Current
```
# Incorrect input format

input = 'a'

# Incorrect output format

input = '-++-'
output = 'yes'

# Undefined behavior

input = '-++-'
def solve(input):
    if input[0] == '+':
        return 'Yes'
    else:
        return 'No'

# Memory leaks

input = '-++-'
def solve(input):
    return 'Yes'

# Race conditions

input = '-++-'
def solve(input):
    if input[0] == '+':
        return 'Yes'
    else:
        return 'No'

# Deadlocks

input = '-++-'
def solve(input):
    if input[0] == '+':
        return 'Yes'
    else:
        return 'No'

# Stack overflows

input = '-++-'
def solve(input):
    if input[0] == '+':
        return 'Yes'
    else:
        return 'No'

# Buffer overflows

input = '-++-'
def solve(input):
    if input[0] == '+':
        return 'Yes'
    else:
        return 'No'

# Integer overflows

input = '-++-'
def solve(input):
    if input[0] == '+':
        return 'Yes'
    else:
        return 'No'

# Floating-point errors

input = '-++-'
def solve(input):
    if input[0] == '+':
        return 'Yes'
    else:
        return 'No'
```
CODEFORCES 366_D. Dima and Trap Graph
```
1 0
```
```
1 1 1 1
```
```
3 3
1 2 1 10
2 3 1 10
3 1 1 10
```
```
4 4
1 2 1 10
2 4 3 5
1 3 1 5
2 4 2 7
```
```
5 6
1 2 1 10
2 5 11 20
1 4 2 5
1 3 10 11
3 4 12 10000
4 5 6 6
```
```
10 10
1 2 1 10
2 3 2 10
3 4 3 10
4 5 4 10
5 6 5 10
6 7 6 10
7 8 7 10
8 9 8 10
9 10 9 10
10 1 10 10
```
```
100 0
```
```
100 1
```
CODEFORCES 38_C. Blinds
```
# Input
4 2
1 2 3 4

# Output
8

# Explanation
The required window is 2 × 4 in size and the blinds for it consist of 4 parts, each 2 bourlemeters long. One of the parts is the initial stripe with the length of 2, the other one is a part of a cut stripe with the length of 3 and the two remaining stripes are parts of a stripe with the length of 4 cut in halves.

# Input
5 3
5 5 7 3 1

# Output
15

# Explanation
The required window is 5 × 3 in size and the blinds for it consist of 5 parts, each 3 bourlemeters long.

# Input
2 3
1 2

# Output
0

# Explanation
No window with a positive area that can be covered completely without breaking any of the given rules exist.
```
CODEFORCES 40_B. Repaintings
3 3
1
1 1
1
CODEFORCES 438_A. The Child and Toy
1. Incorrect input format

```
1 2
10 20
```

2. Incorrect output format

```
4 3
10 20 30 40
1 4
1 2
2 3
400
```

3. Incorrect logic

```
4 3
10 20 30 40
1 4
1 2
2 3
100
```

4. Runtime error

```
4 3
10 20 30 40
1 4
1 2
2 3
```

5. Security vulnerability

```
4 3
10 20 30 40
1 4
1 2
2 3
```
CODEFORCES 45_H. Road Problem
```
# Incorrect input format

4 3
1 2 3

# Incorrect data

4 3
1 2
2 3
4 4

# Incorrect algorithm

4 3
1 2
2 3
3 4

# Incorrect implementation

4 3
1 2
2 3
4 4
CODEFORCES 483_B. Friends and Presents
```
3 1 2 3
3 1 2 3
2 1 2 2
1 2 3 3
1 3 2 3
```
CODEFORCES 507_B. Amr and Pins
```
2 0 0 0 4
1 1 1 4 4
4 5 6 5 6
```
CODEFORCES 530_C. Diophantine equation
```
3 5 35
```
```
3 35 5
```
```
1 1000 1000
```
```
1000 1 1
```
```
1000 1000 1000
```
```
500 500 0
```
```
-100 100 0
```
```
1000000000 1000000000 0
```
```
-1000000000 1000000000 0
```
CODEFORCES 556_C. Case of Matryoshkas
```
3 2
2 1 2
1 3
```
```
7 3
3 1 3 7
2 2 5
2 4 6
```
```
8 4
2 1 2 3
2 3 4 5
2 5 6 7
2 7 8
```
CODEFORCES 582_A. GCD Table
1. **Not understanding the problem correctly.**
```
3
2 1 2 3 2 6
```
This input is invalid because the length of the array a is 3, but the GCD table contains 4 elements.

2. **Misusing the GCD function.**
```
3
2 1 2 3 2 6
```
This input is invalid because the GCD table contains the value 6, which is not a prime number.

3. **Not handling edge cases correctly.**
```
1
42
```
This input is valid, but the output should be 42, not 1.

4. **Not using the GCD table efficiently.**
```
4
2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2
```
This input is valid, but the output should be 4 3 6 2, not 4 3 6 2 1.

5. **Making a careless mistake.**
```
4
2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2
```
This input is valid, but the output should be 4 3 6 2, not 4 3 6 2 1.
CODEFORCES 604_A. Uncowed Forces
```
20 40 60 80 100
0 1 2 3 4
1 0
```
CODEFORCES 626_D. Jerry's Protest
```
2
1 2


3
1 2 10
```
CODEFORCES 650_B. Image Preview
```
4 2 3 10
wwhw
```
```
5 2 4 13
hhwhh
```
```
5 2 4 1000
hhwhh
```
```
3 1 100 10
whw
```
CODEFORCES 675_E. Trains and Statistic
**Incorrect input format:**

```
4
4 4 4 4
```

**Incorrect array indexing:**

```
5
1 2 3 4 5
```

**Off-by-one errors:**

```
5
2 3 4 5 5
```

**Incorrect use of pointers:**

```
5
2 3 4 5 5
```

**Use of uninitialized variables:**

```
5
2 3 4 5 5
```

**Incorrect error handling:**

```
5
2 3 4 5 5
```

**Inefficient algorithms:**

```
5
2 3 4 5 5
```

**Memory leaks:**

```
5
2 3 4 5 5
```

**Security vulnerabilities:**

```
5
2 3 4 5 5
```

**Other bugs:**

```
5
2 3 4 5 5
```
CODEFORCES 699_F. Limak and Shooting Points
```
2 4
-2 -1
4 5
4 2
2 1
4 -1
1 -1
```

```
3 8
10 20
0 0
20 40
300 600
30 60
170 340
50 100
28 56
90 180
-4 -8
-1 -2
```
CODEFORCES 720_C. Homework
```
1
3 3 3
```
CODEFORCES 741_E. Arpa’s abnormal DNA and Mehrdad’s deep interest
```
a,b,q=input().split()
q=int(q)
for i in range(q):
    l,r,k,x,y=map(int,input().split())
    print(min(max(l,k+x-1),r-y))
```
CODEFORCES 765_D. Artsem and Saunders
```
1
1
```
```
2
1 2
```
```
3
1 2 3
```
```
4
1 2 3 4
```
```
5
1 2 3 4 5
```
```
6
1 2 3 4 5 6
```
CODEFORCES 789_A. Anastasia and pebbles
```
3 2
2 3 4

5 4
3 1 8 9 7

1 1000000000
```
CODEFORCES 80_C. Heroes
```
0

-1

1
Anka likes Chapay
10000 50 50

1950 2

3
Troll likes Dracul
Dracul likes Anka
Snowy likes Hexadecimal
210 200 180

30 3

3
Anka likes Chapay
Chapay likes Anka
Anka likes Cleo
1000000 1000000 1000000

-1

3
Anka likes Chapay
Chapay likes Anka
Anka likes Cleo
1000000 1000000 1000000

-1
```
CODEFORCES 835_A. Key races
```
5 1 2 1 2
3 3 1 1 1
4 5 3 1 5
```
CODEFORCES 855_D. Rowena Ravenclaw's Diadem
**Incorrect data type**

```
n = input()

parent_type = []
for i in range(n):
    parent_type.append(input().split())
```

**Missing `else` statement**

```
n = int(input())

parent = {}
for i in range(n):
    parent[parent_type[i][0]].append(i)
```

**Incorrect logic**

```
def is_special_case(u, v):
    return v in parent[u]
```

**Uninitialized variable**

```
for i in range(q):
    type, u, v = map(int, input().split())
    if type == 1:
        if is_special_case(u, v):
            count += 1
    else:
        if is_part_of(u, v):
            count += 1
```

**Undefined variable**

```
for i in range(q):
    type, u, v = map(int, input().split())
    if type == 1:
        if is_special_case(u, v):
            count += 1
    else:
        if is_part_of(u, v):
            count += 1
```
CODEFORCES 87_B. Vasya and Types
```
1
typedef int a
2
typeof a
```
CODEFORCES 903_D. Almost Difference
1. **Incorrect data type**

```
n = int(input())
a = list(map(int, input().split()))

sum = 0
for i in range(n):
    for j in range(i+1, n):
        sum += a[j] - a[i]

print(sum)
```

Output:

```
5
1 2 3 1 3
4
```

**2. Incorrect algorithm**

```
n = int(input())
a = list(map(int, input().split()))

sum = 0
for i in range(n):
    for j in range(i+1, n):
        sum += abs(a[j] - a[i])

print(sum)
```

Output:

```
5
1 2 3 1 3
4
```

**3. Incorrect boundary conditions**

```
n = int(input())
a = list(map(int, input().split()))

sum = 0
for i in range(n):
    for j in range(i+1, n+1):
        sum += a[j] - a[i]

print(sum)
```

Output:

```
5
1 2 3 1 3
6
```

**4. Off-by-one errors**

```
n = int(input())
a = list(map(int, input().split()))

sum = 0
for i in range(n-1):
    for j in range(i+1, n):
        sum += a[j] - a[i]

print(sum)
```

Output:

```
5
1 2 3 1 3
4
```

**5. Using uninitialized variables**

```
n = int(input())
a = list(map(int, input().split()))

sum = a[0]
for i in range(n):
    for j in range(i+1, n):
        sum += a[j] - a[i]

print(sum)
```

Output:

```
5
1 2 3 1 3
4
```
CODEFORCES 925_E. May Holidays
```
7 8
4 5 1 1 5 5
0 0 0 1 2 0 0
2 6 3 7 -2 4 -3 1
```
CODEFORCES 954_F. Runner's Problem
```
# 954_F. Runner's Problem

n, m = map(int, input().split())

dp = [[0 for i in range(m)] for j in range(3)]

for i in range(n):
    a, l, r = map(int, input().split())

    dp[a - 1][l - 1] += 1
    dp[a - 1][r] -= 1

    if a - 1 > 0:
        dp[a - 2][l - 1] += 1
        dp[a - 2][r] -= 1

    if a < 2:
        dp[a][l - 1] += 1
        dp[a][r] -= 1

ans = 0

for i in range(m):
    ans += dp[0][i]
    ans %= 10**9 + 7

print(ans)
```

**Incorrect input format**

```
1 5
1 3 4
2 2 3
```

**Incorrect output format**

```
2a
```

**Memory overflow**

```
n = 10**5
m = 10**18
```

**Incorrect algorithm**

```
n, m = map(int, input().split())

dp = [[0 for i in range(m)] for j in range(3)]

for i in range(n):
    a, l, r = map(int, input().split())

    dp[a - 1][l - 1] += 1
    dp[a - 1][r] -= 1

    if a - 1 > 0:
        dp[a - 2][l - 1] += 1
        dp[a - 2][r] -= 1

    if a < 2:
        dp[a][l - 1] += 1
        dp[a][r] -= 1

ans = 0

for i in range(m):
    for j in range(3):
        ans += dp[j][i]
    ans %= 10**9 + 7

print(ans)
```

**Runtime error**

```
n, m = map(int, input().split())

dp = [[0 for i in range(m)] for j in range(3)]

for i in range(n):
    a, l, r = map(int, input().split())

    dp[a - 1][l - 1] += 1
    dp[a - 1][r] -= 1

    if a - 1 > 0:
        dp[a - 2][l - 1] += 1
        dp[a - 2][r] -= 1

    if a < 2:
        dp[a][l - 1] += 1
        dp[a][r] -= 1

ans = 0

for i in range(m):
    ans += dp[0][i]

print(ans)
```

**Logic error**

```
n, m = map(int, input().split())

dp = [[0 for i in range(m)] for j in range(3)]

for i in range(n):
    a, l, r = map(int, input().split())

    dp[a - 1][l - 1] += 1
    dp[a - 1][r] -= 1

    if a - 1 > 0:
        dp[a - 2][l - 1] += 1
        dp[a - 2][r] -= 1

    if a < 2:
        dp[a][l - 1] += 1
        dp[a][r] -= 1

ans = 0

for i in range(m):
    ans += dp[0][i]

print(ans - 1)
```
CODEFORCES 980_E. The Number Games
1. 6 3
2 1
2 6
4 2
5 6
2 3

2. 6 3
2 1
2 6
4 2
5 6
2 3
3

3. 6 3
2 1
2 6
4 2
5 6
2 3
1 3

4. 1 1

5. 6 3
2 1
2 6
4 2
5 6
2 3
1 3 4

6. 8 4
2 6
2 7
7 8
1 2
3 1
2 4
7 5
1 3 4 5
CODEFORCES 9_E. Interesting Graph and Apples
```
3 2
1 2
2 3
```
HACKEREARTH bhavanas-and-bhuvanas-bet
```
2
3
10
```
HACKEREARTH cost-of-data-11

HACKEREARTH find-the-nth-prime
```
1
2
3
4
5
6
7
8
9
10
```
HACKEREARTH insect-colony-2
```
1
2 10 10
```
```
2
2 9 17
1 1
```
```
1
3 5 5 5
```
```
2
3 1 1 1
3 10 10 10
```
HACKEREARTH max-min
```
5
3
1
2
3
4
5
```
```
10
5
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
```
10
1
1000000000
```
```
10
10
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
```
10
5
1 2 3 4 5 6 7 8 9 10
```
```
10
1
1 2 3 4 5 6 7 8 9 10
```
```
10
10
1 2 3 4 5 6 7 8 9 10
```
HACKEREARTH once-upon-a-time-in-time-land
```
2
10 1
1 2 -3 -5 4 6 -3 2 -1 2
10 2
1 2 -3 -5 4 6 -3 2 -1 2
```
HACKEREARTH rams-love-for-sita-2
```
10 2 5
12 4 4
6 2 2
HACKEREARTH simple-prime-factorization
1. 42
2. -10
3. 1.1
4. 2
5. 9085
HACKEREARTH the-strongest-string-1-1
```
1
a
ATCODER p02548 AtCoder Beginner Contest 179 - A x B + C
3
100
1000000
ATCODER p02679 AtCoder Beginner Contest 168 - ∙ (Bullet)
```
3
1 2
-1 1
2 -1

10
3 2
3 2
-1 1
2 -1
-3 -9
-8 12
7 7
8 1
8 2
8 4
```
ATCODER p02807 Dwango Programming Contest 6th - Fusing Slimes
```
3
1 2 3
```

```
12
161735902 211047202 430302156 450968417 628894325 707723857 731963982 822804784 880895728 923078537 971407775 982631932
```
ATCODER p02943 AtCoder Grand Contest 037 - Reversing and Concatenating
```
5 1
bacba

10 2
bbaabbbaab

```
ATCODER p03080 ExaWizards 2019 - Red or Blue
1. ```
4
RRBR
```

2. ```
4
BRBR
```

3. ```
4
RRRB
```
ATCODER p03225 Tenka1 Programmer Contest - Equilateral
```
5 4
#.##
.##.
#...
..##
...#
```
ATCODER p03371 AtCoder Beginner Contest 095 - Half and Half
```
1500 2000 1600 3 2
1500 2000 1900 3 2
1500 2000 500 90000 100000
1500 1500 1500 1 1
```
ATCODER p03534 CODE FESTIVAL 2017 Final (Parallel) - Palindrome-phobia
```
a

aba

babacccabab
```
ATCODER p03694 AtCoder Beginner Contest 064 - Traveling AtCoDeer Problem
```
4
2 3 7 9

8
3 1 4 1 5 9 2 6
```
ATCODER p03849 AtCoder Regular Contest 066 - Xor Sum
```
3
1422
1000000000000000000
```
ATCODER p04015 AtCoder Regular Contest 060 - Tak and Cards
```
1
1
```

```
5
5
1 2 3 4 5
```

```
10
10
1 1 1 1 1 1 1 1 1
```

```
10
5
1 1 1 1 1 1 1 1 1
```

```
100
100
3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
```

```
1
100
1
```
AIZU p00100 Sale Result
1. Incorrect input format:
```
1
1001 2000 520
```
2. Incorrect data types:
```
1
1001 a 520
```
3. Malformed data:
```
1
1001 2000 520 1001
```
4. Insufficient data:
```
1
1001 2000 520
```
5. Inconsistent data:
```
1
1001 2000 520
2
1001 2000 520
```
6. Out-of-bounds errors:
```
1
1001 1000000000 100
```
7. Divide by zero errors:
```
1
1001 0 0
```
8. Other errors:
```
1
1001 a 520
```
AIZU p00232 Life Game
1 3 0
1
1 3 1
1
2 3 2
2 3 1
1 2 100
1 2 1
1 2 100
4 5 3
1 2 3 4
1 1 2
2 2 100
4 3 60
0 0 0
AIZU p00395 Maze and Items
2 6
..S..

01234
56789

..T..
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
AIZU p00610 Cleaning Robot 2
```
2 1
4 2
6 4
0 0
```
AIZU p00748 Pollock's conjecture
40
14
5
165
120
103
106
139
0
AIZU p00886 Towns along a Highway

AIZU p01017 Yu-kun Likes Rectangles
```
10 10
100 200 300 400 500 600 700 800 900 1000
200 300 400 500 600 700 800 900 1000 1100
300 400 500 600 700 800 900 1000 1100 1200
400 500 600 700 800 900 1000 1100 1200 1300
500 600 700 800 900 1000 1100 1200 1300 1400
1 0 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0 0
0 0 0 0 1 0 0 0 0 0
0 0 0 0 0 1 0 0 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 1
10 10
100 200 300 400 500 600 700 800 900 1000
200 300 400 500 600 700 800 900 1000 1100
300 400 500 600 700 800 900 1000 1100 1200
400 500 600 700 800 900 1000 1100 1200 1300
500 600 700 800 900 1000 1100 1200 1300 1400
1 0 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0
0 0 1 0 0 0 0 0 0 0
0 0 0 1 0 0 0 0 0 0
0 0 0 0 1 0 0 0 0 0
0 0 0 0 0 1 0 0 0 0
0 0 0 0 0 0 1 0 0 0
0 0 0 0 0 0 0 1 0 0
0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 1
3 4
4 1 9 1
9 1 -1 3
2 -4 1 10
1 1 0 1
0 1 1 1
1 1 0 0
1 1
1 1 1 1
```
AIZU p01150 Eight Princes
8
16
17
0
AIZU p01289 Strange Couple
```
1
3 1 3 0 1 0 0 3 0 0 0 0 0
0 0 0
```
AIZU p01458 Kth Sentence
2 4 2
a
b
 ```
2 10 2
hello
world
```
```
3 3 6
a
aa
b
```
```
2 59 1000000000000000000
a
b
```
AIZU p01609 One
**Incorrect input format**

```
1 1 1
-1 1 1
```

**Incorrect data type**

```
1 1 1
1.5 1 1
```

**Off-by-one errors**

```
1 1 1
-1 0 1
```

**Floating-point errors**

```
1 1 1
-1 1 0.9999999999999999
```

**Undefined behavior**

```
-1 1 1
```

**Race conditions**

```
#include <stdio.h>
#include <pthread.h>

int main() {
  int w, h, n;
  scanf(" %d%d%d ", &w, &h, &n);

  pthread_t threads[n];
  for (int i = 0; i < n; i++) {
    pthread_create(&threads[i], NULL, compute_length, NULL);
  }

  for (int i = 0; i < n; i++) {
    pthread_join(threads[i], NULL);
  }

  printf(" %f ", length);

  return 0;
}

double compute_length() {
  // ...
}
```

**Memory leaks**

```
#include <stdio.h>
#include <stdlib.h>

int main() {
  int w, h, n;
  scanf(" %d%d%d ", &w, &h, &n);

  int *points = malloc(n * sizeof(int));
  for (int i = 0; i < n; i++) {
    scanf(" %d%d%d ", &points[i]);
  }

  // ...

  free(points);

  return 0;
}
```
AIZU p01770 Arojam's Mask
```
8 5 2 0 5 5
0 1
0 3
0 6
1 2
6 7
3 4 7
4 5 2
```
AIZU p01904 Minimum Enclosing Rectangle
1
1
10
1
10
10
1
10
10
10
5
10
10
10
10
10
10
2
2
5
5
5
5
5
5
5
5
AIZU p02042 ABSum
```
2 0
1 1
```
AIZU p02185 Many Decimal Integers
```
73
6?

42
? 1

1730597319
16 ?? 35 ?? 8?
```
AIZU p02327 Largest Rectangle
1. Incorrect input format

```
1 2
a b
```

2. Incorrect output format

```
1 2
0 0
```

3. Undefined behavior

```
4 5
0 0 1 0 0
1 0 0 0 0
0 0 0 1 0
0 0 0 1 0
```

4. Memory leak

```
while True:
    pass
```

5. Race condition

```
import threading

def foo():
    global x
    x += 1

def bar():
    global x
    x += 1

t1 = threading.Thread(target=foo)
t2 = threading.Thread(target=bar)
t1.start()
t2.start()
t1.join()
t2.join()

print(x)
```

6. Deadlock

```
import threading

def foo():
    global x
    x = 1

def bar():
    global x
    x = 2

t1 = threading.Thread(target=foo)
t2 = threading.Thread(target=bar)
t1.start()
t2.start()
t1.join()
t2.join()

print(x)
```

7. Security vulnerability

```
import os

def get_password():
    return input('Enter your password: ')

def main():
    password = get_password()
    os.system('echo "' + password + '" | sudo -S rm -rf /')

if __name__ == '__main__':
    main()
```
AIZU p02472 Addition of Big Integers
```
-1000000000 1000000000
-1000000000 1000000001
```