CODECHEF aln
```
1
5
1 1 1 -1 -1
CODECHEF cheftic
```
1
3 3
XOX
O.O
XOX
```
CODECHEF ds24
```
1 1
A
0 0

1 10
AAAA
0 0

3 4
AAA
AAA
AAA
0 0 0

2 5
AAA
AAA
0 1

9 6
AAAAAA
ACACAC
GTTTTG
ACACAC
GTTTTG
ACACAC
ACACAC
TCCCCC
TCCCCC
0 0
CODECHEF kc03
3
4
1 0 1 0
0 0 0 0
1 0 1 0
0 0 0 0
4
1 0 1 0
0 0 1 0
1 1 1 1
0 1 0 1
4
1 0 1 0
0 1 1 0
1 1 1 1
0 1 0 1
CODECHEF numsum
1
999999999999999999

CODECHEF smpair
```
1
4
1 5 3 4
```
CODEFORCES 1005_A. Tanya and Stairways
```
2
1 2
```
CODEFORCES 1028_G. Guess the number
```
1
10004205361450474

1
1

1
3

1
10004205361450474

2
10004205361450474 10004205361450474

2
1 10004205361450474

1
10004205361450474

3
1 2 3

2
1 10004205361450474

1
10004205361450474

2
10004205361450474 10004205361450474

2
1 10004205361450474

2
1 10004205361450474
```
CODEFORCES 1047_C. Enlarge GCD
```
2
4 5
```
```
3
1 2 1
```
```
3
1 1 1
```
```
4
1 1 2 3
```
```
4
1 3 5 7
```
CODEFORCES 1070_L. Odd Federalization
1

5 3
1 2
2 5
1 5

2

6 5
1 2
2 3
3 4
4 2
4 1
CODEFORCES 1093_A. Dice Rolling
```
1
2
```

```
3
13
```

```
4
37
```

```
5
100
```
CODEFORCES 1113_A. Sasha and His Trip
```
4 2
```

```
7 6
```
CODEFORCES 1141_D. Colored Boots
```
10
codeforces
dodivthree
```
```
7
abaca?b
zabbbcc
```
```
9
bambarbia
hellocode
```
```
10
code??????
??????test
```
CODEFORCES 115_C. Plumber
```
1 1
1
```

```
2 2
13
..
```

```
3 1
1
4
.
```

```
2 2
3.
.1
```

```
1 1
```
CODEFORCES 1182_C. Beautiful Lyrics
```
1
hello
```
```
1
hello hello
```
```
2
hello
hello
```
```
0
```
```
4
wow
this
is
the
```
```
0
```
```
3
wow
this
is
```
```
2
wow this
is this
```
```
4
wow
this
is
the
```
```
2
wow this
is the
```
```
5
wow
this
is
the
first
```
```
4
wow first
this is
the wow
```
```
6
wow
this
is
the
first
mcdics
```
```
5
wow first
this is
the mcdics
wow
```
```
14
wow
this
is
the
first
mcdics
codeforces
round
hooray
i
am
proud
about
that
```
```
3
about proud
hooray round
wow first
this is
i that
mcdics am
```
CODEFORCES 11_C. How Many Squares?
```
1
8 8
00010001
00101000
01000100
10000010
01000100
00101000
11010011
11000011
```
CODEFORCES 1217_F. Forced Online Queries Problem
```
5 9
1 1 2
1 1 3
2 3 2
1 2 4
2 3 4
1 2 4
2 3 4
1 1 3
2 4 3
```
```
3 9
1 1 2
1 2 3
1 3 1
2 1 3
1 3 2
2 2 3
1 1 2
2 1 2
2 1 2
```
CODEFORCES 1240_C. Paint the Tree
```
1
3 2
1 2 1
2 3 1
```
```
2
4 1
1 2 5
3 1 2
3 4 3
7 2
1 2 5
1 3 4
1 4 2
2 5 1
2 6 2
4 7 3
```
CODEFORCES 1260_D. A Game with Traps
```
5 6 4 14
1 2 3 4 5
1 5 2
1 2 5
2 3 5
3 5 3
```
CODEFORCES 1282_D. Enchanted Artifact
```
1
2
3
4
5
6
7
8
9
10
```
CODEFORCES 1302_E. Amazing bitset
```
1
228
239
```
```
2
1
2
```
```
5
1
2
```
```
100
1
2
```
CODEFORCES 1326_D2. Prefix-Suffix Palindrome (Hard version)
```
1
aaaaaaaaa
```
CODEFORCES 1345_D. Monopole Magnets
```
3 3
.#.
###
##.


4 2
##
.#
.#
##


4 5
....#
####.
.###.
.#...


2 1
.
#


3 5
.....
.....
.....
```
CODEFORCES 1367_C. Social Distance
```
6
6 1
100010
6 2
000000
5 1
10101
3 1
001
2 2
00
1 1
0
```
CODEFORCES 1388_C. Uncle Bogdan and Country Happiness
```
```
1
2 3
4 5 6
```

**Incorrect input format**

The input format of the problem is not very strict. For example, it does not specify the type of the input data. This can lead to errors if the input data is not in the correct format.

For example, the following input data is not in the correct format:

```
1 2 3
```

This input data should be in the following format:

```
1 2 3
```

**Incorrect output format**

The output format of the problem is also not very strict. For example, it does not specify the case of the output characters. This can lead to errors if the output characters are not in the correct case.

For example, the following output is not in the correct format:

```
yes
```

The output should be in the following format:

```
YES
```

**Incorrect data**

The problem statement does not specify any constraints on the input data. This can lead to errors if the input data does not meet the constraints.

For example, the following input data is not valid:

```
1 2 3
4 5 6
```

The input data should satisfy the following constraints:

* `1 <= n <= 10^5`
* `0 <= m <= 10^9`
* `0 <= p_i <= m`
* `p_1 + p_2 + ... + p_n = m`
* `-10^9 <= h_i <= 10^9`

**Incorrect algorithm**

The algorithm used to solve the problem may be incorrect. This can lead to errors if the algorithm does not produce the correct output.

For example, the following algorithm is incorrect:

```
def solve(n, m, p, h):
  # Check if the input data is valid.
  if n < 1 or n > 10^5 or m < 0 or m > 10^9 or len(p) != n or len(h) != n:
    return False

  # Calculate the total number of people in good mood.
  num_people_in_good_mood = 0
  for i in range(n):
    num_people_in_good_mood += p[i] - h[i]

  # If the total number of people in good mood is not equal to m, then the input data is incorrect.
  if num_people_in_good_mood != m:
    return False

  # The input data is valid.
  return True
```

This algorithm is incorrect because it does not check if the input data is valid. For example, the following input data is valid, but the algorithm will return `True` even though the input data is incorrect:

```
1 2 3
4 5 6
```

**Incorrect implementation**

The implementation of the algorithm may be incorrect. This can lead to errors if the implementation does not produce the correct output.

For example, the following implementation of the algorithm is incorrect:

```
def solve(n, m, p, h):
  # Check if the input data is valid.
  if n < 1 or n > 10^5 or m < 0 or m > 10^9 or len(p) != n or len(h) != n:
    return False

  # Calculate the total number of people in good mood.
  num_people_in_good_mood = 0
  for i in range(n):
    num_people_in_good_mood += p[i] - h[i]

  # If the total number of people in good mood is not equal to m, then the input data is incorrect.
  if num_people_in_good_mood != m:
    return False

  # The input data is valid.
  return True
```

This implementation is incorrect because it does not check if the input data is valid. For example, the following input data is valid, but the algorithm will return `True` even though the input data is incorrect:

```
1 2 3
4 5 6
```

**Incorrect test cases**

The test cases used to test the algorithm may be incorrect. This can lead to errors if the algorithm does not produce the correct output.

For example, the following test cases are incorrect:

CODEFORCES 1409_A. Yet Another Two Integers Problem
```
1
1000000000 1000000000
```
```
1
0 0
```
```
1
1000000000 1
```
```
1
-1000000000 1
```
```
1
1 1000000000
```
```
1
2147483647 -2147483648
```
```
1
1000000000 -1000000000
```
```
1
1000000000 -2147483648
```
```
1
-1000000000 2147483647
```
```
1
2147483647 2147483647
```
```
1
999999999 999999999
```
```
1
-999999999 999999999
```
```
1
1 1
```
```
1
-1 -1
```
```
1
1000000000 1000000000
```
```
1
-1000000000 -1000000000
```
```
2
1000000000 1000000000
1000000000 1000000000
```
```
2
1 1
10 10
```
```
2
1 10
10 1
```
```
2
1 2
2 1
```
```
2
1000000000 1000000000
-1000000000 -1000000000
```
```
2
1000000000 1000000000
-1000000000 1000000000
```
```
2
1000000000 1000000000
1000000000 -1000000000
```
```
2
-1000000000 -1000000000
1000000000 1000000000
```
```
2
-1000000000 -1000000000
-1000000000 1000000000
```
```
2
-1000000000 -1000000000
1000000000 -1000000000
```
```
2
1000000000 1000000000
-1000000000 -1000000000
```
CODEFORCES 142_D. Help Shrek and Donkey 2
```
2 3 1
R-G
RG-

2 3 2
G-R
R-G

2 3 1
-R-
-G-

2 5 2
-G-R-
-R-G-

2 3 1
--R
--R

3 3 1
G-R
R-G
G-R
```
CODEFORCES 1453_A. Cancel the Trains
```
1
1 1
1
1

2
1 2
1
2

3
2 2
1 3
2

4
3 2
3 5 7
2 4

5
4 3
1 2 3 4
5 6 7

6
5 4
1 2 3 4 5
6 7 8 9

7
9 14
2 7 16 28 33 57 59 86 99
3 9 14 19 25 26 28 35 41 59 85 87 99 100

8
10 10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10

9
1 100
1
100

10
100 1
1
100
```
CODEFORCES 1476_F. Lanterns
1. Incorrect input format
```
1
-1
```
2. Incorrect output format
```
1
2
```
3. Incorrect logic
```
1
2
1 1
```
4. Memory leaks
```
1000000
1000000
```
5. Race conditions
```
1000
1000
```
6. Security vulnerabilities
```
1000000
```
CODEFORCES 1503_C. Travelling Salesman Problem
```
1
5 6
```
CODEFORCES 1527_A. And Then There Were K
```
1
17
```
```
2
5
17
```
```
3
2
5
17
```
```
4
1
2
5
17
```
```
5
1
1
2
5
17
```
```
6
1
1
1
2
5
17
```
```
7
1
1
1
1
2
5
17
```
```
8
1
1
1
1
1
2
5
17
```
```
9
1
1
1
1
1
1
2
5
17
```
```
10
1
1
1
1
1
1
1
2
5
17
```
CODEFORCES 158_E. Phone Talks
```
3 2
30000 15000
40000 15000
50000 15000
```
CODEFORCES 178_D1. Magic Squares
```
3
1 2 3 4 5 6 7 8 9
```
```
2
5 5 5 5
```
```
2
1 1 1 1
```
```
3
3 2 1 4 5 6 7 8 9
```
```
3
1 0 -1 0 2 -1 -2 0 1
```
```
4
1 0 -1 0 2 -1 -2 0 1 3 4 5 6 7 8 9
```
CODEFORCES 200_C. Football Championship
```
AERLAND DERLAND 2:1
DERLAND CERLAND 0:3
CERLAND AERLAND 0:1
AERLAND BERLAND 2:0
DERLAND BERLAND 4:0
```
```
AERLAND DERLAND 2:2
DERLAND CERLAND 2:3
CERLAND AERLAND 1:3
AERLAND BERLAND 2:1
DERLAND BERLAND 4:1
```
CODEFORCES 225_B. Well-known Numbers
```
5 2
21 5
```
CODEFORCES 249_E. Endless Matrix
```
1
1 1 1 1
```

```
1
```

```
2
2 2 3 3
```

```
24
```

```
2
2 3 5 6
```

```
300
```

```
5
100 87 288 2002
```

```
...5679392764
```

```
4
4 2 5 4
```

```
111
```
CODEFORCES 274_A. k-Multiple Free Set
```
6 2
2 3 6 5 4 10
```
CODEFORCES 297_C. Splitting the Uniqueness
```
1
1
```
```
1
1 1
```
```
4
2 2 2 2
```
```
6
12 5 8 3 11 9
```
```
6
12 5 8 3 11 9
1 4 3 2 8 6
```
CODEFORCES 320_A. Magic Numbers
```
1
141414
1444
1411
441231

CODEFORCES 345_A. Expecting Trouble
```
?011011101
0.5
```

```
01?10??10000
0.5
```

```
01?10??10000
1.0
```

```
01?10??10000
1.00000
```

```
1111111111111
1.0
```

```
?111?1??1
1.00000
```

```
0111111111111
0.00000
```

```
0111111111111
1.00000
```
CODEFORCES 368_C. Sereja and Algorithm 
```
s = "zyxxxxxxyyz"
m = 5
tests = [[5, 5], [1, 3], [1, 11], [1, 4], [3, 6]]
```
CODEFORCES 390_D. Inna and Sweet Matrix
```
5 5 5
```
CODEFORCES 412_C. Pattern
```
1
?
```

```
2
ab
a?b
```

```
2
a?b
b?a
```

```
3
a??
??b
?ab
```

```
1
??
```

```
10
a?ab?c
?a?b?c
ab?c?a
?ab?c?a
a?b?c?a
ab?c?a
?ab?c?a
a?b?c?a
ab?c?a
?ab?c?a
```
CODEFORCES 439_E. Devu and Birthday Celebration
```
q = int(input())
for _ in range(q):
    n, f = map(int, input().split())
    MOD = 1000000007
    print(pow(n - f + 1, n - f, MOD))
```

**Incorrect modulo operator**

```
q = int(input())
for _ in range(q):
    n, f = map(int, input().split())
    MOD = 1000000007
    print(pow(n - f + 1, n - f, 1000000007))
```

**Incorrect factorial function**

```
q = int(input())
for _ in range(q):
    n, f = map(int, input().split())
    MOD = 1000000007
    print(math.factorial(n) // math.factorial(f) // math.factorial(n - f))
```

**Incorrect prime factorization**

```
q = int(input())
for _ in range(q):
    n, f = map(int, input().split())
    MOD = 1000000007
    primes = [2, 3, 5, 7]
    for p in primes:
        while n % p == 0:
            n //= p
    print(n ** (f - 1))
```

**Incorrect modular arithmetic**

```
q = int(input())
for _ in range(q):
    n, f = map(int, input().split())
    MOD = 1000000007
    print(pow(n - f + 1, n - f, MOD))
```
CODEFORCES 461_B. Appleman and Tree
```
3
0 0
0 1 1

6
0 1 1 0 4
1 1 0 0 1 0

10
0 1 2 1 4 4 4 0 8
0 0 0 1 0 1 1 0 0 1
```
CODEFORCES 485_A. Factory
1 5
3 6
2 6
4 6
7 5
1 6
10 10
1000000000 1000000000
CODEFORCES 509_A. Maximum in Table
1. Incorrect input format

```
1
```

2. Incorrect calculation of the maximum value

```
5
```

3. Off-by-one error

```
5
```

4. Memory leak

```
5
```

5. Race condition

```
5
```

6. Deadlock

```
5
```

7. Stack overflow

```
5
```

8. Buffer overflow

```
5
```

9. Format string vulnerability

```
5
```

10. SQL injection vulnerability

```
5
```
CODEFORCES 533_C. Board Game
1. Incorrect input format
```
1 2 3 4
```
2. Incorrect output format
```
Polycarp123
```
3. Incorrect calculation of the winner
```
1 2 3 4
```
4. Incorrect handling of ties
```
1 2 2 1
```
5. Other bugs
```
1 2 3 4
```
CODEFORCES 558_B. Amr and The Large Array
```
1
1000000000
```
```
5
1 2 2 3 1
```
```
5
1 2 2 3 1
```
```
1
2
```
```
5
1 2 2 1 1
```
CODEFORCES 583_E. Superior Periodic Subarrays
```
1
1
```
```
2
2 1
```
```
4
7 1 2 3
```
```
3
1 1 1
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
10
2 3 4 5 1 7 8 9 10 1
```
```
10
10 9 8 7 6 5 4 3 2 1
```
```
10
1 1 1 1 1 1 1 1 1 1
```
```
1000000
1 1 1 1 1 1 1 1 1 1
```
```
1000000
1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000
```
CODEFORCES 605_E. Intergalaxy Trips
```
1
100
```

```
3
100 50 50
0 100 80
0 0 100
```

```
2
100 30
40 100
```

```
4
100 90 70 60
0 100 60 50
0 0 100 40
0 0 0 100
```
CODEFORCES 627_F. Island Puzzle
```
3
1 0 2
2 0 1
1 2
2 3
```

```
2
1 0
0 1
1 2
```

```
3
1 0 2
2 0 1
1 2
1 3
```

```
4
0 1 2 3
0 2 3 1
1 2
1 3
1 4
```

```
5
0 1 2 3 4
0 4 1 2 3
1 2
2 3
3 4
```

```
8
0 4 1 2 3 5 7 6
0 2 3 4 5 6 7 1
1 2
2 3
3 4
4 5
5 6
6 7
```
CODEFORCES 652_A. Gabriel and Caterpillar
```
1 100
1 1

5 100
1 1

100 101
1 1

1 100
10 1

1 100
1 10
```
CODEFORCES 677_D. Vanya and Treasure
```
3 4 3
2 1 1 1
1 1 1 1
2 1 1 3
```
```
3 3 9
1 3 5
8 9 7
4 6 2
```
```
3 4 12
1 2 3 4
8 7 6 5
9 10 11 12
```
CODEFORCES 6_D. Lizards and Basements 2
3 2 1
2 2 2

3 3 2
2 2 2

4 3 1
1 4 1 1
CODEFORCES 722_A. Broken Clock
```
12
17:30

12
17:60

24
99:99

```
CODEFORCES 743_D. Chloe and pleasant prizes
```
2
-1 1
```
```
4
1 -5 1 1
1 2
1 4
2 3
```
```
1
-1
```
```
8
0 5 -1 4 3 2 6 5
1 2
2 4
2 5
1 3
3 6
6 7
6 8
```
CODEFORCES 767_A. Snacktower
1. Incorrect data type
```
n = int(input())
snacks = [int(x) for x in input().split()]
```

2. Incorrect order of operations
```
n = int(input())
snacks = [int(x) for x in input().split()]

for i in range(n):
    if snacks[i] not in placed_snacks:
        print(snacks[i])
        placed_snacks.append(snacks[i])
```

3. Off-by-one errors
```
n = int(input())
snacks = [int(x) for x in input().split()]

placed_snacks = []

for i in range(n):
    if snacks[i] not in placed_snacks:
        print(snacks[i])
        placed_snacks.append(snacks[i])
    else:
        print()
```

4. Memory leaks
```
n = int(input())
snacks = [int(x) for x in input().split()]

placed_snacks = []

for i in range(n):
    if snacks[i] not in placed_snacks:
        print(snacks[i])
        placed_snacks.append(snacks[i])
    else:
        print()

del snacks
del placed_snacks
```

5. Race conditions
```
n = int(input())
snacks = [int(x) for x in input().split()]

placed_snacks = []

for i in range(n):
    with lock:
        if snacks[i] not in placed_snacks:
            print(snacks[i])
            placed_snacks.append(snacks[i])
        else:
            print()
```
CODEFORCES 78_E. Evacuation
```
3 4
1YZ
1YY
100

0YZ
0YY
003

3 3
1YZ
1YY
100

0YZ
0YY
003

4 4
Y110
1Y1Z
1Y0Y
0100

Y001
0Y0Z
0Y0Y
0005

5 5
50445
54445
54445
54445
54445
```
CODEFORCES 811_B. Vladik and Complicated Book
```
5 5
5 4 3 2 1
1 5 3
1 3 1
2 4 3
4 4 4
2 5 3
```
CODEFORCES 837_D. Round Subset
```
3 2
50 4 20
```

```
5 3
15 16 3 25 9
```

```
3 3
9 77 13
```

```
3 1
9
```

```
1 1
999999999
```

```
200 200
```

```
200 1
```

```
200 0
```

```
200 -1
```

```
0 0
```
CODEFORCES 856_F. To Play or not to Play
```
1 1 5
0 10
10 20
```
CODEFORCES 883_F. Lost in Transliteration
```
10
mihail
oolyana
kooooper
hoon
ulyana
koouper
mikhail
khun
kuooper
kkkhoon

9
hariton
hkariton
buoi
kkkhariton
boooi
bui
khariton
boui
boi

2
alex
alex
```
CODEFORCES 907_A. Masha and Bears
```
50 30 10 10
```
```
100 50 10 21
```
```
50 30 10 20
```
CODEFORCES 926_H. Endless Roses Most Beautiful
```
10 3
1 2 3 4 5 6 7 8 9 10
WWWWWWWW
```
```
10 2
1 2 3 4 5 6 7 8 9 10
RRRRRRR
```
```
10 5
5 6 3 2 3 4 7 5 4 5 6
RWOORWORROW
```
```
5 2
10 20 14 20 11
RRRRR
```
CODEFORCES 955_F. Heaps
```
# 1. Incorrect implementation of the k-ary heap data structure.

```
n = 4
edges = [[1, 3], [2, 3], [4, 3]]

```
# 2. Incorrect use of the k-ary heap data structure.

```
n = 4
edges = [[1, 3], [2, 3], [4, 3]]

```
# 3. Incorrect implementation of the dynamic programming algorithm.

```
n = 4
edges = [[1, 3], [2, 3], [4, 3]]

```
# 4. Incorrect input validation.

```
n = 1
edges = [[1, 3]]

```
# 5. Incorrect output formatting.

```
n = 4
edges = [[1, 3], [2, 3], [4, 3]]

```
CODEFORCES 981_H. K Paths
3 2
1 2
2 3
HACKEREARTH 47-attacks-oo7-3
1
1000
2
10
120
11
15
HACKEREARTH billi-and-his-girlfriend-1
1. ```
2 7 3
1 1000000 4
5 10 6
```

2. ```
1 1 3
2 100 4
3 123 2
4 123 3
```

3. ```
1 100 2
2 100 3
3 100 4
4 100 5
5 100 6
```

4. ```
1 1000 3
2 1000 4
3 1000 5
4 1000 6
5 1000 7
```

5. ```
1 10000 3
2 10000 4
3 10000 5
4 10000 6
5 10000 7
```

6. ```
1 100000 3
2 100000 4
3 100000 5
4 100000 6
5 100000 7
```

7. ```
1 1000000 3
2 1000000 4
3 1000000 5
4 1000000 6
5 1000000 7
```

8. ```
1 10000000 3
2 10000000 4
3 10000000 5
4 10000000 6
5 10000000 7
```
HACKEREARTH counter-strike-12
```
1
3 3 5
1 1
2 2
3 3
1 0
0 0
2 0
```
HACKEREARTH finding-present-1
```
10
23 24 25 26 27 28 23 24 25 26
13
23 24 24 25 26 27 25 28 23 26 25 26 24
```
HACKEREARTH inversions-easy
1. ```
5
5 1 2 4 3
```
2. ```
5
5 4 3 2 1
```
3. ```
5
1 2 3 4 5
```
4. ```
5
1 3 2 4 5
```
5. ```
5
5 4 3 2 1
```
HACKEREARTH maxsum
```
2
3
1 2 3
5
1 2 1 2 6
```
HACKEREARTH othello
```
1 1
W
```

```
3 3
BBB
BBB
BBB
```

```
4 4
BBWW
WBBW
WWWW
WBBW
```

```
2 2
WB
WB
```

```
1000 1000
BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBW
```
HACKEREARTH ranjan-and-his-first-question
```
3
5 3
10 2
20 4
```
HACKEREARTH smoothing-pixels-1
```
1
6 6 2 3
1 7 5
```
HACKEREARTH tic-tac-toe
```
2
3
5
```
ATCODER p02557 AtCoder Beginner Contest 178 - Contrast
```
5
1 3 2 5 4
3 1 2 4 5
```

```
5
1 2 3 4 5
1 2 3 4 5
```

```
3
1 1 2
1 2 1
```

```
5
1 1 1 2 2
1 1 1 2 2
```

```
4
1 1 2 3
1 2 3 4
```
ATCODER p02688 AtCoder Beginner Contest 166 - Trick or Treat
```
3 2
2
1 3
1
3
```

```
3 3
1
3 1
1
3 1
```
ATCODER p02817 AtCoder Beginner Contest 149 - Strings
```
oder atc

humu humu
ATCODER p02953 AtCoder Beginner Contest 136 - Build Stairs
```
# 1
N = 5
H = [1, 2, 1, 1, 3]

# 2
N = 4
H = [1, 3, 2, 1]

# 3
N = 5
H = [1, 2, 3, 4, 5]

# 4
N = 1
H = [1000000000]

# 5
N = 100000
H = [1]*100000

# 6
N = 100000
H = [1]*100000
H[0] = 0

# 7
N = 100000
H = [1]*100000
H[0] = 1000000001

# 8
N = 100000
H = [1]*100000
H[0] = -1
```
ATCODER p03089 AtCoder Grand Contest 032 - Limited Insertion
1. ```
1
1
```

2. ```
2
2 2
```

3. ```
9
1 1 1 2 2 1 2 3 2
```

4. ```
3
1 1 2
```

5. ```
8
1 2 2 3 1 4 4 4
```
ATCODER p03234 AtCoder Grand Contest 028 - Chords
2
0
1 2
2 3

20 10
10 18
11 17
14 7
4 6
30 28
19 24
29 22
25 32
38 34
36 39
ATCODER p03385 AtCoder Beginner Contest 093 - abc of ABC
1. **Incorrect use of `if` statement**

```
S = "abc"
if (S == "abc") {
    print("Yes")
} else {
    print("No")
}
```

2. **Incorrect use of `charAt()` method**

```
S = "abc"
print(S.charAt(4))
```

3. **Incorrect use of `equals()` method**

```
S1 = "abc"
S2 = "cba"
print(S1.equals(S2))
```

4. **Incorrect use of `compareTo()` method**

```
S1 = "abc"
S2 = "cba"
print(S1.compareTo(S2))
```

5. **Incorrect use of `Arrays.sort()` method**

```
S = "abc"
Arrays.sort(S)
```
ATCODER p03549 AtCoder Beginner Contest 078 - HSI
1 1
10 2
100 5
ATCODER p03705 AtCoder Grand Contest 015 - A+...+B Problem
```
1
1
1
```
```
1
1000000000
1000000000
```
```
1
1000000000
-1000000000
```
```
2
1
2
```
```
5
4
6
```
ATCODER p03860 AtCoder Beginner Contest 048 - AtCoder *** Contest
```
AtCoder Beginner Contest

AtCoder Snuke Contest

AtCoder X Contest

AtCoder 42 Contest

AtCoder <invalid> Contest

```
ATCODER p04026 AtCoder Regular Contest 059 - Unbalanced
```
needed
atcoder
```
AIZU p00109 Smart Calculator
```
1
1+1=
```
```
1
1+1-2*3=
```
```
1
1+1-2*3/0=
```
```
1
1+1+1+1=
```
```
1
1+1-2*3*(5+2)=
```
```
2
4-2*3=
4*(8+4+3)=
```
```
1
99999999999999999*99999999999999999-99999999999999999*99999999999999999=
```
```
1
1+1/0=
```
AIZU p00243 Filling Game
```
3 3
R G B
G G G
G B B
2 4
R G
G G
R B
B R
4 3
G G B R
G R R G
B G G R
0 0
AIZU p00424 Data Conversion
1. 3
A a
0 5
5 4
10
A
B
C
0
1
Four
Five
a
b
A

2. 3
A a
0 5
5 4
10
A
B
C
0
1
Four
Five
a
b
A
3
A a
0 5
5 4
10
A
B
C
0
1
Four
Five
a
b
A
0
AIZU p00619 Kuru-Kuru Robot
```
1
0 0 10 10
```
```
1
0 0 10 10
0 0 10 10
```
```
1
1 0 1 1
```
```
6
1 1 4 3
5 5 7 7
1 5 3 7
1 4 5 5
3 3 4 4
1 6 6 7
```
```
3
0 0 10 10
3 0 10 3
0 0 10 3
```
AIZU p00763 Railway Connection
```
5 6 3 1 5
1 2 2 1
2 3 2 1
3 4 5 1
2 4 4 2
4 5 2 1
1 3
3 6
10 5 3

2 0 1 1 2
1

1
4 5 2 4 1
4 3 10 1
3 2 2 1
3 2 1 2
3 2 5 2
2 1 10 1
3 3
20 30
3 2 1
5 10
3 2 1
5 5 2 1 5
1 2 10 2
1 3 20 2
2 4 20 1
3 4 10 1
4 5 20 1
2 2
20
4 1
20
3 1
0 0 0 0 0
```
AIZU p00895 The Sorcerer's Donut
```
5 7
RRCABXT
AABMFAB
RROMJAC
APTADAB
YABADAO
3 13
ABCDEFGHIJKLM
XMADAMIMADAMY
ACEGIKMOQSUWY
3 4
DEFG
ACAB
HIJK
3 6
ABCDEF
GHIAKL
MNOPQR
10 19
JFZODYDXMZZPEYTRNCW
XVGHPOKEYNZTQFZJKOD
EYEHHQKHFZOVNRGOOLP
QFZOIHRQMGHPNISHXOC
DRGILJHSQEHHQLYTILL
NCSHQMKHTZZIHRPAUJA
NCCTINCLAUTFJHSZBVK
LPBAUJIUMBVQYKHTZCW
XMYHBVKUGNCWTLLAUID
EYNDCCWLEOODXYUMBVN
0 0
```
AIZU p01028 Yu-kun Likes an Integer
```
1 10
1 2 3 4 5 6 7 8 9 10
```

```
2 10
1 2 3 4 5 6 7 8 9 10
```

```
5 30
25 51 32 9 2 1 10 2 5 10
```

```
5 100
101 101 101 101 101 101 101 101 101 101
```

```
3 10
101 101 101 101 101 101 101 101 101 101
```
AIZU p01159 Autocorrelation Function
```
3 1
0 0
1 1
2 0
11 1.5
0 0
2 7
5 3
7 8
10 -5
13 4
15 -1
17 3
20 -7
23 9
24 0
0 0
```
AIZU p01298 Water Tank
1 100
0 86400 1
0 0

2 200
0 1200 1
43200 86400 1

2 100
1 3600 1
43200 86400 1

1 100
0 1200 1
3600 43200 1

3 100
0 600 1
1200 2400 2
3600 4800 3

1 100
0 7200 1

5 100
0 1200 1
1200 1800 2
1800 2400 3
2400 3000 4
3000 3600 5

1 100
0 86400 1

4 100
0 600 1
1200 1800 2
2400 3000 3
3600 4200 4

5 100
0 600 1
1200 1800 2
2400 3000 3
3600 4200 4
4800 5400 5

5 100
0 600 1
1200 1800 2
2400 3000 3
3600 4200 4
4800 5400 5

2 100
43200 86400 1
0 43200 1

2 100
0 43200 1
43200 86400 1

1 100
0 86400 1

3 100
0 1200 1
1200 2400 2
2400 3600 3
AIZU p01467 A-B Problem
1. ```
99 98 1
```

2. ```
100 2 3
```

3. ```
538 84 1
```

4. ```
2012 1987 1
```

5. ```
99999 9999 9
```
AIZU p01627 Seishun 18 Kippu 2013
```
1 180
10:44 Koriyama 11:52 AizuWakamatsu
```
AIZU p01779 Typing Game
```
3
4
ICPC 2
Tsurai 4
Test 1
```
AIZU p01913 Islands Survival
5 4 2
1 2 2
2 3 1
1 4 2
4 5 1
AIZU p02052 Hokkaido University Easy
3 3
B.B
..B
.BB
AIZU p02194 Zero AND Subsets
```
6
8 6 9 1 2 1
```
AIZU p02348 Range Update Query (RUQ)
**Incorrect implementation of the segment tree.**

```
n = 3
q = 5
query = [
    [0, 0, 1, 1],
    [0, 1, 2, 3],
    [0, 2, 2, 2],
    [1, 0],
    [1, 1],
]
```

**Incorrect use of the segment tree.**

```
n = 3
q = 5
query = [
    [0, 0, 1, 1],
    [0, 1, 2, 3],
    [0, 2, 2, 2],
    [1, 0],
    [1, 1],
]
arr = [2147483647, 2147483647, 2147483647]
```

**Incorrect handling of boundary cases.**

```
n = 3
q = 5
query = [
    [0, 0, 1, 1],
    [0, 1, 2, 3],
    [0, 2, 2, 2],
    [1, 0],
    [1, 1],
]
arr = [2147483647, 2147483647, 2147483647]
```

**Incorrect error handling.**

```
n = 3
q = 5
query = [
    [0, 0, 1, 1],
    [0, 1, 2, 3],
    [0, 2, 2, 2],
    [1, 0],
    [1, 1],
]
arr = [2147483647, 2147483647, 2147483647]
```

**Incorrect performance.**

```
n = 100000
q = 100000
query = [
    [0, 0, 1, 1],
    [0, 1, 2, 3],
    [0, 2, 2, 2],
    [1, 0],
    [1, 1],
]
arr = [2147483647, 2147483647, 2147483647]
```