CODECHEF alg2n
5
1
2
3
4
5
CODECHEF chefston
```
1
3 10
3 4 5
4 4 5
```
CODECHEF drgnbool
```
1
2 3
10 1
20 2
5 2
5 2
18 1
```
CODECHEF junongf
2
2 4
1 1 1 1 1 1
1 1 1 1 1 1
3 5
2 1 1 1 1 1
1 1 0 0 0 2
CODECHEF numgame
1
1
2
2
3
3
4
4
5
5
6
6
7
7
8
8
9
9
10
10
CODECHEF smcd1
5
.###.
CODEFORCES 1004_E. Sonya and Ice Cream
```
6 2
1 2 3
2 3 4
4 5 2
4 6 3
2 4 6

5 3
1 2 5
5 7 2
3 2 6

10 3
1 2 5
5 7 2
3 2 6
10 6 3
3 8 1
6 4 2
4 1 6
6 9 4
5 2 5
```
CODEFORCES 1028_E. Restore Array
```
1. Incorrect input format:

```
1 2 3
```

2. Incorrect output format:

```
YES
1 2 3
```

3. Incorrect algorithm:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = b[i]
print("YES")
print(*a)
```

4. Incorrect data type:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = str(b[i])
print("YES")
print(*a)
```

5. Off-by-one error:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = b[i]
print("YES")
print(*a[1:])
```

6. Memory leak:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = b[i]
print("YES")
print(*a)
del a
```

7. Infinite loop:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = b[i]
    while True:
        pass
```

8. Stack overflow:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = b[i]
    for j in range(n):
        for k in range(n):
            for l in range(n):
                pass
```

9. Segmentation fault:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = b[i]
    a[i] = a[i] * 10 ** 9
```

10. Other errors:

```
n = int(input())
b = list(map(int, input().split()))
a = [0] * n
for i in range(n):
    a[i] = b[i]
print("YES")
print(*a[1:])
```
CODEFORCES 1047_A. Little C Loves 3 I
3
233
1000000003
1000000000
CODEFORCES 1070_J. Streets and Avenues in Berhattan
```
1
1 1 2
A
```
```
1
1 2 3
A
```
```
1
2 2 4
AA
```
```
1
2 3 5
AAA
```
```
1
3 4 6
AAAA
```
```
1
3 3 6
AAAB
```
```
1
4 4 8
CCCC
```
```
1
4 4 8
CZBBCZBC
```
```
1
1 1 4
TTCT
```
```
1
2 3 9
EEZZEEZZZ
```
```
1
2 7 9
EEZZEEZZZ
```
```
1
3 5 12
AAAABBBBCC
```
```
1
4 6 12
AAAAAAAABBBBBC
```
```
1
5 7 12
CCCCCCCCCC
```
```
1
6 8 12
AAAAAAAAAABBBBBC
```
```
1
7 9 12
AAAAAAAAAAAABBBBBBCCCC
```
```
1
8 10 12
AAAAAAAAAAAAAAAAAAAAAAAAAABBBBBC
```
```
1
9 11 12
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBC
```
```
1
10 12 12
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBC
```
CODEFORCES 1092_E. Minimal Diameter Forest
4 2
1 2
2 3


4 2
1 2
2 3


3 0


4 0


5 3
1 2
2 3
3 4


2 1
1 2
CODEFORCES 1111_D. Destroy the Colony
```
abba
2
1 4
1 2
```
CODEFORCES 1141_B. Maximal Continuous Rest
**Incorrect input format**

```
5 1 0 1 0 1
```

**Incorrect output format**

```
2
```

**Incorrect logic**

```
n = int(input())
a = list(map(int, input().split()))
max_rest = 0
for i in range(n):
    if a[i] == 1:
        max_rest = max(max_rest, i)
print(max_rest)
```

**Memory leak**

```
n = int(input())
a = list(map(int, input().split()))
max_rest = 0
for i in range(n):
    if a[i] == 1:
        max_rest = max(max_rest, i)
print(max_rest)
```

**Timeout**

```
n = int(input())
a = list(map(int, input().split()))
max_rest = 0
for i in range(n):
    if a[i] == 1:
        max_rest = max(max_rest, i)
print(max_rest)
```

**Incorrect data**

```
n = int(input())
a = list(map(int, input().split()))
max_rest = 0
for i in range(n):
    if a[i] == 1:
        max_rest = max(max_rest, i)
print(max_rest)
```
CODEFORCES 115_A. Party
5
-1
1
2
1
-1
CODEFORCES 1182_A. Filling Shapes
```
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
```
CODEFORCES 11_A. Increasing Sequence
```
2 1
1 2
```
```
4 2
1 3 3 2
```
```
6 2
1 3 3 2 1 1
```
```
5 1
1 1 2 3 4
```
```
2 1
1000000000 1000000000
```
```
1 1000000000
```
CODEFORCES 1217_D. Coloring Edges
```
2 1
1 2
```

```
4 3
1 2
2 3
3 1
```

```
3 3
1 2
2 3
3 1
```

```
3 4
1 2
1 3
3 2
1 4
```

```
4 5
1 2
1 3
3 4
2 4
1 4
```

CODEFORCES 1240_A. Save the Nature
```
1
1
100
50 1
49 1
100
```
CODEFORCES 1260_B. Obtain Two Zeroes
```
1
1 2
```
```
1
1000000000 1000000000
```
```
3
1 1000000000
1000000000 1
1000000000 1000000000
```
```
1
0 0
```
```
2
-1 1
0 0
```
```
1
999999999 999999999
```
CODEFORCES 1282_B2. K for the Price of One (Hard Version)
6
10
5
4
5
5
10

CODEFORCES 1302_C. Segment tree or Fenwick?
```
1
5 5
1 1 6
1 2 7
2 1 5
1 3 4
2 1 5
```

```
2
10 5
1 1 3
1 2 4
2 1 5
1 10 1
2 1 10
5 3
1 3 7
1 1 4
2 1 5
```

```
3
6 5
2 1 6
1 3 2
2 2 4
1 6 3
2 1 6
5 3
1 3 7
1 1 4
2 1 5
10 10
1 1 10
1 2 10
1 3 10
1 4 10
1 5 10
1 6 10
1 7 10
1 8 10
1 9 10
1 10 10
```

```
4
5 2
1 1 6
2 1 5
10 10
1 1 10
1 2 10
1 3 10
1 4 10
1 5 10
1 6 10
1 7 10
1 8 10
1 9 10
1 10 10
```
CODEFORCES 1326_C. Permutation Partitions
```
3 2
2 1 3
```
```
5 5
2 1 5 3 4
```
```
7 3
2 7 3 1 5 4 6
```
```
20 2
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```
```
20 5
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```
```
1000000 1000000
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```
CODEFORCES 1345_B. Card Constructions
```
1
3
```
```
5
1
14
15
24
1
```
```
6
2
4
6
8
10
12
```
```
10
1
2
3
4
5
6
7
8
9
10
```
CODEFORCES 1367_A. Short Substrings
1. Incorrect input format

```
1
abbaac
```

2. Incorrect output format

```
1
abbaac

2
ac
```

3. Incorrect algorithm

```
1
abbaac
```

4. Incorrect data type

```
1
abbaac
```

5. Off-by-one error

```
1
abbaac
```
CODEFORCES 1388_A. Captain Flint and Crew Recruitment
```
1
1
```
```
1
23
```
```
1
31
```
```
1
36
```
```
1
44
```
```
1
100
```
```
1
258
```
CODEFORCES 1408_H. Rainbow Triples
```
1
1
```
```
1
2
```
```
3
0 0 0
```
```
4
0 0 1 2
```
```
5
0 0 1 2 3
```
```
6
0 1 3 2 0 0
```
```
7
0 0 0 0 0 1 0
```
```
8
0 0 1 0 2 0 0 0
```
```
9
0 0 1 0 0 2 0 0 0
```
```
10
0 0 0 0 0 0 0 0 0 1
```
```
11
0 0 0 0 0 0 0 0 0 1 2
```
```
12
0 1 0 2 2 2 0 0 3 3 4 0
```
CODEFORCES 142_B. Help General
1. Incorrect input format
```
2
1000
```

2. Incorrect output format
```
1 2
```

3. Incorrect calculation
```
2 4
```

4. Memory leak
```
n, m = map(int, input().split())
```

5. Thread safety
```
n, m = map(int, input().split())
```

6. Security vulnerabilities
```
n, m = map(int, input().split())
```
CODEFORCES 1452_F. Divide Powers
```
1 1
0
1 1 0
```
```
2 1
1 0
1 1 0
```
```
6 11
0 1 0 0 1 0
2 1 5
2 4 18
1 1 0
2 2 5
2 0 17
1 0 3
2 1 2
1 1 4
1 4 0
1 5 1
2 2 8
```
```
1 1
0
```
```
1 1
1
```
```
1 2
1
```
```
10 5
0 1 0 0 0 0 0 0 0 0
1 1 1
2 1 0
```
CODEFORCES 1476_D. Journey
**Incorrect input format:**

```
1
5
RRRLRR
```

**Incorrect output format:**

```
1 1 2 2 3 3 4
```

**Incorrect logic:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```

**Memory leaks:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```

**Race conditions:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```

**Synchronization issues:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```

**Deadlocks:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```

**Uncaught exceptions:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```

**Security vulnerabilities:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```

**Performance problems:**

```
1
5
RRRLRR
```

```
1 1 2 2 3 3 4
```
CODEFORCES 1503_A. Balance the Bits
```
3
6
101101
10
1001101101
4
1100
```
CODEFORCES 1526_E. Oolimry and Suffix Array
```
3 2
0 2 1

5 1
0 1 2 3 4

6 200000
0 1 2 3 4 5

7 6
3 2 4 1 0 5 6
```
CODEFORCES 158_C. Cd and pwd commands
```
1
cd
```
```
1
cd /a/b
```
```
2
cd /a/b
cd ../a/b
```
```
3
pwd
cd /a/b
pwd
```
```
4
cd /a/b
pwd
cd ..
pwd
```
```
5
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
```
```
6
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
```
```
7
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
```
```
8
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
```
```
9
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
```
```
10
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
cd /a/b
pwd
cd ..
pwd
```
CODEFORCES 178_C2. Smart Beaver and Resolving Collisions
```
10 2 7
+ 11 0
+ 22 2
+ 33 6
+ 44 0
+ 55 0
- 22
+ 66 0
```
CODEFORCES 200_A. Cinema
```
# 200_A. Cinema
n, m, k = map(int, input().split())
seats = [[0 for _ in range(m)] for _ in range(n)]
for i in range(k):
    x, y = map(int, input().split())
    seats[x-1][y-1] = 1
    
for i in range(k):
    x, y = map(int, input().split())
    ans = [1e9, 1e9]
    for j in range(n):
        for k in range(m):
            if seats[j][k] == 0 and abs(j-x) + abs(k-y) < ans[0]:
                ans = [abs(j-x) + abs(k-y), j*m+k]
    print(ans[1]//m+1, ans[1]%m+1)
```
CODEFORCES 224_E. Partial Sums
1. Incorrect input format
```
3 1
1 2 3
```

2. Incorrect output format
```
3 14 15 92 6
```

3. Incorrect calculation
```
3 1
1 2 3
```

4. Memory overflow
```
1000000000 1000000000
```

5. Timeout
```
1000000000 1000000000
```
CODEFORCES 249_C. Piglet's Birthday
```
3
2 2 3
5
1 2 1
2 1 2
1 2 2
3 1 1
3 2 2
```
CODEFORCES 273_D. Dima and Figure
1. Incorrect input format:
```
2
```
2. Incorrect output format:
```
2 3
```
3. Incorrect calculation:
```
2 3
13
```
4. Modulo arithmetic error:
```
2 3
13
```
5. Time limit exceeded:
```
2 3
13
```
6. Memory limit exceeded:
```
2 3
13
```
7. Incorrect variable initialization:
```
2 3
13
```
8. Off-by-one error:
```
2 3
13
```
9. Incorrect data structure:
```
2 3
13
```
10. Incorrect algorithm:
```
2 3
13
```
CODEFORCES 297_A. Parity Game
```
0011
1110

01011
0110

0011
1110

0000
0000

0000
0001
```
CODEFORCES 31_D. Chocolate
1. Incorrect input format

```
1 2 2
1 0 1 2
0 1 1 1
```

2. Incorrect data type

```
1 2 2
1 0 a 2
0 1 1 1
```

3. Missing or extra data

```
1 2 2
1 0 1 2
```

4. Incorrect assumptions

```
1 2 2
1 0 1 2
0 1 1 1
1 1 2 1
```

5. Off-by-one errors

```
1 2 2
1 0 1 2
0 1 1 1
1 1 1 2
```

6. Logical errors

```
1 2 2
1 0 1 2
0 1 1 1
1 1 2 2
```

7. Undefined behavior

```
1 2 2
1 0 1 2
0 1 1 1
1 1 2 3
```

8. Memory errors

```
1 2 2
1 0 1 2
0 1 1 1
1 1 2 3
```

9. Race conditions

```
1 2 2
1 0 1 2
0 1 1 1
1 1 2 3
```

10. Deadlocks

```
1 2 2
1 0 1 2
0 1 1 1
1 1 2 3
```
CODEFORCES 344_D. Alternating Current
```
# 344D. Alternating Current

def main():
    s = input()
    ans = "Yes"
    for i in range(len(s) - 1):
        if s[i] == "-" and s[i + 1] == "+":
            ans = "No"
    print(ans)


if __name__ == "__main__":
    main()
```

**Incorrect input format**

```
# 344D. Alternating Current

def main():
    s = input()
    ans = "Yes"
    for i in range(len(s) - 1):
        if s[i] == "-" and s[i + 1] == "+":
            ans = "No"
    print(ans)


if __name__ == "__main__":
    main()

# Error: invalid character in input: '\x1b'
```

**Incorrect output format**

```
# 344D. Alternating Current

def main():
    s = input()
    ans = "Yes"
    for i in range(len(s) - 1):
        if s[i] == "-" and s[i + 1] == "+":
            ans = "No"
    print(ans)


if __name__ == "__main__":
    main()

# Error: expected 'NoneType' for 3rd param but got 'str' instead
```

**Incorrect logic**

```
# 344D. Alternating Current

def main():
    s = input()
    ans = "Yes"
    for i in range(len(s) - 1):
        if s[i] == "-" and s[i + 1] == "+":
            ans = "No"
    print("Yes" if ans == "Yes" else "No")


if __name__ == "__main__":
    main()

# Error: expected 'str' for 1st argument of 'print'
```

**Incorrect implementation**

```
# 344D. Alternating Current

def main():
    s = input()
    ans = "Yes"
    for i in range(len(s) - 1):
        if s[i] == "-" and s[i + 1] == "+":
            ans = "No"
    print("Yes" if ans == "Yes" else "No")


if __name__ == "__main__":
    main()

# Error: local variable 's' referenced before assignment
```

**Incorrect testing**

```
# 344D. Alternating Current

def main():
    s = input()
    ans = "Yes"
    for i in range(len(s) - 1):
        if s[i] == "-" and s[i + 1] == "+":
            ans = "No"
    print("Yes" if ans == "Yes" else "No")


if __name__ == "__main__":
    main()

# Error: input not read
```
CODEFORCES 368_A. Sereja and Coat Rack
**Incorrect input format**
```
1 1
2
10
```
**Incorrect variable type**
```
2 1
2 1
a
```
**Incorrect logic**
```
2 1
2 1
10
```
**Off-by-one errors**
```
2 1
2 1
11
```
**Memory leaks**
```
2 1
2 1
10
while True:
    pass
```
**Race conditions**
```
import threading

def foo():
    global x
    x += 1

def bar():
    global x
    x -= 1

t1 = threading.Thread(target=foo)
t2 = threading.Thread(target=bar)

t1.start()
t2.start()

t1.join()
t2.join()

print(x)
```
**Deadlocks**
```
import threading

def foo():
    global x
    x = 1

def bar():
    global x
    x = 2

t1 = threading.Thread(target=foo)
t2 = threading.Thread(target=bar)

t1.start()
t2.start()

t1.join()
t2.join()

print(x)
```
CODEFORCES 390_B. Inna, Dima and Song
```
1
1
2
```
CODEFORCES 412_A. Poster
```
10 5
GO?GO!
```

```
10 1
GO?GO!
```

```
10 10
GO?GO!
```

```
3 1
R1
```

```
100 1
A
```
CODEFORCES 439_C. Devu and Partitioning of the Array
5 5 3
2 6 10 5 9
5 5 3
7 14 2 9 5
5 3 1
1 2 3 7 5
CODEFORCES 460_E. Roland and Rose
1. ```
2 1
```

Incorrect input format: the number of towers is less than 2.

2. ```
4 -1
```

Incorrect input format: the radius is negative.

3. ```
1 1
```

Incorrect solution: the sum of squared distances is not maximum.

4. ```
1000000000 1
```

Incorrect time complexity: the solution runs in time O(n^3).

5. ```
1000000000 1000000000
```

Incorrect space complexity: the solution uses more space than O(n).
CODEFORCES 484_D. Kindergarten
```
1
1
```
```
5
1 2 3 1 2
```
```
3
3 3 3
```
```
10
-100 -99 -98 -97 -96 -95 -94 -93 -92 -91
```
```
100
100 100 100 100 100 100 100 100 100 100
```
CODEFORCES 508_D. Tanya and Password
```
# 508_D. Tanya and Password

n = int(input())
s = []
for i in range(n):
    s.append(input())

if len(set(s)) == n:
    print("YES")
    print("".join(s))
else:
    print("NO")
```

**Incorrect input format:**
```
n = 1
s = ["a"]
```

**Incorrect data type:**
```
n = "1"
s = ["a"]
```

**Malformed data:**
```
n = 1
s = ["a"]
```

**Incorrect logic:**
```
n = 2
s = ["ab", "aa"]
```

**Incorrect output format:**
```
n = 1
s = ["a"]
```
CODEFORCES 533_A. Berland Miners
```
6
5 8 4 6 3 12
1 2
1 3
4 2
2 5
6 3
6
7 4 2 5 3 11


7
10 14 7 12 4 50 1
1 2
2 3
2 4
5 1
6 5
1 7
6
7 3 4 8 8 10


3
4 2 8
1 2
1 3
2
17 15
```
CODEFORCES 557_E. Ann and Half-Palindrome
```
# 557_E. Ann and Half-Palindrome

s = input()
k = int(input())

def is_half_palindrome(s):
  for i in range(1, len(s), 2):
    if s[i] != s[len(s) - i - 1]:
      return False
  return True

def get_longest_half_palindrome(s):
  longest_half_palindrome = ""
  for i in range(len(s)):
    for j in range(i + 1, len(s) + 1):
      if is_half_palindrome(s[i:j]) and len(s[i:j]) > len(longest_half_palindrome):
        longest_half_palindrome = s[i:j]
  return longest_half_palindrome

def get_kth_half_palindrome(s, k):
  longest_half_palindromes = []
  for i in range(len(s)):
    for j in range(i + 1, len(s) + 1):
      if is_half_palindrome(s[i:j]):
        longest_half_palindromes.append(s[i:j])
  longest_half_palindromes.sort()
  return longest_half_palindromes[k - 1]

print(get_kth_half_palindrome(s, k))
```
CODEFORCES 583_C. GCD Table
```
1
1
```

```
4
2 1 2 3 4 3 2 6 1 1 2 2 1 2 3 2
```

```
2
1 1
```

```
5
1 1 1 1 1
```
CODEFORCES 605_C. Freelancer's Dreams
```
# Incorrect use of floating-point numbers

n, p, q = map(int, input().split())

for _ in range(n):
    a, b = map(int, input().split())

print(p // a + q // b)

# Correct use of floating-point numbers

n, p, q = map(int, input().split())

for _ in range(n):
    a, b = map(int, input().split())

print(p / a + q / b)

# Not handling edge cases correctly

n, p, q = map(int, input().split())

if n == 0:
    raise ValueError('Number of projects must be non-negative')

for _ in range(n):
    a, b = map(int, input().split())

print(p / a + q / b)

# Correct handling of edge cases

n, p, q = map(int, input().split())

if n < 0:
    raise ValueError('Number of projects must be non-negative')

for _ in range(n):
    a, b = map(int, input().split())

print(p / a + q / b)

# Using incorrect data types

n, p, q = map(int, input().split())

if n > 255:
    raise ValueError('Number of projects must be non-negative')

for _ in range(n):
    a, b = map(int, input().split())

print(p / a + q / b)

# Correct use of data types

n, p, q = map(int, input().split())

if n < 0:
    raise ValueError('Number of projects must be non-negative')

for _ in range(n):
    a, b = map(int, input().split())

print(p / a + q / b)
```
CODEFORCES 627_D. Preorder Test
```
5 3
3 6 1 4 2
1 2
2 4
2 5
1 3

4 2
1 5 5 5
1 2
1 3
1 4

1 1

1 1
1 2

6 3
1 3 4 2 5 6
1 2
2 4
5 6
```
CODEFORCES 651_D. Image Preview
```
10 1 2 10
hwhwhwhwhwhwhw
```
CODEFORCES 677_B. Vanya and Food Processor
```
5 6 3
5 4 3 2 1

5 6 3
5 5 5 5 5

5 6 3
1 2 1 1 1
```
CODEFORCES 6_B. President's Office
1. Incorrect input format:
```
3 4 R
G.B.
.RR.
TTT.
```

2. Incorrect desk dimensions:
```
3 4 R
G.B.
.RR.
TTT.
```

3. Duplicate desk colors:
```
3 4 R
G.B.
.RR.
TTT.
```

4. Inconsistent desk shapes:
```
3 4 R
G.B.
.RR.
TTT.
```

5. Incorrect desk locations:
```
3 4 R
G.B.
.RR.
TTT.
```

6. Incorrect output format:
```
3 4 R
G.B.
.RR.
TTT.
```
CODEFORCES 721_D. Maxim and Array
```
1 1 1
1
```

```
1 1 0
0
```

```
5 3 1
5 4 3 5 2
```

```
5 3 1
5 4 4 5 5
```

```
3 2 7
5 4 2
```
CODEFORCES 743_B. Chloe and the sequence 
```
1 1
3 2
4 8
21 100
```
CODEFORCES 766_D. Mahmoud and a Dictionary
```
3 3 4
hate love like
1 love like
2 love hate
1 hate like
love like
love hate
like hate
hate like
```
CODEFORCES 78_C. Beaver Game
```
1 15 4
4 9 5
```
CODEFORCES 810_E. Find a car
```
1
1 1 1 1 1
```

```
4
1 1 1 1 1
3 2 5 4 5
1 1 5 5 10000
1 4 2 5 2
```

```
4
1 1 50 50 1000000007
3 2 50 50 1000000007
1 1 50 50 1000000007
1 4 2 50 1000000007
```
CODEFORCES 837_B. Flag of Berland
```
6 5
RRRRR
RRRRR
BBBBB
BBBBB
GGGGG
GGGGG

6 7
RRRGGGG
RRRGGGG
RRRGGGG
RRRBBBB
RRRBBBB
RRRBBBB

4 4
RRRR
RRRR
BBBB
GGGG
```
CODEFORCES 856_D. Masha and Cactus
```
# 5

# 3 3
1 1 2 2 3 3
4 5 1
6 7 1
2 3 1

# 1

# 4 1
1 1 2 2 3
4 5 1

# 4

# 3 1
1 1 2 2 3
4 5 1

# 1

# 3 0
1 1 2 2 3

# 0

# 3 0
1 1 2 2 3
```
CODEFORCES 883_D. Packmen Strike Back
```
6
*.P*P*
```
```
8
*...P..*
```
```
10
*..P*P..*..P*
```
```
8
..*..P*..
```
```
10
..P..*P..*P..
```
```
12
..*..P*P..*P..
```
CODEFORCES 906_D. Power Tower
```
3 10
1 2 3
2
1 3
2 3
```
CODEFORCES 926_F. Mobile Communications
```
3 6 7
2 13
4 20
7 9
```
CODEFORCES 955_D. Scissors
**Incorrect input format**

```
1 1 1
a
b
```

**Incorrect output format**

```
1 1 1
a
b
Yes
1 2
```

**Incorrect logic**

```
1 1 1
a
b
Yes
1 1
```

**Memory leaks**

```
1 1 1
a
b
Yes
1 1
```

**Race conditions**

```
1 1 1
a
b
Yes
1 1
```

**Security vulnerabilities**

```
1 1 1
a
b
Yes
1 1
```

**Bugs in third-party libraries**

```
1 1 1
a
b
Yes
1 1
```

**Incorrect compiler settings**

```
1 1 1
a
b
Yes
1 1
```

**Incorrect operating system settings**

```
1 1 1
a
b
Yes
1 1
```

**Incorrect hardware configuration**

```
1 1 1
a
b
Yes
1 1
```
CODEFORCES 981_F. Round Marriage
```
2 4
0 1
2 3

10 100
3 14 15 92 65 35 89 79 32 38
2 71 82 81 82 84 5 90 45 23
```
HACKEREARTH 3rdsmallestandlargest-1
1
999999999999

HACKEREARTH big-p-and-punishment-5
1
3 2 1
1 2
2 3
2
HACKEREARTH count-the-characters
```
1
a
```
```
2
a
b
```
```
3
ab
bc
ca
```
```
4
aabb
bbcc
caac
ddcc
```
```
5
abcde
baccd
eeabcg
ffff
```
HACKEREARTH finding-numbers
5
1 1000000000 1000000000
1000000000 1 1000000000
1 1 2
2 8 1
4 7 9
HACKEREARTH interval-count-12
```
1
1 1 10
3
2 3 5

3
1 1 10
1
2

0
1 1000000000 1000000001
1
1

1
1000000001 1000000000
1
```
HACKEREARTH maximum-subset
1
4
1 2 3 4
HACKEREARTH organize-contest
1
abcde -1000
HACKEREARTH rani-and-ladders-2
```
1
64 4
2 12
11 52
57 61
59 64
```
HACKEREARTH smallest-positive-integer
```
16
```
HACKEREARTH think-a-thon-series-1
1
10 11 2

2
19 57 3
24 97 2

3
10000 10001 10
10000 10001 11
10000 10001 12

ATCODER p02555 AtCoder Beginner Contest 178 - Redistribution
7
2
1729
ATCODER p02686 AtCoder Beginner Contest 167 - Bracket Sequencing
1. ```
2
)
(()
```

2. ```
2
)(
()
```

3. ```
4
((()))
((((((
))))))
()()()
```

4. ```
3
(((
)
)
```
ATCODER p02815 AtCoder Beginner Contest 150 - Change a Little Bit
```
1
1000000000
```
```
2
5 8
```
```
5
52 67 72 25 79
```
ATCODER p02951 AtCoder Beginner Contest 136 - Transfer
```
6 4 3
8 3 9
12 3 7
```
ATCODER p03087 AtCoder Beginner Contest 122 - GeT AC
```
2 1
AC
1 1
```
```
3 1
AC
1
```
```
3 1
CA
1
```
```
10 5
ACGTACGTAC
1 5
4 9
5 10
1 10
```
```
3 1
AC
1
```
ATCODER p03232 AtCoder Grand Contest 028 - Removing Blocks
2
1 2

4
1 1 1 1

10
1 2 4 8 16 32 64 128 256 512
ATCODER p03383 AtCoder Regular Contest 095 - Symmetric Grid
1. Incorrect input format

```
1 2
a
b
```

2. Incorrect output format

```
1 2
a
b

NO
```

3. Incorrect data type

```
1 2
a
b
```

```
YES
```

4. Incorrect logic

```
1 2
a
b
```

```
YES
```

5. Runtime error

```
1 2
a
b
```

```
YES
```

6. Memory error

```
1 2
a
b
```

```
YES
```
ATCODER p03547 AtCoder Beginner Contest 078 - HEX
```
A Z
```
```
A Z
```
```
A Z
```
```
A b
```
```
B a
```
```
A a
```
```
z a
```
```
Z A
```
ATCODER p03703 AtCoder Regular Contest 075 - Meaningful Mean
```
3 6
7
5
7

1 2
1

7 26
10
20
30
40
30
20
10
```
ATCODER p03858 AtCoder Regular Contest 065 - Manhattan Compass
```
5 1 2
1 1
4 3
6 1
5 5
4 8
```
```
6 2 3
1 3
5 3
3 5
8 4
4 7
2 5
```
```
8 1 2
1 5
4 3
8 2
4 7
8 8
3 3
6 6
4 8
```
ATCODER p04023 AtCoder Grand Contest 003 - Sequential operations on Sequence
10 2
10 1000000000000000000

3 2
3 3

1 1
1000000000000000000

1000000000 1
1000000000
AIZU p00107 Carry a Cheese
10 6 8
5
4
8
6
2
5
0 0 0
AIZU p00241 Quaternion Multiplication
```
2
1 2 3 4 7 6 7 8
5 6 7 8 3 2 3 4
0
```
AIZU p00420 Chemical Substance Alpha
```
6 5 8
1 3
2 5
3 4
2 4
2 5
1 1 5 1
1 1 5 2
1 1 5 3
1 1 5 4
1 1 5 5
1 1 5 6
2 3 4 2
1 1 1 1
```
AIZU p00617 Simple GUI Application
```
1
<main>10,10,190,150
10 10
```
AIZU p00761 Recurring Decimals
2012 4
83268 6
1112 4
0 1
99 2
0 0
AIZU p00893 Matrix Calculator
1
A=[1 2 3;4 5 6].


1
A=[[1 2 3;4 5 6] [7 8;9 10] [11;12];13 14 15 16 17 18].


3
B=[3 -2 1;-9 8 7].
C=([1 2 3;4 5 6]+B)(2,3).
D=([1 2 3;4 5 6]+B)([1 2],[2 3]).


5
A=2*[1 2;-3 4]'.
B=A([2 1 2],[2 1]).
A=[1 2;3 4]*3.
A=[2]*[1 2;3 4].
A=[1 2;3 4]*[3].


2
A=[11 12 13;0 22 23;0 0 33].
A=[A A';--A''' A].


2
A=[1 -1 1;1 1 -1;-1 1 1]*3.
A=[A -A+-A;-A'([3 2 1],[3 2 1]) -A'].


1
A=1([1 1 1],[1 1 1 1]).


3
A=[1 2 -3;4 -5 6;-7 8 9].
B=A([3 1 2],[2 1 3]).
C=A*B-B*A+-A*-B-B*-A.


3
A=[1 2 3 4 5].
B=A'*A.
C=B([1 5],[5 1]).


3
A=[-11 12 13;21 -22 23;31 32 -33].
B=[1 0 0;0 1 0;0 0 1].
C=[(A-B) (A+B)*B (A+B)*(B-A)([1 1 1],[3 2 1]) [1 2 3;2 1 1;-1 2 1]*(A-B)].


3
A=[11 12 13;0 22 23;0 0 33].
B=[1 2].
C=------A((((B))),B)(B,B)''''''.


2
A=1+[2]+[[3]]+[[[4]]]+2*[[[[5]]]]*3.
B=[(-[([(-A)]+-A)])].


8
A=[1 2;3 4].
B=[A A+[1 1;0 1]*4;A+[1 1;0 1]'*8 A+[1 1;0 1]''*12].
C=B([1],[1]).
C=B([1],[1 2 3 4]).
C=B([1 2 3 4],[1]).
C=B([2 3],[2 3]).
A=[1 2;1 2].
D=(A*-A+-A)'(A'(1,[1 2]),A'(2,[1 2])).


0
AIZU p01026 Witch Craft Moves
```
7
1
2
3
4
5
6
7
1 2
1 3
3 4
3 5
5 6
5 7
10
0 1 7
0 2 7
1 1 15
0 1 7
0 2 7
0 1 1
1 1 -15
0 1 7
0 2 7
0 1 1
```
AIZU p01157 Online Quiz System
```
1 1
1
1
0 1000
0

2 2
1 2
2
1 2000 o
0 2001 x
0

2 2
1 2
1
1 1000 o
0

2 1
1 2
2
1 1000 o
0

3 2
1 2 10
3
0 3420 o
1 4589 o
2 4638 x
3
1 6577 SUZUMIYA
2 7644 SUZUMIYA
0 19979 YASUZUMI
4 2
150 150 150 150
4
0 1344 HOGEHOGE
1 1466 HOGEHOGE
2 1789 HOGEHOGE
3 19100 GEHO
2
2 1200 SETTEN
3 700 SETTEN
0 0
```
AIZU p01296 Futon
1. 0
2. 1
3. 2
4. 3
5. 4
6. 5
7. 6
8. 7
9. 8
10. 9
AIZU p01465 Testing Circuits
```
(x1&x2)
(x1|x2|x3|x4|x5|x6|x7|x8|x9|x10)
(x1&x2&x3)|(x4&x5&x6)|(x7&x8&x9)|(x10&x11&x12)
(x1|x2|x3|x4|x5|x6|x7|x8|x9|x10)&(x11|x12|x13|x14|x15|x16|x17|x18|x19|x20)
```
AIZU p01625 Princess Tetra's Puzzle
```
3
2 3 2 2 2 1
2 0 1 -1 2 -1
-2 -1 -1 -1 -2 0
6
-1 0 1 0 0 -1
-2 -1 -3 -2 -4 -2
2 -1 2 0 1 -1
4 -2 3 -2 3 -1
1 1 0 1 -1 1
-3 -1 -1 -1 -2 0
5
-1 2 0 2 1 2
-3 1 -2 1 -2 2
-2 0 -2 -1 -3 0
1 -1 0 -1 -1 -1
1 0 2 0 2 -1
4
-2 0 -2 -1 -3 -1
-1 -1 0 -1 1 -1
2 -1 2 0 3 -1
-1 0 0 0 1 0
5
-2 1 3 -1 2 1
-5 2 -5 3 -4 2
-2 -1 0 -1 -3 -1
4 2 5 2 5 3
1 -1 2 -1 -1 -1
0
```
AIZU p01777 Disordered Data Detection
7
4 1 10 5 7 7 3
5
2 5 0
3 6 1
3 6 2
1 7 2
1 7 5
AIZU p01911 Rainy Bus Stops
2 2 1 2
1 2 10 100
1 2 5 500
AIZU p02050 K is Key of Takakkey
3 2
1 1
14
2 2
3 1
3 5
3 1
0 2
1 0
-1 0
3 2
0 2
1 0
-1 0
9 10
8 1
9 19
2 10
1 1
4 17
7 13
3 4
6 13
9 21
0 0
AIZU p02192 K Average Ranges
```
6 6
8 6 9 1 2 1
```
AIZU p02346 Range Sum Query (RSQ)
```
3 5
0 1 1
0 2 2
0 3 3
1 1 2
1 2 2
```