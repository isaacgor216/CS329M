CODECHEF aou
4
2
9
100
17
CODECHEF cielab
1. Incorrect variable type
```
1 2
```
2. Incorrect operator
```
100 100
```
3. Off-by-one error
```
1000 1001
```
4. Incorrect logic
```
1000 1000
```
5. Incorrect output format
```
100 100
```
CODECHEF etmx06
1 2
10 101
CODECHEF ladybug1
4 2
1 1000000000 1
CODECHEF pcsc2
1. **Incorrectly calculating the Fibonacci sequence.**
```
Input:
1 1 5

Output:
8
```

2. **Using an incorrect data type to store the Fibonacci numbers.**
```
Input:
1 1 100

Output:
354224848179261915
```

3. **Using an infinite loop.**
```
Input:
1 1 0

Output:
```

4. **Not handling invalid input correctly.**
```
Input:
-1 -1 5

Output:
Error: Invalid input.
```

5. **Not using appropriate error handling.**
```
Input:
1 1 -1

Output:
```
CODECHEF start01
* `123`
* `abc`
* ` 123 `
* `123.456`
* `2147483647`
* `9223372036854775807`
CODEFORCES 1008_A. Romaji
```
1. Input string may contain characters other than lowercase Latin letters.

a

2. Input string may be empty.



3. Input string may contain multiple consonants in a row.

bb

4. Input string may end with a consonant.

n

5. Input string may contain the letter "n" followed by a consonant.

nbb

6. Input string may contain the letter "n" followed by no letters at all.

n

7. Output string must be exactly "YES" or "NO".

YES

NO

8. Output string must be in all uppercase or all lowercase letters.

YES

no
```
CODEFORCES 1030_F. Putting Boxes Together
```
5 8
1 2 6 7 10
1 1 1 1 2
1 1
1 5
1 3
3 5
-3 5
-1 10
1 4
2 5
```
CODEFORCES 1053_D. Linear Congruential Generator
```
# Problem: 1053_D. Linear Congruential Generator

# Input

1
2

# Output

1
```

```
# Problem: 1053_D. Linear Congruential Generator

2
2 3

# Output

12
```

```
# Problem: 1053_D. Linear Congruential Generator

3
2 3 5

# Output

210
```

```
# Problem: 1053_D. Linear Congruential Generator

4
2 3 5 7

# Output

210
```

```
# Problem: 1053_D. Linear Congruential Generator

3
5 3 3

# Output

30
```
CODEFORCES 1075_E. Optimal Polygon Perimeter
```
3
0 0
0 2
2 0
```
CODEFORCES 1096_F. Inversion Expectation
```
1
3
```
```
2
1 2
```
```
3
3 1 -1
```
```
3
1 2 -1
```
```
6
3 4 1 2 -1 -1
```
```
6
-1 -1 1 2 3 4
```
CODEFORCES 1117_G. Recursive Queries
```
4 5
3 1 4 2
2 1 1 2 1
2 3 4 4 1
```

```
4 4
1 1 1 1
1 1 1 1
```

```
6 4
1 2 3 4 5 6
3 4 5 6 1
```
CODEFORCES 1144_C. Two Shuffled Sequences
```
1
1
```

```
10
2 5 1 3 4 6 7 8 9 10
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
5
5 1 4 3 2
```

```
5
5 1 4 3 2
```

```
5
5 1 4 3 2
```
CODEFORCES 1165_B. Polycarp Training
**Incorrect input format**

```
1
1
```

**Incorrect data type**

```
4
abc 1 2 3
```

**Off-by-one errors**

```
4
1 2 3 4
```

**Incorrect logic**

```
4
1 2 3 4
```

**Memory leaks**

```
4
1 2 3 4
```

**Race conditions**

```
4
1 2 3 4
```

**Deadlocks**

```
4
1 2 3 4
```

**Buffer overflows**

```
4
1 2 3 4
```

**Format errors**

```
4
1 2 3 4
```
CODEFORCES 1184_C1. Heidi and the Turing Test (Easy)
```
2
0 0
0 1
0 2
1 0
1 1
1 2
2 0
2 1
2 2

2
0 0
0 1
0 2
0 3
1 0
1 2
2 0
2 1
2 2
```
CODEFORCES 1202_D. Print a 1337-string...
```
2
6
1
```
CODEFORCES 1219_I. The Light Square
```
3
110
011
100
100
011
100
100
3
001
col 0
col 1
```
CODEFORCES 1244_D. Paint the Tree
```
3
3 2 3
4 3 2
3 1 3
1 2
2 3
```
CODEFORCES 1264_B. Beautiful Sequence
```
0 0 0 0

1 1 1 1

2 2 2 1

3 3 3 1

1 1 2 3

1 2 3 4

1 2 3 5

1 2 3 6

1 2 3 7

1 2 3 8

1 2 3 9
```
CODEFORCES 1285_D. Dr. Evil Underscores
```
3
1 2 3
```

```
3
128 130 131
```

```
7
1 0 42 2 9 1 9
```
CODEFORCES 1304_F1. Animal Observation (easy version)
```
3 3 2
1 2 3
4 5 6
7 8 9
```

```
4 5 2
0 2 1 1 0
0 0 3 1 2
1 0 4 3 1
3 3 0 0 4
```

```
3 3 1
1 2 3
4 5 6
7 8 9
```

```
3 3 2
1 2 3
4 5 6
7 8 9
```

```
4 1 1
1000
1000
1000
1000
```

```
3 1 3
1000
1000
1000
```

```
10 10 3
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
100 100 100 100 100 100 100 100 100 100
```

```
3 3 2
1 2 3
4 5 6
7 8 9
```
CODEFORCES 1329_A. Dreamoon Likes Coloring
5 3
3 2 2

5 1
1

5 5
1 1 1 1 1
CODEFORCES 1349_A. Orac and LCM
```
2
1 1

4
10 24 40 80

10
540 648 810 648 720 540 594 864 972 648
```
CODEFORCES 1369_E. DeadLee
```
1 1
1
1
```
```
2 2
1 1
1 1
```
```
3 3
1 1 1
1 2
2 3
```
```
5 5
1 1 1 2 1
3 4
1 2
2 3
4 5
4 5
```
```
4 10
2 4 1 4
3 2
4 2
4 1
3 1
4 1
1 3
3 2
2 1
3 1
2 4
```
CODEFORCES 1391_D. 505
```
3 3
101
001
110
```
CODEFORCES 1416_A. k-Amazing Numbers
```
1
1
1
```

```
1
5
1 2 3 4 5
```

```
1
10
1 1 1 1 1 1 1 1 1 1
```

```
2
4
1 2 3 4
3
1 2 3 3 4 5 5 6
```
CODEFORCES 1431_J. Zero-XOR Array
```
3
0 1 3
```
```
4
0 3 6 7
```
```
5
1 5 9 10 23
```
```
10
39 62 64 79 81 83 96 109 120 122
```

CODEFORCES 1455_G. Forbidden Value
```
5 1
set 1 10
set 2 15
if 2
set 1 7
end
```
```
7 2
set 3 4
if 3
set 10 4
set 2 7
set 10 1
end
set 4 2
```
```
9 200
if 0
set 5 5
if 5
set 100 13
end
if 100
set 200 1
end
end
```
```
1 10
set 1 15
```
CODEFORCES 1480_A. Yet Another String Game
```
1
a
```

```
1
bbbb
```

```
1
az
```

```
1
azzz
```

```
1
z
```

```
1
abcdefghijklmnopqrstuvwxyz
```

```
2
zzzz
zzz
```
CODEFORCES 1506_G. Maximize the Remaining String
```
1
codeforces
```

```
2
codeforces
aezakmi
```

```
3
abacaba
convexhull
swflldjgpaxs
```

```
4
myneeocktxpqjpz
```

```
5
abab
```

```
6
1234561234
```
CODEFORCES 1534_A. Colour the Flag
```
1
3 3
.R.
..W
.W.
```
```
4 4
.R.W
....
....
....
```
```
4 4
R.W.
....
....
....
```
```
4 4
.R.W
....
....
....
```
```
4 4
R.W.
....
....
....
```
```
2
2 3
..R
.W.
3 3
.R.
..W
```
CODEFORCES 161_C. Abracadabra
**Incorrect input format**

```
1 2 3 4
```

**Incorrect output format**

```
00
```

**Incorrect algorithm**

```
1 2 3 4
```

**Incorrect data structures**

```
1 2 3 4
```

**Incorrect implementation**

```
1 2 3 4
```

**Runtime errors**

```
1 2 3 4
```

**Memory errors**

```
1 2 3 4
```

**Timeout errors**

```
1 2 3 4
```

**Security vulnerabilities**

```
1 2 3 4
```

**Other errors**

```
1 2 3 4
```
CODEFORCES 180_E. Cubes
```
10 3 2
1 2 1 1 3 2 1 1 2 2
```
```
10 2 2
1 2 1 2 1 1 2 1 1 2
```
```
3 1 2
1 1 1
```
```
10 3 3
1 2 3 1 2 3 1 2 3 1
```
```
1000000000 1000000000 0
1
```
CODEFORCES 204_A. Little Elephant and Interval
```
3 12
```
CODEFORCES 228_E. The Road to Berland is Paved With Good Intentions
```
4 4
1 2 1
2 4 0
4 3 1
3 2 0
```
CODEFORCES 252_C. Points on Line
```
# 252_C. Points on Line

def solve(n, d, a):
    b = []
    for i in range(1, n):
        b.append(a[i] - a[i-1])
    b.sort()
    c = 0
    for i in range(n-2):
        for j in range(i+1, n-1):
            if (b[j]-b[i]) <= d:
                c += 1
    return c

n, d = map(int, input().split())
a = list(map(int, input().split()))
print(solve(n, d, a))
```

**Incorrect input format**

```
1 1
```

**Off-by-one errors**

```
4 3
1 2 3 4
```

**Incorrect use of the %lld specifier**

```
4 3
1 2 3 4
```

**Incorrect use of the STL containers**

```
4 3
1 2 3 4
```

**Incorrect use of the STL algorithms**

```
4 3
1 2 3 4
```

**Memory leaks**

```
4 3
1 2 3 4
```

**Synchronization errors**

```
4 3
1 2 3 4
```

**Exception handling errors**

```
4 3
1 2 3 4
```

**Security vulnerabilities**

```
4 3
1 2 3 4
```

**Performance bottlenecks**

```
4 3
1 2 3 4
```
CODEFORCES 277_D. Google Code Jam
```
1
10 20 1 1 0
```

```
2
40 100 15 4 0.5
4 100 21 1 0.99
```

```
10
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
100000000 200000000 1 1 0
```
CODEFORCES 2_A. Winner
1. **Incorrect input format**

```
1
a 1000
```

2. **Incorrect output format**

```
3
mike 3
andrew 5
mike 2


a
```

3. **Incorrect logic**

```
3
mike 3
andrew 5
mike 2


andrew
```

4. **Memory leaks**

```
n = int(input())
for i in range(n):
    a, b = input().split()
    b = int(b)
```

5. **Security vulnerabilities**

```
import os
import sys

n = int(input())
for i in range(n):
    a, b = input().split()
    b = int(b)
    os.system('cp /etc/passwd ' + a + '.txt')
```
CODEFORCES 325_A. Square and Rectangles
1. ```
n = int(input())
if n == 0:
    print("NO")
else:
    print("YES")
```

2. ```
n = int(input())
for i in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    if x1 == x2 or y1 == y2:
        print("NO")
        break
else:
    print("YES")
```

3. ```
n = int(input())
for i in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    if (x1 != x2 and y1 != y2) or (x1 == x2 and y1 == y2):
        print("NO")
        break
else:
    print("YES")
```

4. ```
n = int(input())
for i in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    left = min(x1, x2)
    bottom = min(y1, y2)
    right = max(x1, x2)
    top = max(y1, y2)
    if left == right and bottom == top:
        print("YES")
    else:
        print("NO")
```

5. ```
n = int(input())
if n == 0:
    print("NO")
else:
    print("YES")
```

6. ```
n = int(input())
for i in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    if x1 != x2 and y1 != y2:
        print("NO")
        break
else:
    print("YES")
```

7. ```
n = int(input())
for i in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    left = min(x1, x2)
    bottom = min(y1, y2)
    right = max(x1, x2)
    top = max(y1, y2)
    if left == right and bottom == top:
        print("YES")
    else:
        print("NO")
```

8. ```
n = int(input())
for i in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    if x1 != x2 and y1 != y2:
        print("NO")
        break
else:
    print("YES")
```

9. ```
n = int(input())
if n == 0:
    print("NO")
else:
    print("YES")
```

10. ```
n = int(input())
for i in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    if x1 == x2 and y1 == y2:
        print("YES")
    else:
        print("NO")
```
CODEFORCES 348_B. Apple Tree
### Incorrect input format

```
3
10 20 30
1 2
```

This input is incorrect because it does not specify the number of vertices in the tree.

### Incorrect data type

```
3
0 0 12 13 5 6
1 2
1 3
1 4
2 5
2 6
```

This input is incorrect because the number of apples in each leaf vertex is not a valid integer.

### Incorrect algorithm

```
#include <bits/stdc++.h>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
	}
	vector<int> g[n + 1];
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	vector<int> sz(n + 1, 1);
	function<void(int, int)> dfs = [&](int v, int p) {
		for (int u : g[v]) {
			if (u == p) {
				continue;
			}
			dfs(u, v);
			sz[v] += sz[u];
		}
	};
	dfs(1, 0);
	vector<int> ans(n + 1, 0);
	function<void(int, int, int)> dfs2 = [&](int v, int p, int c) {
		ans[v] = c;
		for (int u : g[v]) {
			if (u == p) {
				continue;
			}
			dfs2(u, v, (c + a[v] - sz[u]) / 2);
		}
	};
	dfs2(1, 0, a[1]);
	long long res = 0;
	for (int i = 1; i <= n; i++) {
		res += abs(ans[i] - a[i]);
	}
	cout << res << "\n";
}
```

This implementation is incorrect because it does not correctly handle the case where the tree is not balanced. In particular, the algorithm will not find the minimum number of apples to remove in order to make the tree balanced.

### Incorrect implementation

```
#include <bits/stdc++.h>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++) {
		cin >> a[i];
	}
	vector<int> g[n + 1];
	for (int i = 0; i < n - 1; i++) {
		int u, v;
		cin >> u >> v;
		g[u].push_back(v);
		g[v].push_back(u);
	}
	vector<int> sz(n + 1, 1);
	function<void(int, int)> dfs = [&](int v, int p) {
		for (int u : g[v]) {
			if (u == p) {
				continue;
			}
			dfs(u, v);
			sz[v] += sz[u];
		}
	};
	dfs(1, 0);
	vector<int> ans(n + 1, 0);
	function<void(int, int, int)> dfs2 = [&](int v, int p, int c) {
		
CODEFORCES 371_C. Hamburgers
```
#include <iostream>
#include <string>

using namespace std;

int main() {
    string recipe;
    cin >> recipe;

    int nb, ns, nc;
    cin >> nb >> ns >> nc;

    int pb, ps, pc;
    cin >> pb >> ps >> pc;

    int r;
    cin >> r;

    int min_price = 1000000000;
    int min_price_ingredient = ' ';
    for (int i = 0; i < recipe.length(); i++) {
        if (recipe[i] == 'B') {
            min_price = min(min_price, pb);
            min_price_ingredient = 'B';
        } else if (recipe[i] == 'S') {
            min_price = min(min_price, ps);
            min_price_ingredient = 'S';
        } else if (recipe[i] == 'C') {
            min_price = min(min_price, pc);
            min_price_ingredient = 'C';
        }
    }

    int max_hamburgers = 0;
    for (int i = 0; i < recipe.length(); i++) {
        if (recipe[i] == min_price_ingredient) {
            max_hamburgers += min(nb, ns, nc);
        }
    }

    cout << max_hamburgers << endl;

    return 0;
}
```
CODEFORCES 392_E. Deleting Substrings
```
3
0 0 3
1 2 1

6
1 4 5 6 7 1000
2 1 1 2 2 3

100
0

1000
1000
```
CODEFORCES 416_A. Guess a number!
1. ```
3
> 1 Y
< 3 N
> 55 N
```

2. ```
2
> 100 Y
< -100 Y
```

3. ```
2
> 100 Y
> -100 Y
```
CODEFORCES 442_D. Adam and Tree
```
1
1
```
```
2
1 2
```
```
3
1 1 3
```
```
4
1 2 3 4
```
```
5
1 2 3 4 5
```
```
6
1 2 3 4 5 6
```
```
7
1 2 3 4 5 6 7
```
```
8
1 2 3 4 5 6 7 8
```
```
9
1 2 3 4 5 6 7 8 9
```
```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 464_E. The Classic Problem
```
# 464_E. The Classic Problem

import sys

def bfs(graph, s, t):
    dist = [-1 for _ in range(n)]
    dist[s] = 0
    q = [s]
    while q:
        u = q.pop(0)
        for v, w in graph[u]:
            if dist[v] == -1:
                dist[v] = dist[u] + w
                q.append(v)
    return dist[t]


n, m = map(int, sys.stdin.readline().split())
graph = [[] for _ in range(n)]
for _ in range(m):
    u, v, w = map(int, sys.stdin.readline().split())
    graph[u-1].append((v-1, w))

s, t = map(int, sys.stdin.readline().split())

ans = bfs(graph, s-1, t-1)

if ans == -1:
    print(-1)
else:
    print(ans%1000000007)
    print(ans)
    print(*[i+1 for i in range(ans)])
```
CODEFORCES 488_D. Strip
```
1 1 1
1
```

```
2 1 1
1 2
```

```
10 1000000000 1
1000000000
```

```
8 100 3
1 2 3 4 5 6 7 8
```

```
5 1000000000 2
1000000000 2000000000 3000000000 4000000000 5000000000
```

```
7 2 2
1 100 1 100 1 100 1
```
CODEFORCES 512_C. Fox And Dinner
```
3
3 4 8
```

```
5
2 2 2 2 2
```

```
12
2 3 4 5 6 7 8 9 10 11 12 13
```

```
24
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
```
CODEFORCES 536_D. Tavas in Kansas
```
4 4
1 2
3 2 5 -11
1 4 2
3 4 2
3 1 5
3 2 1
```
CODEFORCES 560_E. Gerald and Giant Chess
```
# 3 4 2
# 2 2
# 2 3

# 100 100 3
# 15 16
# 16 15
# 99 88

# 1 1 0
```
CODEFORCES 587_A. Duff and Weight Lifting
```
5
1 1 2 3 3

2

4
0 1 2 3

4

5
1 1 1 1 1

5

10
0 0 0 0 0 0 0 0 0 1000000000

10
```
CODEFORCES 609_C. Load Balancing
1. ```
2
1 6
```

2. ```
7
10 11 10 11 10 11 11
```

3. ```
5
1 2 3 4 5
```

4. ```
10
1 2 3 4 5 6 7 8 9 10
```

5. ```
1
1000000000
```
CODEFORCES 630_B. Moore's Law
1000 1000000
CODEFORCES 656_F. Ace It!
```
A232726
```
```
A21234567
```
```
A123456
```
CODEFORCES 680_A. Bear and Five Cards
1. 100 100 100 100 100
2. 1 2 3 4 5
3. 1 1 1 2 2
4. 2 3 4 5 6
5. 10 10 10 10 10
CODEFORCES 702_F. T-Shirts
3
7 5
3 5
4 3
2
13 14

2
100 500
50 499
4
50 200 150 100
CODEFORCES 724_G. Xor-matic Number of the Graph
```
4 4
1 2 1
1 3 2
2 3 3
3 4 1
```

```
4 4
1 2 1
2 3 2
3 4 4
4 1 8
```

```
8 6
1 2 2
2 3 1
2 4 4
4 5 5
4 6 3
7 8 5
```
CODEFORCES 746_G. New Roads
```
6 2 3
2 1 2
```
```
7 3 3
1 3 2
```
```
5 1 1
2
```
```
7 2 1
1 2 3 4 5 6
```
```
4 2 2
1 2 3
```
```
4 2 3
2 1 2
```
```
15 3 3
4 4 2 3 2 2 2 2 2 1 1 1 1 1
```
```
11 3 3
3 3 3
```
```
7 3 3
2 3 1
```
CODEFORCES 76_C. Mutation
```
5 3 13
BACAC
4 1 2
1 2 3
2 3 4
3 4 10
```
CODEFORCES 793_G. Oleg and chess
```
5
5
1 1 2 1
1 3 1 5
4 1 5 5
2 5 2 5
3 2 3 5

10
3
1 1 8 8
2 2 9 9
3 3 10 10

```
CODEFORCES 814_D. An overnight dance in discotheque
```
5
2 1 6
0 4 1
2 -1 3
1 -2 1
4 -1 1
```
CODEFORCES 83_D. Numbers
```
1 10 2
12 23 3
6 19 5
```
CODEFORCES 85_E. Guard Towers
```
2
0 0
1 1
```
CODEFORCES 886_E. Maximum Element
```
5 2
```
```
6 3
```
```
100 50
```
CODEFORCES 909_E. Coprocessor
```
5 6
0 1 0 1 0 1
1 2
2 3
1 4
3 4
4 5
```

```
1 0
```

```
5 4
1 0 1 0 1
0 1
1 2
2 3
```

```
4 5
0 0 0 1
0 1
1 2
2 3
3 4
```
CODEFORCES 931_B. World Cup
4 1 2
8 2 6
8 7 5
8 4 8
10 2 7
CODEFORCES 958_E3. Guard Duty (hard)
```
#Incorrect input format

1
```

```
#Incorrect output format

2
3
```

```
#Incorrect algorithm

4
6 6
5 1
2 4
4 0
5 4
1 2
2 1
3 5
```

```
#Incorrect data

2
1 2
3 4
```

```
#Bugs in the implementation

4
0 0
0 1
1 0
1 1
```
CODEFORCES 985_B. Switches and Lamps
```
#include <iostream>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    bool a[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }

    int count = 0;
    for (int i = 0; i < n; i++) {
        bool flag = false;
        for (int j = 0; j < m; j++) {
            if (a[i][j] == 1) {
                flag = true;
                break;
            }
        }
        if (!flag) {
            count++;
        }
    }

    if (count == 1) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }

    return 0;
}
```

**Incorrect data types**

```
#include <iostream>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    bool a[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }

    int count = 0;
    for (int i = 0; i < n; i++) {
        bool flag = false;
        for (int j = 0; j < m; j++) {
            if (a[i][j] == 1) {
                flag = true;
                break;
            }
        }
        if (!flag) {
            count++;
        }
    }

    if (count == 1) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }

    return 0;
}
```

This program will not work correctly because the variable `count` is of type int, but the value of `count` is greater than 2000.

**Forgetting to initialize variables**

```
#include <iostream>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    bool a[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }

    int count;
    for (int i = 0; i < n; i++) {
        bool flag = false;
        for (int j = 0; j < m; j++) {
            if (a[i][j] == 1) {
                flag = true;
                break;
            }
        }
        if (!flag) {
            count++;
        }
    }

    if (count == 1) {
        cout << "YES" << endl;
    } else {
        cout << "NO" << endl;
    }

    return 0;
}
```

This program will not work correctly because the variable `count` is not initialized before it is used.

**Using incorrect loops**

```
#include <iostream>

using namespace std;

int main() {
    int n, m;
    cin >> n >> m;

    bool a[n][m];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> a[i][j];
        }
    }

    int count = 0;
    for (int i = 0; i < n; i++) {
        bool flag = false;
        for (int j = 0; j < m; j++) {
            if (a[i][j] == 1) {
                flag = true;
                break;
            }
        }
       
HACKEREARTH abc-string-61
1
1000000000000000000

HACKEREARTH bogo-sort-1
```
1
5
```
```
10
1000000
-10982
-3456
1729
65535
```
```
10
1000000
-10982
-3456
1729
65535
1000001
1000002
1000003
1000004
```
HACKEREARTH cubic-currency
2
2
10
HACKEREARTH fuck-this-problem
a
1
HACKEREARTH jumping-numbers-1
4
2
4
6
10
HACKEREARTH minimise-maximum-sum
```
1
3
5 6 2 3 9 8
```
HACKEREARTH palindrome-9
1, 2
1, 100000000
1, 11
11, 12
12, 13
HACKEREARTH reversing-a-number
```
3
111
-123456789
123456789
```
HACKEREARTH special-numbers-7
```
1
1000
```
HACKEREARTH trailing-zeroes-2
5
-1
1000000000
1
5
100
ATCODER p02575 AtCoder Beginner Contest 177 - I hate Shortest Path Problem
```
1 1

2 2
1 2

1 2
1 1

2 2
1 2

4 4
2 4
1 1
2 3
2 4
```
ATCODER p02706 AtCoder Beginner Contest 163 - Homework
41 2
5 6
10 2
5 6
11 2
5 6
314 15
9 26 5 35 8 9 79 3 23 8 46 2 6 43 3
ATCODER p02835 AtCoder Beginner Contest 147 - Blackjack
1. 5 7 9
2. 13 7 2
3. 1 2 13
4. 13 13 13
5. -1 2 3
6. 5 5 5
ATCODER p02972 AtCoder Beginner Contest 134 - Preparing Boxes
```
3
1 0 0
```

```
5
0 0 0 0 0
```

```
5
1 0 0 0 0
```

```
5
0 1 0 0 0
```

```
5
1 1 1 1 1
```
ATCODER p03108 AtCoder Beginner Contest 120 - Decayed Bridges
```
4 5
1 2
3 4
1 3
2 3
1 4
```

```
6 5
2 3
1 2
5 6
3 4
4 5
```

```
2 1
1 2
```
ATCODER p03255 AtCoder Grand Contest 027 - Garbage Collector
```
2 100
1 10

5 1
1 999999997 999999998 999999999 1000000000

10 8851025
38 87 668 3175 22601 65499 90236 790604 4290609 4894746

16 10
1 7 12 27 52 75 731 13856 395504 534840 1276551 2356789 9384806 19108104 82684732 535447408
```
ATCODER p03408 AtCoder Beginner Contest 091 - Two Colors Card Game
```
3
apple
orange
apple
1
grape
```
```
3
apple
orange
apple
5
apple
apple
apple
apple
apple
```
```
1
voldemort
10
voldemort
voldemort
voldemort
voldemort
voldemort
voldemort
voldemort
voldemort
voldemort
```
```
6
red
red
blue
yellow
yellow
red
5
red
red
yellow
green
blue
```
ATCODER p03571 CODE FESTIVAL 2017 qual C - Cubes
```
3 4 5 1

1 2 3 0

3 5 7 100

3 123456781 1000000000 100

1234 12345 1234567 5

999999997 999999999 1000000000 50000
```
ATCODER p03726 AtCoder Grand Contest 014 - Black and White Tree
```
3
1 2
2 3
```

```
4
1 2
2 3
2 4
```

```
6
1 2
2 3
3 4
2 5
5 6
```
ATCODER p03890 CODE FESTIVAL 2016 Relay (Parallel) - Kode Festival
```
2
1
3
```

```
3
1
3
2
```

```
4
1
3
2
5
```

```
5
1
3
2
5
7
```
ATCODER p04049 AtCoder Grand Contest 001 - Shorten Diameter
```
6 2
1 2
3 2
4 2
1 6
5 6

6 5
1 2
3 2
4 2
1 6
5 6

1 1
```
AIZU p00128 Abacus
1
9999
0000
1234
5678
0123
4567
8901
AIZU p00261 Aka-beko and 40 Thieves
0100
0101
10100
01000
0101011
0011
011111
AIZU p00448 Osenbei
2 5
0 1 0 1 0
1 0 0 0 1
 3 6
1 0 0 0 1 0
1 1 1 0 1 0
1 0 1 1 0 1
0 0
AIZU p00639 Accelerated Railgun
```
0
1.0 0.0 0.0 0.0
```
AIZU p00782 Mobile Phone Coverage
1. Incorrect input format
```
1
4.0 4.0 3.0
5.0 6.0 3.0
5.5 4.5 1.0
2
3.0 3.0 3.0
1.5 1.5 1.0
0
```

2. Incorrect data type
```
1
a 4.0 3.0
b 5.0 6.0 3.0
c 5.5 4.5 1.0
2
d 3.0 3.0 3.0
e 1.5 1.5 1.0
0
```

3. Incorrect calculation
```
1
4.0 4.0 3.0
5.0 6.0 3.0
5.5 4.5 1.0
2
3.0 3.0 3.0
1.5 1.5 1.0
0
```

4. Incorrect output format
```
1
4.0 4.0 3.0
5.0 6.0 3.0
5.5 4.5 1.0
2
3.0 3.0 3.0
1.5 1.5 1.0
0
```

5. Other bugs
```
1
4.0 4.0 3.0
5.0 6.0 3.0
5.5 4.5 1.0
2
3.0 3.0 3.0
1.5 1.5 1.0
0
```
AIZU p00915 The Last Ant
3 6
R 1
L 2
L 5
1 10
R 1
2 10
R 5
L 7
2 10
R 3
L 8
2 99
R 1
L 98
4 10
L 1
R 2
L 8
R 9
6 10
R 2
R 3
L 4
R 6
L 7
L 8
0 0
AIZU p01048 Divisor
1
2
3
4
5
6
7
8
9
10
11
12
AIZU p01180 The Closest Circle
1. ```
0
```
2. ```
1
1.0 0.0 0.0
```
3. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
```
4. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
100.0 0.0 0.0
```
5. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
```
6. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
```
7. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
```
8. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
```
9. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
```
10. ```
4
1.0 0.0 0.0
1.5 0.0 3.0
2.0 4.0 0.0
1.0 3.0 4.0
```
AIZU p01317 Mr. Rito Post Office
3 3
1 2 5 L
1 2 7 S
2 3 11 S
3
1 2 3

5 5
1 2 15 L
2 3 10 L
4 5 7 L
1 3 30 S
3 4 100 S
5
1 3 5 4 1

0 0
AIZU p01485 Satan Attacks
2
-1 0 5 0 10
1 0 6 0 10
1
0.000000 0.000000
6.000000 0.000000
AIZU p01647 Texas hold 'em
```
SA SK
DA CA
SQ SJ ST
```
AIZU p01798 Midpoint
```
1 1 1
0 0
```

```
2 2 1
0 0
0 1
```

```
3 3 3
0 0
0 1
1 0
```

```
2 2 2
1 1
1 1
```

```
3 3 3
0 0
1 1
0 2
```

```
3 3 4
0 0
1 1
1 0
0 1
```

```
3 3 2
0 0
1 1
1 1
```

```
3 3 6
0 0
0 1
1 0
1 1
1 2
```

```
4 4 6
0 0
0 1
1 0
1 1
1 2
2 2
```

```
5 5 6
0 0
0 1
1 0
1 1
1 2
2 2
2 3
```
AIZU p01932 All Japan Association of Return home
2 2
1 1
3 3
AIZU p02070 Permutation Sort
1 2
2 1
AIZU p02212 Team Making
1 2 3 4
AIZU p02366 Articulation Points
**1. The input format is not correct.**

```
0 0
```

**2. The graph is not connected.**

```
3 0
0 1
```

**3. There are parallel edges.**

```
4 3
0 1
0 1
1 2
```

**4. There are self-loops.**

```
4 3
0 1
1 0
1 1
```

**5. The graph is not a tree.**

```
4 4
0 1
0 2
1 2
1 3
```

**6. The algorithm is not correct.**

```
4 4
0 1
0 2
1 2
2 3
```