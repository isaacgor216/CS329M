CODECHEF ashigift
```
3
10
2 1 3 8 1
0
10
2 1 3 8 5
0
10
2 2 3 8 5
3 1 2 1 4 3 2 9 1 1
```
CODECHEF cleanup
1
3 2
2 4 1
CODECHEF flow002
1
1 2
100 200
10 40
1000 100
10000 10000
CODECHEF lecards
```
1
3
1 2 3
```

```
2
4
1 1 3 2
5
1 2 3 4 5
```
CODECHEF polydifr
1
1
1 10
10
1 10
1 3
1 2
1 1
1 0
1
1
1 2
1
1 0
1 1
1 0
CODECHEF subgcd
```
1
4
3 7 1 1
```
CODEFORCES 100_D. World of Mouth
```
1
Codeforces
Codeforces
```
```
1
Codeforces
Codeforcess
```
```
1
Codeforces
Codeforce
```
```
1
Codeforces
Codeforcesss
```
```
1
Codeforces
Codeforcessssss
```
```
1
Codeforces
Codeforcesss1
```
```
1
Codeforces
Codeforcess1234567890
```
```
1
Codeforces
codeforces
```
```
1
Codeforces
codeforce
```
```
1
Codeforces
Codeforce
```
```
1
Codeforces
C
```
```
1
C
Codeforces
```
```
1

```
```
0
```
CODEFORCES 1033_A. King Escape
```
3
1 1
2 2
3 3

8
4 4
1 3
3 1

8
4 4
2 3
1 6

8
3 5
1 2
6 1
```
CODEFORCES 1055_F. Tree and XOR
```
2 1
1 3
```
```
3 6
1 2
1 3
```
```
4 12
1 2
1 3
2 4
3 4
```
CODEFORCES 1077_F2. Pictures with Kittens (hard version)
```
5 2 3
5 1 3 10 1

6 1 5
10 30 30 70 10 10

4 3 1
1 100 1 1
```
CODEFORCES 1098_F. Ж-function
```
# z-function
s = input()
n = len(s)

z = [0] * (n + 1)
for i in range(1, n + 1):
    j = i - 1
    while j >= 0 and s[j] == s[i - j - 1]:
        j -= 1
    z[i] = j + 1


def calc(l, r):
    return sum(z[l:r + 1])


q = int(input())
for _ in range(q):
    l, r = map(int, input().split())
    print(calc(l, r))
```
CODEFORCES 1119_G. Get Ready for the Battle
```
1 1
2

1 2
1 2

6 5
3 3 3 3 3

7 4
1 5 9 2

6 3
1 2 3
```
CODEFORCES 1146_D. Frog Jumping
```
1
0
0

1000000000
1
1

10
0
1

2
2
1

3
5
3
```
CODEFORCES 1167_D. Bicolored RBS
**Incorrect input format**

```
2
()
```

**Incorrect output format**

```
11
```

**Incorrect algorithm**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```

**Runtime errors**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```

**Memory errors**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```

**Incorrect data type**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```

**Off-by-one errors**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```

**Logical errors**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```

**Syntax errors**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```

**Debugging errors**

```
n = int(input())
s = input()
r = ''
b = ''
for i in range(n):
    if s[i] == '(':
        r += '0'
    else:
        b += '1'
print(r + b)
```
CODEFORCES 1185_G1. Playlist for Polycarp (easy version)
```
3 3
1 1
1 2
1 3

1 2
```
CODEFORCES 1204_D2. Kirk and a Binary String (hard version)
```
110
```

```
010
```

```
010
```

```
0001111
```

```
0000000
```

```
0111001100111011101000
```

```
0011001100001011101000
```
CODEFORCES 1221_C. Perfect Team
```
1
1 1 1
```

```
2
3 6 0
0 0 0
```

```
3
2 2 2
10 1 10
4 4 1
```
CODEFORCES 1246_F. Cursor Distance
```
abcde
```
```
abacaba
```
```
z
```
```
aa
```
```
aabaa
```
```
zzzzz
```
```
ababbababaababbbbababababab
```
```
zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
```
CODEFORCES 1266_D. Decreasing Debts
```
5 4
1 2 10
2 3 15
3 1 10
2 4 15
3 4 10
```
CODEFORCES 1287_E2. Madhouse (Hard version)
```
1

a

4

abc
```
CODEFORCES 1307_F. Cow and Vacation
```
6 2 1
1 2
2 3
2 4
4 5
5 6
2
3
1 3
3 5
3 6
```
CODEFORCES 1331_B. Limericks
4
57
391
998
CODEFORCES 1350_F. Slime and Sequences (Easy Version)
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
CODEFORCES 1371_B. Magical Calendar
```
1
1000000000 1000000000
```
CODEFORCES 1393_E1. Twilight and Ancient Scroll (easier version)
```
3
abcd
zaza
ataka
```
CODEFORCES 1418_D. Trash Problem
```
5 6
1 2 6 8 10
1 4
1 9
0 6
0 10
1 100
1 50
```

```
5 8
5 1 2 4 3
0 1
0 2
0 3
0 4
0 5
1 1000000000
1 1
1 500000000
```
CODEFORCES 1436_C. Binary Search
```
5 1 1
```

```
3 2 1
```

```
2 1 1
```

```
4 1 3
```

```
1000 1000 999
```

```
1000 1000 998
```

```
1000 1000 997
```

```
1000 1000 996
```

```
1000 1000 995
```
CODEFORCES 1461_A. String Generation
1
4 1
1
1 0
2
5 2
5 1

CODEFORCES 1486_B. Eastern Exhibition
```
1
3
0 0
2 0
1 2
```

```
2
3
0 0
2 0
1 1
4
1 0
0 2
2 3
3 1
```

```
3
4
0 0
0 1
1 0
1 1
4
0 0
0 1
1 0
1 1
2
0 0
1 1
```

```
4
4
0 0
0 1
1 0
1 1
4
1 0
0 2
2 3
3 1
6
0 0
1 0
2 0
3 0
4 0
5 0
```

```
5
2
0 0
1 1
3
0 0
0 1
1 0
4
1 0
0 2
2 3
3 1
5
0 0
1 0
2 0
3 0
4 0
```

```
6
1
0 0
2
0 0
1 1
3
0 0
0 1
1 0
4
0 0
0 1
1 0
1 1
5
0 0
1 0
2 0
3 0
4 0
```
CODEFORCES 1510_B. Button Lock
```
2 2
10
11
```

```
3 4
001
111
101
011
```

```
2 1
10
```

```
10 1
1111111111
```
CODEFORCES 1536_D. Omkar and Medians
```
1
1
1
```

```
1
3
1 2 3
```

```
1
4
1 2 3 4
```

```
1
5
3 5 6 -8 -7
```

```
1
2
3 3
```

```
2
6
-8 2 -6 -5 -4 3
7
1 1 3 1 0 -2 -1
```

```
2
7
6 12 8 6 2 6 10
6
5 1 2 3 6 7
```

```
5
8
-8 2 -6 -5 -4 3 3 2
```

```
1
5
1 3 4 3 0
```
CODEFORCES 163_C. Conveyor
```
1 1 1 1
0

2 3 1 2
2 5

10 10 1 1
0 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5 0.5
```
CODEFORCES 183_D. T-shirt
```
1 4
100 200 300 400
```
```
2 2
500 500
500 500
```
```
3 3
1000 0 0
1000 0 0
0 1000 0
```
```
2 3
10 20 30
40 50 60
```
```
3 4
100 200 300 400
100 200 300 400
100 200 300 400
```
```
3 5
100 200 300 400 500
100 200 300 400 500
100 200 300 400 500
```
```
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
100 100 100 100 100
```
CODEFORCES 207_B3. Military Trainings
```
3
2
1
1
```
```
5
2
2
2
2
2
```
```
8
4
4
4
1
4
4
1
```
CODEFORCES 230_E. Triangles
```
5 5
1 2
1 3
2 3
2 4
3 4
```
```
5 3
1 2
2 3
1 3
```
```
4 4
1 2
1 3
2 3
1 4
```
```
10 10
1 2
1 3
1 4
2 3
2 4
3 4
4 5
5 6
5 7
6 7
```
```
100000 1
1 2
```
```
100000 2
1 2
2 3
```
```
100000 100000
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 1
```
CODEFORCES 256_D. Liars and Serge
1. ```
1 1
```

2. ```
2 1
```

3. ```
4 2
```

4. ```
8 3
```

5. ```
16 4
```

6. ```
32 5
```

7. ```
64 6
```

8. ```
128 7
```

9. ```
256 8
```

10. ```
512 9
```

11. ```
1024 10
```

12. ```
2048 11
```

13. ```
4096 12
```

14. ```
8192 13
```

15. ```
16384 14
```

16. ```
32768 15
```

17. ```
65536 16
```

18. ```
131072 17
```

19. ```
262144 18
```

20. ```
524288 19
```

21. ```
1048576 20
```

22. ```
2097152 21
```

23. ```
4194304 22
```

24. ```
8388608 23
```

25. ```
16777216 24
```

26. ```
33554432 25
```

27. ```
67108864 26
```

28. ```
134217728 27
```
CODEFORCES 27_D. Ring Road 2
```
4 2
1 3
2 4

6 3
1 3
3 5
5 1

5 4
1 3
2 4
3 5
4 1

4 4
1 2
2 3
3 4
4 1

4 5
1 2
2 3
3 4
4 1
5 1
```
CODEFORCES 302_C. Yaroslav and Sequence
```
1
10
```

```
1
-10
```

```
3
100 100 100
```

```
2
-1 -1000 -1
```

```
2
50 50 50
```

```
3
10 10 -10
```
CODEFORCES 329_D. The Evil Temple and the Moving Rocks
```
5 5
```

```
3 2
```

```
100 105
```
CODEFORCES 350_B. Resort
1. **Incorrect input format**

```
5
0 0 0 0 1
0 1 2 3 4
```

This input has a non-integer value in the second line.

2. **Incorrect output format**

```
5
1 2 3 4 5
1 2 3 4 5
```

This output has two lines.

3. **Incorrect logic**

```
5
0 0 1 0 1
0 1 2 2 4
```

This input has a path that does not meet the criteria of the problem.

4. **Incorrect error handling**

```
5
0 0 0 0 1
0 1 2 3 4
```

This input has a path that does not meet the criteria of the problem, but the program does not handle this error correctly.

5. **Incorrect performance**

```
5
0 0 0 0 1
0 1 2 3 4
```

This input takes a long time to run.
CODEFORCES 374_C. Inna and Dima
```
1 2
DI
```
```
1 1
D
```
```
2 2
MA
ID
```
```
5 5
DIMAD
DIMAI
DIMAM
DDMAA
AAMID
```
```
5 5
DIMAD
DIMAI
DIMAM
AAMID
DIMAD
```
```
10 10
DIMADIMADIMADIMA
```
CODEFORCES 396_E. On Iteration of One Well-Known Function
**1. Incorrect input format**

```
1
7 1
1
```

**2. Incorrect output format**

```
1
2 1
```

**3. Incorrect calculation of φ(n)**

```
1
7 1
2
```

**4. Incorrect calculation of φ(φ(...φ(n)))**

```
1
7 1
3
```

**5. Incorrect printing of the canonical decomposition of φ(φ(...φ(n)))**

```
1
7 1
4
```

**6. Incorrect handling of negative numbers**

```
-1
```
CODEFORCES 41_A. Translation
```
1. code
edoc

2. abba
abba

3. code
codee

4. hello
olleh
```
CODEFORCES 445_D. DZY Loves FFT
```
3 1 1
```
CODEFORCES 467_E. Alex and Complicated Task
1
1

4
3 5 3 5

10
35 1 2 1 2 35 100 200 100 200
CODEFORCES 48_H. Black and White
1. ```
2 2
0 0 4
```
2. ```
2 3
1 2 3
```
3. ```
3 2
0 0 6
```
4. ```
3 3
0 0 9
```
5. ```
4 4
0 0 16
```
6. ```
5 5
0 0 25
```
CODEFORCES 513_G3. Inversions problem
```
# 513_G3. Inversions problem

# Input

n, k = map(int, input().split())
p = list(map(int, input().split()))

# Expected value of the number of inversions

E = 0
for i in range(n):
    for j in range(i+1, n):
        E += (n-i)*(n-j)/n*(n+1)

# Output

print(E)
```

**Test 1:**

```
3 1
1 2 3
```

**Expected output:**

```
0.833333333333333
```

**Test 2:**

```
3 4
1 3 2
```

**Expected output:**

```
1.458333333333334
```

**Test 3:**

```
3 5
1 2 3
```

**Expected output:**

```
1.875
```
CODEFORCES 540_A. Combination Lock
1. Incorrect input format:
```
1
1
2
```

2. Incorrect output format:
```
1
2
3
```

3. Incorrect calculation of the minimum number of moves:
```
1
1
1
```

4. Incorrect handling of edge cases:
```
0
0
0
```

5. Other bugs:
```
1
1
1
```
CODEFORCES 568_B. Symmetric and Transitive
```
1
2
3
4
5
```
CODEFORCES 589_i
1. **Incorrect input format**

```
1 1
```

2. **Incorrect calculation of the number of balls to repaint**

```
4 2
1 2 1 2
```

3. **Incorrect output format**

```
4 2
1 2 1 2
```

4. **Other bugs**

```
4 2
1 2 1 2
```
CODEFORCES 611_B. New Year and Old Property
1. Incorrect input format
```
5 1
```
2. Incorrect output format
```
5 10
12
```
3. Incorrect calculation
```
5 10
2
```
4. Memory limit exceeded
```
10000000000000000 100000000000000001
```
5. Time limit exceeded
```
10000000000000000 100000000000000001
```
6. Wrong answer
```
5 10
1
```
CODEFORCES 630_Q. Pyramids
1. Incorrect input format:
```
2 5 3
```
2. Incorrect output format:
```
38.546168065709
```
3. Incorrect calculation of the volume of the pyramids:
```
2 5 3
```
4. Incorrect rounding of the output value:
```
2 5 3
```
CODEFORCES 65_B. Harry Potter and the History of Magic
1. ```
1
9999
```

2. ```
3
1999
5055
2000
```

3. ```
4
9999
2000
3000
3011
```

4. ```
100
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
1254
1255
1256
1257
1258
1259
1260
1261
1262
1263
1264
1265
1266
1267
1268
1269
1270
1271
1272
1273
1274
1275
1276
1277
1278
1279
1280
1281
1282
1283
1284
1285
1286
1287
1288
1289
1290
1291
1292
1293
1294
1295
1296
1297
1298
1299
1300
```
CODEFORCES 683_A. The Check of the Point
1. **Incorrect input format.**

```
1 2 3
```

2. **Incorrect calculation of the square's sides.**

```
2 1 1
```

3. **Incorrect comparison of the point's coordinates with the square's sides.**

```
10 5 -5
```

4. **Incorrect output.**

```
10 5 -5 3
```
CODEFORCES 705_E. Black Widow
```
6 7
2 4 -2
2 6 3
2 -7 1
2 -5 1
2 3 6
2 -2 -5
```

```
8 10
1 -5
2 4 -6
2 -2 -6
2 -7 9
2 10 -1
2 3 -1
2 -8 9
2 5 8
```

```
2 3
2 1 1
2 -3 3
```
CODEFORCES 729_B. Spotlights
```
2 4
0 1 0 0
1 0 1 0
```
```
4 4
0 0 0 0
1 0 0 1
0 1 1 0
0 1 0 0
```
```
1 1
1
```
CODEFORCES 749_C. Voting
```
5
DDRRR
```
```
6
DDRRRR
```
CODEFORCES 772_B. Volatile Kite
**Incorrect input format**

```
4
1 1
2 2
3 3
4 4
```

**Incorrect output format**

```
0.3535533906
```

**Insufficient precision**

```
4
0 0
0 1
1 1
1 0
```

**Off-by-one errors**

```
4
0 0
0 1
1 1
1 0
```

**Incorrect logic**

```
4
0 0
0 1
1 1
1 0
```

**Undefined behavior**

```
4
0 0
0 1
1 1
1 0
```

**Memory leaks**

```
4
0 0
0 1
1 1
1 0
```
CODEFORCES 797_B. Odd sum
```
1
1
```
```
3
-1 0 1
```
```
4
-2 2 -3 1
```
```
10
-4 2 1 5 -1 4 -3 1 2 -1
```
```
1000000000
-1000000000
```
CODEFORCES 817_D. Imbalanced Array
```
# 1. Incorrect input format

n = int(input())
a = list(map(int, input().split()))

# 2. Incorrect output format

print(n)

# 3. Incorrect calculation of the imbalance value

n = int(input())
a = list(map(int, input().split()))
max_value = max(a)
min_value = min(a)
imbalance_value = max_value - min_value
print(imbalance_value)

# 4. Incorrect calculation of the total imbalance value

n = int(input())
a = list(map(int, input().split()))
max_value = max(a)
min_value = min(a)
imbalance_value = 0
for i in range(n):
    imbalance_value += max_value - a[i]
print(imbalance_value)

# 5. Runtime error

n = int(input())
a = list(map(int, input().split()))
max_value = max(a)
min_value = min(a)
imbalance_value = max_value - min_value
print(imbalance_value)

# 6. Incorrect answer

n = int(input())
a = list(map(int, input().split()))
max_value = max(a)
min_value = min(a)
imbalance_value = 0
for i in range(n):
    imbalance_value += max_value - a[i]
print(imbalance_value - 1)
```
CODEFORCES 842_D. Vitya and Strange Lesson
```
2 2
1 3
1
3
```
```
4 3
0 1 5 6
1
2
4
```
```
5 4
0 1 5 6 7
1
1
4
5
```
```
1 1
0
```
```
1000000 1000000
0
```
```
200000 1
1
```
CODEFORCES 863_D. Yet Another Array Queries Problem
```
6 3 5
1 2 3 4 5 6
2 1 3
2 3 6
1 1 6
2 2 1 5 3
```
CODEFORCES 889_A. Petya and Catacombs
1. Incorrect input format

```
2
0 0
```

This input is incorrect because it does not specify the number of rooms.

2. Incorrect output format

```
2
0 0
```

This output is incorrect because it specifies the maximum possible number of rooms instead of the minimum possible number of rooms.

3. Incorrect logic

```
2
0 0
```

This program is incorrect because it does not correctly account for the fact that Petya may have visited the same room multiple times.

4. Runtime errors

```
1000000000
1 2 3 4 5 6 7 8 9 10
```

This program will run out of memory because it tries to store the entire logbook in memory.

5. Logical errors

```
2
0 0
```

This program contains a logical error because it does not correctly account for all of the possible inputs. For example, it does not correctly account for the case where Petya visits the same room multiple times.
CODEFORCES 911_F. Tree Destruction
```
3
1 2
1 3
```
```
4
1 2
1 3
2 4
2 5
```
CODEFORCES 933_D. A Creative Cutout
1. ```
1
```

2. ```
1000000000
```

3. ```
1012
```

4. ```
1013
```

5. ```
1014
```
CODEFORCES 960_A. Check the string
```
aaabccc
```
```
bbacc
```
```
aabc
```
```
a
```
```
c
```
```
ccccc
```
```
aaa
```
```
bbb
```
```
bbbb
```
CODEFORCES 987_D. Fair
### Incorrect input format

```
5 5 4 3
1 2 4 3 2
1 2
2 3
3 4
4 1
4 5
```

This input is incorrect because it does not have a space between the two integers in the first line.

### Incorrect data type

```
5 5 4 3
1 2 4 3 2
1,2
2 3
3 4
4 1
4 5
```

This input is incorrect because the first two integers in the second line are not integers.

### Off-by-one errors

```
5 5 4 3
1 2 4 3 2
1 2
2 3
3 4
4 1
4 6
```

This input is incorrect because there is an extra edge between towns 4 and 6.

### Logic errors

```
5 5 4 3
1 2 4 3 2
1 2
2 3
3 4
4 1
4 5
```

This input is incorrect because the program will not be able to find a path from town 5 to town 1.

### Runtime errors

```
5 5 4 3
1 2 4 3 2
1 2
2 3
3 4
4 1
4 5
```

This input is incorrect because the program will run out of memory trying to store all of the data.
HACKEREARTH alice-bob-and-xor
1
2 3
HACKEREARTH bytelandian-encoding
1
abcd

2
aabb

3
abcde

4
aaabb

5
aaaaaaaa

6
aaaaabbbbbbbbbbbbbbb

7
aaaaaaaaaaaaaaaaaaaaaaaaaaa

8
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

9
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

10
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
HACKEREARTH death-the-multiverse-and-nothing
```
1
1
```
```
2
1
2
```
```
3
1
2
3
```
```
4
1
2
3
4
```
```
5
1
2
3
4
5
```
HACKEREARTH game-of-riches
```
3
12 11
1640 3997 4133 4282 3130 3938 4628 1138 4474 4534 2218 1293 
1 1
2491 
15 6
1242 3342 4797 4252 811 4955 76 4298 3753 1104 168 17 2364 1207 4764
```
HACKEREARTH khicchar-and-khicchar
```
1
10
20
30
10
5
```
HACKEREARTH modified-power-set
1
abcde
2
abc
HACKEREARTH panda-and-xor-2
```
1
1111111111 1111111111
```

```
1
-10 -11
```

```
2
10 11
1000000000 1000000001
```
HACKEREARTH round-it
```
5
10 2
101 10
5 10
100 3
100 2
```
HACKEREARTH string-and-primes
1

HACKEREARTH unusual-blocks-6
```
1
27
```
ATCODER p02590 AtCoder Grand Contest 047 - Product Modulo
```
# 2 <= N <= 200,000
# 0 <= A_i < P = 200,003
# All values in input are integers.

# 1. Using the wrong modulo

N = 2
A = [2019, 0]

# 2. Not using the fact that the sum is over unordered pairs

N = 2
A = [2019, 0]

# 3. Using a naive algorithm

N = 5
A = [1, 1, 2, 2, 100000]

# 4. Using incorrect data types

N = 5
A = [1, 1, 2, 2, 100000]

# 5. Not handling overflow

N = 5
A = [1, 1, 2, 2, 100000]

# 6. Not handling negative integers

N = 5
A = [-1, -1, -2, -2, -100000]

# 7. Not handling duplicate integers

N = 5
A = [1, 1, 2, 2, 100000]

# 8. Not handling the special case of N = 1

N = 1
A = [1]
```
ATCODER p02721 AtCoder Beginner Contest 161 - Yutori
1. ```
5 2 3
ooxoo
```
2. ```
16 4 3
ooxxoxoxxxoxoxxo
```
3. ```
11 3 2
ooxxxoxxxoo
```
4. ```
5 1 0
ooooo
```
5. ```
2 1 0
o
```
6. ```
1 1 0
o
```
7. ```
1 0 0
```
ATCODER p02851 AtCoder Beginner Contest 146 - Rem of Sum is Num
```
n,k=map(int,input().split())
a=list(map(int,input().split()))
ans=0
for i in range(n):
    for j in range(i+1,n+1):
        if sum(a[i:j])%k==j-i:
            ans+=1
print(ans)
```
ATCODER p02988 AtCoder Beginner Contest 132 - Ordinary Number
```
5
1 3 5 4 2

9
9 6 3 2 5 8 7 4 1
```
ATCODER p03129 Yahoo Programming Contest 2019 - Anti-Adjacency
3 2
5 5
31 10
10 90
ATCODER p03272 AtCoder Beginner Contest 107 - Train
4 2
1 1
15 11
ATCODER p03429 AtCoder Grand Contest 021 - Tiling
```
1 1 1 0
3 4 4 2
4 5 5 3
7 9 20 20
```
ATCODER p03587 Tenka1 Programmer Beginner Contest - Accepted...?
```
111100
001001
000000
```
ATCODER p03745 AtCoder Grand Contest 013 - Sorted Arrays
```
# 1. Incorrectly using the `sort()` function.

```
n = int(input())
a = list(map(int, input().split()))
a.sort()
print(n)
```

```
# 2. Using the wrong data type for the array.

```
n = int(input())
a = list(map(str, input().split()))
a.sort()
print(n)
```

```
# 3. Not handling edge cases.

```
n = int(input())
a = list(map(int, input().split()))
if n == 0:
    print(0)
else:
    a.sort()
    print(n)
```

```
# 4. Not understanding the time and space complexity of the `sort()` function.

```
n = int(input())
a = list(map(int, input().split()))
a.sort()
print(n)
```

```
# 5. Using the `sort()` function when it is not necessary.

```
n = int(input())
a = list(map(int, input().split()))
print(min(a))
```
ATCODER p03907 CODE FESTIVAL 2016 Exhibition(Parallel) - Distance Pairs
```
2
0 1
1 0
```
```
3
0 1
1 0
2 2
```
```
4
0 1
1 0
1 1
2 1
```
```
5
0 1
1 0
1 1
2 1
3 2
```
AIZU p00011 Drawing Lots
```
1
0
```

```
1
1
1
```

```
1
2
1,2
```

```
5
4
2,4
3,5
1,2
3,4
```

```
10
10
1,5
2,6
3,7
4,8
5,9
6,10
7,1
8,2
9,3
10,4
```
AIZU p00143 Altair and Vega
1
2 5 9 2 8 9 2 11 6 5
AIZU p00276 Formation
3
3 0 0
1 1 1
9 4 1
0 1 2
AIZU p00464 Walk
```
3 4 3
1 0 1 1
0 1 0 0
1 0 1 0
0 0 0

3 3 4
0 1 0
0 1 0
0 1 0

3 4 5
1 0 1 1
0 1 0 0
1 0 1 0
0 0 0

3 5 10
0 1 0 0 0
0 1 0 0 0
0 1 0 0 0
0 1 0 0 0
0 0 0 0 0

3 5 100
0 1 0 0 0
0 1 0 0 0
0 1 0 0 0
0 1 0 0 0
0 0 0 0 0

3 5 10000000
0 1 0 0 0
0 1 0 0 0
0 1 0 0 0
0 1 0 0 0
0 0 0 0 0

0 0 0
```
AIZU p00654 Squid Multiplication
1
1
1
2
4 9
0
AIZU p00799 Pump up Batteries
1 10
2 1 2 0 0
1 5 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1 10 0
1
AIZU p00930 Flipping Parentheses
1. 6 3
((()))
2. 4 3
(())())
3. 1 3
()()()
4. 1

5. (())

6. (())(())

7. (())

8. (()

9. (())()()

AIZU p01063 Rubik Dungeon
**Incorrect input handling**

```
3
0 0 0
1 2 2
```

**Incorrect logic**

```
3
0 0 0
0 0 2
```

**Incorrect output formatting**

```
3
0 0 0
1 2 2
```
AIZU p01196 The Phantom
```
1 1
1 1 4 1
2 2 4 2
1 1
1 1 4 1
2 2 4 2
0 0
```
AIZU p01333 Summer of KMC
1 1
100 10000
100000000 100000000
1 2
1 2
100000000 100000001
100000000 99999999
500 1000
100 10000
400 700
600 5000
10000 10000
0 0
AIZU p01500 Rabbit Jumping
```
1 0 10.0
```

Incorrect implementation of the greedy algorithm.
```
6 3 1.0
1 2 3
4 5 6
0 0
1 0
2 0
0 1
1 1
2 1
```

Incorrect calculation of the distance to the closest reachable island.
```
6 3 1.0
1 2 3
4 5 6
0 0
1 0
2 0
0 1
1 1
2 2
```

Incorrect handling of invalid input.
```
-1 0 1.0
```

Incorrect output format.
```
1 0 10.0
```
```
1 0 10.0
1 2 3
4 5 6
0 0
1 0
2 0
0 1
1 1
2 1
3
```
AIZU p01671 Minimum Spanning Tree
```
4 6
1 2 2
1 3 6
1 4 3
2 3 1
2 4 4
3 4 5
```
AIZU p01813 An Equation in a Mine
```
1-(2+3-4+5)
AIZU p01948 Janken Master
```
2
1
1 40 40 20
```
AIZU p02097 Horizontal-Vertical Permutation
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
AIZU p02235 Longest Common Subsequence
```
1
abc
bc
```

```
3
abc
bdcaba
abc
abc
abc
bc
```

```
2
aa
bb
```

```
3
a
a
a
```

```
10
abdefcgh
ghijklmn
```
AIZU p02381 Standard Deviation
5
70 80 100 90 20
3
80 80 80
0
2
100 100