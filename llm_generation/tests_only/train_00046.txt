CODECHEF arhn04
```
2
1234567890123456789+9876543210987654321
1000-1000
```
CODECHEF clarissa
```
2
1
100
3
80 90 90
```
CODECHEF fcbarca
```
1
2 4
```

```
2
4 2
```

```
3
4 3
```
CODECHEF lealco
5 3 2
1 3 1 2 1
5 3 3
7 7 7 7 7
5 3 3
7 7 7 8 8
4 3 1
1 3 1 2
CODECHEF pinoch2
1
7
1 2 2 3 4 5 5

CODECHEF strq
```
checfcheff
5
c h 1 10
c f 1 10
e c 1 10
c f 1 5
c f 6 10
CODEFORCES 1009_E. Intercity Travelling
```
2
1 2
```

```
4
1 3 3 7
```

```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1032_B. Personalized Cup
```
tourist
tourist
MyNameIsLifeIAmForeverByYourSideMyNameIsLife
```
CODEFORCES 1054_H. Epic Convolution
```
1 1 3
0
0
```
```
2 3 3
1 2
3 4 5
```
```
100000 100000 100000
99999 99999
```
```
100000 100000 100001
99999 99999
```
CODEFORCES 1077_A. Frog Jumping
```
1
1000000000 1 1000000000
```

```
1
1 1 1
```

```
1
1 1000000000 1
```

```
1
1000000000 1 1
```

```
5
1000000000 1 6
1 1 1000000000
1 1 999999999
100 1 4
5 2 3
```
CODEFORCES 1097_H. Mateusz and an Infinite Sequence
```
2 3
0 1 2
3
0 1 1 0
4 10
```
CODEFORCES 1119_A. Ilya and a Colorful Walk
1. **Incorrect input format**
```
5
1 2 3 2 3
```
2. **Incorrect output format**
```
5
```
3. **Incorrect variable type**
```
n = int(input())
c = list(map(int, input().split()))
print(max(c))
```
4. **Off-by-one errors**
```
n = int(input())
c = list(map(int, input().split()))
print(max(c) - min(c))
```
5. **Logic errors**
```
n = int(input())
c = list(map(int, input().split()))
print(c[-1] - c[0])
```
6. **Memory errors**
```
n = int(input())
c = list(map(int, input().split()))
print(max(c) - min(c))
```
7. **Timeout errors**
```
n = int(input())
c = list(map(int, input().split()))
print(max(c) - min(c))
```
CODEFORCES 1145_E. Fourier Doodles
```
labels.txt
1
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
0
```
CODEFORCES 1166_D. Cute Sequences
```
1
1 1000000000 1
```

```
1
1000000000 1000000000 1
```

```
2
2 4 2
4 6 8 10 12 14 16 18 20 22 24
```

```
3
2 3 2
6 10 2
3 10 2
```

```
5
5 10 2
7 14 3
7 14 2
10 1000000000 1
1000000000 1000000000 1
```
CODEFORCES 1185_B. Email from Polycarp
```
4
hello
hello
hello
helloo
hello
hlllloo
hello
helo
```
CODEFORCES 1203_F1. Complete the Projects (easy version)
1. ```
2 4
4 6
10 -2
8 -1
```
2. ```
3 5
4 -5
4 -2
1 3
```
3. ```
4 4
5 2
5 -3
2 1
4 -2
```
4. ```
3 10
10 0
10 -10
30 0
```
CODEFORCES 1220_D. Alex and Julian
```
1
1000000000000000000
```

```
2
1 2
```

```
3
1 2 3
```

```
4
1 2 3 4
```

```
5
1 2 3 4 5
```
CODEFORCES 1245_F. Daniel and Spring Cleaning
```
1
100 200
```

```
2
1 10
2147483647 2147483647
```

```
3
99 100
1 1000000
1000000 1000001
```
CODEFORCES 1265_D. Beautiful Sequence
```
5 5 5 5
```
```
1 2 3 4 0
```
```
1 2 3 4 5
```
```
1 2 1 2 1
```
```
1 1 3 4 0
```
CODEFORCES 1286_F. Harry The Potter
```
1
0
```
CODEFORCES 1305_H. Kuroni the Private Tutor
5 4
2 4
2 3
1 1
0 1
0 0
1
4 1
7
CODEFORCES 132_E. Bits of merry old England
1. ```
1 1
1
```

2. ```
2 1
2 1
```

3. ```
3 1
1 2 1
```

4. ```
4 1
3 1 1 1
```

5. ```
5 1
5 1 1 1 1
```

6. ```
6 1
6 1 1 1 1 1
```

7. ```
7 1
7 1 1 1 1 1 1
```

8. ```
8 1
8 1 1 1 1 1 1 1
```

9. ```
9 1
9 1 1 1 1 1 1 1 1
```

10. ```
10 1
10 1 1 1 1 1 1 1 1 1
```
CODEFORCES 134_C. Swaps
```
4 8
2 2 2 2


6 12
1 1 2 2 3 3


5 5
0 0 0 0 5


1 1
0


2 2
1 2


2 1
2 1


4 1
4 4 4 4


5 1
5 5 5 5 5
```
CODEFORCES 1370_C. Number Game
```
1
1
```
```
1
2
```
```
1
3
```
```
1
4
```
```
1
5
```
```
1
6
```
```
1
12
```
```
100
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
```
CODEFORCES 1392_H. ZS Shuffles Cards
```
2 1
3 2
14 9
```
CODEFORCES 1417_D. Make Them Equal
1
3
1 1 1
CODEFORCES 1434_B. Shurikens
```
1
- 1
+
```

```
4
+
+
- 2
+
- 3
+
- 1
- 4
```

```
1
- 1
+
```

```
3
+
+
+
- 2
- 1
- 3
```

```
5
+
+
+
+
+
- 3
- 5
- 2
- 1
- 4
```
CODEFORCES 1459_B. Move and Turn
1
2
3
CODEFORCES 1485_B. Replace and Keep Sorted
```
# Example 1

4 2 5
1 2 4 5
2 3
3 4

# Example 2

6 5 10
2 4 6 7 8 9
1 4
1 2
3 5
1 6
5 5
```
CODEFORCES 1509_C. The Sports Festival
```
3
3 1 2

1
5

6
1 6 3 3 6 3

6
104 943872923 6589 889921234 1000000000 69
```
CODEFORCES 1535_D. Playoff Tournament
```
3
0110??11
6
5 1
6 ?
7 ?
1 ?
5 ?
1 1
```
CODEFORCES 162_G. Non-decimal sum
```
1
16
5
```

```
1
2
A
```

```
4
10
12
23
45
```

```
2
8
99
99
```

```
10
16
100
1
16
32
64
128
256
512
1024
```
CODEFORCES 182_C. Optimal Sum
```
5 3
0 -2 3 -5 1
2
```
```
5 2
1 -3 -10 4 1
3
```
```
3 3
-2 -5 4
1
```
CODEFORCES 205_E. Little Elephant and Furik and Rubik
```
2
AB
BA
```

```
3
AAB
CAA
```
CODEFORCES 22_D. Segments
1. Incorrect data type
```
1
0 2
```

2. Off-by-one error
```
2
0 2
0 3
```

3. Incorrect logic
```
3
0 2
2 5
4 8
```

4. Memory leak
```
1000
0 10000
```

5. Security vulnerability
```
1000
0 10000
```
CODEFORCES 255_C. Almost Arithmetical Progression
```
1
1
```
```
2
1 2
```
```
3
1 2 3
```
```
4
10 20 10 30
```
```
5
10 20 10 30 40
```
```
6
10 20 10 30 40 50
```
```
7
10 20 10 30 40 50 60
```
```
8
10 20 10 30 40 50 60 70
```
```
9
10 20 10 30 40 50 60 70 80
```
```
10
10 20 10 30 40 50 60 70 80 90
```
```
11
10 20 10 30 40 50 60 70 80 90 100
```
```
12
10 20 10 30 40 50 60 70 80 90 100 110
```
```
13
10 20 10 30 40 50 60 70 80 90 100 110 120
```
```
14
10 20 10 30 40 50 60 70 80 90 100 110 120 130
```
```
15
10 20 10 30 40 50 60 70 80 90 100 110 120 130 140
```
```
16
10 20 10 30 40 50 60 70 80 90 100 110 120 130 140 150
```
```
17
10 20 10 30 40 50 60 70 80 90 100 110 120 130 140 150 160
```
```
18
10 20 10 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170
```
```
19
10 20 10 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180
```
```
20
10 20 10 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190
```
CODEFORCES 279_C. Ladder
```
10 4
2 1 3 4 5 6 7 8 9 10
1 3
2 4
1 5
7 10
```
CODEFORCES 301_B. Yaroslav and Time
1. Incorrect input format

```
1 1000
```

This input is incorrect because it does not have the correct number of lines. The input should have three lines: the first line with the number of stations and the constant `d`, the second line with the time bonuses of the stations, and the third line with the coordinates of the stations.

2. Incorrect output format

```
1000
```

This output is incorrect because it does not have the correct format. The output should be a single integer, which is the total amount of money Yaroslav needs to get to station n.

3. Incorrect calculation of the distance between stations

```
3 1000
1000
0 0
0 1
0 3
```

The distance between stations 1 and 2 is 1, and the distance between stations 2 and 3 is 3. So, the total distance Yaroslav needs to travel is 1 + 3 = 4. However, the program outputs 2000, which is incorrect.

4. Incorrect calculation of the time spent moving between stations

```
3 1000
1000
0 0
0 1
0 3
```

The time spent moving between stations 1 and 2 is 1000 * 1 = 1000, and the time spent moving between stations 2 and 3 is 1000 * 3 = 3000. So, the total time Yaroslav needs to spend moving between stations is 1000 + 3000 = 4000. However, the program outputs 2000, which is incorrect.

5. Incorrect calculation of the total amount of money Yaroslav needs to get to station n

```
3 1000
1000
0 0
0 1
0 3
```

The total amount of money Yaroslav needs to get to station n is 4000 + 1000 + 1 = 5101. However, the program outputs 2000, which is incorrect.
CODEFORCES 327_E. Axis Walking
```
3
2 3 5
2
5 7

```
```
3
2 2 2
2
1 3
```
```
4
1 2 3 4
0
```
```
1
1
0
```
CODEFORCES 34_A. Reconnaissance 2
2
1 1
CODEFORCES 373_B. Making Sequences is Fun
```
1 1 2
```

```
1 10 0
```

```
1000000000 1000000000 1
```

```
1000000000 1000000000 0
```

```
9 1 1
```

```
77 7 7
```

```
114 5 14
```

```
1 1 2
```
CODEFORCES 394_D. Physical Education and Buns
```
1
1
```

```
5
-3 -4 -2 -3 3
```

```
3
2 1
```

```
5
2 -3 -1 -4 3
```

```
1
-4 2
```

```
5
2 -1 1 0 1
```

```
2
0 1
```

```
5
-100 -99 -98 -97 -96
```

```
5
-100 -100 -100 -100 -100
```

```
1
-100
```
CODEFORCES 417_E. Square Table
```
1 1

2 2

1 10

100 100
```
CODEFORCES 444_C. DZY Loves Colors
```
3 3
1 1 2 4
1 2 3 5
2 1 3
```
CODEFORCES 466_D. Increase Sequence
```
1
1

1
2

3
2
1 1 1

4
3
3 2 1 1

2
1
1

3
3
1 2 3

4
4
1 2 3 4

5
1
1 1 1 1 1
```
CODEFORCES 48_B. Land Lot
```
# 48_B. Land Lot

n, m = map(int, input().split())

arr = []
for _ in range(n):
    arr.append(list(map(int, input().split())))

a, b = map(int, input().split())

count = 0

for i in range(n - a + 1):
    for j in range(m - b + 1):
        cnt = 0
        for k in range(i, i + a):
            for l in range(j, j + b):
                if arr[k][l] == 1:
                    cnt += 1
        count = min(count, cnt)

print(count)
```
CODEFORCES 513_E1. Subarray Cuts
```
5 3
5 2 4 3 1
```

```
4 2
7 4 3 7
```

```
1 1
1
```

```
20 10
-10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000 -10000
```

```
5 1
1 2 3 4 5
```
CODEFORCES 538_H. Summer Dichotomy
```
1 2
1 0
1 1
```
CODEFORCES 567_B. Berland National Library
```
1
-1
```
```
1
-2
```
```
2
+1
-1
```
```
3
+1
-1
+1
```
```
5
+1
-1
+2
-2
+3
```
```
6
+12001
-12001
-1
-1200
+1
+7
```
```
6
+10000
-10000
+12345
-12345
+12346
-12346
```
```
20
+1
-1
+2
-2
+3
-3
+4
-4
+5
-5
+6
-6
+7
-7
+8
-8
+9
-9
+10
-10
```
CODEFORCES 588_D. Duff in Beach
```
3 5 3
5 9 1

3 10 3
1 2 3 4 5

2 1000000000 1000000000
1
```
CODEFORCES 610_A. Pasha and Stick
### 1. Using the wrong data type

```
n = int(input())
```

### 2. Using the wrong algorithm

```
dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
dp[0][0] = 1
for i in range(1, n + 1):
    for j in range(1, i + 1):
        dp[i][j] = dp[i - j][j] + dp[i - j][j - 1] + dp[i - j][j + 1]
print(dp[n][1])
```

### 3. Not handling special cases correctly

```
n = int(input())
if n == 1:
    print(1)
elif n % 4 == 0:
    print(4)
else:
    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
    dp[0][0] = 1
    for i in range(1, n + 1):
        for j in range(1, i + 1):
            dp[i][j] = dp[i - j][j] + dp[i - j][j - 1] + dp[i - j][j + 1]
    print(dp[n][1])
```

### 4. Not testing your code

```
n = int(input())
if n == 1:
    print(1)
elif n % 4 == 0:
    print(4)
else:
    dp = [[0 for _ in range(n + 1)] for _ in range(n + 1)]
    dp[0][0] = 1
    for i in range(1, n + 1):
        for j in range(1, i + 1):
            dp[i][j] = dp[i - j][j] + dp[i - j][j - 1] + dp[i - j][j + 1]
    print(dp[n][1])
```
CODEFORCES 630_K. Indivisibility
1. ```
1000000000000000000
```
2. ```
1000000000000000001
```
3. ```
999999999999999999
```
4. ```
111111111111111111
```
5. ```
1000000000000000000
```
CODEFORCES 659_C. Tanya and Toys
```
# 1. Input Format Error

```
1 10
```

```
# 2. Unexpected Input

```
1000000 1000000000000000000
```

```
# 3. Incorrect Calculation

```
10 10
1 2 3 4 5 6 7 8 9 10
```

```
# 4. Undefined Behavior

```
10 10
1 2 3 4 5 6 7 8 9 10
```

```
# 5. Memory Leak

```
10 10
1 2 3 4 5 6 7 8 9 10
```

```
# 6. Time Complexity

```
1000000 1000000000000000000
```

```
# 7. Space Complexity

```
1000000 1000000000000000000
```
CODEFORCES 681_E. Runaway to a Shadow
```
0 0 1 1
3
1 1 1
-1 -1 1
-2 2 1

0 0 1 0
1
1 0 1
```
CODEFORCES 704_D. Captain America
**Test case 1:**

```
5 6
8 3
2 10
1 5
9 10
9 10
2 8
1 9 1
1 2 1
2 10 3
2 10 2
1 1 1
2 5 2
```

**Expected output:**

```
25
rbrbb
```

**Test case 2:**

```
4 4
7 3
10 3
9 8
10 3
2 8
2 8 0
2 8 0
1 2 0
1 9 0
```

**Expected output:**

```
-1
```
CODEFORCES 727_B. Bill Total Value
1. ```
a1b2c3.38
```
2. ```
aa0.01t0.03
```
3. ```
chipsy48.32televizor12.390
```
4. ```
123.05.00
```
5. ```
.001
```
CODEFORCES 748_C. Santa Claus and Robot
```
1
L

10
RLRLRDRLRD

4
LRLR

5
RULL

4
RRUR

6
RRUR

8
RRURURUR

10
RRURDRURDR

10
RULURURUUL

10
ULURULURUU

10
RURURURUR

10
RURURURURU

10
RURURURURU
```
CODEFORCES 771_B. Bear and Different Names
5 3
NO NO YES

CODEFORCES 796_B. Find The Bone
```
7 3 4
3 4 6
1 2
2 5
5 7
7 1
```
```
5 1 2
2
1 2
2 4
```
CODEFORCES 816_C. Karen and Game
```
3 5
2 2 2 3 2
0 0 0 1 0
1 1 1 2 1
```

```
4
row 1
row 1
col 4
row 3
```

```
3 3
0 0 0
0 1 0
0 0 0
```

```
-1
```

```
3 3
1 1 1
1 1 1
1 1 1
```

```
3
row 1
row 2
row 3
```

```
3 3
0 1 0
0 0 0
0 0 0
```

```
-1
```

```
5 5
2 1 3 4 5
5 4 3 2 1
1 2 3 4 5
5 4 3 2 1
2 1 3 4 5
```

```
10
col 1
col 2
col 3
col 4
col 5
row 1
row 2
row 3
row 4
row 5
```
CODEFORCES 841_C. Leha and Function
```
5
7 3 5 3 4
2 1 3 2 3
```
CODEFORCES 862_D. Mahmoud and Ehab and the binary string
1. Incorrect input format:
```
1 2
```

2. Incorrect output format:
```
1 2
```

3. Exceeding the maximum number of queries:
```
3
? 000
? 001
? 010
? 011
? 100
? 101
? 110
? 111
? 000
? 001
? 010
? 011
? 100
? 101
? 110
? 111
```

4. Not flushing the output:
```
3
? 000
0
```

5. Using an incorrect algorithm:
```
3
? 000
? 001
? 010
? 011
? 100
? 101
! 1 2
```
CODEFORCES 888_B. Buggy Robot
```
1
U

2
UD

3
URR

4
LDUR

5
RRRUU

6
LLRRRR
```
CODEFORCES 910_C. Minimum Sum
1. ```
1
a
```
2. ```
2
ab
ba
```
3. ```
3
aa
jj
aa
```
4. ```
5
abcdef
ghij
bdef
accbd
g
```
5. ```
10
aabbbbbabb
```
6. ```
50
abcdefghijklmnopqrstuvwxyz
```
CODEFORCES 932_E. Team Work
1. Incorrect implementation of the factorial function.

```
N = int(input())
k = int(input())

def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)

print(factorial(N) % (10**9 + 7))
```

2. Incorrect use of the modulo operator.

```
N = int(input())
k = int(input())

print(k * factorial(N - 1) % (10**9 + 7))
```

3. Incorrect handling of overflow.

```
N = int(input())
k = int(input())

print(k * factorial(N - 1) % (10**9 + 7))
```

4. Incorrect use of the Sieve of Eratosthenes.

```
N = int(input())
k = int(input())

def sieve(n):
    primes = [True] * (n + 1)
    for i in range(2, n + 1):
        if primes[i]:
            for j in range(i * i, n + 1, i):
                primes[j] = False
    return primes

primes = sieve(N)

print(k * factorial(N - 1) % (10**9 + 7))
```

5. Incorrect use of the Chinese Remainder Theorem.

```
N = int(input())
k = int(input())

def chinese_remainder(a, m):
    m = [m]
    M = 1
    for i in range(len(m)):
        M *= m[i]
    ans = 0
    for i in range(len(m)):
        x = M // m[i]
        ans += a[i] * pow(x, -1, m[i]) * x % M
    return ans % M

a = [k * factorial(N - 1) for _ in range(N)]
m = [10**9 + 7]
print(chinese_remainder(a, m))
```
CODEFORCES 959_F. Mahmoud and Ehab and yet another xor task
```
5 5
0 1 2 3 4
4 3
2 0
3 7
5 7
5 8
```
CODEFORCES 986_D. Perfect Encoding
```
1
36
37
12345678901234567890123456789
```
HACKEREARTH akash-and-the-assignment-1-12
```
3 2
abc
1 2 3
2 3 2
```
HACKEREARTH brio-and-house-2-1
```
1
1 0 1 1
2
```
HACKEREARTH darshak-and-networks
```
1
7
```
HACKEREARTH game-of-bots
2
#A#B# #B#A#
###B# ###B#
HACKEREARTH karan-and-his-sticker-collection
```
1000000000
```
HACKEREARTH missing-alphabets-1
1
abcdefghijklmnopqrstuvwxyz
2
aa
bb
HACKEREARTH palindromic-revenge
1
a
2
aba
3
b

HACKEREARTH robot-challenge
1
-20
HACKEREARTH starting-game-development
2 3 3
10 20 30
7 14 100
11 7
35 13
100 1002
HACKEREARTH turing-and-the-magic-board
1
1000 0
ATCODER p02584 AtCoder Beginner Contest 175 - Walking Takahashi
6 2 4
7 4 3
10 1 2
1000000000000000 1000000000000000 1000000000000000
1000000000000000 1 1
-999999999999999 -1 1000000000000000
-999999999999999 1000000000000000 1000000000000000
ATCODER p02715 AtCoder Beginner Contest 162 - Sum of gcd of Tuples (Hard)
```
3 2
3 200
100000 100000
```
ATCODER p02844 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Lucky PIN
4
0224
6
123123
19
3141592653589793238
ATCODER p02981 AtCoder Beginner Contest 133 - T or T
4 2 9
ATCODER p03122 World Tour Finals 2019 - Triangular Lamps Hard
1
10 10
ATCODER p03264 AtCoder Beginner Contest 108 - Pair
1. `3`
2. `6`
3. `11`
4. `50`
ATCODER p03422 AtCoder Regular Contest 091 - Strange Nim
2
5 2
3 3

2
5 2
3 3

3
3 2
4 3
5 1

3
28 3
16 4
19 2

4
3141 59
26535 897
93 23
8462 64
ATCODER p03580 CODE FESTIVAL 2017 qual B - 101 to 010
```
1
0

5
10101

7
1010101

10
010101010

20
1011010110101101011010110
```
ATCODER p03737 AtCoder Beginner Contest 059 - Three-letter acronym
```
atcoder beginner contest

resident register number

k nearest neighbor

async layered coding
```
ATCODER p03899 CODE FESTIVAL 2016 Tournament Round 3 (Parallel) - Struck Out
```
5 2 3
10 2 8 10 2
```
```
5 5 2
5 2 10 5 9
```
```
10 3 5
3 7 2 6 9 4 8 5 1 1000000000
```
AIZU p00005 GCD and LCM
```
1 2
-1 2
0 1
-1000000000 1000000000
```
AIZU p00137 Middle-Square Method
1. ```
0
```

2. ```
123
```

3. ```
123456789
```

4. ```
-1
```

5. ```
10000
```
AIZU p00270 Railroad
5 7
1 2 3
1 4 1
2 3 5
4 3 1
3 6 2
4 5 2
5 6 1
1 6 6
1 6
4 3
4 6
5 6
2 6
2 5

AIZU p00458 Crossing Black Ice
```
3
3
1 1 0
1 0 1
1 1 0
5
3
1 1 1 0 1
1 1 0 0 0
1 0 0 0 1
0
0
```
AIZU p00648 Watchin' TVA
1
galaxy_angel 0 600
1
galaxy_angel
11
A 0 600
B 0 610
C 0 610
D 0 610
E 0 640
EE 0 700
F 0 710
G 0 710
H 0 710
I 0 740
J 0 750
2
B
H
42
nchj 6 2620
anhnnnmewbktthsrn 4 2515
gntmdsh 1 1800
achnnl 4 2540
hnskirh 0 2200
aonexrcst 0 1700
dgdys 6 2330
hdnnara 4 2525
dnpaonntssotk 4 2555
ddmnwndrlnd 6 2500
C 4 2445
astrttnomch 0 2330
seknnqasr 1 2630
sftnt 4 2630
stnsgt 2 2605
drrnenmknmrmr 4 2610
hnzm 6 2713
yndmsoazzlsn 6 2658
mrahlcalv 4 2615
hshzrhkkrhs 1 900
ortchntsbshni 0 2430
kmnmzshrski 1 2530
sktdnc 4 1800
gykkybrkjhkirkhn 2 2459
trk 0 900
30zzsinhkntiik 3 2700
sngkotmmmirprdx 1 2600
yran 2 2529
tntissygntinybu 1 2614
skiichhtki 5 2505
tgrbnny 6 2558
dnbrsnki 3 1927
yugozxl 1 1930
frbllchrmn 1 1928
fjrg 1 1955
shwmngtr 0 2200
xmn 5 2200
rngnkkrskitikihn 0 2100
szysz 0 1254
prttyrythmaulrdrm 6 1000
sckiesfrntrqst 5 1820
mshdr 1 2255
1
mrahlcalv
0
AIZU p00792 Mirror Illusion
0
1
y 8 7
4
y 8 7
x 7 8
y 0 0
x 0 0
4
y 2 1
x 1 2
y 0 0
x 0 0
-1
AIZU p00924 Bit String Reordering
```
1. Incorrect input format:

Input:

1 2
a 0

Output:

0

2. Incorrect output format:

Input:

3 2
1 0 0
1 2

Output:

100

3. Incorrect logic:

Input:

6 3
1 0 0 1 0 1
1 3 2

Output:

0

4. Off-by-one errors:

Input:

6 3
1 0 0 1 0 1
1 3 2

Output:

2

5. Memory leaks:

Input:

1000000000 1000000000

Output:

1000000000

6. Synchronization issues:

Input:

1000000000 1000000000

Output:

1000000000

7. Security vulnerabilities:

Input:

1000000000 1000000000

Output:

1000000000
```
AIZU p01057 String Crossing
```
2 1
abcd
efgh
1 1 2 2 3
```
AIZU p01189 Roads in a City
1. Incorrect input format

```
0
```

2. Incorrect calculation of the area

```
1
0 0 10 0 5
```

3. Overflow error

```
1
10 10 10 10 10
```

4. Out-of-bounds error

```
1
-16 -16 16 16 10
```

5. Memory leak

```
1
0 0 10 0 5
```
AIZU p01326 UTF-8

AIZU p01494 ThreeRooks
```
3 3 1
0 0

3 3 2
0 0

3 3 3
0 0

8 8 8
0 0
```
AIZU p01660 Sugoroku
5
1 2 3 4 5
1 5
0 1 -1 0 -1 0
AIZU p01807 Stamp Rally
```
4 5 1 4
1 2 (
1 3 a
2 4 a
3 4 )
3 2 +
4 4 1 2
1 3 (
3 4 a
4 1 +
3 2 a
3 4 1 1
1 2 a
2 2 +
2 3 a
3 1 a
5 8 1 5
1 1 [
1 2 (
2 1 *
2 2 a
2 3 a
3 3 )
3 4 ]
4 5 )
2 14 1 1
1 2 a
1 2 (
1 2 )
1 2 [
1 2 ]
1 2 +
1 2 *
2 1 a
2 1 (
2 1 )
2 1 [
2 1 ]
2 1 +
2 1 *
0 0 0 0
```
AIZU p01942 Taiyaki-Master and Eater
3 3 3 6
1 0 1 1
2 2 1 1 2 2
3 1 1 1
4 0 2 1
5 2 1 1 2 2
6 2 2 1 3 3
AIZU p02091 XORANDORBAN
2 1 2 3
2 2 4 5
1 5 5 5
2 0 1 2
3 1 0 1
AIZU p02223 String Set
1
2
3
4
5
6
7
8
9
10
AIZU p02375 Range Query on a Tree II
```
6
2 1 2
2 3 5
0
0
0
1 4
7
1 1
0 3 10
1 2
0 4 20
1 3
0 5 40
1 4


4
1 1
1 2
1 3
0
6
0 3 1000
0 2 1000
0 1 1000
1 1
1 2
1 3
```