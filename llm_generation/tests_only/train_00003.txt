CODECHEF ababaaba
```
1
CODECHEF
```
```
2
AAAA
BAB
```
```
3
AAABB
AAAA
AAABBB
```
```
4
AAAAAAA
BBBBB
AAAABBBB
BBBBBBBB
```
```
5
BBBBBBABAA
BABABBABB
```
CODECHEF chefeq
1
1
4
1 2 3 4

2
1
5
1 1 1 1 1

1
3
1 2 3
CODECHEF direl
5 5
a is father of b
a is mother of c
b is brother of d
c is brother of d
e is mother of a
5
a e
a d
b c
b d
c d
CODECHEF insomb6
1
D
Scorpio
CODECHEF ngame
1
6
CODECHEF sdsquare
1
1 10
CODEFORCES 1000_D. Yet Another Problem On a Subsequence
```
1
1
```
```
4
-1 3 0 1
```
```
5
1 2 -1 1 1
```
CODEFORCES 1025_E. Colored Cubes
```
2 1
1 1
2 2
```

```
4 3
2 2
2 3
3 3
3 2
2 2
2 3
```

```
6 3
3 1
3 2
3 3
2 1
2 2
2 3
```

```
10 5
5 1
5 2
5 3
4 1
4 2
4 3
3 1
3 2
3 3
2 1
2 2
2 3
```

```
1 1
1 1
```

```
2 2
1 1
2 2
```

```
3 2
2 1
2 2
2 3
```

```
4 4
1 2
1 3
2 2
3 2
```
CODEFORCES 1045_G. AI robots
**Incorrect input format:**

```
1 1
1 1 1
```

**Incorrect output format:**

```
1 1
1 1 1
3
```

**Incorrect calculation of the number of pairs of robots that will talk with each other:**

```
3 2
3 6 1
7 3 10
10 5 8
```

**Memory leaks:**

```
1000000000 1000000000
```

**Race conditions:**

```
1000000000 1000000000
```

**Incorrect handling of errors:**

```
1000000000 1000000000
```

**Inefficient algorithms:**

```
1000000000 1000000000
```

**Unclear code:**

```
1000000000 1000000000
```

**Unmaintainable code:**

```
1000000000 1000000000
```

**Insecure code:**

```
1000000000 1000000000
```
CODEFORCES 106_A. Card Game
**Incorrect input format**

```
C
9S 7H
```

**Incorrect logic**

```
C
9S 7H
```

**Incorrect error handling**

```
C
9S 7H
```

**Security vulnerabilities**

```
C
9S 7H
```

**Performance issues**

```
C
9S 7H
```
CODEFORCES 1090_M. The Pleasant Walk
```
1 1
1

10 3
1 2 3 3 2 1 2 2 1

10 5
1 2 3 4 5 4 3 2 1 3

10 10
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 110_C. Lucky Sum of Digits
1
10
11
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
CODEFORCES 1139_F. Dish Shopping
```
3 3
2 1 3
2 4 4
2 1 1
2 2 3
1 2 4
```
CODEFORCES 1157_F. Maximum Balanced Circle
```
1
1
```
```
7
1 2 3 4 5 6 7
```
```
1
10
```
```
3
3 3 3
```
```
10
10 10 10 10 10 10 10 10 10 10
```
```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 117_C. Cycle
1. **Incorrect input format.**

```
3
001
110
000
```

This input is incorrect because it does not have a newline character at the end of the third line. This will cause the program to read the first two lines as a single line, and it will not be able to parse the input correctly.

2. **Incorrect data type.**

```
5
01010
10000
00001
01010
10000
```

This input is incorrect because the first line contains a number that is not an integer. This will cause the program to crash.

3. **Incorrect logic.**

```
5
01111
00000
01000
01100
01110
```

This input is incorrect because there is no cycle of length three in the graph. The program will print an incorrect output, such as `1 2 3`.

4. **Incorrect output format.**

```
5
01111
00000
01000
01100
01110
```

This input is incorrect because the output contains spaces between the numbers. The correct output should be `123`.

5. **Other errors.**

```
5
01111
00000
01000
01100
01110
```

This input is incorrect because the program crashes when it tries to allocate memory. This may be due to a number of reasons, such as a memory leak or a segmentation fault.
CODEFORCES 1198_D. Rectangle Painting 1
```
# 1. Using the wrong data type

3
###
#.#
###
```

```
# 2. Using the wrong algorithm

3
###
#.#
###
```

```
# 3. Insufficient test cases

3
###
#.#
###

3
...
...
...

3
#...
....
....

3
#...#
.#.#.
.....
.#...
#....
```

```
# 4. Incorrect output

3
###
#.#
###
```

```
# 5. Coding errors

3
###
#.#
###
```

```
# 6. Runtime errors

3
###
#.#
###
```
CODEFORCES 1215_C. Swap Letters
1
b
a
CODEFORCES 1238_E. Keyboard Purchase
```
6 3
aacabc
```
```
6 4
aaaaaa
```
```
15 4
abacabadabacaba
```
```
1 1
a
```
CODEFORCES 1256_F. Equalizing Two Strings
5
4
abcd
abdc
5
ababa
baaba
4
asdf
asdg
4
abcd
badc
10
abccdddeee
dddeeeabcc
CODEFORCES 1280_A. Cut and Paste
```
5
5
231
7
2323
6
333
24
133321333
```
CODEFORCES 12_E. Start of the season
```
2
4
```
CODEFORCES 1324_A. Yet Another Tetris Problem
```
1
3
1 1 3
```

```
1
4
1 1 2 1
```

```
1
2
11 11
```

```
1
1
100
```

```
2
2
10 10
1
1
```

```
4
3
1 1 3
4
1 1 2 1
2
11 11
1
100
```
CODEFORCES 1342_F. Make It Ascending
```
1
5
1 5 2 3 4
```

```
1
2
1 2
```

```
1
1
1
```

```
1
4
1 4 2 3
```

```
1
10
10 9 8 7 6 5 4 3 2 1
```

```
2
3 3
1 1
```

```
1
1
1
```

```
1
2
1 2
```

```
1
1
1
```

```
1
1
1
```
CODEFORCES 1365_A. Matrix Game
```
1
2 1
0 1
```

```
1
3 1
0 1 0
```

```
1
3 3
1 0 0
0 0 0
1 0 0
```

```
4
2 2
1 1
0 0
2 2
0 0
0 1
2 3
1 0 1
1 1 0
3 3
1 0 0
0 0 0
1 0 0
```
CODEFORCES 1385_A. Three Pairwise Maximums
```
3
1 1 1
1 2 3
1 1 1000000000
```
CODEFORCES 1406_D. Three Sequences
```
4
2 -1 7 3
2
2 4 -3
3 4 2

3
4
-9 -10 -9 -6 -5 4
3
2 6 -9
1 2 -10
4 6 -3

1
0
2
1 1 -1
1 1 -1
```
CODEFORCES 1427_E. Xum
```
3
```

```
123
```

```
1234567890
```

```
12345678901234567890
```
CODEFORCES 1450_E. Capitalism
```
3 4
1 2 0
2 3 0
3 1 1
```
CODEFORCES 1474_C. Array Destruction
1
2
3 5 1 2
CODEFORCES 149_E. Martian Strings
**Incorrect input format**

```
A
1
A
```

**Incorrect output format**

```
ABCBABA
2
BAAB
ABBA
1.2
```

**Incorrect logic**

```
ABCBABA
2
BAAB
ABBA
1
```

**Memory leaks**

```
ABCBABA
2
BAAB
ABBA
1
```

**Synchronization issues**

```
ABCBABA
2
BAAB
ABBA
1
```

**Security vulnerabilities**

```
ABCBABA
2
BAAB
ABBA
1
```
CODEFORCES 1523_E. Crypto Lights
```
# -*- coding: utf-8 -*-
"""
Created on Mon Mar  7 16:28:09 2022

@author: shash
"""


def solve():
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        if n % k == 0:
            print(n // k)
        else:
            print(n // k + 1)


if __name__ == "__main__":
    solve()
```

Input 1:
```
2
3 2
15 2
```

Input 2:
```
3
3 2
15 2
40 15
```
CODEFORCES 155_D. Colliders
```
3 5
+ 1
+ 2
+ 3
- 1
- 2
```

```
10 10
+ 6
+ 10
+ 5
- 10
- 5
- 6
+ 10
+ 3
+ 6
+ 3
```

```
10 100
+ 1
+ 2
+ 3
+ 4
+ 5
+ 6
+ 7
+ 8
+ 9
+ 10
- 2
- 3
- 4
- 5
- 6
- 7
- 8
- 9
- 10
+ 11
+ 12
+ 13
+ 14
+ 15
+ 16
+ 17
+ 18
+ 19
+ 20
- 11
- 12
- 13
- 14
- 15
- 16
- 17
- 18
- 19
- 20
```
CODEFORCES 177_D2. Encrypting Messages
```
3 1 5
1 2 3
4
```
CODEFORCES 198_E. Gripping Story
```
0 0 5 10 5
5 4 7 11 5
-7 1 4 7 8
0 2 13 5 6
2 -3 9 3 4
13 5 1 9 9
```
CODEFORCES 222_A. Shooshuns and Sequence 
1. ```
3 2
3 1 1
```
2. ```
3 1
3 1 1
```
3. ```
3 3
1 2 3
```
4. ```
100 1
1 2 3 4 5 6 7 8 9 10 ... 99 100
```
5. ```
5 3
1 2 3 3 1
```
6. ```
1 1
1
```
7. ```
3 1
1 2 1
```
8. ```
100 100
1 2 3 4 5 6 7 8 9 10 ... 99 100
```
9. ```
10 1
1 2 3 4 5 6 7 8 9 10
```
10. ```
10 10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 245_G. Suggested Friends
```
1
a
```
```
1
a b
```
```
5
a b
c d
a c
b d
e c
```
```
4
a b
a c
a d
b c
```
```
4
a b
a c
a d
b c
d e
```
CODEFORCES 270_E. Flawed Flow
```
3 3
3 2 10
1 2 10
3 1 5
```
```
3 2
1 2 10
2 3 10
```
```
3 1
1 2 10
```
```
4 5
1 2 10
1 3 10
2 3 5
4 2 15
3 4 5
```
```
3 3
1 2 10
1 3 10
3 1 5
```
CODEFORCES 294_B. Shaass and Bookshelf
1. Incorrect input format

```
5
1 12
1 3
2 15
2 5
2 1
```

2. Incorrect output format

```
5
```

3. Incorrect algorithm

```
5
1 12
1 3
2 15
2 5
2 1
```

4. Incorrect implementation

```
5
1 12
1 3
2 15
2 5
2 1
```

5. Incorrect testing

```
5
1 12
1 3
2 15
2 5
2 1
```
CODEFORCES 317_E. Princess and Her Shadow
```
# 317E - Princess and Her Shadow

from sys import stdin

def is_occupied(x, y, trees):
	for t in trees:
		if x == t[0] and y == t[1]:
			return True
	return False

def get_move(vx, vy, sx, sy):
	moves = []
	while vx != sx or vy != sy:
		if vx < sx:
			moves.append('R')
			vx += 1
		elif vx > sx:
			moves.append('L')
			vx -= 1
		elif vy < sy:
			moves.append('U')
			vy += 1
		elif vy > sy:
			moves.append('D')
			vy -= 1
	return moves


def main():
	vx, vy, sx, sy, n = map(int, stdin.readline().split())
	trees = [list(map(int, stdin.readline().split())) for _ in range(n)]
	moves = get_move(vx, vy, sx, sy)

	if is_occupied(vx, vy, trees):
		print('-1')
	else:
		print(''.join(moves))


if __name__ == '__main__':
	main()
```
CODEFORCES 341_E. Candies Game
```
3
3 6 9
```

```
3
0 1 0
```

```
4
0 1 1 0
```

```
5
1 1 1 1 1
```

```
10
1 1 1 1 1 1 1 1 1 1
```

```
10
2 2 2 2 2 2 2 2 2 2
```

```
10
0 1 0 0 0 0 0 0 0 0
```

```
10
10 0 0 0 0 0 0 0 0 0
```

```
10
10 10 10 10 10 10 10 10 10 10
```
CODEFORCES 365_B. The Fibonacci Segment
**Incorrect data types:**

```
n = int(input())
a = list(map(int, input().split()))
```

**Incorrect indexes:**

```
n = int(input())
a = list(map(int, input().split()))
for i in range(n):
  print(a[i])
```

**Not handling the edge cases:**

```
n = int(input())
a = list(map(int, input().split()))
if n == 0:
  print(0)
elif n == 1:
  print(1)
else:
  print(2)
```

**Using incorrect algorithms:**

```
n = int(input())
a = list(map(int, input().split()))
dp = [[0] * (n + 1) for _ in range(n + 1)]
for i in range(n):
  for j in range(i + 1, n + 1):
    if i == 0 or j == i + 1:
      dp[i][j] = 1
    elif a[i] == a[j - 1] + a[j - 2]:
      dp[i][j] = dp[i + 1][j - 2] + 1
    else:
      dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])
print(dp[0][n])
```

**Not testing the code:**

```
n = int(input())
a = list(map(int, input().split()))
print(dp[0][n])
```

**Correct program inputs:**

```
1
1
```

```
2
1 1
```

```
3
1 1 1
```

```
4
1 2 3 5
```

```
5
1 1 1 1 1
```

```
10
1 2 3 5 8 13 21 34 55 89
```

```
100
5 4 3 2 1 2 3 4 5
```

```
1000000
1
```
CODEFORCES 389_A. Fox and Number Game
```
1
100
```

```
2
1 1
```

```
3
2 4 6
```

```
2
12 18
```

```
5
45 12 27 30 18
```
CODEFORCES 409_D. Big Data

CODEFORCES 436_E. Cardboard Box
```
2 3
1 2
1 2
```
CODEFORCES 45_A. Codecraft III
```
January
1
```
```
February
12
```
```
March
6
```
```
April
3
```
```
May
24
```
```
June
12
```
```
July
7
```
```
August
4
```
```
September
1
```
```
October
12
```
```
November
6
```
```
December
3
```
CODEFORCES 480_E. Parking Lot
**1. Incorrect input format**

```
5 5 1
........
X.....X.
........
........
........
```

This input is missing the number of arriving cars. Your program should raise an error when it encounters this input.

**2. Incorrect output format**

```
5 4 3 2 1
```

This output is incorrect because it does not have the correct number of integers. Your program should raise an error when it encounters this output.

**3. Overflow errors**

```
1000000000 1000000000 1
```

This input will cause an overflow error when your program tries to calculate the maximum square of empty spots. Your program should raise an error when it encounters this input.

**4. Off-by-one errors**

```
5 5 1
........
X.....X.
........
........
........
1 5
```

This input will cause an off-by-one error when your program tries to find the maximum square of empty spots. Your program should print 4 instead of 5.

**5. Logical errors**

```
5 5 1
........
X.....X.
........
........
........
1 5
2 5
```

This input will cause a logical error when your program tries to find the maximum square of empty spots. Your program should print 4 instead of 5.
CODEFORCES 505_E. Mr. Kitayuta vs. Bamboos
**Incorrect understanding of the problem:**

```
1 1 1 1
0
```

**Incorrect implementation of the algorithm:**

```
3 1 2 5
10 10
10 10
15 2
```

**Incorrect testing:**

```
5 3 3 10
9 5
9 2
4 7
9 10
3 8
```

**Incorrect submission:**

```
n, m, k, p = map(int, input().split())
h = []
a = []
for _ in range(n):
    h.append(int(input().split()[0]))
    a.append(int(input().split()[1]))

ans = 0
for i in range(n):
    temp = h[i]
    for j in range(m):
        temp -= min(k, temp//p)*p
        temp += a[i]
    ans = max(ans, temp)

print(ans)
```
CODEFORCES 529_D. Social Network
```
# 529_D. Social Network

def getTime(time):
    return int(time[0:2]) * 3600 + int(time[3:5]) * 60 + int(time[6:8])

def main():
    n, m, t = map(int, input().split())
    times = [getTime(x) for x in input().split()]
    times.sort()
    ans = []
    last = -1
    cur = 1
    for i in range(n):
        if times[i] - last >= t:
            last = times[i]
            ans.append(cur)
            cur += 1
        if cur > m:
            print("No solution")
            return
    print(cur - 1)
    print(*ans)

if __name__ == "__main__":
    main()
```
CODEFORCES 555_A. Case of Matryoshkas
```
3 2
2 1 2
1 3

5 3
3 1 3 7
2 2 5
2 4 6
```
CODEFORCES 580_E. Kefa and Watch
**Incorrect input format:**

```
1 1 1
a
```

**Incorrect output format:**

```
1 1 1
123
YES
```

**Incorrect logic:**

```
1 1 1
123
1 1 1 1
2 1 3 1
```

**Memory leaks:**

```
1 1 1
123
```

**Race conditions:**

```
1 1 1
123
```

**Deadlocks:**

```
1 1 1
123
```

**Other bugs:**

```
1 1 1
123
```
CODEFORCES 602_D. Lipshitz Sequence
```
10 4
1 5 2 9 1 3 4 2 1 7
2 4
3 8
7 10
1 9
```
```
7 6
5 7 7 4 6 6 2
1 2
2 3
2 6
1 7
4 7
3 5
```
CODEFORCES 625_B. War of the Corporations
1. input: intellect
tell
output: 1

2. input: google
apple
output: 0

3. input: sirisiri
sir
output: 2

4. input: 
output: 0

5. input: intellect #tell
output: 2

6. input: 1
output: 1

7. input: intellect
tell
output: 0
CODEFORCES 64_D. Presents
```
1 1 1

1 10 10

10 10 10
```
CODEFORCES 673_D. Bear and Two Paths
```
5 7
1 2 3 4 5
```
```
6 7
1 2 3 4 5 6
```
```
5 6
1 2 3 4 5
```
```
1000 999
10 20 30 40
```
```
1000 1000
10 20 30 40
```
```
1000 999
10 20 30 40
```
```
1000 999
10 20 30 40
```
```
1000 999
10 20 30 40
```
```
1000 999
10 20 30 40
```
```
1000 999
10 20 30 40
```
CODEFORCES 698_E. Cron
```
# 1. Incorrect input format

-1 59 23 -1 -1 -1
1
1467372658

# 2. Incorrect calculation of time

-1 59 23 -1 -1 -1
1
-1000000000

# 3. Incorrect handling of leap years

-1 59 23 -1 -1 -1
1
2400000000

# 4. Incorrect handling of days of the week

0 0 12 6 3 7
3
1467372658
1467460810
1467547200

# 5. Incorrect handling of months

0 0 12 6 3 7
3
1467372658
1467460810
1467547200

# 6. Incorrect handling of years

-1 59 23 -1 -1 -1
1
1467372658
```
CODEFORCES 71_A. Way Too Long Words
```
1
a
```
```
1
localization
```
```
1
i18n
```
```
1
pneumonoultramicroscopicsilicovolcanoconiosis
```
```
10
a
b
c
d
e
f
g
h
i
j
```
```
-1
```
```
100
abcdefghijklmnopqrstuvwxyz
```
```
101
abcdefghijklmnopqrstuvwxyz0
```
```
a1
```
```
z99
```
```
a1b1c1d1e1f1g1h1i1j1
```
```
a99b99c99d99e99f99g99h99i99j99
```
CODEFORCES 740_C. Alyona and mex
```
5 3
1 3
2 5
4 5
```
```
4 2
1 4
2 4
```
CODEFORCES 764_B. Timofey and cubes
```
7
4 3 7 6 9 1 2

8
6 1 4 2 5 6 9 2

1
1

```
CODEFORCES 787_D. Legacy
```
3 5 1
2 3 2 3 17
2 3 2 2 16
2 2 2 3 3
3 3 1 1 12
1 3 3 17
```
CODEFORCES 809_A. Do you want a date?
```
2
4 7
```
```
3
4 3 1
```
```
4
1 3 5 7
```
```
5
1 2 3 4 5
```
```
10
1 10 2 3 4 5 6 7 8 9
```
CODEFORCES 833_D. Red-Black Cobweb
```
5
1 2 9 0
2 3 5 1
2 4 5 0
2 5 5 1
```
CODEFORCES 854_B. Maxim Buys an Apartment
```
5 2
```
```
10 4
```
CODEFORCES 878_E. Numbers on the blackboard
```
1
1
1
```

```
5
1
1 2 3 4 5
1 5
2 5
3 5
4 5
```

```
3
1
1 -2 3
1 3
```
CODEFORCES 902_B. Coloring a Tree
```
# 902_B. Coloring a Tree

def dfs(v, color):
    visited[v] = True
    color[v] = color
    for u in adj[v]:
        if not visited[u]:
            dfs(u, color)


n = int(input())
adj = [[] for _ in range(n + 1)]
for i in range(n - 1):
    u, v = map(int, input().split())
    adj[u].append(v)
    adj[v].append(u)

color = [0] * (n + 1)
visited = [False] * (n + 1)
dfs(1, 1)

ans = 0
for i in range(2, n + 1):
    if color[i] == color[i - 1]:
        ans += 1
print(ans)
```
CODEFORCES 924_D. Contact ATC
```
5 1
-3 2
-3 3
-1 2
1 -3
3 -5


6 1
-3 2
-2 2
-1 2
1 -2
2 -2
3 -2
```
CODEFORCES 952_F. 2 + 2 != 4
```
8-7+6-5+4-3+2-1-0
```

```
2+2
```

```
112-37
```
CODEFORCES 97_C. Winning Strategy
```
3
0.115590 0.384031 0.443128 0.562356
```
CODEFORCES 99_C. Help Victoria the Wise
1. Incorrect input format
```
R
```

2. Incorrect output format
```
R
```

3. Incorrect calculation of the number of ways to decorate the box
```
RRRRR
```

4. Incorrect rotation of the box
```
ROYGBV
```

5. Other bugs
```
RRRRR
```
HACKEREARTH benny-and-the-universe
```
3 3
5 6 7
5
10
8
```
HACKEREARTH compound-conversion-1
3
01??00
001010
01
10
110001
000000
HACKEREARTH final-voyage-1
```
1
3
3
1 2 3     
2 4 8
```
HACKEREARTH ikshus-love-for-binary-numbers
5 1
10 3
60 1
100 50
HACKEREARTH marut-and-strings-4
1
abcEfg
2
!@6#2
3
123A
HACKEREARTH numbers-of-interest-1
```
1
3 2 7
```
HACKEREARTH rahuls-logo
```
1
3
5
100
-1
```
HACKEREARTH shivani-and-vinna
```
1
1 1 1 1
```
HACKEREARTH the-rise-of-the-weird-things-1
```
2
2 10
```
```
3
12 3 15
```
```
1
22
```
ATCODER p02540 ACL Contest 1 - Reachable Towns
```
1
1 1
```
```
2
1 1
2 2
```
```
3
1 1
2 2
3 3
```
```
4
1 1
2 2
3 3
4 4
```
```
5
1 1
2 2
3 3
4 4
5 5
```
```
6
1 1
2 2
3 3
4 4
5 5
6 6
```
```
7
1 1
2 2
3 3
4 4
5 5
6 6
7 7
```
ATCODER p02671 AtCoder Grand Contest 044 - Strange Dance
1
SRS

2
RRSRSSSSR

3
SRSRRSRRRSRRRR

4
RSRRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSRSR
ATCODER p02800 Keyence Programming Contest 2020 - Monochromization
```
1 3
..#
```

```
2 3
..
.#
```

```
2 2
#.
.#
```

```
3 3
...
...
...
```

```
2 4
...
...#
```

```
6 7
.......
.......
.#.....
..#....
.#.#...
.......
```
ATCODER p02936 AtCoder Beginner Contest 138 - Ki
```
4 3
1 2
2 3
2 4
2 10
1 100
3 1
```
ATCODER p03073 AtCoder Beginner Contest 124 - Coloring Colorfully
```
000
10010010
0
```
ATCODER p03215 Dwango Programming Contest V - Sum AND Subarrays
**1. Not considering the constraints of the problem.**

```
n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n + 1):
        ans = max(ans, a[i] & a[j])

print(ans)
```

**2. Using an incorrect data type.**

```
n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n + 1):
        ans = max(ans, a[i] & a[j])

print(ans)
```

**3. Not using the bitwise AND operator.**

```
n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n + 1):
        ans = max(ans, a[i] + a[j])

print(ans)
```

**4. Not considering all possible subsequences.**

```
n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
for i in range(n):
    ans = max(ans, a[i])

print(ans)
```

**5. Using an incorrect algorithm.**

```
def dfs(i, j, k, ans):
    if k == 0:
        return ans
    if i >= n or j >= n:
        return ans
    return max(dfs(i + 1, j, k - 1, ans), dfs(i, j + 1, k - 1, ans), dfs(i + 1, j + 1, k - 1, ans))

n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n + 1):
        ans = max(ans, dfs(i, j, k, 0))

print(ans)
```

**6. Not handling edge cases.**

```
n, k = map(int, input().split())
a = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n + 1):
        ans = max(ans, a[i] & a[j])

if k == 0:
    print(ans)
else:
    print(-1)
```
ATCODER p03364 AtCoder Grand Contest 023 - Find Symmetries
```
2
ab
ca
```
ATCODER p03522 CODE FESTIVAL 2017 Exhibition (Parallel) - Increment and Swap
5
4
1
8
8
7


20
8
2
9
7
4
6
7
9
7
4
7
4
4
3
6
2
3
4
4
9
ATCODER p03687 AtCoder Grand Contest 016 - Shrinking
```
serval
jackal
zzz
whbrjpjyhsrywlqjxdbrbaomnw
ATCODER p03840 AtCoder Grand Contest 008 - Tetromino Tiling
```
0 0 10 0 0 0 0
```
```
1 0 0 0 0 0 0
```
```
0 0 0 0 0 0 1
```
```
0 1 0 0 0 0 0
```
```
2 1 1 0 0 0 0
```
ATCODER p04007 AtCoder Grand Contest 004 - AND Grid
5 5
.....
.#.#.
.....
.#.#.
.....

3 3
###
###
###
AIZU p00093 Leap Year
2001 2010
2005 2005
2001 2010
0 0
-10 2000
AIZU p00225 Kobutanukitsuneko
5
apple
yellow
georgia
king
email
7
apple
yellow
georgia
king
email
wink
lucky
0
AIZU p00387 Party Dress
3 5
25 10
AIZU p00603 Riffle Shuffle
10 1
1
9 4
1 2 3 4
10 4
1 2 3 4
9 1
3
10 1
5
9 4
1 2 3 4
9 1
7
9 4
1 2 3 4
5 1
3
AIZU p00740 Next Mayor
3 2
3 3
3 50
10 29
31 32
50 2
50 50
0 0
AIZU p00879 Chemist's Math
N2+H2->NH3.
Na+Cl2->NaCl.
Ca(OH)2+CO2->CaCO3+H2O.
CaCl2+AgNO3->Ca(NO3)2+AgCl.
C2H5OH+O2->CO2+H2O.
C4H10+O2->CO2+H2O.
A12B23+C34D45+ABCD->A6D7+B8C9.
A98B+B98C+C98->A98B99C99.
A2+B3+C5+D7+E11+F13->ABCDEF.
.
AIZU p01010 Light Source
```
1
90 10 20
3 3 1 90 10 315 10
6 0 1
```

```
2
90 10 10
-3 0 1 45 10 90 10
-6 0 2 30 3 180 10
-9 0 1
```

```
3
90 10 10
-3 0 1 45 10 90 10
-6 0 2 30 3 180 10
-9 0 1
-12 0 3 0 10 0 10
```
AIZU p01142 Karakuri Doll
```
5 3
#####
#K.M#
#####
```
```
9 5
#########
#.....###
#.###..M#
#K#######
#########
```
```
9 5
#########
#K......#
####.####
####M####
#########
```
```
9 5
#########
#M......#
####.####
####K####
#########
```
```
7 9
#########
#####M#
#####.#
#.....#
#.###.#
#.....#
#.#####
#K#####
#########
```
```
7 6
#######
#####.#
##....#
#K..#.#
###M#.#
#######
```
```
7 8
#######
##...##
###.#M#
#.....#
#.#...#
#.#..##
#.K####
#######
```
```
9 6
#########
###..##.#
##......#
#K....#.#
##..#M#.#
#########
```
```
9 6
#########
#.#######
#....#M.#
#.#...#.#
###K#...#
#########
```
```
12 7
############
###...####.#
##K#...M##.#
##.....#...#
#........#.#
###..#...#.#
############
```
```
23 16
#######################
#########...###########
##########.###.########
##########.....########
##########.#.#.###...##
########.#.#.######.###
########............###
########.###.######.###
############.######.###
#K...........######.###
####.#######.######.###
####.#######.######.###
####.................M#
####.#######.##########
###...#####...########
#######################
```
```
46 16
##############################################
#..............#..############################
#..#..........#.#.###....#...................#
#.................###.#.#.#...............#..#
#...#..#....#...#.###.#......................#
#...#....#....#.#.###.#.#...#....#....#..#...#
#.#........#..........#.#.#....#....#....#...#
#...#...#.......###.#........#.........#...#.#
#.#...#.........###.#..##.......#........#...#
#...#........#..###.#..##.........#........#.#
#...............###.#..##..#.........#...#...#
############.######.#..##....................#
###########K...........#.########.############
###################...............M###########
##################.......#####################
##############################################
```
```
0 0
```
AIZU p01281 Tatami
3 4
4 4
0 0
AIZU p01451 Roads on Towns
```
2 2
0 0
1 1
2 0
2 -1
```
AIZU p01601 Palindromic Number
1. ```
1
```
2. ```
101
```
3. ```
1000000
```
AIZU p01757 Tournament
```
1 1
0 2
1
```
AIZU p01897 DAG Trio (Hard)
3 3
1 2
2 3
3 1

100 100
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 11
11 12
12 13
13 14
14 15
15 16
16 17
17 18
18 19
19 20
20 1

100 100
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 11
11 12
12 13
13 14
14 15
15 16
16 17
17 18
18 19
19 20
20 2
AIZU p02034 Round-trip String
6
tabata
AIZU p02177 iff
5 2
1 2
2 1
AIZU p02320 Knapsack Problem with Limitations
```
#include <iostream>
#include <vector>

using namespace std;

int main() {
  int n, w;
  cin >> n >> w;

  vector<int> v(n);
  vector<int> w(n);
  vector<int> m(n);
  for (int i = 0; i < n; i++) {
    cin >> v[i] >> w[i] >> m[i];
  }

  vector<vector<int>> dp(n + 1, vector<int>(w + 1, 0));

  for (int i = 0; i <= n; i++) {
    for (int j = 0; j <= w; j++) {
      if (i == 0 || j == 0) {
        dp[i][j] = 0;
      } else {
        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i - 1]] + v[i - 1]);
        if (j >= w[i - 1] && m[i - 1] > 0) {
          dp[i][j] = max(dp[i][j], dp[i - 1][j - w[i - 1]] + v[i - 1] + dp[i - 1][j - w[i - 1] - m[i - 1]]);
        }
      }
    }
  }

  cout << dp[n][w] << endl;

  return 0;
}
```
AIZU p02465 Set Difference
```
5
1 2 3 5 8
2
2 5

5
1 2 3 5 8
4
4 5 6 7

5
1 2 3 5 8
3
3 5 7

5
1 2 3 5 8
1
1

5
1 2 3 5 8
0
```