CODECHEF botm
```
1
3
1 2 3
```
CODECHEF collide
```
1
2 2 U
1
2 1 D
```
```
1
0 0 R
2
1 -2 U
2 2 D
```
```
1
1 1 U
1
1 0 U
```
```
2
0 0 R
2
1 -2 U
2 2 D
```
```
2
0 0 R
1
3 0 L
```
CODECHEF gardensq
```
1
4 4
aabb
aabb
bbaa
bbaa
```
```
2
3 3
aba
bab
aba
2 2
aa
aA
```
```
3
3 3
aba
bab
aba
4 4
aabb
aabb
bbaa
bbaa
```
```
4
1 1
a
2 2
aa
3 3
aaa
4 4
aaaa
```
```
5
5 5
aaaaaaaaaa
aaaaaaaaaa
aaaaaaaaaa
aaaaaaaaaa
aaaaaaaaaa
```
CODECHEF lucky8
```
1
50 51
```

```
2
1 1000000000
1000000001 1000000002
```

```
3
47 74
74 75
75 76
```
CODECHEF prosum
1
3
3 4 5
CODECHEF testtt5
1
23456789X0X0
CODEFORCES 1012_C. Hills
```
5
1 1 1 1 1
```
```
3
1 2 3
```
```
5
1 2 3 2 2
```
CODEFORCES 1037_C. Equalize
1. ```
5
10010
10010
```

2. ```
3
101
011
```

3. ```
10
0100100010
0100100010
```

4. ```
1000000000000000000
0000000000000000000
```

5. ```
10000000000000000000
01000000000000000000
```
CODEFORCES 105_D. Entertaining Geodetics
```
3 3
1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
1 1 1
2 2
```
CODEFORCES 1081_E. Missing Numbers
```
1
100
```
```
2
100
```
```
3
1 2 3
```
```
4
2 4 6 8
```
```
6
5 11 44
```
```
6
314 1592 6535
```
```
8
16 32 49 64 81 100 121 144
```
```
10
5 10 17 26 37 50 65 82 101 122
```
```
16
1 4 9 16 25 36 49 64 81 100 121 144 169 196 225
```
CODEFORCES 1100_E. Andrew and Taxi
```
3 3
1 2 2
2 3 2
3 1 2
```
CODEFORCES 1129_B. Wrong Answer
8
612
CODEFORCES 1149_C. Tree Generatorâ„¢
```
1 0
```

```
2 0
()
```

```
1 1
(
```

```
2 1
() ()
```

```
3 2
(() )
1 2
```

```
4 3
(() ())
1 2
2 3
```

```
5 5
(((())))
4 5
3 4
5 6
3 6
2 5
```

```
6 4
(((())()))
6 7
5 4
6 4
7 4
```

```
7 4
(((()))))
1 2
3 4
5 6
2 7
```

```
8 4
(((()()))
1 2
3 4
5 6
2 7
```

```
9 4
(((()()))
1 2
3 4
5 6
2 7
```

```
10 4
(((()()))
1 2
3 4
5 6
2 7
```
CODEFORCES 1170_C. Minus and Minus Give Plus
5
-+--+
-+++
--------
-+--+-
-
+
--
---
+++
+++
CODEFORCES 1189_B. Number Circle
**Incorrect input format**

```
3
2 4 3
```

**Incorrect data type**

```
3
1 2 3.0
```

**Incorrect logic**

```
3
1 2 3
```

**Off-by-one error**

```
3
1 2 3
```

**Index out of bounds error**

```
3
1 2 3
```

**Null pointer exception**

```
3
1 2 3
```

**Arithmetic overflow**

```
3
1000000000 1000000000 1000000000
```

**Stack overflow**

```
1000000000
```

**Memory leak**

```
1000000000
```

**Garbage collection**

```
1000000000
```
CODEFORCES 1208_B. Uniqueness
```
1
1
```
```
3
1 2 3
```
```
4
1 1 2 2
```
```
5
1 4 1 4 9
```
```
5
1 4 2 1 4
```
```
5
1 1 1 1 1
```
```
5
1 5 5 5 5
```
```
5
1000000000 1000000000 1000000000 1000000000 1000000000
```
CODEFORCES 1227_B. Box
```
1
2
1 2
```

```
1
1
1
```

```
2
1 1
-1
```

```
3
1 2 3
1 2 3
```

```
2
1 1
2 1
```

```
4
1 1 3 4
-1
```

```
5
1 3 4 5 5
1 3 4 5 2
```

```
2
2 2
2 1
```

```
1
1000000000
1000000000
```
CODEFORCES 124_E. Brackets
```
1 2 1
1 2
```
```
2 3 1
1 2 3
4 5 6
```
```
3 2 2
3 6
1 4
2 5
```
```
2 1 1
1
```
```
1 2 2
1 2
```
```
2 3 4
1 2 3
4 5 6
7 8 9
```
CODEFORCES 1269_C. Long Beautiful Integer
```
3 2
353
```

```
4 2
1234
```

```
6 2
432143
```

```
6 3
432143
```

```
1 1
0
```

```
200000 1
1
```
CODEFORCES 1291_C. Mind Control
```
1
3 1 0
1 2 4
```

```
1
4 3 2
2 13 60 4
```

```
1
3 3 0
1 2 4
```

```
1
3 3 1
1 2 4
```

```
2
4 4 1
1 2 3 4
4 4 0
1 2 3 4
```

```
1
6 3 1
2 5 3 4 6 7
```

```
5
6 4 2
2 9 2 3 8 5
4 4 1
2 13 60 4
4 1 3
1 2 2 1
2 2 0
1 2
```

```
1
3 1 0
3 2 1
```

```
4
6 4 2
2 9 2 3 8 5
4 4 1
2 13 60 4
4 1 3
1 2 2 1
2 2 0
1 2
```
CODEFORCES 1311_D. Three Integers
```
1
1 2 3
```

```
1
123 321 456
```

```
5 10 15
```

```
15 18 21
```

```
100 100 101
```

```
1 22 29
```

```
3 19 38
```

```
6 30 46
```
CODEFORCES 1334_B. Middle Class
```
1
5 3
5 1 2 1
```
```
2
4 10
11 9 11 9
```
```
2
4 3
4 3 7 9
```
```
1
3 10
1 1 1
```
CODEFORCES 1354_D. Multiset
```
10 10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
```
```
10 10
1 2 3 4 5 6 7 8 9 10
-5 -1 -3 -1
```
```
6 2
1 1 1 2 3 4
5 6
```
```
1000000000 1000000000
1
```
CODEFORCES 1374_C. Move Brackets
```
1
2
)(
```

```
1
4
()()
```

```
1
8
())()()(
```

```
1
10
)))((((())
```
CODEFORCES 1397_D. Stoned Game
**Incorrect understanding of the problem:**
```
1
1
2
```
**Incorrect implementation of the algorithm:**
```
1
1
1
```
**Incorrect test cases:**
```
1
1
2
```
```
1
1
1
```
**Incorrect debugging:**
```
1
1
1
```
**Incorrect submission:**
```
1
1
1
```
CODEFORCES 1420_E. Battle Lemmings
```
5
1 0 0 0 1
```

```
12
0 0 0 0 1 1 1 1 0 1 1 0
```

```
10
0 1 0 1 0 1 0 1 0 1
```

```
30
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
```
CODEFORCES 1439_D. INOI Final Contests
```
3 1 1000000007

2 2 1000000009

3 2 998244353

20 10 1000000009
```
CODEFORCES 1466_D. 13th Labour of Heracles
```
1
4
3 5 4 6
2 1
3 1
4 3
```
```
2
21 32
2 1
```
```
6
20 13 17 13 13 11
2 1
3 1
4 1
5 1
6 1
```
```
4
10 6 6 6
1 2
2 3
4 1
```
CODEFORCES 1490_E. Accidental Victory
```
1
3
1 2 3
```
```
1
4
1 2 3 4
```
```
1
5
1 2 2 2 2
```
```
1
10
1 1 1 1 1 1 1 1 1 1
```
```
1
10
10 10 10 10 10 10 10 10 10 10
```
```
1
1000000000
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 1513_A. Array and Peaks
**1. Incorrect input format**

```
1
-1 0
```

**2. Incorrect output format**

```
1
1 2
```

**3. Incorrect logic**

```
1
3 3
```

**4. Memory leaks**

```
10
100 100
```

**5. Bugs in the unit tests**

```
1
1 0
```
CODEFORCES 1540_A. Great Graphs
```
1
3
0 2 3
```

```
2
2
0 1000000000
1
0
```

```
3
3
0 2 3
3
0 -1000000000
1
0
```

```
4
1
0
2
0 1
3
0 1 2
4
0 1 2 3
```
CODEFORCES 167_D. Wizards and Roads
```
6 6
0 0
1 1
2 2
3 3
4 4
5 5
2 3 3 2
4
0 5
1 4
2 3
3 3

6 1
0 0
3 5 23917 11
4
0 1000000008
0 10
100 150
200 10000
```
CODEFORCES 188_E. HQ9+
1. Incorrect character encoding
```
a
```
2. Incorrect program syntax
```
H9
```
3. Missing instructions
```
Q
```
4. Incorrect output
```
99
```
CODEFORCES 209_C. Trails and Glades
```
# Input 1:
3 3
1 2
2 3
3 1

# Input 2:
1 1
```
CODEFORCES 235_B. Let's Play Osu!
**Incorrect input format**

```
3
0.5 0.5 0.5
```

**Incorrect calculation of expected score**

```
3
0.5 0.5 0.5
```

**Floating-point errors**

```
3
0.5 0.5 0.5
```

**Off-by-one errors**

```
3
0.5 0.5 0.5
```

**Memory errors**

```
1000000000000000000
0.5 0.5 0.5
```

**Runtime errors**

```
0
```
CODEFORCES 25_E. Test
```
a
b
c
```
CODEFORCES 283_E. Cow Tennis Tournament
```
3 2
1 2 3
1 2
2 3
```

```
5 3
5 9 4 1 7
1 7
2 8
3 9
```

```
5 0
5 9 4 1 7
```

```
10 2
1 2 3 4 5 6 7 8 9 10
1 9
```

```
10 1
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 306_D. Polygon
3
1 0
0 1
1 0

6
1 0
0 1
1 1
0 2
1 2
0 1
CODEFORCES 331_D3. Escaping on Beaveractor
```
3 3
0 0 0 1
0 2 2 2
3 3 2 3
12
0 0 L 0
0 0 L 1
0 0 L 2
0 0 L 3
0 0 L 4
0 0 L 5
0 0 L 6
2 0 U 2
2 0 U 3
3 0 U 5
1 3 D 2
1 3 R 2
```
CODEFORCES 354_C. Vasya and Beautiful Arrays
```
6 1
3 6 10 12 13 16

5 3
8 21 52 15 77

```
CODEFORCES 378_D. Preparing for the Contest
```
3 4 9
1 3 1 2
2 1 3
4 3 6
```
CODEFORCES 39_F. Pacifist frogs
```
5 3 5
2 3 4
1 2 3 4 5

5 3 5
2 3 4
1 2 3 4 5

1000000000 2 3
2 5
999999995 999999998 999999996

5 3 5
2 3 4
5 1 4 3 2

5 3 5
2 3 4
1 2 4 3 5
```
CODEFORCES 425_B. Sereja and Table 
```
1 1 1
0
```

```
1 1 3
1 1 1
```

```
4 3 1
1 0 0
0 0 0
1 1 1
```

```
3 3 1
1 1 0
1 1 1
0 0 0
```

```
3 4 1
1 1 1 1
0 1 1 0
1 0 0 1
```

```
5 5 2
1 1 1 1 1
1 1 1 1 1
1 1 0 1 1
1 1 1 1 1
1 1 1 1 1
```
CODEFORCES 449_E. Jzzhu and Squares
```
1
1 3
```
```
1
2 2
```
```
1
2 5
```
```
1
3 4
```
CODEFORCES 470_D. Caesar Cipher
5
CRYPTO
1
CRYPTO
CODEFORCES
```
1
```

```
'a'
```

```
'z'
```

```
'0123456789'
```

```
'9876543210'
```

```
'abcdefghijklmnopqrstuvwxyz'
```

```
'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
```

```
'01234567890123456789'
```

```
'abcdefghijklmnopqrstuvwxyz0123456789'
```

```
'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
```
CODEFORCES 494_B. Obsessive String
```
ababa
aba

welcometoroundtwohundredandeightytwo
d

ddd
d
CODEFORCES 518_F. Pasha and Pipe
```
3 3
...
..#
...
```
CODEFORCES 545_A. Toy Cars
```
3
-1 0 0
0 -1 1
0 2 -1

4
-1 3 3 3
3 -1 3 3
3 3 -1 3
3 3 3 -1
```
CODEFORCES 571_C. CNF 2
**Incorrectly representing the input data:**

```
2 2
2 1 -2
2 2 -1
```

**Incorrectly implementing the algorithm for satisfiability checking:**

```
2 2
2 1 -2
2 2 -1
```

**Incorrectly handling corner cases:**

```
0 0
```

**Incorrectly formatting the output:**

```
2 2
2 1 -2
2 2 -1
```
CODEFORCES 593_A. 2Char
```
4
abb
cacc
aaa
bbb
```
```
5
a
a
bcbcb
cdecdecdecdecdecde
aaaa
```
```
1
z
```
CODEFORCES 614_D. Skills
```
# 3 5 10 1 5
# 1 3 1

# 3 5 10 1 339
# 1 3 1

# 2 10 10 1 1
# 10 10

# 3 2 0 1 0
# 0 0 0
```
CODEFORCES 634_A. Island Puzzle
```
2
1 0
0 1
```
```
4
1 2 3 0
0 3 2 1
```
```
3
1 0 2
2 0 1
```
```
5
1 2 3 4 0
4 0 1 2 3
```
```
3
1 2 3
3 2 1
```
```
5
0 1 2 3 4
1 2 3 4 0
```
```
7
1 2 3 4 5 6 0
0 6 5 4 3 2 1
```
```
10
1 2 3 4 5 6 7 8 9 0
0 9 8 7 6 5 4 3 2 1
```
CODEFORCES 662_D. International Olympiad
1. Incorrect input format
```
1
IAO'1000
```
2. Incorrect output format
```
1
IAO'1000
```
3. Incorrect calculation
```
1
IAO'2018
```
4. Off-by-one errors
```
1
IAO'15
```
5. Memory leaks
```
1
IAO'15
```
6. Synchronization issues
```
1
IAO'15
```
7. Security vulnerabilities
```
1
IAO'15
```
8. Usability issues
```
1
IAO'15
```
9. Performance issues
```
1
IAO'15
```
10. Maintainability issues
```
1
IAO'15
```
CODEFORCES 687_B. Remainders Game
```
1 1
1
```

```
2 7
2 3
```

```
3 7
2 3 7
```

```
4 5
2 3 5 12
```

```
5 5
1 2 3 4 5
```

```
6 100
1 2 3 4 5 6 7 8 9 10
```

```
7 200
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```

```
8 1000
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```

```
9 10000
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```

```
10 100000
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```
CODEFORCES 70_A. Cookies
```
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
```
CODEFORCES 730_H. Delete Them
```
3 2
ab
ac
cd
1 2
```
```
5 3
test
tezt
test.
.est
tes.
1 4 5
```
```
4 4
a
b
c
dd
1 2 3 4
```
```
6 3
.svn
.git
....
...
..
.
1 2 3
```
CODEFORCES 754_C. Vladik and chat
```
1
3
Vladik netman Fedosik
3
Vladik:how are you?
?:wrong message
netman:im fine
```

```
1
2
netman vladik
3
netman:how are you?
?:wrong message
vladik:im fine
```

```
2
3
netman vladik Fedosik
2
?: users are netman, vladik, Fedosik
vladik: something wrong with this chat
4
netman tigerrrrr banany2001 klinchuh
4
?: tigerrrrr, banany2001, klinchuh, my favourite team ever, are you ready?
klinchuh: yes, coach!
?: yes, netman
banany2001: yes of course.
```

```
2
3
netman vladik Fedosik
2
?: users are netman, vladik, Fedosik
vladik: something wrong with this chat
3
netman tigerrrrr banany2001 klinchuh
3
?: tigerrrrr, banany2001, klinchuh, my favourite team ever, are you ready?
klinchuh: yes, coach!
netman: yes, netman
```
CODEFORCES 774_L. Bars
```
# 3 3
010

# 8 3
01010110

# 10 5
0011100101

# 100 100

CODEFORCES 79_E. Security System
```
5 25 2 4 1
3 6 1 2 2
3 5 1 2 2
20 492 11 4 8
```
CODEFORCES 820_B. Mister B and Angle in Polygon
```
3 15
4 67
4 68
```
CODEFORCES 846_C. Four Segments
1. Incorrect input format

```
1
10000
```

2. Incorrect output format

```
3
-1 2 3
```

3. Incorrect calculation of the maximum value

```
4
0 0 -1 0
```

4. Incorrect choice of delimiters

```
1
10000
```

5. Incorrect handling of edge cases

```
0
```

6. Incorrect use of data structures

```
5
1 2 3 4 5
```

7. Incorrect use of algorithms

```
5
1 2 3 4 5
```

8. Incorrect error handling

```
1
a
```

9. Incorrect testing

```
5
1 2 3 4 5
```

10. Incorrect documentation

```
5
1 2 3 4 5
```
CODEFORCES 867_E. Buy Low Sell High
```
9
10 5 4 7 9 12 6 2 10
```
CODEFORCES 893_B. Beautiful Divisors
```
3
1102
992
1000000000000000000
```
CODEFORCES 914_G. Sum the Fibonacci
**1. Using incorrect data types**

```
n = int(input())
s = list(map(int, input().split()))

def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        for k in range(j + 1, n):
            for l in range(k + 1, n):
                if (s[i] | s[j]) & s[k] & (s[l] ^ s[i]) == 2 * i:
                    ans += fibonacci(s[i] | s[j]) * fibonacci(s[k]) * fibonacci(s[l] ^ s[i])

print(ans % 1000000007)
```

**2. Using incorrect bitwise operators**

```
n = int(input())
s = list(map(int, input().split()))

def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        for k in range(j + 1, n):
            for l in range(k + 1, n):
                if (s[i] & s[j]) & s[k] & (s[l] ^ s[i]) == 2 * i:
                    ans += fibonacci(s[i] | s[j]) * fibonacci(s[k]) * fibonacci(s[l] ^ s[i])

print(ans % 1000000007)
```

**3. Using incorrect modulo arithmetic**

```
n = int(input())
s = list(map(int, input().split()))

def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        for k in range(j + 1, n):
            for l in range(k + 1, n):
                if (s[i] | s[j]) & s[k] & (s[l] ^ s[i]) == 2 * i:
                    ans += fibonacci(s[i] | s[j]) * fibonacci(s[k]) * fibonacci(s[l] ^ s[i])

print(ans % 109 + 7)
```

**4. Using incorrect array indexing**

```
n = int(input())
s = list(map(int, input().split()))

def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        for k in range(j + 1, n):
            for l in range(k + 1, n):
                if (s[i] | s[j]) & s[k] & (s[l] ^ s[i]) == 2 * i:
                    ans += fibonacci(s[i] | s[j]) * fibonacci(s[k]) * fibonacci(s[l] ^ s[i])

print(ans % 1000000007)
```

**5. Using incorrect variable names**

```
n = int(input())
s = list(map(int, input().split()))

def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n - 1) + fibonacci(n - 2)


CODEFORCES 937_E. Lock Puzzle
```
5
abcde
edcba
```
```
6
abacbb
babcba
```
```
3
aba
bba
```
```
5
aaabbc
aabbaa
```
```
10
abacabaaba
acaabacaba
```
CODEFORCES 962_G. Visible Black Areas
```
5 7 16 3
16
0 0
18 0
18 6
16 6
16 1
10 1
10 4
7 4
7 2
2 2
2 6
12 6
12 12
10 12
10 8
0 8
```
CODEFORCES 990_C. Bracket Sequences Concatenation Problem
```
3
)
()
(
```
```
2
()
()
```
```
1
)
```
```
1
(
```
```
1
))())
```
```
1
)())())
```
```
1
())
```
```
1
((()
```
```
1
(((((()
```
HACKEREARTH anshal-and-season
```
A: 'FSRDIEN'
B: 'FRIENDS'
```

```
A: 'A'
B: 'b'
```

```
A: 'Aa'
B: 'aA'
```

```
A: 'Aa'
B: 'aa'
```

```
A: 'AnShAl'
B: 'ShAnAl'
```
HACKEREARTH chandu-and-his-game
3 4
2 2 1 3
2 2 3 1
HACKEREARTH dipu-and-interesting-numbers-2
```
1
1 3
```
```
2
1 10
2 2
```
```
1
1000000000 1000000001
```
```
100000
1 1000000000000000000
```
```
4
1000000000 1000000001
1000000000 1000000002
1000000000 1000000003
1000000000 1000000004
```
HACKEREARTH going-to-indiahacks
3
1 1 1 2
1 1 2 2
1 2 2 3
HACKEREARTH library-boy
14
mountains
marvelous
mornings
functions
match
topology
miracle
miner
mathematic
misery
fastfouriertransform
mother
major
masterpiece
HACKEREARTH monks-birthday-treat
1. 3 3
1 2
2 3
3 1
2. 3 3
1 2
2 3
1 3
HACKEREARTH playing-cards-1
1
1 2
2
1 3
HACKEREARTH roy-and-wooden-log-3
```
1
3
```
HACKEREARTH subtract-and-multiply
1
1 2
1 4
-1 1
HACKEREARTH vietnam-crisis
```
1
10
49 68 57 94 13 37 78 60 78 89

0
```
ATCODER p02611 AIsing Programming Contest 2020 - Two Snuke
```
# 4
4
6
10
1000000000
```
ATCODER p02742 Panasonic Programming Contest 2020 - Bishop
1
1

2
2

3
2

4
4

5
5

3
3

1000000000
1000000000
ATCODER p02877 AtCoder Grand Contest 040 - Prefix Suffix Addition
5
1 2 1 2 1


5
2 1 2 1 2


15
541962451 761940280 182215520 378290929 211514670 802103642 28942109 641621418 380343684 526398645 81993818 14709769 139483158 444795625 40343083
ATCODER p03011 AtCoder Beginner Contest 129 - Airplane
1. ```
1 3 4
```

2. ```
3 2 3
```

3. ```
100 100 100
```

4. ```
100 1 1
```

5. ```
1 100 1
```
ATCODER p03151 KEYENCE Programming Contest 2019 - Exam and Wizard
```
3
2 3 5
3 4 1

3
2 3 3
2 2 1

3
17 7 1
25 6 14

12
757232153 372327760 440075441 195848680 354974235 458054863 463477172 740174259 615762794 632963102 529866931 64991604
74164189 98239366 465611891 362739947 147060907 118867039 63189252 78303147 501410831 110823640 122948912 572905212
ATCODER p03295 AtCoder Beginner Contest 103 - Islands War
```
5 2
1 4
2 5
```

```
9 5
1 8
2 7
3 5
4 6
7 9
```

```
5 10
1 2
1 3
1 4
1 5
2 3
2 4
2 5
3 4
3 5
4 5
```
ATCODER p03453 AtCoder Regular Contest 090 - Avoiding Collision
4 4
1 3
1 2 1
2 3 1
3 4 1
4 1 1


4 4
1 3
1 2 1
2 3 1
3 4 1
4 1 1
ATCODER p03613 AtCoder Regular Contest 082 - Together
```
7
3 1 4 1 5 9 2
```
```
10
0 1 2 3 4 5 6 7 8 9
```
```
1
99999
```
ATCODER p03772 AtCoder Grand Contest 012 - Prefix Median
1
1

2
1 3

4
1 3 2 3

5
1 5 9 11 1

15
1 5 9 11 1 19 17 18 20 1 14 3 3 8 19 15 16 29 10 2 4 13 6 12 7 15 16 1 1
ATCODER p03941 AtCoder Grand Contest 007 - Shik and Travel
```
3
1 0
1 0
```
```
7
1 1
1 1
2 1
2 1
3 1
3 1
```
```
9
1 2
1 2
3 2
3 2
5 2
5 2
7 2
7 2
```
```
15
1 2
1 5
3 3
4 3
4 3
6 5
5 4
5 3
6 3
3 2
11 5
11 3
13 2
13 1
```
```
3
1 0
1 0
```
AIZU p00033 Ball
```
1
1 2 3 4 5 6 7 8 9 10
```
AIZU p00165 Lottery
```
1
0 0
```
```
2
5 0
9 1
```
```
4
5 0
9 1
3 10
11 3
```
```
1
999983 20
```
```
0
```
```
4
1000000 1
1 1
1000000 1
1 1
```
AIZU p00321 Related Products
```
5 2
3 bread milk banana
2 milk cornflakes
3 potato bread milk
4 cornflakes bread milk butter
2 potato bread
```
AIZU p00491 Pasta
```
5 3
3 1
1 1
4 2
```
AIZU p00677 Make KND So Fat
3 3 100
2
5 20 3 10
2
10 50 12 60
2
8 30 22 100
0 1 2

1 1 30
1
13 8
0
AIZU p00820 Lagrange's Four-Square Theorem
1
25
2003
211
20007
0
AIZU p00951 Three Kingdoms of Bourdelot
Alice Bob
3
2
Alice Bob
Bob Clare
2
Bob Clare
Clare David
2
Clare David
David Alice
AIZU p01084 Dial
1
111f
111b
AIZU p01220 Triangles
1
2
3
4
5
6
0
0
-1
1000
1001
-1000
-1001
AIZU p01354 The Castle
1 2
0.5 0.5
1 3
0.9 0.5 0.1
2 3
0.5 0.5 0.5
3 4
0.3 0.2 0.5 0.4
3 5
0.3 0.2 0.5 0.4 0.9
AIZU p01536 Transparent Mahjong
4
1 1 1 3 3 3 5 5 5 7 7 7 9
AIZU p01692 Dangerous Delivery
```
3 2 2 1
0 3 6
1 1
3 -2

```
AIZU p01836 Shortest Bridge
1. Incorrect input format:

```
100 500 800 500 100 600
```

2. Incorrect output format:

```
200 500
```

3. Incorrect algorithm:

```
200 500 800 500
1
```

4. Infinite loop:

```
200 500 800 500
0
```

5. Memory leak:

```
200 500 800 500
```

6. Security vulnerability:

```
200 500 800 500
100 600
```
AIZU p01972 Ebi-chan Lengthens Shortest Paths
```
4 5 1 4
1 2 2 1
2 3 2 1
3 4 3 1
1 4 2 1
```
AIZU p02118 Sequence
```
# 1. Arithmetic progressions are not sorted

3 3 5
0 3
2 2
4 1

# 2. The maximum length of an arithmetic progression is not $K$

3 3 5
0 10
8 1
11 1

# 3. The sum of the terms in an arithmetic progression is not always positive

3 3 5
0 3
-2 2
4 1

# 4. The maximum sum of the terms in an arithmetic progression is not always unique

3 3 5
0 3
2 2
4 1

# 5. The input data may be invalid

3 3 5
0 3
2 2
4 1 2
```
AIZU p02258 Maximum Profit
```
2
5
3
```
```
3
4
3
2
```
```
6
5
3
1
3
4
3
```
AIZU p02406 Structured Programming
```
3
```