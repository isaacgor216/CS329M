CODECHEF axr1p3
```
1
1
2
2
3
3
4
4
5
5
```
CODECHEF cmb02
```
1
1000000000
```
CODECHEF flow013
1. ```
5
180 0 0
90 90 90
0 0 0
45 45 90
30 40 110
```

2. ```
5
0 0 180
-10 20 150
180 0 0
180 0 0
180 0 0
```

3. ```
5
45 45 90
45 45 90
45 45 90
45 45 90
45 45 90
```
CODECHEF lepermut
```
1
4
1 4 3 2
```
```
2
2
1 2
3
1 2 3
```
```
4
2 1 3 4
```
```
5
5 3 1 4 2
```
```
6
1 3 2 6 5 4
```
```
7
1 7 2 3 6 5 4
```
```
8
1 8 2 7 5 3 4 6
```
```
9
1 9 2 8 7 5 4 3 6
```
```
10
1 10 2 9 8 7 6 5 4 3
```
CODECHEF prayas01
3
1
9
25

CODECHEF sweet
1
4 5
1 5 7 1
CODEFORCES 1010_A. Fly
2
12
11 8
7 5
2
1
1 4 1
2 5 3
6
2
4 6 3 3 5 6
2 6 3 6 5 3
CODEFORCES 1034_A. Enlarge GCD
```
3
1 2 4
```
```
4
6 9 15 30
```
```
3
1 1 1
```
```
1
1
```
```
1
1000000000
```
CODEFORCES 1056_F. Write The Contest
```
1
3
1.0 31.0
12 3
20 6
30 1
```
```
2
3
1.0 30.0
1 10
10 10
20 8
5 1
```
CODEFORCES 107_B. Basketball Team
```
# 1. Incorrect input format

3 2 1
1 1

# 2. Incorrect calculation of the probability

3 2 1
1 1

# 3. Using floating-point numbers

3 2 1
1 1

# 4. Overflow errors

3 2 1
1000 1

# 5. Incorrect output format

3 2 1
1 1
```
CODEFORCES 109_A. Lucky Sum of Digits
1. ```
1
```
2. ```
10
```
3. ```
11
```
4. ```
106
```
5. ```
1234567890
```
6. ```
1000000000
```
CODEFORCES 1120_A. Diana and Liana
```
7 3 2 2
1 2 3 3 2 1 2
2 2

7 3 2 2
1 2 3 3 2 1 2
1 4 5 6

7 3 2 2
1 2 3 3 2 1 2
3 4 5 6

7 3 2 2
1 2 3 3 2 1 2
1

7 3 2 2
1 2 3 3 2 1 2
2 3 4 5 6

7 3 2 2
1 2 3 3 2 1 2
7 8 9 10 11 12 13

7 3 2 2
1 2 3 3 2 1 2
1 2 3 4 5 6 7 8

7 3 2 2
1 2 3 3 2 1 2
9 10 11 12 13 1 2 3
```
CODEFORCES 1147_C. Thanos Nim
1. ```
2
8 8
```
2. ```
4
3 1 4 1
```
3. ```
6
1 5 2 4 3 2
```
4. ```
5
5 5 5 5 5
```
5. ```
8
1 2 3 4 5 6 7 8
```
CODEFORCES 1168_D. Anagram Paths
```
3 3
1 ?
1 ?
2 ?
2 a
3 b
```
CODEFORCES 1187_A. Stickers and Toys
```
1
10 5 7
```
CODEFORCES 1205_F. Beauty of a Permutation
1
1
1
1
100
1
CODEFORCES 1223_C. Save the Nature
```
1
1
100
50 1
49 1
100
```
```
2
8
100 200 100 200 100 200 100 100
10 2
15 3
107
```
```
3
3
1000000000 1000000000 1000000000
50 1
50 1
3000000000
```
```
5
200 100 100 100 100
69 5
31 2
90
```
CODEFORCES 1248_F. Catowice City
```
1
3 4
1 1
2 2
3 3
1 3
```
```
2
3 7
1 1
1 2
1 3
2 2
3 1
3 2
3 3

1 1
1 1
```
CODEFORCES 1267_E. Elections
```
2 1
1 1
```
```
5 3
6 3 4 2 8
3 7 5 6 7
5 2 4 7 9
```
```
3 3
2 3 8
4 2 9
3 1 7
```
```
100 1
100
```
CODEFORCES 1288_F. Red-Blue Graph
```
3 2 6 10 15
RRB
UB
3 2
2 2
1 2
1 1
2 1
1 1
```

```
3 1 3 4 5
RRR
B
2 1
1 1
3 1
```

```
3 1 3 4 5
URU
B
2 1
1 1
3 1
```
CODEFORCES 130_F. Prime factorization
1. ```
1
```
2. ```
2
```
3. ```
3
```
4. ```
4
```
5. ```
5
```
6. ```
6
```
7. ```
7
```
8. ```
8
```
9. ```
9
```
10. ```
10
```
CODEFORCES 1332_A. Exercising Walk
```
1
1 1 1 1
0 0 -100 -100 0 100
```
CODEFORCES 1352_D. Alice, Bob and Candies
```
3
2
1
4
1 3 2
3
1 1 1
4
1 1 1 1
```
CODEFORCES 1372_B. Omkar and Last Class of Math
```
1
1000000000
```
CODEFORCES 1395_A. Boboniu Likes to Color Balls
```
1
0 1 1 1
```
```
3
5 2 3 0
0 0 0 0
1000000000 1000000000 1000000000 1000000000
```
```
2
1 1 1 0
2 2 2 0
```
```
1
1 0 0 0
```
CODEFORCES 1419_D1. Sage's Birthday (easy version)
```
1
1
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
10
9 8 7 6 5 4 3 2 1
```

```
6
1 2 3 4 5 6
```

```
10
10 9 8 7 6 5 4 3 2 1
```
CODEFORCES 1437_D. Minimal Height Tree
```
1
4
1 4 3 2
```
```
2
1 2
```
```
3
1 2 3
```
```
3
4 2 3 1
```
```
3
5 3 1 4 2
```
```
4
1 4 3 2 5
```
```
5
1 3 2 4 5
```
```
6
1 2 3 4 5 6
```
```
7
1 2 3 4 5 6 7
```
```
8
1 2 3 4 5 6 7 8
```
```
9
1 2 3 4 5 6 7 8 9
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
11
1 2 3 4 5 6 7 8 9 10 11
```
```
12
1 2 3 4 5 6 7 8 9 10 11 12
```
```
13
1 2 3 4 5 6 7 8 9 10 11 12 13
```
```
14
1 2 3 4 5 6 7 8 9 10 11 12 13 14
```
```
15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
CODEFORCES 1462_B. Last Year's Substring

CODEFORCES 1487_C. Minimum Ties
1
5
50
1
2
2
2

CODEFORCES 1510_K. King's Task
```
1
1

2
1 2

3
2 3 1

4
1 2 3 4

5
5 4 3 2 1

6
6 1 2 3 4 5

7
7 6 5 4 3 2 1
```
CODEFORCES 1538_E. Funny Substrings
```
1
1
haha := hah
```

```
1
2
haha := hah
haha := haha
```

```
1
3
haha := hah
haha := haha
haha := haha
```

```
1
3
a := h
b := aha
c = a + b
```

```
1
4
a := h
b := aha
c = a + b
d = a + c
```

```
1
6
a := h
b := aha
c = a + b
c = c + c
e = c + c
d = a + c
```

```
15
x := haha
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
x = x + x
```

```
1
haha := hah
```

```
5
haahh := aaaha
ahhhh = haahh + haahh
haahh = haahh + haahh
ahhhh = ahhhh + haahh
ahhaa = haahh + ahhhh
```
CODEFORCES 164_E. Polycarpus and Tasks
```
5
1 8 5
2 9 3
3 10 3
8 11 4
11 12 2
```
CODEFORCES 186_A. Comparing Strings
```
a
b
```
```
ab
bb
```
```
a
aa
```
```
ab
ba
```
```
ab
bc
```
```
abc
cba
```
```
aa
ab
```
CODEFORCES 207_D3. The Beaver's Problem - 3
1. **The input data may be malformed.**
```
1
document_1
Document 1
This is document 1
```
2. **The program may not be able to correctly identify the subject of the document.**
```
1
document_1
Document 1
This is document 2
```
3. **The program may be too slow.**
```
1000000
document_1
Document 1
This is document 1
```
4. **The program may use too much memory.**
```
1000000000
document_1
Document 1
This is document 1
```
5. **The program may not be robust.**
```
1
document_1
Document 1
This is document 1
```
```
2
document_2
Document 2
This is document 2
```
```
3
document_3
Document 3
This is document 3
```
```
1
document_4
Document 4
This is document 4
```
6. **The program may not be secure.**
```
1
document_1
Document 1
This is document 1
```
7. **The program may not be compliant with the relevant regulations.**
```
1
document_1
Document 1
This is document 1
```
8. **The program may not be ethical.**
```
1
document_1
Document 1
This is document 1
```
9. **The program may not be legal.**
```
1
document_1
Document 1
This is document 1
```
10. **The program may not be aesthetically pleasing.**
```
1
document_1
Document 1
This is document 1
```
CODEFORCES 232_B. Table
```
5 6 1
```
CODEFORCES 258_A. Little Elephant and Bits
1. 0
2. 101
3. 110010

CODEFORCES 281_A. Word Capitalization
```
#Incorrect input format

```

```
#Incorrect output format

```

```
#Incorrect capitalization

```

```
#Off-by-one errors

```

```
#Other bugs

```
CODEFORCES 303_E. Random Ranking
```
1
1 2
```
```
2
1 2
2 3
```
```
10
0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
```
```
8
0 2
1 3
2 4
3 5
4 6
5 7
6 8
7 9
```
CODEFORCES 330_A. Cakeminator
1. ```
2 2
.S
S.
```
2. ```
3 3
S..
.S.
...
```
3. ```
1 1
.
```
4. ```
10 10
..........
..........
..........
..........
..........
..........
..........
..........
..........
```
5. ```
2 5
S....
....
```
6. ```
1 10
S
```
CODEFORCES 351_D. Jeff and Removing Periods
```
5
2 2 1 1 2
5
1 5
1 1
2 2
1 3
2 3
```
CODEFORCES 375_E. Red and Black Tree
1. ```
3 2
1 0 0
1 2 2
2 3 2
```
2. ```
4 2
0 1 0 0
1 2 2
2 3 2
3 4 2
```
3. ```
5 3
0 0 0 1 0
1 2 2
2 3 2
3 4 1
```
4. ```
5 3
0 0 0 1 0
1 2 2
2 3 2
3 4 1
5 1 100
```
5. ```
5 2
0 0 0 0 0
```
6. ```
5 2
1 1 1 1 1
```
7. ```
1 1
1
```
8. ```
2 1
1
```
9. ```
3 1
0
```
10. ```
1 0
```
CODEFORCES 398_B. Painting The Wall
```
5 1
1 1
```

```
3 1
1 1
```

```
1 0
```

```
10 1
1 1
```

```
10 0
```
CODEFORCES 420_C. Bug in Code
```
5 2
2 4
1 5
3 5
4 5
```
CODEFORCES 447_A. DZY Loves Hash
```
# 1. Using the wrong hash function

2 5
0
21
53
41
53

# 2. Not using a collision-resistant hash function

2 5
0
1
2
3
4

# 3. Not using a sufficiently large hash table

10 1000000000
0
1
2
3
4
...

# 4. Not handling conflicts correctly

5 5
0
1
2
3
4

# 5. Not testing the code correctly

100 1000000000
```
CODEFORCES 469_B. Chat Online
```
1 1 0 4
2 3
0 1


2 3 0 20
15 17
23 26
1 4
7 11
15 17
```
CODEFORCES 491_A. Up the hill
```
0
1
```
```
2
1
```
```
1
0
```
```
10
10
```
```
100000
100000
```
CODEFORCES 515_B. Drazil and His Happy Friends
```
1 1
0

1 1
0

1 2
0
1

2 3
0
1 0
```
CODEFORCES 542_C. Idempotent functions
```
1
1
```

```
2
2 2
```

```
3
2 3 1
```

```
4
1 2 2 4
```

```
5
1 2 2 3 3
```

```
6
1 1 1 1 1 1
```
CODEFORCES 569_D. Symmetric and Transitive
```
1
2
3
4
5
```
CODEFORCES 590_B. Chip 'n Dale Rescue Rangers
**Incorrect data type**

```
0 0 5 5
3 2
-1 -1
-1 0
```

**Incorrect algorithm**

```
0 0 5 5
3 2
-1 -1
-1 0
```

**Incorrect implementation**

```
0 0 5 5
3 2
-1 -1
-1 0
```

**Incorrect testing**

```
0 0 5 5
3 2
-1 -1
-1 0
```

**Incorrect documentation**

```
0 0 5 5
3 2
-1 -1
-1 0
```

**Incorrect deployment**

```
0 0 5 5
3 2
-1 -1
-1 0
```

**Incorrect usage**

```
0 0 5 5
3 2
-1 -1
-1 0
```

**Incorrect maintenance**

```
0 0 5 5
3 2
-1 -1
-1 0
```
CODEFORCES 612_A. The Text Splitting
```
5 2 3
Hello

6 4 5
Privet

8 1 1
abacabac

100 99 5
Codeforces

99 1 98
Codeforces
CODEFORCES 632_A. Grandma Laura and Apples
```
#include <iostream>

using namespace std;

int main() {
    int n, p;
    cin >> n >> p;
    int apples = 1;
    int money = 0;
    for (int i = 0; i < n; i++) {
        string s;
        cin >> s;
        if (s == "half") {
            apples = apples / 2;
        } else {
            apples = apples / 2 + 1;
        }
        money += apples * p;
    }
    cout << money << endl;
    return 0;
}
```
CODEFORCES 660_D. Number of Parallelograms
```
1
0 0
```

```
3
0 0
1 0
1 1
```

```
4
0 1
1 0
1 1
2 0
```

```
6
0 1
1 0
1 1
2 0
2 1
3 0
```
CODEFORCES 683_H. Exchange of Books
```
# 4 1
# 2 4 1 3

# 5 5
# 3 4 5 2 1

# 6 18
# 2 3 5 1 6 4
```
CODEFORCES 707_B. Bakery
**Incorrect data type:**

```
n, m, k = map(int, input().split())
```

This code will fail if the input data is not in the correct format, e.g., if the first line of input contains a string instead of an integer.

**Off-by-one errors:**

```
for u, v, l in edges:
    if u == v:
        print(-1)
        break
```

This code will fail if there is a self-loop in the graph, i.e., an edge from a vertex to itself. In this case, the loop will be counted twice, which will lead to an incorrect answer.

**Indexing errors:**

```
dist = [float('inf')] * n
for _ in range(m):
    u, v, l = map(int, input().split())
    dist[v] = min(dist[v], dist[u] + l)
```

This code will fail if the input data is not in the correct format, e.g., if the first line of input contains more than three integers. In this case, the code will try to access the dist array at index m, which is out of bounds.

**Logic errors:**

```
min_dist = float('inf')
for i in range(n):
    if i not in storages:
        dist = [float('inf')] * n
        for u, v, l in edges:
            dist[v] = min(dist[v], dist[u] + l)
        min_dist = min(min_dist, dist[storages[0]])
print(min_dist)
```

This code will fail if there is no storage in the graph. In this case, the code will try to access the storages array at index 0, which is out of bounds.

**Memory leaks:**

```
def dfs(u, visited):
    visited[u] = True
    for v in graph[u]:
        if not visited[v]:
            dfs(v, visited)

n, m = map(int, input().split())
graph = [[] for _ in range(n)]
for _ in range(m):
    u, v = map(int, input().split())
    graph[u].append(v)

visited = [False] * n
dfs(0, visited)
for v in range(n):
    if not visited[v]:
        print(-1)
        exit(0)

print(sum(visited))
```

This code will leak memory because the visited array is never freed.

**Race conditions:**

```
def increment(x):
    global counter
    counter += 1

def decrement(x):
    global counter
    counter -= 1

def main():
    counter = 0
    t = threading.Thread(target=increment, args=(1,))
    t2 = threading.Thread(target=decrement, args=(1,))
    t.start()
    t2.start()
    t.join()
    t2.join()
    print(counter)

if __name__ == '__main__':
    main()
```

This code will fail if two threads try to increment or decrement the counter at the same time. This can lead to incorrect results.

**Deadlocks:**

```
def acquire_lock(lock):
    lock.acquire()
    try:
        # do something
    finally:
        lock.release()

def main():
    lock1 = threading.Lock()
    lock2 = threading.Lock()
    t1 = threading.Thread(target=acquire_lock, args=(lock1,))
    t2 = threading.Thread(target=acquire_lock, args=(lock2,))
    t1.start()
    t2.start()
    t1.join()
    t2.join()

if __name__ == '__main__':
    main()
```

This code will deadlock because the two threads are trying to acquire two locks in the opposite order. This can lead to the threads waiting indefinitely for each other to release the locks.

**Security vulnerabilities:**

```
def read_file(filename):
    with open(filename, 'r
CODEFORCES 72_C. Extraordinarily Nice Numbers
```
1
2
3
4
5
6
```
CODEFORCES 74_E. Shift It!
```
Incorrect input format
```
```
01W345729AB6CD8FGHIJELMNOPQRSTUVWXYZ
```

```
Incorrect output format
```
```
01W345729AB6CD8FGHIJELMNOPQRSTUVWXYZ

U2
D1
R3
L2
```

```
Incorrect logic
```
```
01W345729AB6CD8FGHIJELMNOPQRSTUVWXYZ

R6
R6
R6
R6
R6
R6
R6
```

```
Inefficient algorithm
```
```
01W345729AB6CD8FGHIJELMNOPQRSTUVWXYZ

R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
R1
```

```
Memory errors
```
```
01W345729AB6CD8FGHIJELMNOPQRSTUVWXYZ

R1
```

```
Security vulnerabilities
```
```
01W345729AB6CD8FGHIJELMNOPQRSTUVWXYZ

cat /etc/passwd
```
CODEFORCES 773_D. Perishable Roads
**Incorrect input format**

```
3
2 3
4
```

**Incorrect output format**

```
2
3
4
```

**Incorrect algorithm**

```
n = int(input())

for i in range(n):
    a, b = map(int, input().split())
    if a < b:
        print(a)
    else:
        print(b)
```

**Incorrect implementation**

```
n = int(input())

ans = [0] * n

for i in range(n):
    a, b = map(int, input().split())
    ans[i] = a + b

for i in range(n):
    print(ans[i])
```

**Runtime errors**

```
n = int(input())

ans = [0] * n

for i in range(n):
    a, b = map(int, input().split())
    ans[i] = a + b

for i in range(n):
    print(ans[i])

print(ans[n])
```

**Memory leaks**

```
n = int(input())

ans = [0] * n

for i in range(n):
    a, b = map(int, input().split())
    ans[i] = a + b

for i in range(n):
    print(ans[i])

del ans
```

**Other errors**

```
n = int(input())

for i in range(n):
    a, b = map(int, input().split())
    if a < b:
        print(a)
    else:
        print(b)

print(n)
```
CODEFORCES 798_C. Mike and gcd problem
```
5
5 3 1 5 6
```
CODEFORCES 818_E. Card Game Again
```
1 3
1
```

```
3 1
1 2 3
```

```
3 6
9 1 14
```

```
4 10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 844_A. Diversity
1. Incorrect input format

```
a
b
```

2. Incorrect output format

```
a
123
```

3. Incorrect calculation of the minimum number of changes

```
a
3
```

4. Incorrect handling of edge cases

```
a
1
```

5. Other bugs

```
a
b
```

```
a
0
```
CODEFORCES 864_D. Make a Permutation!
1. **Incorrect input format**

```
2
1 1
```

2. **Incorrect output format**

```
2
2 1
```

3. **Incorrect algorithm**

```
4
3 2 2 3
```

4. **Incorrect data structures**

```
10
1 2 3 4 5 6 7 8 9 10
```

5. **Incorrect error handling**

```
10
0 1 2 3 4 5 6 7 8 9
```
CODEFORCES 88_C. Trains
```
3 7
5 3
2 3
```
CODEFORCES 913_A. Modular Exponentiation
```
1
2
```
```
2
4
```
```
4
16
```
```
98765432
23456789
```
```
1000000000
1000000000
```
CODEFORCES 935_A. Fafa and his Company
1. ```
2
```

2. ```
10
```

3. ```
1000000
```
CODEFORCES 960_H. Santa's Gift
```
4 3 3 1
1 1 2
1 1
2 1
2 3
```
CODEFORCES 988_E. Divisibility by 25
```
1
50071
705
1241367
```
HACKEREARTH amazing-test
1
2 4
2 4
HACKEREARTH candy-distribution-2
2
3
8 6 9
1
4
HACKEREARTH detecting-the-fraud-registrations
10
raghav
sitish
raghu
vishwa
kumar 
raghu
raghu
raghav
ritesh
deepesh
HACKEREARTH gandhi-tree-march
```
1
-1 a(c(f(.h(..))b(g(..).))e(.d(..)))
```
HACKEREARTH kth-smallest-number-again-2
```
1
3 5
1 5
1
3
6
```
HACKEREARTH monk-and-match-making
```
monkandhismonkiness
4
1 1 3 3
1 4 11 14
3 3 6 6
4 5 14 17
```
HACKEREARTH password-1
4
abc
def
feg
cba
HACKEREARTH roy-and-flower-farm
```
1
2 50
80 40
60 20
```
HACKEREARTH string-sum
```
aba
```
HACKEREARTH utkarsh-and-timed-jumps
```
2
2
3
```
ATCODER p02597 AtCoder Beginner Contest 174 - Alter Altar
4
WWRR

2
RR

8
WRWWRWRR

1
W

0
R

R

2
W

W
ATCODER p02728 AtCoder Beginner Contest 160 - Distributing Integers
```
3
1 2
1 3
```
```
2
1 2
```
```
5
1 2
2 3
3 4
3 5
```
```
8
1 2
2 3
3 4
3 5
3 6
6 7
6 8
```
ATCODER p02860 AtCoder Beginner Contest 145 - Echo
1. ```
N = 6
S = 'abcabc'
```

2. ```
N = 6
S = 'abcadc'
```

3. ```
N = 1
S = 'z'
```
ATCODER p02995 AtCoder Beginner Contest 131 - Anti-Division
```
4 9 2 3
10 40 6 8
314159265358979323 846264338327950288 419716939 937510582
1 1 1 1
0 1 1 1
1000000000000000000 1000000000000000001 1 1
```
ATCODER p03136 AtCoder Beginner Contest 117 - Polygon
3
3 8 5 1

4
3 8 4 1

10
1 8 10 5 8 12 34 100 11 3
ATCODER p03281 AtCoder Beginner Contest 106 - 105
1. 105
2. 7
3. 200
ATCODER p03436 AtCoder Beginner Contest 088 - Grid Repainting
### Incorrect input format

```
1 2
123456
```

### Incorrect output format

```
3 3
..#
#..
...

2
```

### Incorrect data type

```
1 2
123
```

### Incorrect boundary conditions

```
1 1
1
```

### Undefined behavior

```
2 1
.
```

### Memory leaks

```
n = int(input())
for _ in range(n):
    a = input()
```

### Race conditions

```
n = int(input())
for _ in range(n):
    a = input()
    a = a + "x"
```

### Deadlocks

```
n = int(input())
for _ in range(n):
    a = input()
    a = a + "x"
```

### Security vulnerabilities

```
import os

pwd = os.getcwd()
print(pwd)
```
ATCODER p03595 CODE FESTIVAL 2017 qual A - Modern Painting
2 2
10
01
10
01
ATCODER p03752 square869120Contest #4 - Buildings are Colorful!
```
5 5
3949 3774 3598 3469 3424
```
ATCODER p03916 CODE FESTIVAL 2016 Final - Tokaido
```
5
2 7 1 8
1
2
```

```
9
2 0 1 6 1 1 2 6
5
2016
1
1
2
6
```

```
5
2 7 1 8
10
11
12
13
14
```

```
5
2 7 1 8
-1
-2
-3
-4
-5
```

```
5
2 7 1 8
-10
-9
-8
-7
-6
```
AIZU p00019 Factorial
1. **Incorrect input format**
    * Input: `abc`
    * Expected output: Runtime error
2. **Incorrect calculation of factorial**
    * Input: `5`
    * Expected output: `121`
3. **Incorrect output format**
    * Input: `5`
    * Expected output: `120`
4. **Other bugs**
    * Input: `-1`
    * Expected output: Runtime error
AIZU p00150 Twin Prime
1
3
5
10
12
15
20
22
25
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
0
AIZU p00306 Kaguya
```
90 10
```
AIZU p00471 Reindeer with no sense of direction
```
3 2
1 0 1
1 0 2
3 3
1 1 1
1 0 1
1 1 2
0 0
```
AIZU p00663 SAT-EN-3
```
(A&~A)
(B&B)
((C&~D)|(~C&D))
((A&B&C)|(~A&~B&~C))
(A&~B&~C&D)
((A&B)|(A&C)|(B&C))
```
AIZU p00806 77377
4
a b c.
--
3
a b c
333
AIZU p00937 Sibling Rivalry
2 1

2 2 1

1 1 1

3 1 2 3

1 2 3 4 5

1 2 3 4 5 6
AIZU p01070 String in String
```
rupcrupc 5
0 3 rupc
0 7 rupc
2 7 ru
2 7 pc
1 5 u

abatagaadbura 8
0 6 a
6 12 a
0 6 aa
0 3 a
3 5 a
5 9 a
1 8 b
1 12 b

aaaaaaaaaa 5
0 9 aaa
0 9 aa
5 9 aaaa
2 8 aa
1 2 a
```
AIZU p01204 Save the Energy
2
0 0 0 0 2 0
0 0 1 0 0 -1
2 0 0 0 2 0
3
0 5 0 3 1 4
0 1 0 0 -1 0
1 0 1 -1 0 1
3 1 -1 3 1 1
2
0 0 0 3 0 0
0 0 0 0 1 0
3 0 0 3 1 0
0

AIZU p01340 Kaeru Jump
```
4 7
o..o..o
o..o...
..o...o
.....o.
.o..o..
```
```
3 3
Uo.
oo.
..o
```
```
1 1
D
```
```
10 10
.o....o...
o.oo......
..oo..oo..
..o.......
..oo..oo..
..o...o.o.
o..U.o....
oo......oo
oo........
oo..oo....
```
AIZU p01507 Dungeon Creation
```
2 2
..
..
3 3
...
...
..#
0 0
```
AIZU p01678 Restore Calculation
```
3?4
12?
5?6
?2?4
5?7?
?9?2
?????
?????
?????
0
```
AIZU p01822 Enclose Points
```
3 1 1
0 0
1 0
2 0
```
AIZU p01957 Tournament Chart
```
[[a-b]-[c-d]]
a 1
b 0
c 1
d 0

[[a-b]-[c-d]]
a 1
b 0
c 1
d 1

[[a-b]-[c-d]]
a 1
b 0
c 1
d 2

[[a-b]-[c-d]]
a 1
b 1
c 1
d 1
AIZU p02104 Chairs
```
5
1 2 3 4 5

5
3 3 4 4 5

10
1 2 3 4 5 6 7 8 9 10

10
10 9 8 7 6 5 4 3 2 1
```
AIZU p02244 8 Queens Problem
```
1
0 0
```

```
2
0 0
0 1
```

```
3
0 0
1 1
2 2
```

```
4
0 0
1 1
2 2
3 3
```

```
5
0 0
1 1
2 2
3 3
4 4
```

```
6
0 0
1 1
2 2
3 3
4 4
5 5
```

```
7
0 0
1 1
2 2
3 3
4 4
5 5
6 6
```

```
8
0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
```
AIZU p02390 Watch
0
1
60
3600
86400
