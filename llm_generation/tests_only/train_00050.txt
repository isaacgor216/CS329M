CODECHEF arraytrm
```
3
2 1
1 2
3 2
1 2 2
3 2
1 2 3
```
CODECHEF clco05
1
2 30
2 1
CODECHEF fest
```
2
1 2
1000000000 1000000000
```
CODECHEF lebombs
1
1
0
CODECHEF pntng
1. Incorrect data type
```
N, M, H = [int(x) for x in input().split()]

for i in range(H):
    Tk, Ck = [int(x) for x in input().split()]
```

2. Incorrect calculation
```
N, M, H = [int(x) for x in input().split()]

costs = []
for i in range(H):
    Tk, Ck = [int(x) for x in input().split()]
    costs.append((Tk, Ck))

min_cost = 0
for t, c in costs:
    min_cost += min(t, N * M) * c

print(min_cost)
```

3. Incomplete code
```
N, M, H = [int(x) for x in input().split()]

costs = []
for i in range(H):
    Tk, Ck = [int(x) for x in input().split()]
    costs.append((Tk, Ck))

print(min_cost)
```

4. Runtime errors
```
N, M, H = [int(x) for x in input().split()]

costs = []
for i in range(H):
    Tk, Ck = [int(x) for x in input().split()]
    costs.append((Tk, Ck))

min_cost = 0
for t, c in costs:
    min_cost += min(t, N * M) * c

print(min_cost)

print(1 / 0)
```

5. Logic errors
```
N, M, H = [int(x) for x in input().split()]

costs = []
for i in range(H):
    Tk, Ck = [int(x) for x in input().split()]
    costs.append((Tk, Ck))

min_cost = 0
for t, c in costs:
    min_cost += min(t, N * M) * c

print(min_cost)
```
CODECHEF subarray
```
1
5
(())
1 2 3 4 5
```
```
2
3
[()]
-1 -2 3
4
[]
1 2 3 4
```
```
3
1
()
0
4
([[[[[[]]])
-1 -2 3 4
5
[[[[[]]])
1 2 3 4
```
CODEFORCES 100_B. Friendly Numbers
1. Incorrect input format

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    print('FRIENDS')
```

2. Incorrect output format

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    print('FRIENDS', end='')
```

3. Off-by-one errors

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    for i in range(n - 1):
        if (nums[i] % nums[i + 1] != 0):
            print('NOT FRIENDS')
            break
    else:
        print('FRIENDS')
```

4. Undefined behavior

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    for i in range(n - 1):
        if (nums[i] % nums[i + 1] == 0):
            print('FRIENDS')
        else:
            print('NOT FRIENDS')
```

5. Memory leaks

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    for i in range(n - 1):
        if (nums[i] % nums[i + 1] == 0):
            print('FRIENDS')
        else:
            print('NOT FRIENDS')
    del nums
```

6. Race conditions

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    for i in range(n - 1):
        if (nums[i] % nums[i + 1] == 0):
            print('FRIENDS')
        else:
            print('NOT FRIENDS')
    # race condition here
    del nums
```

7. Deadlocks

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    for i in range(n - 1):
        if (nums[i] % nums[i + 1] == 0):
            print('FRIENDS')
        else:
            print('NOT FRIENDS')
    # deadlock here
    lock1 = threading.Lock()
    lock2 = threading.Lock()
    lock1.acquire()
    lock2.acquire()
    lock1.release()
    lock2.release()
```

8. Security vulnerabilities

```
n = int(input())
nums = [int(i) for i in input().split(',')]

if (len(nums) != n):
    print('WRONG INPUT FORMAT')
else:
    for i in range(n - 1):
        if (nums[i] % nums[i + 1] == 0):
            print('FRIENDS')
        else:
            print('NOT FRIENDS')
    # security vulnerability here
    print(nums[0])
```
CODEFORCES 1032_F. Vasya and Maximum Matching
```
10
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
CODEFORCES 1055_D. Refactoring
1
a
a
CODEFORCES 1077_E. Thematic Contests
```
10
6 6 6 3 6 1000000000 3 3 6 6
```
CODEFORCES 1098_D. Eels
```
1
+100
```
```
2
+1
+2
```
```
3
+1
+2
-1
```
```
4
+1
+2
+3
-1
```
```
5
+2
+2
+2
+3
-2
```
```
6
+1
+2
+1
+1
-1
+1
```
```
7
+2
+2
+12
-2
-2
+4
+1
+1
-12
```
CODEFORCES 1119_E. Pavel and Triangles
1. Incorrect input format
```
3
1 1 1
```

2. Incorrect calculation of the maximum number of triangles
```
5
1 3 2 3 1
```

3. Incorrect output
```
5
1 2 2 2 2
```

4. Other bugs
```
3
1 2 3
```
CODEFORCES 1146_B. Hate "A"
```
1. Incorrect use of `s.find()`
```

```
t = 'aa'
print(find_first_a(t))
```

Output:

```
-1
```

```
2. Incorrect use of `s.replace()`
```

```
t = 'a'
print(remove_all_a(t))
```

Output:

```
''
```

```
3. Incorrect use of `s.split()`
```

```
t = 'a'
print(split_string(t, 'a'))
```

Output:

```
['a']
```

```
4. Incorrect use of `s.join()`
```

```
t = []
print(join_strings(t, 'a'))
```

Output:

```
''
```

```
5. Incorrect use of `len()`
```

```
t = ''
print(len(t))
```

Output:

```
0
```
CODEFORCES 1167_B. Lost Numbers
```
1
2
3
4
5
6
```
```
4 4
```
```
4 8
```
```
4 16
```
```
4 23
```
```
4 42
```
```
1 2
```
```
1 3
```
```
1 4
```
```
1 5
```
```
1 6
```
```
2 3
```
```
2 4
```
```
2 5
```
```
2 6
```
```
3 4
```
```
3 5
```
```
3 6
```
```
4 5
```
```
4 6
```
```
5 6
```
CODEFORCES 1185_E. Polycarp and Snakes
```
1
5 6
...a..
..bbb.
...a..
.cccc.
...a..
```

```
2
2 2
bb
cc
```

```
3
3 3
...
...
...
```

```
4 4
..c.
adda
bbcb
....
```

```
5 6
...a..
..bbb.
...a..
.cccc.
...a..
```

```
1
3 5
..b..
aaaaa
..b..
```

```
2
3 3
...
.a.
...
```

```
3 3
...
...
...
```

```
4 4
..c.
adda
bbcb
....
```

```
3 5
..b..
aaaaa
..b..
```

```
1
1 1
a
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```

```
5 5
.....
..a..
..a..
.....
.....
```
CODEFORCES 1204_C. Anna, Svyatoslav and Maps
```
# 1

4
0110
0010
0001
1000
4
1 2 3 4
```

```
# 2

4
0110
0010
1001
1000
20
1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4
```

```
# 3

3
011
101
110
7
1 2 3 1 3 2 1
```

```
# 4

4
0110
0001
0001
1000
3
1 2 4
```

```
# 5

5
00000
00000
00000
00000
00000
2
1 5
```
CODEFORCES 1221_A. 2048 Game
```
1
1
2048
```
```
2
5
1 2 4 8 16
1
2048
```
```
1
5
1 2 4 8 16
```
```
3
3
1 2 4
3
8 16 32
1
2048
```
```
4
1
2048
2
4096 4
5
2048 2 2048 2048 2048
```
CODEFORCES 1246_D. Tree Factory
```
5
0 0 1 1
```
CODEFORCES 1266_B. Dice Tower
```
1
6
```
```
1
6
1
6
1
6
```
```
1
6
10
```
```
1
6
2
12
```
CODEFORCES 1287_D. Numbers on Tree
```
3
2 0
0 2
2 0
```
```
5
0 1
1 3
2 1
3 0
2 0
```
```
4
0 1
1 2
2 3
3 0
```
```
1
0 0
```
```
2
0 1
1 0
```
CODEFORCES 1307_D. Cow and Fields
```
5 5 3
1 3 5
1 2
2 3
3 4
3 5
2 4

5 4 2
2 4
1 2
2 3
3 4
4 5

5 1 1
1
```
CODEFORCES 1330_D. Dreamoon Likes Sequences
```
1
1000000000 1000000000
```

```
2
2 999999999
3 99999998
```

```
3
4 9999997
5 999996
6 999995
```

```
4
7 999994
8 9993
9 92
10 1
```
CODEFORCES 1350_D. Orac and Medians
```
10
1 1
4 1
5 5
5 5
5 10
1 3
2 2
3 3
5 4
```
CODEFORCES 1370_F2. The Hidden Pair (Hard Version)
```
1
5
1 2 3 4 5
1 2
2 3
3 4
4 5

3
1 1
3
1 2
2 3

2
4
1 2 3 4
1 2

3
2
1 2
```
CODEFORCES 1393_C. Pinkie Pie Eats Patty-cakes
```
3
7
1 7 1 6 4 4 6
8
1 1 4 6 4 6 4 7
3
3 3 3
```
CODEFORCES 1418_B. Negative Prefixes
```
1
3
1 3 2
0 0 0
```
```
3
1 3 2
0 0 0
```
```
3
2 -3 4
1 1 1
```
```
7
-8 4 -2 -6 4 7 1
1 0 0 0 1 1 0
```
```
5
0 1 -4 6 3
0 0 0 1 1
```
```
6
-1 7 10 4 -8 -1
1 0 0 0 0 1
```
CODEFORCES 1436_A. Reorder
```
1
3 8
2 5 1
```

```
2
4 4
0 1 2 3
3 5
1 2 3 4 5
```
CODEFORCES 145_D. Lucky Pair
```
4
4 4 7 7
```
```
2
7 4
```
```
4
1 4 2 4
```
```
3
7 7 4
```
```
4
4 7 4 7
```
CODEFORCES 1485_F. Copy or Prefix Sum
```
1
3
1 -1 1
```

```
4
1
1
-1
```

```
10
2 -1 1 -2 2 3 -5 0 2 -1
```

```
4
0 0 0 1
```
CODEFORCES 150_D. Mission Impassable
```
# 50 points

l = int(input())
a = list(map(int, input().split()))
s = list(input())

def isPal(x, y):
    return s[x:y+1] == s[y:x-1:-1]

def solve(i, j):
    global a
    global s
    if i == j:
        return 0
    if isPal(i, j):
        return a[j-i+1] + solve(i+1, j-1)
    return max(solve(i+1, j), solve(i, j-1))

print(solve(0, l-1))
```
CODEFORCES 1536_B. Prinzessin der Verurteilung
```
1
5
abx
```

```
1
2
ab
```

```
2
5
xyb
7
abcyzx
```

```
1
1
a
```

```
3
10
abcdefg
8
hijklmn
7
opqrst
```
CODEFORCES 163_A. Substring and Subsequence
```
a
a

codeforces
forceofcode
```
CODEFORCES 183_B. Zoo
```
5 5
2 1
4 1
3 2
4 3
4 4
```
CODEFORCES 207_B1. Military Trainings
```
3
2
1
1
```
```
5
2
2
2
2
2
```
```
5
7
6
5
4
3
```
```
10
1
1
1
1
1
1
1
1
1
```
```
10000
1
1
1
1
1
1
1
1
1
```
```
100000
1
1
1
1
1
1
1
1
1
```
CODEFORCES 230_C. Shifts
```
3 6
101010
000100
100000

2 3
111
000

3 4
1110
1110
1110
```
CODEFORCES 256_B. Mr. Bender and Square
```
6 4 3 1
9 3 8 10
```
CODEFORCES 27_B. Tournament
```
3
1 2
2 3
```
CODEFORCES 302_A. Eugeny and Array
```
5 5
-1 1 1 1 -1
1 1
2 3
3 5
2 5
1 5
```
CODEFORCES 329_B. Biridian Forest
```
# 329B. Biridian Forest

import sys

def bfs(grid, r, c, sx, sy, ex, ey):
    q = [(sx, sy)]
    visited = [[False for _ in range(c)] for _ in range(r)]
    visited[sx][sy] = True
    dist = [[-1 for _ in range(c)] for _ in range(r)]
    dist[sx][sy] = 0
    while q:
        x, y = q.pop(0)
        if x == ex and y == ey:
            return dist[x][y]
        for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
            nx, ny = x + dx, y + dy
            if nx < 0 or nx >= r or ny < 0 or ny >= c or grid[nx][ny] == 'T' or visited[nx][ny]:
                continue
            visited[nx][ny] = True
            q.append((nx, ny))
            dist[nx][ny] = dist[x][y] + 1
    return -1


def main():
    r, c = map(int, sys.stdin.readline().split())
    grid = []
    for _ in range(r):
        grid.append(list(sys.stdin.readline().rstrip()))
    sx, sy = -1, -1
    ex, ey = -1, -1
    for i in range(r):
        for j in range(c):
            if grid[i][j] == 'S':
                sx, sy = i, j
            elif grid[i][j] == 'E':
                ex, ey = i, j
    print(bfs(grid, r, c, sx, sy, ex, ey))


if __name__ == '__main__':
    main()
```
CODEFORCES 34_E. Collisions
```
# Collisions

def collision(x1, v1, m1, x2, v2, m2):
    v1_new = (m1 * v1 - m2 * v2) / (m1 + m2)
    v2_new = (m2 * v1 - m1 * v2) / (m1 + m2)
    return x1 + v1_new * t, x2 + v2_new * t


n, t = map(int, input().split())
balls = []
for _ in range(n):
    x, v, m = map(int, input().split())
    balls.append((x, v, m))

balls.sort(key=lambda x: x[0])

for i in range(n):
    if i == 0:
        balls[i] = collision(balls[i][0], balls[i][1], balls[i][2], balls[i + 1][0], balls[i + 1][1], balls[i + 1][2])
    elif i == n - 1:
        balls[i] = collision(balls[i][0], balls[i][1], balls[i][2], balls[i - 1][0], balls[i - 1][1], balls[i - 1][2])
    else:
        balls[i] = collision(balls[i][0], balls[i][1], balls[i][2], balls[i - 1][0], balls[i - 1][1], balls[i - 1][2])
        balls[i] = collision(balls[i][0], balls[i][1], balls[i][2], balls[i + 1][0], balls[i + 1][1], balls[i + 1][2])

for ball in balls:
    print("%.4f" % ball[0])
```
CODEFORCES 374_A. Inna and Pink Pony
```
5 7 1 3 2 2
```
```
5 5 2 3 1 1
```
```
5 6 5 1 1 1
```
```
10 10 1 1 1 1
```
```
1000000 1000000 1000000 1000000 1 1
```
CODEFORCES 396_C. On Changing Tree
```
3
1 1
3
1 1 2 1
2 1
2 2
```
CODEFORCES 418_D. Big Problems for Organizers
```
2
1 2
1
1 2
```

This input validates that the implementation can correctly handle incorrect input format. The input contains two integers, but the first line is expected to contain a single integer. The implementation should raise an error in this case.

```
3
1 2
2 3
3
1 2
2 3
3 1
```

This input validates that the implementation can correctly handle incorrect output format. The output should be a single integer, but the first line contains two integers. The implementation should raise an error in this case.

```
-1
```

This input validates that the implementation can correctly handle incorrect data. The input contains a negative number. The implementation should raise an error in this case.

```
1
```

This input validates that the implementation can correctly handle empty input. The input contains no data. The implementation should raise an error in this case.
CODEFORCES 445_B. DZY Loves Chemistry
```
1 0
```
```
2 1
1 2
```
```
3 2
1 2
2 3
```
```
5 3
1 2
1 3
3 4
```
```
10 10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
```
CODEFORCES 467_C. George and Job
```
5 2 1
1 2 3 4 5

7 1 3
2 10 7 18 5 33 0

1 1 1
1

1 1 1000000000
1000000000
```
CODEFORCES 48_F. Snow sellers
```
2 3 10
4 4 4
5 5 8
1 2 5

100 2 1000000000
999999998 999999999
1000000000 1000000000
1 1
```
CODEFORCES 513_G1. Inversions problem
```
# 3 points

n, k = map(int, input().split())
p = list(map(int, input().split()))

def merge(l, r):
    i, j = 0, 0
    res = []
    while i < len(l) and j < len(r):
        if l[i] < r[j]:
            res.append(l[i])
            i += 1
        else:
            res.append(r[j])
            j += 1
    res += l[i:]
    res += r[j:]
    return res

def get_inv(p):
    inv = 0
    for i in range(1, n):
        for j in range(i):
            if p[j] > p[i]:
                inv += 1
    return inv

def get_prob(l, r):
    m = len(l) + len(r)
    return 2 * (m * (m - 1) // 2) - (len(l) * (len(l) - 1) // 2) - (len(r) * (len(r) - 1) // 2)

def solve():
    p = merge(p[:n // 2], p[n // 2:])
    return get_inv(p) + k * get_prob(p[:n // 2], p[n // 2:])

print(solve())
```

```
# 5 points

n, k = map(int, input().split())
p = list(map(int, input().split()))

def merge(l, r):
    i, j = 0, 0
    res = []
    while i < len(l) and j < len(r):
        if l[i] < r[j]:
            res.append(l[i])
            i += 1
        else:
            res.append(r[j])
            j += 1
    res += l[i:]
    res += r[j:]
    return res

def get_inv(p):
    inv = 0
    for i in range(1, n):
        for j in range(i):
            if p[j] > p[i]:
                inv += 1
    return inv

def get_prob(l, r):
    m = len(l) + len(r)
    return 2 * (m * (m - 1) // 2) - (len(l) * (len(l) - 1) // 2) - (len(r) * (len(r) - 1) // 2)

def solve():
    p = merge(p[:n // 2], p[n // 2:])
    return get_inv(p) + k * get_prob(p[:n // 2], p[n // 2:])

print(solve())
```

```
# 16 points

n, k = map(int, input().split())
p = list(map(int, input().split()))

def merge(l, r):
    i, j = 0, 0
    res = []
    while i < len(l) and j < len(r):
        if l[i] < r[j]:
            res.append(l[i])
            i += 1
        else:
            res.append(r[j])
            j += 1
    res += l[i:]
    res += r[j:]
    return res

def get_inv(p):
    inv = 0
    for i in range(1, n):
        for j in range(i):
            if p[j] > p[i]:
                inv += 1
    return inv

def get_prob(l, r):
    m = len(l) + len(r)
    return 2 * (m * (m - 1) // 2) - (len(l) * (len(l) - 1) // 2) - (len(r) * (len(r) - 1) // 2)

def solve():
    p = merge(p[:n // 2], p[n // 
CODEFORCES 53_D. Physical Education
```
1
1
1
```
```
5
1 2 3 4 5
5 1 2 3 4
```
```
4
1 2 3 1
3 2 1 4
```
```
1
1
2
```
```
2
1 100500
1 100500
```
```
5
1 1 2 2 3
2 3 1 1 2
```
CODEFORCES 567_F. Mausoleum
```
3 0
```
```
3 1
2 > 3
```
```
4 1
3 = 6
```
```
5 3
4 > 1
3 = 5
2 < 4
```
CODEFORCES 589_b
```
5
5 12
1 1
4 6
6 4
4 6
```
```
1
1 1
```
```
2
100001 900000
900001 100000
```
```
0
```
CODEFORCES 610_E. Alphabet Permutations
```
3 1 2
aa
1 1 2 b
2 cba
```
CODEFORCES 630_O. Arrow
```
-1000 -1000 0 1 1 1 1 1
```
CODEFORCES 659_G. Fence Divercity
```
2
1 1
```
```
3
3 4 2
```
```
7
1 2 3 4 5 6 7
```
```
5
1 2 3 4 5
```
CODEFORCES 682_D. Alyona and Strings
3 2 2
abc
ab
CODEFORCES 705_C. Thor
```
3 4
1 3
1 1
1 2
2 3
```
```
4 6
1 2
1 4
1 2
3 3
1 3
1 3
```
```
5 14
1 2
2 2
1 4
1 5
1 3
3 5
1 4
1 5
1 3
3 6
1 1
1 1
```
CODEFORCES 727_F. Polycarp's problems
```
5 2
-1 2 -3 4 5
1 5
```
```
4 3
-5 1 -3 4
1 2 3
```
```
10 2
-11 -10 -9 -8 -7 -6 -5 -4 -3 -2
3 11
```
CODEFORCES 749_A. Bachgold Problem
```
5
```
```
10
```
```
100000
```
CODEFORCES 771_F. Bear and Isomorphic Points
```
1
5
1 3
5 2
6 1
4 4
-3 3
```
CODEFORCES 796_F. Sequence Recovery
```
5 4
1 1 5 19
1 2 5 1
2 5 100
1 1 5 100
```
CODEFORCES 817_B. Makes And The Product
**1. Using the wrong data type for the input/output.**

```
n = input()
```

**2. Not handling edge cases correctly.**

```
n = int(input())
if n < 3:
    raise ValueError("n must be at least 3")
```

**3. Making a mistake in your algorithm.**

```
a = list(map(int, input().split()))
min_prod = min(a)
count = 0
for i in range(n):
    for j in range(i+1, n):
        for k in range(j+1, n):
            if a[i] * a[j] * a[k] == min_prod:
                count += 1
print(count)
```

**4. Not using efficient data structures.**

```
n = int(input())
a = list(map(int, input().split()))
min_prod = min(a)
count = 0
for i in range(n):
    for j in range(i+1, n):
        for k in range(j+1, n):
            if a[i] * a[j] * a[k] == min_prod:
                count += 1
print(count)
```

**5. Not using the right algorithm.**

```
n = int(input())
a = list(map(int, input().split()))
min_prod = min(a)
count = 0
for i in range(n):
    for j in range(i+1, n):
        for k in range(j+1, n):
            if a[i] * a[j] * a[k] == min_prod:
                count += 1
print(count)
```

**6. Not testing your code thoroughly.**

```
n = int(input())
a = list(map(int, input().split()))
min_prod = min(a)
count = 0
for i in range(n):
    for j in range(i+1, n):
        for k in range(j+1, n):
            if a[i] * a[j] * a[k] == min_prod:
                count += 1
print(count)
```
CODEFORCES 842_B. Gleb And Pizza
```
5 2
4
0 0 1
1 0 2
2 0 3
3 0 4
4 0 5
```

```
8 4
7
7 8 1
-7 3 2
0 2 1
0 -2 2
-3 -3 1
0 6 2
5 3 1
```

```
10 8
4
0 0 9
0 0 10
1 0 1
1 0 2
```
CODEFORCES 863_B. Kayaking
1. ```
2
1 2 3 4
```

2. ```
4
1 3 4 6 3 4 100 200
```

3. ```
1
1
```

4. ```
5
1 1 1 1 1
```
CODEFORCES 888_F. Connecting Vertices
```
3
0 0 1
0 0 1
1 1 0
```
CODEFORCES 911_D. Inversion Counting
```
3
1 2 3
2
1 2
2 3
```

```
4
1 2 4 3
4
1 1
1 4
1 4
2 3
```

```
10
1 2 3 4 5 6 7 8 9 10
2
1 5
```
CODEFORCES 933_B. A Determined Cleanup
```
1 1000

1000 1000

10 1000000000

1000000000 1000000000

-1

46 2

2018 214
```
CODEFORCES 95_D. Horse Races
```
1 2
1 100
```

```
1 2
70 77
```

```
2 1
1 20
80 100
```
CODEFORCES 987_B. High School: Become Human
```
5 8
10 3
6 6
-10 3
```
HACKEREARTH alexanders-journey-4
```
1
4 4
1 2 24
1 4 20
3 1 3
4 3 12
1
```
HACKEREARTH burger-deliver-time-1
1
1 1

1
2 1

5
1 1
2 2
3 3
4 4
5 5
HACKEREARTH day-6-advanced-mathematics
1.  ```
1
a
```
2.  ```
1
ab
```
3.  ```
1
aab
```
4.  ```
2
hello
world
```
5.  ```
4
abc
xyyz
hello
world
```
6.  ```
10
thequickbrownfoxjumpsoverthelazydog
abcdefghijklmnopqrstuvwxyz
aaaaaaaaa
z
a
aaaaaaaaa
bbbbbbbbb
aaaaa
```
HACKEREARTH game-of-numbers-7
```
1
1 10
```
```
1
1 9
```
```
1
10 10
```
```
3
1 10
10 100
100 1000
```
```
1
1 1000000000
```
HACKEREARTH kejal-color-problem
1
1
HACKEREARTH mobile-conversations
```
#Incorrect variable type
N = input()
T, X = [int(x) for x in input().split()]

M = T + X
print(M)

#Incorrect calculation
N = int(input())
T, X = [int(x) for x in input().split()]

M = T + X
print(M)

#Off-by-one error
N = int(input())
T, X = [int(x) for x in input().split()]

M = T + X
for i in range(1, N):
    T, X = [int(x) for x in input().split()]
    M = M + T - X

print(M)

#Infinite loop
N = int(input())
T, X = [int(x) for x in input().split()]

M = T + X
while True:
    T, X = [int(x) for x in input().split()]
    M = M + T - X

print(M)

#Memory leak
N = int(input())
T, X = [int(x) for x in input().split()]

M = T + X
for i in range(1, N):
    T, X = [int(x) for x in input().split()]
    M = M + T - X

del T, X
print(M)
```

```
#Correct implementation
N = int(input())
T, X = [int(x) for x in input().split()]

M = T + X
for i in range(1, N):
    T, X = [int(x) for x in input().split()]
    M = max(M - T, X)

print(M)
```
HACKEREARTH panda-and-maximum-product
```
3
-1 2 3
```
HACKEREARTH roots
```
1
1 0 0
```

```
2
1 0 -1
1 1 1
```

```
2
1 0 -1
0 0 0
```

```
3
1 0 -1
0 0 0
1 1 1
```
HACKEREARTH stock-market-calculation-1
```
1
5
1 2 3 4 5
```
```
2
3
5 3 2
3
1 2 100
```
```
3
4
1 3 1 2
```
HACKEREARTH unique
1
5
1 2 3 4 5
ATCODER p02588 AtCoder Grand Contest 047 - Integer Product
```
5
7.5
2.4
17.000000001
17
16.000000000
```
ATCODER p02719 AtCoder Beginner Contest 161 - Replacing Integer
```
7 4
2 6
1000000000000000000 1
```
ATCODER p02848 AtCoder Beginner Contest 146 - ROT N
**Incorrectly shifting the characters by N:**

```
n = int(input())
s = input()
for i in range(len(s)):
    if ord(s[i]) + n < ord('A'):
        print(chr(ord(s[i]) + n + 26), end='')
    else:
        print(chr(ord(s[i]) + n), end='')
```

**Using an incorrect character set:**

```
n = int(input())
s = input()
for i in range(len(s)):
    print(chr(ord(s[i]) + n), end='')
```

**Not handling invalid input correctly:**

```
n = int(input())
s = input()
if n < 0 or n > 26:
    print('Invalid input')
else:
    for i in range(len(s)):
        if ord(s[i]) + n < ord('A'):
            print(chr(ord(s[i]) + n + 26), end='')
        else:
            print(chr(ord(s[i]) + n), end='')
```

**Not using a consistent coding style:**

```
n = int(input())
s = input()
for i in range(len(s)):
    if ord(s[i]) + n < ord('A'):
        print(chr(ord(s[i]) + n + 26), end='')
    else:
        print(chr(ord(s[i]) + n), end='')
```

**Not testing your code thoroughly:**

```
n = int(input())
s = input()
for i in range(len(s)):
    if ord(s[i]) + n < ord('A'):
        print(chr(ord(s[i]) + n + 26), end='')
    else:
        print(chr(ord(s[i]) + n), end='')
```
ATCODER p02986 AtCoder Beginner Contest 133 - Colorful Tree
```
5 3
1 2 1 10
1 3 2 20
2 4 4 30
5 2 1 40
1 100 1 4
1 100 1 5
3 1000 3 4
```
ATCODER p03127 AtCoder Beginner Contest 118 - Monsters Battle Royale
```
4
2 10 8 40

4
5 13 8 1000000000

3
1000000000 1000000000 1000000000
```
ATCODER p03270 AtCoder Regular Contest 102 - Stop. Otherwise...
```
3 3

4 5

6 1000
```
ATCODER p03427 AtCoder Grand Contest 021 - Digit Sum 2
1. ```
N = int(input())

print(sum(map(int, str(N))))
```

2. ```
N = int(input())

ans = 0
for i in range(1, N + 1):
    ans = max(ans, sum(map(int, str(i))))

print(ans)
```

3. ```
N = int(input())

ans = N
while N > 0:
    ans += N % 10
    N //= 10

print(ans)
```

4. ```
N = int(input())

if N == 0:
    print(0)
elif N < 10:
    print(N)
else:
    # 999999999 (9 digits)
    n = 10 ** 9
    ans = 0
    for i in range(9, -1, -1):
        if N >= n * i:
            ans += n * i
            N -= n * i

    print(ans)
```

5. ```
N = int(input())

def dfs(n, sum_d):
    if n == 0:
        return sum_d
    return max(dfs(n // 10, sum_d), dfs(n // 10, sum_d + n % 10))

print(dfs(N, 0))
```
ATCODER p03585 Tenka1 Programmer Contest - CARtesian Coodinate
3
1 1 1
2 -1 2
-1 2 2
ATCODER p03743 AtCoder Regular Contest 072 - Alice in linear land
```
# Incorrect variable type
N = float(input())
D = float(input())
d = list(map(int, input().split()))
Q = int(input())
q = list(map(int, input().split()))

# Incorrect variable initialization
dist = 0

# Incorrect logic
if sum(d) >= D:
    print('YES')
else:
    print('NO')

# Missing error handling
try:
    N = int(input())
    D = int(input())
    d = list(map(int, input().split()))
    Q = int(input())
    q = list(map(int, input().split()))
except ValueError:
    print('ERROR')

# Inefficient algorithm
for i in range(Q):
    if d[q[i]] < 0:
        print('YES')
    else:
        print('NO')
```
ATCODER p03903 CODE FESTIVAL 2016 Elimination Tournament Round 1 (Parallel) - Graph
4 3
1 2 3
2 3 4
3 4 5
2
2 3
1 4
AIZU p00009 Prime Number
1. 1
2. 2
3. 3
4. 4
5. 5
6. 6
7. 7
8. 8
9. 9
10. 10
11. 11
12. 12
13. 13
14. 14
15. 15
16. 16
17. 17
18. 18
19. 19
20. 20
21. 21
22. 22
23. 23
24. 24
25. 25
26. 26
27. 27
28. 28
29. 29
30. 30
AIZU p00141 Spiral Pattern
1
1
2
3
4
5
6
10
15
20
AIZU p00274 A Pair of Prizes
2
2
1 1
1
1
0
1
1000
0
2
2
1 1
3
3
4 3 2
3
0 1 1
4
1 1 1 1
0
0

AIZU p00462 Pizza
8
3
2
3
1
4
6
20
4
4
12
8
16
7
7
11
8
0
AIZU p00652 Cutting a Chocolate
1 3 10 10 10
3 3
6 6
10 10
4.0000000000 4.0000000000
7.0000000000 7.0000000000
AIZU p00797 Family Tree
```
# 1. Incorrect indentation

6 5
John
Robert
Frank
Andrew
Nancy
David

Robert is a child of John.
Robert is an ancestor of Andrew.
Robert is a sibling of Nancy.
Nancy is the parent of Frank.
John is a descendant of Andrew.
2 1
abc
xyz
xyz is a child of abc.
0 0

# 2. Missing or incorrect relation

6 5
John
Robert
Frank
Andrew
Nancy
David

John is a child of Robert.
Robert is an ancestor of Andrew.
Robert is a sibling of Nancy.
Nancy is the parent of Frank.
John is a descendant of Andrew.
2 1
abc
xyz
xyz is a child of abc.
0 0

# 3. Incorrect statement format

6 5
John
Robert
Frank
Andrew
Nancy
David

Robert is a child of John.
Robert is an ancestor of Andrew.
Robert is a sibling of Nancy.
Nancy is the parent of Frank.
John is a descendant of Andrew.
2 1
abc
xyz
xyz is a child of abc.
0 0

# 4. Incorrect data type

6 5
John
Robert
Frank
Andrew
Nancy
David

Robert is a child of John.
Robert is an ancestor of Andrew.
Robert is a sibling of Nancy.
Nancy is the parent of Frank.
John is a descendant of Andrew.
2 1
abc
xyz
xyz is a child of abc.
0 0
```
AIZU p00928 Automotive Navigation
1. **Incorrect input format.**

```
1 2 1 1
```

2. **Invalid input values.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
-1 N
```

3. **Off-by-one errors.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
5 N
```

4. **Memory leaks.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
9 N
```

5. **Synchronization issues.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
9 P
```

6. **Race conditions.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
9 R
```

7. **Unhandled exceptions.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
9 U
```

8. **Security vulnerabilities.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
9 S
```

9. **Performance problems.**

```
4 2 1 1
1 1 1 2
2 2 2 1
2 2 1 2
1 1 2 1
9 P
```
AIZU p01061 Community Integration
```
3 1
1 2


4 2
1 4
2 3


5 0


3 3
1 2
2 3
3 1


3 2
1 2
2 3


5 4
1 2
2 3
3 4
4 5


10 5
3 4
1 2
9 6
2 6
2 9
```
AIZU p01193 First Experience
10000
AIZU p01331 Warp Hall
**4 4 1
2 2 3 3
1 4 1
1 2 1 3
5 5 2
2 2 3 4
3 3 5 3
5 5 3
4 4 5 5
2 2 3 3
3 3 4 4
100000 100000 1
2 2 99999 99999
1 1 0
0 0 0**
AIZU p01498 King Slime
```
5 5 5
1 1
2 2
3 3
4 4
5 5
```
```
2 3 3
2 2
3 3
```
```
3 4 4
1 1
2 2
2 3
```
```
2 4 4
2 2
2 3
```
```
3 3 3
1 1
1 2
1 3
```
AIZU p01669 Iyasugigappa
3 2 1 3 2 1 3 2 1 3 2 1
1 1
1 1
1 1
AIZU p01811 ABC Gene
1. ```
ABC
```
2. ```
AABCC
```
3. ```
AABCABC
```
4. ```
ABCCBAABCCBAABC
```
5. ```
AAAAA
```
6. ```
ABBBBB
```
7. ```
AAAAAABBBBBCCCCC
```
AIZU p01946 Slimming Plan
65 60 3
-2 3 -4

100000 1 1
-1

60 59 1
-123

1000000000 1000000000 1000000000
1000000000
AIZU p02095 Colorful Tree
```
10 10
1 2
1 4
2 3
3 4
3 5
4 6
4 7
4 8
5 6
5 9
6 7
7 8
9 10
```
AIZU p02233 Fibonacci Number
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
AIZU p02379 Distance
1. Incorrect calculation of distance

```
input:
0 0 1 1

output:
2.0
```

2. Incorrect typecasting

```
input:
1 2 3 4

output:
13.0
```

3. Incorrect rounding

```
input:
0 0 1 1

output:
1.414214
```

4. Incorrect error handling

```
input:
a 2 3 4

output:
Invalid input
```