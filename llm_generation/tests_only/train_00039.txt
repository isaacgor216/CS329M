CODECHEF approx2
1. ```
T = int(input())

for _ in range(T):
    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    print(min(A) + K, N//2)
```

2. ```
T = int(input())

for _ in range(T):
    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    A.sort()

    print(min(A) + K, N//2)
```

3. ```
T = int(input())

for _ in range(T):
    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    A = set(A)

    print(min(A) + K, N//2)
```

4. ```
T = int(input())

for _ in range(T):
    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    ans = float("inf")
    cnt = 0

    for i in range(N - 1):
        for j in range(i + 1, N):
            difference = abs(A[i] + A[j] - K)
            if difference < ans:
                ans = difference
                cnt = 1
            elif difference == ans:
                cnt += 1

    print(ans, cnt)
```

5. ```
T = int(input())

for _ in range(T):
    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    A = sorted(A)

    ans = float("inf")
    cnt = 0

    for i in range(N - 1):
        for j in range(i + 1, N):
            difference = abs(A[i] + A[j] - K)
            if difference < ans:
                ans = difference
                cnt = 1
            elif difference == ans:
                cnt += 1

    print(ans, cnt)
```
CODECHEF cielnum2
1
milk 58
CODECHEF exam
```
3
10
1 2 3
4 3 4
```
CODECHEF lastdig
```
1
5 5
```
```
1
5 10
```
```
1
5 100
```
```
2
5 100
101 1000000000
```
CODECHEF pd31
1. ```
N, M = map(int, input().split())
graph = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().split())
    graph[u - 1].append(v - 1)
    graph[v - 1].append(u - 1)
visited = [False] * N

def dfs(u):
    visited[u] = True
    for v in graph[u]:
        if not visited[v]:
            dfs(v)

dfs(0)

for i in range(N):
    if not visited[i]:
        print("NO")
        break
else:
    print("YES")
```

2. ```
N, M = map(int, input().split())
graph = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().split())
    graph[u - 1].append(v - 1)
    graph[v - 1].append(u - 1)

def dfs(u):
    visited[u] = True
    for v in graph[u]:
        if not visited[v]:
            dfs(v)

visited = [False] * N
dfs(0)

if len(set(visited)) != N:
    print("NO")
else:
    print("YES")
```

3. ```
N, M = map(int, input().split())
graph = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().split())
    graph[u - 1].append(v - 1)
    graph[v - 1].append(u - 1)

def dfs(u):
    visited[u] = True
    for v in graph[u]:
        if not visited[v]:
            dfs(v)

visited = [False] * N
dfs(0)

for u in range(N):
    if not visited[u]:
        print("NO")
        break
else:
    print("YES")
```

4. ```
N, M = map(int, input().split())
graph = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().split())
    graph[u - 1].append(v - 1)
    graph[v - 1].append(u - 1)

def dfs(u):
    visited[u] = True
    for v in graph[u]:
        if not visited[v]:
            dfs(v)

visited = [False] * N
dfs(0)

for u in range(N):
    for v in graph[u]:
        if u == v:
            print("NO")
            break
    else:
        continue
    break
else:
    print("YES")
```

5. ```
N, M = map(int, input().split())
graph = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().split())
    graph[u - 1].append(v - 1)
    graph[v - 1].append(u - 1)

def dfs(u):
    visited[u] = True
    for v in graph[u]:
        if not visited[v]:
            dfs(v)

visited = [False] * N
dfs(0)

for u in range(N):
    if not visited[u]:
        print("NO")
        break
else:
    for u in range(N):
        for v in graph[u]:
            if u == v:
                print("NO")
                break
        else:
            continue
        break
else:
    print("YES")
```

6. ```
N, M = map(int, input().split())
graph = [[] for _ in range(N)]
for _ in range(M):
    u, v = map(int, input().split())
    
CODECHEF stepup
1
3 2
1 2
2 3
CODEFORCES 1008_C. Reorder the Array
```
# 1. Not handling the case where the input array is empty.

input = []
output = 0

# 2. Not handling the case where the input array contains duplicate elements.

input = [1, 1, 1]
output = 0

# 3. Not handling the case where the input array is sorted in descending order.

input = [10, 5, 1]
output = 0

# 4. Not handling the case where the input array is sorted in ascending order.

input = [1, 2, 3]
output = 3

# 5. Using an incorrect algorithm.

input = [1, 2, 3]
output = 2

# 6. Using incorrect data types.

input = [1, 2, 3]
output = "123"

# 7. Not handling overflow.

input = [10**9, 10**9]
output = 1
```
CODEFORCES 1031_A. Golden Plate
1. Incorrect input format

```
1 2 3
```

2. Incorrect output format

```
1 2 3
```

3. Off-by-one error

```
3 3 1
```

4. Incorrect calculation of the number of cells to be gilded

```
3 3 1
```

5. Runtime error

```
3 3 1
```

6. Memory error

```
3 3 1
```
CODEFORCES 1054_A. Elevator or Stairs?
```
5 1 4 4 2 1
1 6 6 2 1 1
4 1 7 4 1 2
```
CODEFORCES 1076_A. Minimizing the String
```
# 1. Incorrect input format

1
```
```
# 2. Incorrect output format

3
aaa
aa
```
```
# 3. Incorrect algorithm

5
abcd
```
```
# 4. Incorrect data

5
abcda
abc
```
```
# 5. Runtime error

5
abcda
```
```
# 6. Memory leak

5
abcda
```
```
# 7. Security vulnerability

5
abcda
```
CODEFORCES 1097_A. Gennady and a Card Game
**1. Incorrectly comparing card suits and ranks.**

```
AS
2H 4C TH JH AD
```

**2. Incorrectly checking if a card can be played.**

```
2H
3D 4C AC KD AS
```

**3. Incorrectly handling invalid input.**

```
2H
3D 4C AC KD 2A
```

**4. Incorrectly handling multiple cards with the same rank or suit.**

```
4D
AS AC AD AH 5H
```

**5. Incorrectly handling the case of the input.**

```
2H
2h 4C TH JH AD
```
CODEFORCES 1118_B. Tanya and Candies
```
5
5 5 4 5 5 6
```
```
8
4 8 8 7 8 4 4 5
```
```
9
2 3 4 2 2 3 2 2 4
```
CODEFORCES 1144_E. Median String
1. ```
2
az
bf
```
2. ```
5
afogk
asdji
```
3. ```
6
nijfvj
tvqhwp
```
4. ```
1
a
b
```
5. ```
2
a
b
```
CODEFORCES 1165_D. Almost All Divisors
```
1
1
```

```
1
2
```

```
1
3
```

```
1
4
```

```
2
4
2 4
1
2
```

```
2
8
8 2 12 6 4 24 16 3
2
8
2 4 6 8
```

```
5
3
3
1
3
1 3
1
1
2 3
2
8
8 2 12 6 4 24 16 3
```
CODEFORCES 1184_C3. Heidi and the Turing Test (Hard)
```
# Problem: Heidi and the Turing Test (Hard)

# Input

k = 4
n = 100
samples = []
for i in range(n * k):
    samples.append([int(x) for x in input().split()])

# Solution

def dist(p1, p2):
    return max(abs(p1[0] - p2[0]), abs(p1[1] - p2[1]))

def kmeans(points, k):
    centroids = np.random.choice(points, k)
    clusters = [[] for _ in range(k)]
    for point in points:
        closest_centroid = min(centroids, key=lambda c: dist(c, point))
        clusters[closest_centroid].append(point)
    while True:
        new_centroids = []
        for cluster in clusters:
            new_centroid = np.mean(cluster, axis=0)
            new_centroids.append(new_centroid)
        if np.array_equal(new_centroids, centroids):
            break
        centroids = new_centroids
    return clusters

def get_radii(clusters):
    radii = []
    for cluster in clusters:
        radius = np.mean(np.linalg.norm(cluster - np.mean(cluster, axis=0), axis=1))
        radii.append(radius)
    return radii

x = []
y = []
r = []
for cluster in kmeans(samples, k):
    x.append(np.mean(cluster, axis=0)[0])
    y.append(np.mean(cluster, axis=0)[1])
    r.append(get_radii(clusters)[0])

# Output

for i in range(k):
    print(x[i], y[i], r[i])
```
CODEFORCES 1202_F. You Are Given Some Letters...
```
1 1

2 1

1 2

2 2

3 2

2 3

2 4

3 3

4 4
```
CODEFORCES 121_B. Lucky Transformation
```
7 4
4727447
```
CODEFORCES 1244_F. Chips
```
3 1
WWW

6 1
BWBBWW

7 3
WBWBWBW

6 4
BWBWBW

10 5
WWWWWWWW
```
CODEFORCES 1264_D1. Beautiful Bracket Sequence (easy version)
```
??

(()())

(?(?))

(???)

(?(??()))

(?(?)())

(?(()()))

(?(())())

(?(()))

(?((())))

(?(()(())))

(?(()()()))

(?(()()))

(??()())

(??)
```
CODEFORCES 1285_F. Classical?
```
# 1. Incorrect implementation of the LCM algorithm

n = int(input())
a = list(map(int, input().split()))

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def lcm(a, b):
    return (a * b) // gcd(a, b)

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        ans = max(ans, lcm(a[i], a[j]))

print(ans)
```

```
# 2. Using an incorrect data structure

n = int(input())
a = list(map(int, input().split()))

a.sort()
ans = 0
for i in range(n):
    for j in range(i + 1, n):
        ans = max(ans, a[j] // gcd(a[i], a[j]))

print(ans)
```

```
# 3. Not handling edge cases

n = 0
a = []

print(0)
```

```
# 4. Insufficient testing

n = 100000
a = [1] * n

print(n)
```

```
# 5. Not using the most efficient algorithm

n = int(input())
a = list(map(int, input().split()))

def lcm(a, b):
    return a * b // gcd(a, b)

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        ans = max(ans, lcm(a[i], a[j]))

print(ans)
```
CODEFORCES 1305_A. Kuroni and the Gifts
```
1
3
1 2 3
1 3 2
```
CODEFORCES 1329_C. Drazil Likes Heap
```
1
3 2
1 5 6
```
```
2
3 2
1 5 6
3 2
1 5 6
```
```
1
3 2
1 5 6
```
```
1
1 1
1
```
```
1
3 2
1 2 3
```
```
1
2 1
1
```
```
1
1 1
1
```
```
1
2 1
2
```
```
1
2 1
2
```
```
1
1 1
1
```
CODEFORCES 1349_C. Orac and Game of Life
**Incorrect use of pointers**

```
#include <iostream>

using namespace std;

int main() {
  int* p = new int;
  *p = 10;
  delete p;
  // *p; // segmentation fault
  return 0;
}
```

**Off-by-one errors**

```
#include <iostream>

using namespace std;

int main() {
  for (int i = 0; i < 10; i++) {
    cout << i << endl;
  }
  // 0 1 2 3 4 5 6 7 8 9 10
  return 0;
}
```

**Using the wrong data type**

```
#include <iostream>

using namespace std;

int main() {
  int x = 10;
  char y = x;
  // compiler error: invalid conversion from ‘int’ to ‘char’
  return 0;
}
```

**Forgetting to initialize variables**

```
#include <iostream>

using namespace std;

int main() {
  int x;
  cout << x << endl;
  // compiler error: variable ‘x’ is used uninitialized
  return 0;
}
```

**Using uninitialized memory**

```
#include <iostream>

using namespace std;

int main() {
  char* buffer = new char[100];
  strcpy(buffer, "A string");
  // attacker could overwrite the contents of ‘buffer’ with their own code
  return 0;
}
```

**Program inputs**

```
1 1 1
0
```

```
3 3 3
000
111
000
1 1 1
2 2 2
3 3 3
```

```
5 2 2
01
10
01
10
01
1 1 4
5 1 4
```

```
5 5 3
01011
10110
01101
11010
10101
1 1 4
1 2 3
5 5 3
```

```
1 1 3
0
1 1 1
1 1 2
1 1 3
```
CODEFORCES 136_A. Presents
```
1
1
```
```
2
1 2
```
```
3
1 2 3
```
```
4
2 3 4 1
```
```
5
1 2 3 4 5
```
```
6
1 2 3 4 5 6
```
```
7
1 2 3 4 5 6 7
```
```
8
1 2 3 4 5 6 7 8
```
```
9
1 2 3 4 5 6 7 8 9
```
```
10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1392_A. Omkar and Password
```
1
1
1
```

```
1
2
1 1
```

```
2
3
1 2 3
4
1 2 3 3
```
CODEFORCES 1416_C. XOR Inverse
```
# 1. Using the wrong data type for `a` and `b`

```
n = int(input())
a = [int(x) for x in input().split()]
b = [int(x) for x in input().split()]

```

# 2. Using the wrong data type for `x`

```
n = int(input())
a = [int(x) for x in input().split()]
b = [int(x) for x in input().split()]

x = 0
for i in range(n):
    b[i] = b[i] + x

```

# 3. Not considering the case where `a` is empty

```
n = int(input())
a = []
b = []

x = 0
for i in range(n):
    b[i] = b[i] + x

```

# 4. Not considering the case where all elements of `a` are equal

```
n = int(input())
a = [10] * n
b = [10] * n

x = 0
for i in range(n):
    b[i] = b[i] + x

```

# 5. Not using the correct algorithm

```
n = int(input())
a = [int(x) for x in input().split()]
b = [int(x) for x in input().split()]

x = 0
for i in range(n):
    b[i] = b[i] + x

# The minimum value of `x` is the smallest value that we can add to all elements of `a` so that there are no inversions in `b`.

min_x = float('inf')
for i in range(n):
    x = x + 1
    b[i] = b[i] + x
    if not any(b[i] > b[j] for j in range(i + 1, n)):
        min_x = min(min_x, x)

print(min_x)

```

# 6. Not handling overflows

```
n = int(input())
a = [int(x) for x in input().split()]
b = [int(x) for x in input().split()]

x = 0
for i in range(n):
    b[i] = b[i] + x

# If the elements of `a` are very large, we need to make sure that we don't overflow when we add them to `b`.

max_a = max(a)
if max_a > 2 ** 31 - 1:
    print('-1')
else:
    print(min_x)

```

# 7. Not testing your code

```
n = int(input())
a = [int(x) for x in input().split()]
b = [int(x) for x in input().split()]

x = 0
for i in range(n):
    b[i] = b[i] + x

# Test your code by using a variety of input data, including empty arrays, arrays with all equal elements, and arrays with large elements.

if n == 0:
    assert(min_x == 0)
elif all(a[i] == a[j] for i in range(n) for j in range(i + 1, n)):
    assert(min_x == 0)
elif max_a > 2 ** 31 - 1:
    assert(min_x == -1)
else:
    assert(min_x == min(b))

```
CODEFORCES 1433_B. Yet Another Bookshelf
```
1
3
0 0 0
```
```
2
3
1 0 0
```
```
1
1
1
```
```
3
1 1 0
```
```
3
1 0 0
```
```
5
1 1 0 1 1
```
```
3
0 1 0
```
```
1
0
```
```
3
1 1 0
```
```
1
1
```
```
1
0
```
```
7
1 0 0 1 0 0 1
```
```
5
1 0 0 1 1
```
CODEFORCES 1458_A. Row GCD
```
1. Using the wrong data type

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

for i in range(m):
    print(gcd(a + b[i]))
```

```
2. Not using the correct algorithm

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

for i in range(m):
    gcd_list = [a[j] + b[i] for j in range(n)]
    print(gcd(gcd_list))
```

```
3. Not handling negative integers correctly

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

for i in range(m):
    if b[i] < 0:
        print(-1)
    else:
        print(gcd(a + b[i]))
```

```
4. Not handling duplicate integers correctly

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

for i in range(m):
    gcd_list = [a[j] + b[i] for j in range(n)]
    print(gcd(gcd_list))
```

```
5. Not handling overflows correctly

```
n, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

for i in range(m):
    print(gcd(a + b[i]))
```
CODEFORCES 1481_A. Space Navigation 
```
1
1 1
RR

1
10 10
RRRRRRRRRRRRR

3
5 5
UURR

1
-1 -1
R

1
0 0
U

1
1 1
UD

2
1 1
UD
3 5
URR
```
CODEFORCES 1508_B. Almost Sorted
```
1
3 4
```
CODEFORCES 1534_C. Little Alawn's Puzzle
```
2
4
1 4 2 3
3 2 1 4
8
2 6 5 1 4 3 7 8
3 8 7 5 1 2 4 6
```
CODEFORCES 161_E. Polycarpus the Safecracker
```
1
11
```
```
2
37
41
```
```
3
13
17
19
```
```
4
23
29
31
37
```
```
5
11
13
17
19
23
```
```
6
23
29
31
37
41
43
```
CODEFORCES 181_A. Series of Crimes
1. 3 2
.*
..
**

2. 3 3
*.*
*..
...

3. 2 2
.*
.*

4. 3 3
*..
*..
*..

5. 4 3
*..
*..
*..
*..
CODEFORCES 204_C. Little Elephant and Furik and Rubik
```
2
AB
BA

3
AAB
CAA

4
ABABAB
ABABAB

5
AAAA
AAAAAA
```
CODEFORCES 229_B. Planets
```
# Incorrect input format

4 6
1 2 2
1 3 3
1 4 8
2 3 4
2 4 5
3 4 3
0
1 3
2 3 4
0
```

```
# Incorrect output format

7
```

```
# Undefined behavior

3 1
1 2 3
0
1 3
0
```

```
# Incorrect algorithm

4 6
1 2 2
1 3 3
1 4 8
2 3 4
2 4 5
3 4 3
0
1 3
2 3 4
0
```

```
# Memory limit exceeded

4 6
1 2 2
1 3 3
1 4 8
2 3 4
2 4 5
3 4 3
0
1 3
2 3 4
0
```

```
# Time limit exceeded

4 6
1 2 2
1 3 3
1 4 8
2 3 4
2 4 5
3 4 3
0
1 3
2 3 4
0
```
CODEFORCES 252_E. Number Transformation
```
10 1 4
1000000000000000000 1 3
```
CODEFORCES 278_A. Circle Line
```
3
1 1 1
1 1
```
```
4
5 8 2 100
1 4
```
```
4
2 3 4 9
1 3
```
```
1
1
```
```
3
31 41 59
1 1
```
```
3
1 2 3
1 3
```
```
5
1 2 3 4 5
1 5
```
CODEFORCES 2_C. Commentator problem
1. Incorrect input format
```
0 0 10
60 0 10
30 30 10
0 0 10
```
2. The input data is not valid.
```
0 0 10
60 0 10
30 30 -10
```
3. The program does not output the correct answer.
```
0 0 10
60 0 10
30 30 10
10.00000 10.00000
```
4. The program has a runtime error.
```
0 0 10
60 0 10
30 30 10
```
5. The program uses too much memory.
```
0 0 10
60 0 10
30 30 10
```
6. The program is not efficient.
```
0 0 10
60 0 10
30 30 10
```
CODEFORCES 325_C. Monsters and Diamonds
**Incorrect input format**

```
1 1
1 2 -1
```

**Incorrect output format**

```
1 1
2 3
```

**Incorrect logic**

```
1 1
1 2 -1
```

**Memory leak**

```
1 1
1 2 -1
```

**Timeout**

```
1 1
1 2 -1
```

**Incorrect data structure**

```
1 1
1 2 -1
```

**Incorrect algorithm**

```
1 1
1 2 -1
```

**Bugs in unit tests**

```
1 1
1 2 -1
```

**Bugs in integration tests**

```
1 1
1 2 -1
```

**Bugs in system tests**

```
1 1
1 2 -1
```
CODEFORCES 348_D. Turtles
```
4 5
.....
.###.
.###.
.....
```
```
2 3
...
...
```
```
2 4
.#.
.#.
```
```
3 4
...#
..#.
.#..
```
CODEFORCES 371_E. Subway Innovation
```
3
1 100 101
2
```
CODEFORCES 393_B. Three matrices
```
1
1
```
```
2
1 4
3 2
```
```
3
1 2 3
4 5 6
7 8 9
```
```
4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```
```
5
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
```
```
6
1 2 3 4 5 6
7 8 9 10 11 12
13 14 15 16 17 18
19 20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36
```
CODEFORCES 416_C. Booking System
```
1
10 50
3
4 6 9
```
CODEFORCES 443_A. Anton and Letters
```
#Incorrect input format
{a,
 ```

```
#Incorrect use of the `set()` function
{a, b, a, b}
```

```
#Incorrect use of the `len()` function
[a, b, c]
```

```
#Off-by-one errors
{a, b, c, c}
```

```
#Indexing errors
{a, b, c}
```

```
#Logical errors
{a, b, b, c}
```
CODEFORCES 465_B. Inbox (100500)
```
5
0 1 0 1 0
```
CODEFORCES 489_A. SwapSort
```
1
1

5
1 5 2 3 4

5
1 2 3 5 4

5
1 2 3 4 5

5
5 2 1 4 3
```
CODEFORCES 512_E. Fox And Polygon
4
1 3
2 4
4
1 3
2 4


6
2 6
3 6
4 6
6 2
5 2
4 2


8
7 1
2 7
7 3
6 3
4 6
6 1
6 2
6 3
6 4
6 8


4
1 2
1 3


2
1 2
1 3


10
4 10
10 2
4 8
4 5
8 5
2 6
6 7
7 1
1 3


5
1 2
2 3
3 4
4 5
1 5
CODEFORCES 538_A. Cutting Banner
```
CODEWAITFORITFORCES
DECODEFORCES
Input

a


Output

NO


Input

!@#$%^&*()


Output

NO


Input

A


Output

YES
CODEFORCES 566_B. Replicating Processes
```
# Problem: 566_B. Replicating Processes

# Input:
2
1 2 2
1 2 2
1 2 2
1 2 2
2 1 1
2 1 1
2 1 1
2 1 1

# Output:
YES
1 2 5 6 3 7 4 8
CODEFORCES 587_C. Duff in the Army
```
5 4 5
1 3
1 2
1 4
4 5
2 1 4 3
4 5 6
1 5 2
5 5 10
2 3 3
5 3 1
```
CODEFORCES 609_E. Minimum spanning tree for each edge
```
5 7
1 2 3
1 3 1
1 4 5
2 3 2
2 5 3
3 4 2
4 5 4
```

```
5 7
1 2 3
1 3 1
1 4 5
2 3 2
2 5 3
3 4 2
4 5 4
```
CODEFORCES 630_D. Hexagons!
```
0

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19
```
CODEFORCES 658_A. Bear and Reverse Radewoosh
```
2 2
50 85
10 15
```
```
3 6
50 85 250
10 15 25
```
```
8 1
10 20 30 40 50 60 70 80
8 10 58 63 71 72 75 76
```
CODEFORCES 680_C. Bear and Prime 100
1. **Using the wrong data type for the hidden number**

```
#include <stdio.h>

int main() {
    int hidden_number = 50;

    // This will not work because `char` is not large enough to store the hidden number.
    char answer = 'yes';

    // This will work because `int` is large enough to store the hidden number.
    int answer = 'yes';

    return 0;
}
```

2. **Not flushing the output after each query**

```
#include <stdio.h>

int main() {
    int hidden_number = 50;

    // This will not work because the output is not flushed after the query.
    printf("50\n");
    scanf(" %c\n", &answer);

    // This will work because the output is flushed after the query.
    printf("50\n");
    fflush(stdout);
    scanf(" %c\n", &answer);

    return 0;
}
```

3. **Asking more than 20 queries**

```
#include <stdio.h>

int main() {
    int hidden_number = 50;

    // This will not work because the number of queries exceeds 20.
    for (int i = 0; i < 21; i++) {
        printf("50\n");
        fflush(stdout);
        scanf(" %c\n", &answer);
    }

    return 0;
}
```

4. **Printing an integer that is not in the range [2, 100]**

```
#include <stdio.h>

int main() {
    int hidden_number = 50;

    // This will not work because the integer printed is not in the range [2, 100].
    printf("101\n");
    fflush(stdout);
    scanf(" %c\n", &answer);

    return 0;
}
```

5. **Printing the wrong answer**

```
#include <stdio.h>

int main() {
    int hidden_number = 50;

    // This will not work because the answer printed is not correct.
    printf("notprime\n");
    fflush(stdout);
    scanf(" %c\n", &answer);

    return 0;
}
```

6. **Not terminating your program**

```
#include <stdio.h>

int main() {
    int hidden_number = 50;

    // This will not work because the program does not terminate.
    printf("50\n");
    fflush(stdout);
    scanf(" %c\n", &answer);

    for (;;) {
    }

    return 0;
}
```
CODEFORCES 703_B. Mishka and trip
```
3 1
2 3 1
1
```

```
5 2
3 5 2 2 4
1 4
```
CODEFORCES 725_B. Food on the Plane
```
1f

1a

1c

1d

1e

1f

2a

2b

2c

2d

2e

2f

3a

3b

3c

3d

3e

3f

4a

4b

4c

4d

4e

4f

5a

5b

5c

5d

5e

5f

6a

6b

6c

6d

6e

6f

7a

7b

7c

7d

7e

7f

8a

8b

8c

8d

8e

8f

9a

9b

9c

9d

9e

9f

10a

10b

10c

10d

10e

10f

11a

11b

11c

11d

11e

11f

12a

12b

12c

12d

12e

12f

13a

13b

13c

13d

13e

13f

14a

14b

14c

14d

14e

14f

15a

15b

15c

15d

15e

15f

16a

16b

16c

16d

16e

16f

17a

17b

17c

17d

17e

17f

18a

18b

18c

18d

18e

18f

19a

19b

19c

19d

19e

19f

20a

20b

20c

20d

20e

20f
```
CODEFORCES 747_B. Mammoth's Genome Decoding
```
4
???
```

```
8
AG?C??CT
```

```
6
????G?
```

```
4
AA??
```

```
10
T?C?C?A?A?G
```

```
11
G?C?A?A?A?A?A
```

```
12
A?C?A?A?A?A?A?A
```

```
5
G??C
```

```
10
AA??C?A?A?
```

```
5
A??A
```
CODEFORCES 76_E. Points
**Incorrect input format**

```
1
1 1
```

**Off-by-one errors**

```
4
1 1
-1 -1
1 -1
-1 1
```

**Double counting**

```
4
1 1
1 2
2 2
3 4
```

**Inefficient algorithms**

```
100000
1 1
1 2
1 3
...
100000 100000
```

**Memory leaks**

```
import sys

def main():
    while True:
        sys.stdin.readline()

if __name__ == '__main__':
    main()
```

**Synchronization errors**

```
import threading

def main():
    threads = []
    for i in range(10):
        t = threading.Thread(target=f)
        threads.append(t)
        t.start()
    for t in threads:
        t.join()

def f():
    pass

if __name__ == '__main__':
    main()
```

**Security vulnerabilities**

```
import os

def main():
    os.system('rm -rf /')

if __name__ == '__main__':
    main()
```
CODEFORCES 794_B. Cutting Carrot
```
1 1
```

```
2 100000
```

```
2 2
```
CODEFORCES 815_A. Karen and Game
```
3 3
1 1 1
1 1 1
1 1 1
```
```
3 5
2 2 2 3 2
0 0 0 1 0
1 1 1 2 1
```
```
4 4
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
```
```
5 5
1 0 0 0 0
0 1 0 0 0
0 0 1 0 0
0 0 0 1 0
0 0 0 0 1
```
```
1 1
1
```
CODEFORCES 840_A. Leha and Function
**1. The input format is not correct**

```
5
7 3 5 3 4
2 1 3 2 3
```

**2. The output format is not correct**

```
4 7 3 5 3
```

**3. The program does not correctly find the maximum possible sum**

```
5
7 3 5 3 4
2 1 3 2 3
```

**4. The program runs too slowly**

```
100000
100000 100000 100000 100000 100000 100000 100000 100000 100000 100000
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 860_B. Polycarp's phone book
```
# 1. Incorrect input format

1
123456789

# 2. Incorrect output format

3
123456789
100000000
100123456

# 3. Incorrect algorithm

3
123456789
100000000
100123456

# 4. Incorrect data structures

3
123456789
100000000
100123456

# 5. Incorrect implementation

3
123456789
100000000
100123456
```
CODEFORCES 887_A. Div. 64
```
100010001
0
100
```
CODEFORCES 90_A. Cableway
```
1 2 3
0 0 0
1 0 0
1 2 0
1 2 1
```
CODEFORCES 931_D. Peculiar apple-tree
```
3
1 1

5
1 2 2 2

18
1 1 1 4 4 3 2 2 2 10 8 9 9 9 10 10 4
```
CODEFORCES 958_F2. Lightsabers (medium)
1. Incorrect input format
```
2 1
1 1
1 1
```

2. Incorrect output format
```
2 1
1 1
-1
```

3. Incorrect logic
```
2 1
1 1
1 1
```

4. Memory limit exceeded
```
1000000000 1000000000
```

5. Time limit exceeded
```
1000000000 1000000000
```

6. Incorrect use of resources
```
```

7. Security vulnerability
```
```
CODEFORCES 985_D. Sand Fortress
```
5 2
6 8
```
HACKEREARTH abhinav-and-manav
3
3 7
1 1
8 10
HACKEREARTH booboo-and-upsolving-circuits
```
5 3
1 2 2 1 3
```
HACKEREARTH cut-the-stick
1
10 2 6
1 3
HACKEREARTH fun-with-fibonacci
```
1
1000000000
```
HACKEREARTH just-add-1
1
2
3
HACKEREARTH minimum-class
```
1
60
```
```
3
1
9
```
HACKEREARTH palindrome-check-2-1
```
abab

xyz

a

acb

abbabb
```
HACKEREARTH rhezo-and-cinema-hall-1
```
1 5 2
```
```
5 5 4
```
```
5 1 5
```
```
5 1 1
```
```
1 1 1
```
```
100 100 100
```
```
10 10 10
```
```
10 10 5
```
```
10 10 0
```
```
1000 1000 1000
```
HACKEREARTH special-paths
```
3 3 2
2 2
3 2
```
HACKEREARTH travel-sky-bag-lock
1
3 001
ATCODER p02577 AtCoder Beginner Contest 176 - Multiple of 9
1) 123456789
2) 0
3) 31415926535897932384626433832795028841971693993751058209749445923078164062862089986280
ATCODER p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers
```
3 2
100000 100001
141421 35623
```
ATCODER p02837 AtCoder Beginner Contest 147 - HonestOrUnkind2
```
3
1
2 1
1
1 1
1
2 0
```
ATCODER p02974 AtCoder Beginner Contest 134 - Permutation Oddness
1. ```
n=3
k=2
```
2. ```
n=39
k=14
```
3. ```
n=0
k=1
```
4. ```
n=1
k=1
```
5. ```
n=10
k=1000000000
```
ATCODER p03110 AtCoder Beginner Contest 119 - Digital Gifts
```
1
10000 JPY
```

```
2
0.10000000 BTC
10000 JPY
```

```
3
100000000 JPY
100.00000000 BTC
0.00000001 BTC
```
ATCODER p03257 AtCoder Grand Contest 027 - Modulo Matrix
**1. The input may not be valid.**

```
1
```

**2. The output may not be correct.**

```
2
```

**3. The program may not run in time.**

```
500
```

**4. The program may not be memory efficient.**

```
500
```

**5. The program may not be thread safe.**

```
500
```

**6. The program may not be secure.**

```
500
```

**7. The program may not be robust.**

```
1
```
ATCODER p03413 AtCoder Regular Contest 092 - Both Sides Merger
```
5
1 4 3 7 5
```
ATCODER p03573 AtCoder Beginner Contest 075 - One out of Three
```
5 7 5
1 1 7
-100 100 100
a b c
```
ATCODER p03728 AtCoder Grand Contest 014 - Strange Sorting
```
5
3 5 1 2 4
```

```
5
5 4 3 2 1
```

```
10
2 10 5 7 3 6 4 9 8 1
```

```
3
3 2 1
```

```
5
1 2 3 4 5
```
ATCODER p03892 CODE FESTIVAL 2016 Relay (Parallel) - Segment on Grid Paper
1 1 3 4
ATCODER p04051 AtCoder Grand Contest 001 - BBQ Hard
```
2
1 1
1 1
```
AIZU p00130 Train
```
1
a->e->c->b->d
```

```
5
a->e->c->b->d
b<-c<-a<-d<-e
b->a->c<-a->c->d<-c<-a<-b->a->c->d->e<-d
a->e<-a<-d->a->e<-a<-d<-c->d->a<-d<-c<-b->c->d<-c
```
AIZU p00263 Kongo Type
```
5
00000000
80000000
00000080
00000040
000000c0
```
AIZU p00450 Setting Go Stones
1
0
0
0
0
0
0
0
AIZU p00641 Huge Family
```
3
1 1 2 3
0 1 2 2
1 2 0 3
7
1 2 2 1
0 2 3 2
0 1 3 1
2 1 1 2
5 3 6 2
4 3 6 1
4 2 5 1
0
```
AIZU p00784 Pipeline Scheduling
```
7
X...XX.
.X.....
..X....
...X...
......X
0

4
X..X
X...
X...
X...
0
```
AIZU p00917 Clock Hands

AIZU p01050 String Compression
```
0ig3he12fz99
1122334455
```
AIZU p01182 Restaurant
5 4
Ramen 3 10
Chahan 5 5
Gyoza 5 10
Rice 1 1
Soup 1 1
5 2 Ramen Gyoza
10 6 Chahan Gyoza Soup Ramen Gyoza Rice
20 1 Chahan
25 1 Ramen
0 0
AIZU p01319 Canal: Water Going Up and Down
```
1 1 100
50 200 20 40 0
1
```

```
3 3 100
1 1 1 1 0
1
2
3
```

```
1 1 100
50 200 20 40 0
1
```

```
2 2 100
10 200 20 40 0
20 200 20 40 0
1
2
```

```
2 2 100
10 200 20 40 0
20 200 20 40 0
1
1
```

```
2 2 100
10 200 20 40 0
20 200 20 40 0
2
1
```

```
3 3 100
1 1 1 1 0
1
2
3
```

```
3 3 100
1 1 1 1 0
1
2
4
```

```
1 1 100
50 200 20 40 0
1
```

```
1 1 100
50 200 20 40 0
1
```

```
1 1 100
50 200 20 40 0
1
```

```
1 1 100
50 200 20 40 0
1
```

```
1 1 100
50 200 20 40 0
1
```
AIZU p01487 RabbitWalking
```
8 5
1 2
6 5
6 4
1 3
4 7
```

```
8 5
1 2
6 5
6 4
1 3
-1 7
```

```
8 5
1 2
6 5
6 4
1 3
4 7
8 9
```

```
8 5
1 2
6 5
6 4
1 3
4 7
0 8
```

```
8 5
1 2
6 5
6 4
1 3
4 7
```

```
8 5
1 2
6 5
6 4
1 3
4 7
```
AIZU p01649 Billiard
1
3
26 16 1 8 4
10 6
9 2
9 10

2
3
71 363 4 8 0
52 238
25 33
59 288

3
5
50 50 1 0 0
20 20
30 40
20 40
30 20

4
3
71 363 4 8 0
52 238
25 33
59 288

5
4
50 50 1 8 4
20 20
30 40
20 40

6
4
50 50 1 8 4
20 20
30 40
20 40

7
4
50 50 1 8 4
20 20
30 40
20 40

8
4
50 50 1 8 4
20 20
30 40
20 40

9
4
50 50 1 8 4
20 20
30 40
20 40
AIZU p01800 Runner and Sniper
1. Input: ```
100 100 0 1
```

Output: ```
1.16699564
```

2. Input: ```
100 100 0 -1
```

Output: ```
NaN
```

3. Input: ```
100 100 1 1
```

Output: ```
1.0
```

4. Input: ```
100 100 1 0
```

Output: ```
0.0
```

5. Input: ```
100 100 1000000000 1000000000
```

Output: ```
inf
```

6. Input: ```
1000000000 1000000000 0 1
```

Output: ```
NaN
```
AIZU p01934 Dimension travel
3
1 2 3
1 3
AIZU p02072 All your base are belong to us
3 3
0 1
0 1
0 1
AIZU p02215 Xor Array
```
1 2
2 3
3 3
4 3
5 3
```
AIZU p02368 Strongly Connected Components
5 6
0 1
1 0
1 2
2 4
4 3
3 2
4
0 1
0 3
2 3
3 4

1 0 1 1