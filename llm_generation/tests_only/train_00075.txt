CODECHEF brcktsrm
1
()()()
CODECHEF comm3
```
1
1000
0 0
0 1000
1000 0
```
```
1
1000
0 0
0 1000
1000 0
```
```
1
1000
0 0
1000 0
1000 1000
```
```
1
1000
0 0
1000 1000
0 1000
```
```
1
1000
0 1000
1000 1000
0 0
```
```
1
1000
0 1000
1000 1000
1000 0
```
```
1
1000
0 1000
1000 1000
500 500
```
```
1
1000
0 1000
1000 1000
0 0
```
```
1
1000
0 1000
1000 1000
-1000 0
```
```
1
1000
0 1000
1000 1000
-1000 -1000
```
```
1
1000
0 1000
1000 1000
1000 -1000
```
```
1
1000
0 1000
1000 1000
-1000 -1000
```
```
1
1000
0 1000
1000 1000
1000 1000
```
CODECHEF gcd2
```
5
0 21179869184
1 1
100 200
1000000000000000000 2000000000000000000
2147483647 2147483647
```
CODECHEF luckybal
4
47
74
477
4747477
CODECHEF prpaln
```
1
aaa
```
```
3
abba
abdbca
abc
```
CODECHEF tf01
```
1
1 1
```

```
1
2 1
```

```
1
3 2
```

```
1
4 10
1 2 3 4
```

```
1
5 10
3 4 6 1 9
```

```
2
5 10
3 4 6 1 9
3 2
1 3 4
```

```
3
3 2
1 2 3
2 2
1 1
3 1
1
```

```
1
1 0
```

```
1
1000 1000
1 2 3 4 5 6 7 8 9 10
```

```
1
5000 5000
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```
CODEFORCES 1012_E. Cycle sort
```
10 100
3 7 1 5 9 4 2 6 8 10
```
CODEFORCES 1037_E. Trips
```
4 4 2
2 3
1 2
1 3
1 4

4 4 3
2 3
1 2
1 3
1 4

5 8 2
2 1
4 2
5 4
5 2
4 3
5 1
4 1
3 2

5 7 2
1 5
3 2
2 5
3 4
1 2
5 3
1 3
```
CODEFORCES 1060_A. Phone Numbers
1. Incorrect input format:
```
n = 10
s = '0123456789'
```

2. Incorrect output format:
```
n = 10
s = '0123456789'
print('1')
```

3. Incorrect logic:
```
n = 10
s = '0123456789'
print(2)
```

4. Memory leak:
```
n = 10
s = '0123456789'
while True:
    print(s)
```

5. Timeout:
```
n = 1000000000
s = '0123456789'
```

6. Incorrect data:
```
n = 10
s = '012345678A'
```

7. Security vulnerabilities:
```
n = 10
s = '0123456789'
print(s[n - 1])
```
CODEFORCES 1081_G. Mergesort Strikes Back
```
3 1 998244353
3 2 998244353
9 3 998244353
9 4 998244353
```
CODEFORCES 1101_A. Minimum Integer
```
5
2 4 2
5 10 4
3 10 1
1 2 3
4 6 5
```
CODEFORCES 1129_D. Isolation
```
1 1
1
```
```
5 2
1 1 2 1 3
```
```
5 5
1 2 3 4 5
```
```
10 3
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1149_E. Election Promises
```
# 1149_E. Election Promises

n, m = map(int, input().split())
h = list(map(int, input().split()))

g = [[] for _ in range(n)]
for _ in range(m):
    u, v = map(int, input().split())
    u -= 1
    v -= 1
    g[u].append(v)
    g[v].append(u)

ans = 10**18
for i in range(n):
    tmp = h.copy()
    for j in g[i]:
        tmp[j] = 0
    mn = min(tmp)
    tmp = [-1] * n
    tmp[i] = mn
    for j in range(n):
        if tmp[j] == -1:
            tmp[j] = tmp[i]

    ans = min(ans, sum(tmp))

if ans == 10**18:
    print("LOSE")
else:
    print("WIN")
    print(*tmp)
```
CODEFORCES 1170_E. Sliding Doors
3 10
2 3 2
6
1 5
2 1 10
2 2 9
2 5 6
3 1 7 8
4 1 2 3 4
CODEFORCES 1189_D1. Add on a Tree
```
2
1 2

3
1 2
2 3

5
1 2
1 3
1 4
2 5

6
1 2
1 3
1 4
2 5
2 6

7
1 2
1 3
1 4
2 5
2 6
3 7
```
CODEFORCES 1208_D. Restore Permutation
```
1
0
```
```
2
0 1
```
```
5
0 1 1 1 10
```
```
10
0 0 0 0 0 0 0 0 0 0
```
```
1000000
0 0 0 0 0 0 0 0 0 0
```
CODEFORCES 1227_D1. Optimal Subsequences (Easy Version)
```
3
10 20 10
6
1 1
2 1
2 2
3 1
3 2
3 3
```
CODEFORCES 1250_B. The Feast and the Bus
**Incorrect input format**

```
1 2
1 2
```

**Incorrect data type**

```
1 2
a b
```

**Incorrect algorithm**

```
1 2
1 2
```

**Incorrect output format**

```
1 2
1 2
3
```

**Runtime errors**

```
1 2
1 2
```

**Memory errors**

```
1 2
1 2
```
CODEFORCES 1269_E. K Integers
```
1
1
```
```
2
1 2
```
```
3
1 2 3
```
```
4
1 3 2 4
```
```
5
5 4 3 2 1
```
```
6
1 6 5 4 3 2
```
```
7
7 6 5 4 3 2 1
```
```
8
8 7 6 5 4 3 2 1
```
```
9
9 8 7 6 5 4 3 2 1
```
```
10
10 9 8 7 6 5 4 3 2 1
```
```
11
11 10 9 8 7 6 5 4 3 2 1
```
```
12
12 11 10 9 8 7 6 5 4 3 2 1
```
```
13
13 12 11 10 9 8 7 6 5 4 3 2 1
```
```
14
14 13 12 11 10 9 8 7 6 5 4 3 2 1
```
```
15
15 14 13 12 11 10 9 8 7 6 5 4 3 2 1
CODEFORCES 1291_E. Prefix Enlightenment
```
7 3
0011100
3
1 4 6
3
3 4 7
2
2 3


8 6
00110011
3
1 3 8
5
1 2 5 6 7
2
6 8
2
3 5
2
4 7
1
2


5 3
00011
3
1 2 3
1
4
3
3 4 5


19 5
1001001001100000110
2
2 3
2
5 6
2
8 9
5
12 13 14 15 16
1
19
```
CODEFORCES 1311_F. Moving Points
1. **Incorrect input format**

```
3
1 3 2
-100 2 3
```

This input is incorrect because the number of points is not between 2 and 2 * 10^5.

2. **Incorrect output format**

```
3
```

This output is incorrect because it does not match the output format specified in the problem statement.

3. **Incorrect algorithm**

```
n = int(input())
x = list(map(int, input().split()))
v = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        ans += abs(x[i] - x[j]) // max(abs(v[i]), abs(v[j]))

print(ans)
```

This code is incorrect because it does not take into account the case where two points coincide at some moment.

4. **Runtime error**

```
n = int(input())
x = list(map(int, input().split()))
v = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        ans += abs(x[i] - x[j]) // max(abs(v[i]), abs(v[j]))

print(ans)
```

This code may run into a runtime error if the number of points is large.

5. **Memory error**

```
n = int(input())
x = list(map(int, input().split()))
v = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        ans += abs(x[i] - x[j]) // max(abs(v[i]), abs(v[j]))

print(ans)
```

This code may run into a memory error if the number of points is large.

6. **Incorrect answer**

```
n = int(input())
x = list(map(int, input().split()))
v = list(map(int, input().split()))

ans = 0
for i in range(n):
    for j in range(i + 1, n):
        ans += abs(x[i] - x[j]) // max(abs(v[i]), abs(v[j]))

print(ans)
```

This code may produce an incorrect answer if the points do not move in a straight line.
CODEFORCES 1334_D. Minimum Euler Cycle
```
1
4 1 10
```
```
3
2 1 3
3 3 6
99995 9998900031 9998900031
```
```
10
1 1 1000000
```
CODEFORCES 1354_F. Summoning Minions
```
1
3 2
1 2
3 4
5 6
```
CODEFORCES 1374_E1. Reading Books (easy version)
```
3 2
9 0 0
1 1 1
2 0 1
```
```
1 1
1000 0 0
```
```
6 3
1 1 1
2 0 1
3 0 1
4 0 0
5 0 0
```
```
3 3
1 0 0
2 1 0
3 1 0
```
CODEFORCES 1398_A. Bad Triangle
```
1
3
3 4 5
```
```
1
1
1 2 3
```
```
1
1000000000
1000000000 1000000000 1000000000
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
1
1000000000
1000000000 1000000000 1000000000
```
```
1
2
1 1
```
```
1
5
1 2 4 5 5
```
```
1
5
1 2 3 4 5
```
```
1
1
1 1
```
```
3
5
4 6 11 11 15
4
10 10 10 11
3
1 1 1000000000
```
```
6
1 4 5 6 7 8
```
```
1000
1000000000
```
```
1
3
3 4 5
```
```
1
1
1 1
```
```
1
1000000000
1000000000 1000000000 1000000000
```
CODEFORCES 1421_B. Putting Bricks in the Wall
```
1
2
S01
01F
```
CODEFORCES 143_A. Help Vasilisa the Wise 2
```
3 7
4 6
5 5

1 2
3 4

11 10
13 8
5 16

4 7
9 1

1 2
3 4

10 10
10 10
10 10

-1
```
CODEFORCES 1466_F. Euclid's nightmare
```
3 2
1 1
1 2
2 1 2
```
CODEFORCES 1490_G. Old Floppy Drive 
```
1
4 3
-15 5 10 12
15 50 100
```
```
3
3 3
1 -3 4
1 5 2
2 2
-2 0
1 2
2 2
0 1
1 2
```
```
3
1 1
1
```
```
5
100000 1
1
```
CODEFORCES 1513_C. Add One
```
3
1 1
3 6
1000000000 100
```
CODEFORCES 1540_C1. Converging Array (Easy Version)
```
3
2 3 4
2 1
1
-1
```
CODEFORCES 168_A. Wizards and Demonstration
1. 10 1 14
2. 20 10 50
3. 1000 352 146
4. 10 10 100
5. 10 1 99
6. 10 1 100
7. 10 10 100
CODEFORCES 188_G. Array Sorting
1. **Using the wrong sorting algorithm**

```
10
100
1
100
1
100
1
100
1
100
1
```

2. **Not using a stable sorting algorithm**

```
5
7
1
9
7
3
```

3. **Using a sorting algorithm that does not work on Roco**

```
5
1
2
3
4
```

4. **Using a sorting algorithm that is not efficient**

```
10
100
1
100
1
100
1
100
1
100
1
```

5. **Not handling duplicate elements correctly**

```
5
7
1
9
7
3
```

6. **Not handling the case where the array is empty**

```
0
```

7. **Not handling the case where the array contains all the same elements**

```
5
1
1
1
1
1
```
CODEFORCES 20_B. Equation
```
-100 0 100
0 0 0
1 0 -1
1 -5 6
-1 0 0
```
CODEFORCES 235_D. Graph Game
```
3
0 1
1 2
0 2
```

```
4
0 1
1 2
2 3
3 0
```

```
5
3 4
2 3
2 4
0 4
1 2
```
CODEFORCES 260_B. Ancient Prophesy
```
0012-10-2012-10-2012
0000-00-0000
```
CODEFORCES 284_B. Cows and Poker Game
6
AFFAAA


3
AFI


3
AAA


2
FF


2
AA
CODEFORCES 309_B. Context Advertising
2 1 1
a
CODEFORCES 331_E2. Deja Vu
```
6 6
1 2 2 1 2
2 3 1 3
3 4 2 4 5
4 5 0
5 3 1 3
6 1 1 6
```
CODEFORCES 354_E. Lucky Number Representation
```
1
-1
```
CODEFORCES 379_A. New Year Candles
1. Incorrect input format

```
2 3
```

2. Incorrect data type

```
4 2a
```

3. Incorrect calculation

```
4 2
```

4. Incorrect output format

```
4 2
5
```

5. Other bugs

```
4 2
3
```
CODEFORCES 39_H. Multiplication Table
1. **Using the wrong data type for the input or output.**

```
k = int(input())

table = [[0 for _ in range(k - 1)] for _ in range(k - 1)]

for i in range(k - 1):
    for j in range(k - 1):
        table[i][j] = (i + 1) * (j + 1)

for row in table:
    print(*row)
```

2. **Using the wrong formula for multiplication.**

```
k = int(input())

table = [[0 for _ in range(k - 1)] for _ in range(k - 1)]

for i in range(k - 1):
    for j in range(k - 1):
        table[i][j] = (i * j) % k

for row in table:
    print(*row)
```

3. **Not handling edge cases correctly.**

```
k = int(input())

table = [[0 for _ in range(k - 1)] for _ in range(k - 1)]

if k < 2 or k > 10:
    print("Invalid input")
else:
    for i in range(k - 1):
        for j in range(k - 1):
            table[i][j] = (i + 1) * (j + 1)

for row in table:
    print(*row)
```

4. **Using incorrect indentation.**

```
k = int(input())

table = [[0 for _ in range(k - 1)] for _ in range(k - 1)]

for i in range(k - 1):
    for j in range(k - 1):
        table[i][j] = (i + 1) * (j + 1)

for row in table:
    print(*row)
```

5. **Using incorrect variable names.**

```
k = int(input())

table = [[0 for _ in range(k - 1)] for _ in range(k - 1)]

for i in range(k - 1):
    for j in range(k - 1):
        table[i][j] = (i + 1) * (j + 1)

for row in table:
    print(*row)
```

6. **Making logical errors.**

```
k = int(input())

table = [[0 for _ in range(k - 1)] for _ in range(k - 1)]

for i in range(k - 1):
    for j in range(k - 1):
        table[i][j] = (i + 1) * (j + 1)

for row in table:
    print(row)
```
CODEFORCES 425_D. Sereja and Squares
**1. Incorrect input format**

```
5
0 0
0 2
2 0
2 2
1 1
```

This input is incorrect because it does not have a space between the two integers in the first line.

**2. Incorrect output format**

```
5
```

This output is incorrect because it does not have a newline character at the end.

**3. Incorrect data type**

```
5
0 0
0 2
2 0
2 2
1 1
```

This input is incorrect because the first line is not an integer.

**4. Off-by-one errors**

```
5
0 0
0 2
2 0
2 2
1 1
```

This input is incorrect because it counts one square too many.

**5. Logical errors**

```
5
0 0
0 2
2 0
2 2
1 1
```

This input is incorrect because it does not count all of the squares.

**6. Runtime errors**

```
5
0 0
0 2
2 0
2 2
1 1
```

This input is incorrect because it causes the program to crash.
CODEFORCES 44_B. Cola
```
1
0
0
0

2
0
0
1

3
1
0
0

4
0
1
1

5
1
1
0

6
1
1
1

7
2
1
0

8
2
1
1

9
2
2
0

10
2
2
1
```
CODEFORCES 470_F. Pairwise Sums
### Incorrect input format

```
1 2 3 4
```

### Incorrect array size

```
1 2 3 4 5
```

### Incorrect array elements

```
1 2 3 4 5 6
```

### Off-by-one errors

```
1 2 3 4
```

### Indexing errors

```
1 2 3 4
```

### Memory errors

```
1 2 3 4
```

### Floating-point errors

```
1 2 3 4
```

### Other bugs

```
1 2 3 4
```
CODEFORCES 494_D. Birthday
```
5
1 2 1
4 3 1
3 5 1
1 3 1
5
1 1
1 5
2 4
2 1
3 5
```
CODEFORCES 519_B. A and B and Compilation Errors
```
5
1 5 8 123 7
123 7 5 1
5 1 7
```
CODEFORCES 545_C. Woodcutters
```
5
1 2
2 1
5 10
10 9
19 1
```
```
5
1 2
2 1
5 10
10 9
20 1
```
```
5
1 2
2 1
5 10
10 9
19 -1
```
```
5
1 2
2 1
5 10
10 9
20 2
```
```
5
1 2
2 1
5 10
10 9
20 10
```
CODEFORCES 571_E. Geometric Progressions
```
1
1 1
```
```
2
1 1
2 1
```
```
2
1 1
2 2
```
```
2
1 2
2 2
```
```
3
2 2
3 3
4 4
```
```
4
1 2
1 3
2 4
3 5
```
CODEFORCES 593_C. Beautiful Function
```
1
0 0 1
```

```
2
0 0 1
0 0 2
```

```
3
0 0 1
0 0 2
0 0 3
```

```
4
0 0 1
0 0 2
0 0 3
0 0 4
```

```
5
0 0 1
0 0 2
0 0 3
0 0 4
0 0 5
```

```
6
0 0 1
0 0 2
0 0 3
0 0 4
0 0 5
0 0 6
```

```
7
0 0 1
0 0 2
0 0 3
0 0 4
0 0 5
0 0 6
0 0 7
```

```
8
0 0 1
0 0 2
0 0 3
0 0 4
0 0 5
0 0 6
0 0 7
0 0 8
```

```
9
0 0 1
0 0 2
0 0 3
0 0 4
0 0 5
0 0 6
0 0 7
0 0 8
0 0 9
```

```
10
0 0 1
0 0 2
0 0 3
0 0 4
0 0 5
0 0 6
0 0 7
0 0 8
0 0 9
0 0 10
```
CODEFORCES 615_A. Bulbs
**Incorrect input format**

```
1 1
```

**Incorrect output format**

```
1 2
```

**Incorrect logic**

```
1 3
1 1
1 2
```

**Memory leaks**

```
1 1
1 1
```

**Race conditions**

```
1 1
1 1
```

**Security vulnerabilities**

```
1 1
1 1
```
CODEFORCES 634_C. Factory Repairs
```
5 2 2 1 8
1 1 2
1 5 3
1 2 1
2 2
1 4 2
1 3 2
2 1
2 3
```
CODEFORCES 663_A. Rebus
```
a = input()
x = int(a[-1])
if x < 2 or x > 1000000:
    print('Impossible')
else:
    if a.count('?') == 1:
        m = x // 2
        print('Possible')
        print('{} = {}'.format(a[:a.index('?')], m))
        print('{} = {}'.format(a[a.index('?') + 1:], x - m))
    elif a.count('?') == 2:
        if x % 3 != 0:
            print('Impossible')
        else:
            m = x // 3
            print('Possible')
            print('{} = {}'.format(a[:a.index('?')], m))
            print('{} = {}'.format(a[a.index('?') + 1:a.rindex('?')], m))
            print('{} = {}'.format(a[a.rindex('?') + 1:], m))
    else:
        print('Impossible')
```
CODEFORCES 687_D. Dividing Kingdom II
```
5 6 5
5 4 86
5 1 0
1 3 38
2 1 33
2 4 28
2 3 40
3 5
2 6
1 3
2 3
1 6
```
CODEFORCES 70_C. Lucky Tickets
1. Incorrect input format
```
1 2 3
```
2. Incorrect calculation of lucky tickets
```
100 100 1000000000
```
3. Incorrect calculation of the minimum number of tickets
```
100 100 1000000000
```
4. Incorrect output format
```
1 2 3
```
5. Other bugs
```
1 2 3
```
CODEFORCES 730_J. Bottles
```
1
1
1
```

```
2
1 1
100 100
```

```
4
3 3 4 3
4 7 6 5
```

```
5
10 30 5 6 24
10 41 7 8 24
```

```
10
5 10 10 10 10 10 10 10 10 10
10 10 10 10 10 10 10 10 10 10
```

```
10
1 1 1 1 1 1 1 1 1 1
100 100 100 100 100 100 100 100 100 100
```

```
10
1 1 1 1 1 1 1 1 1 1
100 100 100 100 100 100 100 100 100 100
```
CODEFORCES 754_E. Dasha and cyclic table
```
1 1
a

1 1
a

1 1
b

1 1
c

1 1
d

1 1
e

1 1
f

1 1
g

1 1
h

1 1
i

1 1
j

1 1
k

1 1
l

1 1
m

1 1
n

1 1
o

1 1
p

1 1
q

1 1
r

1 1
s

1 1
t

1 1
u

1 1
v

1 1
w

1 1
x

1 1
y

1 1
z
```
CODEFORCES 776_A. A Serial Killer
1. Incorrect input format:
```
a b
5
a c
b d
c e
d f
e g
```
2. Incorrect output format:
```
a b
c d
e f
g h
i j
```
3. Logic error:
```
a b
5
a c
b d
c e
d f
e g
```
The output should be:
```
a b
b d
c e
d f
e g
g h
```
But the program outputs:
```
a b
b c
c d
d e
e f
f g
```
4. Runtime error:
```
a b
1000000
a c
b d
c e
d f
e g
```
The program should run to completion, but it crashes with a `Segmentation fault`.
5. Security vulnerability:
```
a b
1000000
a c
b d
c e
d f
e g
```
The program should not allow an attacker to gain unauthorized access to the system, but it allows the attacker to read the contents of the file `/etc/passwd`.
CODEFORCES 7_B. Memory Manager
5 10
alloc 5
alloc 3
erase 1
alloc 6
defragment
alloc 6
CODEFORCES 820_D. Mister B and PR Shifts
**1. Incorrect input format**

```
3
1 2 3 4
```

**2. Incorrect output format**

```
0 0 1
```

**3. Incorrect algorithm**

```
def solve():
  n = int(input())
  a = list(map(int, input().split()))
  for i in range(n):
    for j in range(i + 1, n):
      if a[i] > a[j]:
        return i, j
  return -1, -1

if __name__ == "__main__":
  print(*solve())
```

**4. Incorrect data**

```
3
1 2 3
```

**5. Runtime error**

```
def solve():
  n = int(input())
  a = list(map(int, input().split()))
  for i in range(n):
    for j in range(i + 1, n):
      if a[i] > a[j]:
        return i, j
  return -1, -1

if __name__ == "__main__":
  print(*solve())
```
CODEFORCES 846_E. Chemistry in Berland
```
# 1. Incorrect data type
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
```

```
# 2. Incorrect index
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    if (i + 1) < 0 or (i + 1) > n:
        print('NO')
        break
```

```
# 3. Incorrect logic
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    b[x] -= a[i]
    if b[x] < 0:
        print('NO')
        break
else:
    print('YES')
```

```
# 4. Off-by-one error
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    b[x] -= a[i]
    if b[x] < a[i] - 1:
        print('NO')
        break
else:
    print('YES')
```

```
# 5. Infinite loop
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    while True:
        b[x] -= a[i]
        if b[x] < a[i] - 1:
            print('NO')
            break
    else:
        print('YES')
```

```
# 6. Memory leak
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    b[x] -= a[i]
    if b[x] < a[i] - 1:
        print('NO')
        break
else:
    print('YES')
```

```
# 7. Security vulnerability
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    b[x] -= a[i]
    if b[x] < a[i] - 1:
        print('NO')
        break
else:
    print('YES')
```

```
# 8. Incorrect error handling
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    try:
        b[x] -= a[i]
    except IndexError:
        print('NO')
        break
else:
    print('YES')
```

```
# 9. Undocumented features
```

```
n = int(input())
b = list(map(int, input().split()))
a = list(map(int, input().split()))
for i in range(n - 1):
    x, k = map(int, input().split())
    b[x] -= a[i]
    if b[
CODEFORCES 868_A. Bark to Unlock
```
# Incorrect data type

pwd = 'aa'
n = 2
words = ['ab', 'ac']

# Not handling the case where the password is not found

pwd = 'aa'
n = 1
words = ['ab']

# Not handling the case where the password is repeated

pwd = 'aa'
n = 2
words = ['aa', 'ab']

# Not handling the case where the password is too long

pwd = 'aaa'
n = 1
words = ['a']

# Not handling the case where the number of words is too small

pwd = 'aa'
n = 0
words = []

# Not handling the case where the number of words is too large

pwd = 'aa'
n = 101
words = ['a' for i in range(101)]
```
CODEFORCES 893_D. Credit Card
1. Incorrect variable type
```
n, d = input().split()
```

2. Incorrect boundary check
```
n, d = input().split()
if n <= 0 or d <= 0:
    print(-1)
```

3. Incorrect calculation
```
n, d = input().split()
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
print(ans)
```

4. Incorrect output
```
n, d = input().split()
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
print(ans)
```

5. Missing error handling
```
n, d = input().split()
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
if ans > 0:
    print(-1)
else:
    print(ans)
```

6. Inefficient algorithm
```
n, d = input().split()
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
    if a[i] > d:
        print(-1)
        exit(0)
print(ans)
```

7. Unclear code
```
n, d = input().split()
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
    if a[i] > d:
        print(-1)
        exit(0)
print(ans)
```

Correct program inputs:

1. Correct variable type
```
n, d = int(input()), int(input())
```

2. Correct boundary check
```
n, d = int(input()), int(input())
if n <= 0 or d <= 0:
    print(-1)
```

3. Correct calculation
```
n, d = int(input()), int(input())
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
print(ans)
```

4. Correct output
```
n, d = int(input()), int(input())
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
print(ans)
```

5. Error handling
```
n, d = int(input()), int(input())
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
if ans > 0:
    print(-1)
else:
    print(ans)
```

6. Efficient algorithm
```
n, d = int(input()), int(input())
a = list(map(int, input().split()))
ans = 0
for i in range(n):
    if a[i] < 0:
        ans += 1
print(ans)
```

7. Clear code
```
def main():
    n, d = int(input()), int(input())
    a = list(map(int, input().split()))
    ans = 0
    for i in range(n):
        if a[i] < 0:
            ans += 1
    print(ans)

if __name__ == '__main__':
    main()
```
CODEFORCES 915_A. Garden
```
3 6
2 3 5
```
```
6 7
1 2 3 4 5 6
```
CODEFORCES 938_B. Run For Your Prize
1. **Incorrect input format**

```
3
2 3 9
```

This input is incorrect because it does not follow the specified input format. The input should be a single line containing the number of prizes, followed by a newline, followed by a second line containing the positions of the prizes.

2. **Incorrect output format**

```
8
```

This output is incorrect because it does not follow the specified output format. The output should be a single integer, representing the minimum number of seconds it will take to collect all the prizes.

3. **Incorrect algorithm**

```
n = int(input())
a = list(map(int, input().split()))

ans = 0
for i in range(1, n):
    ans += abs(a[i] - a[i-1])

print(ans)
```

This program is incorrect because it does not take into account the fact that the friend can also pick up prizes. The correct algorithm should take into account both the position of the prizes and the positions of the two players.

4. **Runtime errors**

```
n = int(input())
a = list(map(int, input().split()))

ans = 0
for i in range(1, n):
    ans += abs(a[i] - a[i-1])

print(ans)
```

This program may run into a runtime error if the input is very large. The problem is that the program uses a nested loop to iterate over all of the prizes. This can be very inefficient for large inputs.

5. **Memory errors**

```
n = int(input())
a = list(map(int, input().split()))

ans = 0
for i in range(1, n):
    ans += abs(a[i] - a[i-1])

print(ans)
```

This program may run into a memory error if the input is very large. The problem is that the program uses a list to store the positions of the prizes. This can be very inefficient for large inputs.
CODEFORCES 963_B. Destruction of a Tree
```
# input 1
5
0 1 2 1 2

# input 2
4
0 1 2 3

# input 3
1
0
```
CODEFORCES 990_E. Post Lamps
1. ```
6 2 3
1 3
1 2 3
```
2. ```
4 3 4
1 2 3
1 10 100 1000
```
3. ```
5 1 5
0
3 3 3 3 3
```
4. ```
7 4 3
2 4 5 6
3 14 15
```
5. ```
8 1 2
5
2
```
HACKEREARTH appu-and-sugarcane-farm
```
2
1 23
```
```
3
1 2 3
```
```
5
1 2 3 4 5
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
9
1 2 3 4 5 6 6 6 6
```
```
2
1 1
```
```
6
100 100 100 100 100 100
```
```
5
1 1 1 1 1
```
HACKEREARTH chandu-and-his-girlfriend-returns
```
1
4 5
9 7 5 3
8 6 4 2 0
```
HACKEREARTH discover-the-monk
```
1 0
```

This input will test for incorrect input format. The input should contain two integers, N and Q, but this input only contains one integer. The developer should handle this case correctly and not crash the program.

```
5 10
1 2 3 4 5
10
20
30
40
50
60
70
80
90
100
```

This input will test for incorrect output format. The output should be YES or NO, but this output contains the number 10. The developer should handle this case correctly and not crash the program.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for incorrect data type. The input and output data should be integers, but this input contains the string "10". The developer should handle this case correctly and not crash the program.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for off-by-one errors. The developer should iterate through the array correctly and not miss any elements.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for index out of bounds errors. The developer should not try to access an element of the array that does not exist.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for arithmetic errors. The developer should perform arithmetic operations correctly and not divide by zero or take the square root of a negative number.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for logic errors. The developer should make sure that the logic of their code is correct and that it produces the correct results.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for memory errors. The developer should make sure that they allocate and deallocate memory correctly and that they do not cause a memory leak.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for race conditions. The developer should make sure that their code is thread-safe and that it does not cause a race condition.

```
5 10
50 40 30 20 10
10
20
30
40
50
60
70
80
90
100
```

This input will test for deadlocks. The developer should make sure that their code does not cause a deadlock.
HACKEREARTH golu-and-coins-1
2 4
0 0 1 1
0 0 1 1
HACKEREARTH list-sort
1
10
John Smith
John Smith
John Smith
John Smith
John Smith
John Smith
John Smith
John Smith
John Smith
HACKEREARTH monks-choice-of-numbers-1
1
4 2
6 1 2 0
1
2 1
1 2
HACKEREARTH playing-with-substrings
```
abcc c

bc c

ac bc

```
HACKEREARTH roys-life-cycle
```
1
E
```
```
1
C
```
```
1
CCCC
```
```
1
S
```
```
1
EEEE
```
HACKEREARTH subtraction-game-theory-1
```
1
3 2
```
HACKEREARTH vowel
1. ```
2
SdfgAe
Out
```
2. ```
1
No
```
3. ```
1
aAaA
```
ATCODER p02613 AtCoder Beginner Contest 173 - Judge Status Summary
```
6
AC
TLE
AC
AC
WA
TLE
```
ATCODER p02744 Panasonic Programming Contest 2020 - String Equivalence
**1. Using an incorrect sorting algorithm**

```
N = 3
```

**2. Using an incorrect definition of isomorphism**

```
N = 3
```

**3. Using an incorrect definition of normal form**

```
N = 3
```

**4. Not handling the case where N = 1**

```
N = 1
```

**5. Not handling the case where N = 2**

```
N = 2
```

**6. Not handling the case where N > 2**

```
N = 4
```
ATCODER p02879 AtCoder Beginner Contest 144 - 9x9
```
2 5
5 10
9 9
9 10
```
ATCODER p03013 AtCoder Beginner Contest 129 - Typical Stairs
```
6 1
3

10 2
4
5

100 5
1
23
45
67
89
```
ATCODER p03153 KEYENCE Programming Contest 2019 - Connecting Cities
```
3 1
1 100 1


3 1000
1 100 1


6 14
25 171 7 1 17 162


12 5
43 94 27 3 69 99 56 25 8 15 46 8
```
ATCODER p03297 AtCoder Grand Contest 026 - rng_10s
```
1
1 1 1 1
```
```
1
1000000000000000000 17 14 999999999999999985
```
```
2
1 1 1 1
2 2 2 2
```
ATCODER p03455 AtCoder Beginner Contest 086 - Product
1, 2

1, 3

1, 4

2, 2

2, 3
ATCODER p03616 AtCoder Regular Contest 082 - Sandglass
```
180
3
60 120 180
3
30 90
61 1
180 180
```
ATCODER p03774 AtCoder Beginner Contest 057 - Checkpoints
```
# 1. Incorrect input format

N, M = [int(x) for x in input().split()]
a = []
b = []
c = []
d = []
for i in range(N):
    a.append([int(x) for x in input().split()])
for j in range(M):
    c.append([int(x) for x in input().split()])
```

```
# 2. Incorrect data type

N, M = [int(x) for x in input().split()]
a = []
b = []
c = []
d = []
for i in range(N):
    a.append([int(x) for x in input().split()])
for j in range(M):
    c.append([float(x) for x in input().split()])
```

```
# 3. Incorrect algorithm

N, M = [int(x) for x in input().split()]
a = []
b = []
c = []
d = []
for i in range(N):
    a.append([int(x) for x in input().split()])
for j in range(M):
    c.append([int(x) for x in input().split()])

for i in range(N):
    min_dist = 100000000
    min_index = -1
    for j in range(M):
        dist = abs(a[i][0] - c[j][0]) + abs(a[i][1] - c[j][1])
        if dist < min_dist:
            min_dist = dist
            min_index = j
    print(min_index + 1)
```

```
# 4. Incorrect output format

N, M = [int(x) for x in input().split()]
a = []
b = []
c = []
d = []
for i in range(N):
    a.append([int(x) for x in input().split()])
for j in range(M):
    c.append([int(x) for x in input().split()])

for i in range(N):
    min_dist = 100000000
    min_index = -1
    for j in range(M):
        dist = abs(a[i][0] - c[j][0]) + abs(a[i][1] - c[j][1])
        if dist < min_dist:
            min_dist = dist
            min_index = j
    print(min_index)
```

```
# 5. Other bugs

N, M = [int(x) for x in input().split()]
a = []
b = []
c = []
d = []
for i in range(N):
    a.append([int(x) for x in input().split()])
for j in range(M):
    c.append([int(x) for x in input().split()])

for i in range(N):
    min_dist = 100000000
    min_index = -1
    for j in range(M):
        dist = abs(a[i][0] - c[j][0]) + abs(a[i][1] - c[j][1])
        if dist < min_dist:
            min_dist = dist
            min_index = j
    print(min_index)

print('hello world')
```
ATCODER p03943 AtCoder Beginner Contest 047 - Fighting over Candies
```
10 30 20
30 30 100
56 25 31
-1 10 100
```
AIZU p00035 Is it Convex?
```
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0
0.0, 0.0, 3.0, 0.0, 1.0, 1.0, 1.0, 3.0
0.0, 0.0, 3.0, 0.0, 3.0, 1.0, 0.0, 1.0
-1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0
```
AIZU p00167 Bubble Sort
```
5
5
3
2
1
4
6
1
2
3
4
5
6
3
3
2
1
0
```
AIZU p00323 Metal Recycling
1
100000 2
AIZU p00493 Zig-Zag Numbers
1. Incorrect input format
```
100
200
5
```

2. Incorrect data type
```
100
200
five
```

3. Incorrect range
```
100
200
501
```

4. Off-by-one errors
```
100
200
4
```

5. Incorrect modulo operation
```
100
200
0
```

6. Other bugs
```
100
200
-5
```
AIZU p00680 KND Factory

AIZU p00822 Weather Forecast
1
0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0
0
1
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
1
1
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
0
1
0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0
0
1
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
1
1
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
0
1
0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0
1
0
0
AIZU p00953 Animal Companion in Maze
```
1 1
1 1 2
```
AIZU p01086 Short Phrase
```
9
do
the
best
and
enjoy
today
at
acm
icpc
14
oh
yes
by
far
it
is
wow
so
bad
to
me
you
know
hey
15
abcde
fghijkl
mnopq
rstuvwx
yzz
abcde
fghijkl
mnopq
rstuvwx
yz
abcde
fghijkl
mnopq
rstuvwx
yz
0
```
AIZU p01222 Walk under a Scorching Sun
```
1 1
4 10 0 0 10 0 10 10 0 10
-5 -20 30 15
135 45
0 -15 15 0
0 0
```
AIZU p01356 Nearest Station
6, 200, 2, 3, 4, 5
AIZU p01538 Kakezan
1
1

2
1024
999999
AIZU p01694 Step Aerobics
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
0
AIZU p01838 Optimal Tournament
1. ```
10 3
1 5 7 8 2 9 10 3 4
```

2. ```
1000000000 1
1
```

3. ```
10 5
1 2 3 4 5
```

4. ```
2 1
1
```

5. ```
0 0
```
AIZU p01974 Pigeonhole principle
```
2
1 2
```

```
3
1 2 3
```

```
4
1 2 3 4
```

```
5
1 2 3 4 5
```

```
6
1 2 3 4 5 6
```

```
7
1 2 3 4 5 6 7
```

```
8
1 2 3 4 5 6 7 8
```

```
9
1 2 3 4 5 6 7 8 9
```

```
10
1 2 3 4 5 6 7 8 9 10
```
AIZU p02120 Cluster Network
```
2 1
1 2
1 2

9 10
1 2 3 4 5 6 7 8 9
1 2
2 3
2 4
3 4
4 5
4 6
2 7
7 8
7 9
9 1

16 19
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
1 2
2 3
3 4
3 5
1 6
6 7
6 8
7 8
8 9
8 10
10 11
11 12
12 10
1 13
13 14
14 15
15 13
14 16
15 16

2 1
1 2
1 2
```
AIZU p02260 Selection Sort
**1. Off-by-one errors**

```
N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    for j in range(i + 1, N):
        if A[j] < A[i]:
            A[i], A[j] = A[j], A[i]

print(*A)
print(N - 1)
```

**2. Using the wrong variable**

```
N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    for j in range(i, N):
        if A[j] < A[i]:
            A[i], A[j] = A[j], A[i]

print(*A)
print(N - 1)
```

**3. Not handling edge cases**

```
N = int(input())
A = list(map(int, input().split()))

if N == 0:
    print([])
    print(0)
elif N == 1:
    print(A[0])
    print(0)
else:
    for i in range(N):
        for j in range(i + 1, N):
            if A[j] < A[i]:
                A[i], A[j] = A[j], A[i]

    print(*A)
    print(N - 1)
```

**4. Not using the right data type**

```
N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    for j in range(i + 1, N):
        if A[j] < A[i]:
            A[i], A[j] = A[j], A[i]

print(*A)
print(N - 1)
```

**5. Not using efficient algorithms**

```
N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    for j in range(i + 1, N):
        if A[j] < A[i]:
            A[i], A[j] = A[j], A[i]

print(*A)
print(N - 1)
AIZU p02408 Finding Missing Cards
```
1
S 1
```