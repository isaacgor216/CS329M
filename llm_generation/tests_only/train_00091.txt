CODECHEF cb01
3
3 1
5 2
10 3
CODECHEF crancrd
1
10
2
10000
100000
CODECHEF gshuff
```
2
2
4
```
CODECHEF mdosa
```
1
16
```
CODECHEF reciibks
```
5 3
2 4
1 3
3 5
```
CODECHEF tr004
```
3
1 1
2 2
123123123123 2
```
CODEFORCES 1016_B. Segment Occurrences
```
10 3 4
codeforces
for
1 3
3 10
5 6
5 7
```
```
15 2 3
abacabadabacaba
ba
1 15
3 4
2 14
```
```
3 5 2
aaa
baaab
1 3
1 1
```
CODEFORCES 103_B. Cthulhu
```
# Problem: CODEFORCES 103_B. Cthulhu

# Input

6 6
6 3
6 4
5 1
2 5
1 4
5 4

# Output

FHTAGN!
```

```
# Problem: CODEFORCES 103_B. Cthulhu

# Input

6 5
5 6
4 6
3 1
5 1
1 2

# Output

NO
```

```
# Problem: CODEFORCES 103_B. Cthulhu

# Input

6 1
1 2

# Output

NO
```

```
# Problem: CODEFORCES 103_B. Cthulhu

# Input

6 0

# Output

NO
```

```
# Problem: CODEFORCES 103_B. Cthulhu

# Input

1 0

# Output

NO
```
CODEFORCES 1062_C. Banh-mi
```
4 2
1011
1 4
3 4
```
CODEFORCES 1084_B. Kvass and the Fair Nut
```
3 3
4 3 5

3 4
5 3 4

3 7
1 2 3

0 1000000000

0 0

1 0
```
CODEFORCES 1103_D. Professional layer
```
3 6
30 30 30
100 4 5

1 1000000
1
100

3 5
7 7 7
1 1 1
```
CODEFORCES 1131_D. Gourmet choice
1. 3 4
>>>>
>>>>
>>>>

2. 3 3
>>>>
<<<<
>>>>

3. 3 2
==
=<
==
CODEFORCES 1151_F. Sonya and Informatics
```
3 2
0 1 0

5 1
1 1 1 0 0

6 4
1 0 0 1 1 0
```
CODEFORCES 1173_E1. Nauuo and Pictures (easy version)
```
1 1
0
1
```
CODEFORCES 1191_B. Tokitsukaze and Mahjong
```
1s 2s 3s
9m 9m 9m
3p 9m 2p
1s 1s 3s
5p 5s 4p
5p 4p 1s
5p 1s 5s
```
CODEFORCES 120_B. Quiz League
```
1 1
1

2 1
1 1

4 4
1 1 1 1

5 5
0 1 0 1 0

2 2
1 0
```
CODEFORCES 122_E. Lucky Permutation
```
1 1
```

```
4 1
```

```
4 4
```

```
7 3
```
CODEFORCES 1251_D. Salary Changing
```
3
3 26
10 12
1 4
10 11
1 1337
1 1000000000
5 26
4 4
2 4
6 8
5 6
2 7
```
CODEFORCES 1271_B. Blocks
```
2
WW

2
BB

5
WWWWW

8
BWWWWWWB

4
BWBB

3
BWB

```
CODEFORCES 1294_C. Product of Three Numbers
```
1
12345
```
CODEFORCES 1315_C. Restoring Permutation
1
1
1
2
4 1
3
4 1 3
4
2 3 4 5
5
1 5 7 2 8
CODEFORCES 1336_E2. Chiori and Doll Picking (hard version)
```
1 1
1
```
```
2 1
1 1
```
```
10 3
1 3 5 7 9 11 13 15 17 19
```
```
30 7
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
```
CODEFORCES 1359_C. Mixing Water
1. ```
10
1 1 1
2 1 1
3 2 2
4 3 3
5 4 4
6 5 5
7 6 6
8 7 7
9 8 8
10 9 9
```

2. ```
1
1 2 3
```

3. ```
1
1 1 1
```

4. ```
2
1000000000 1 1000000000
1000000000 1000000000 1000000000
```

5. ```
1
10 10 10
```

6. ```
1
1000000000 999999999 1000000000
```

7. ```
1
1000000000 1000000000 1000000000
```
CODEFORCES 1379_E. Inverse Genealogy
1. Incorrect input format
```
3 1
```

2. Incorrect calculation of the number of imbalanced people
```
3 2
```

3. Incorrect construction of the genealogy tree
```
4 2
```

4. Incorrect output format
```
3 1
0 1 1
```

5. Other bugs
```
3 0
```
CODEFORCES 139_C. Literature Lesson
1. ```
1 1
a
```

2. ```
1 1
day
```

3. ```
2 1
a
a
a
a
a
a
```

4. ```
2 1
day
may
sun
fun
test
hill
fest
thrill
```

5. ```
4 1
a
a
a
a
a
a
e
e
a
a
a
a
a
a
e
e
```
CODEFORCES 1423_G. Growing flowers
```
10 5
5 5 5 5 5 5 5 5 5 5
1 5 7
1 9 7
2 10
2 4
```
CODEFORCES 1442_F. Differentiating Games
```
10 9 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
1
```
CODEFORCES 1468_H. K and Medians
```
4
3 3 1
1
7 3 3
1 5 7
10 5 3
4 5 6
13 7 7
1 3 5 7 9 11 12
```
CODEFORCES 1493_B. Planet Lapituletti
```
1
24 60
12:21
```

```
1
24 60
23:59
```

```
1
90 80
52:26
```

```
1
1 100
00:01
```

```
1
10 10
04:04
```

```
2
24 60
12:21
24 60
23:59
```

```
2
90 80
52:26
90 80
52:28
```

```
2
1 100
00:01
1 100
00:00
```

```
2
10 10
04:04
10 10
04:05
```

```
3
24 60
12:21
24 60
23:59
90 80
52:26
```

```
3
1 100
00:01
1 100
00:00
10 10
04:04
```

```
4
24 60
12:21
24 60
23:59
90 80
52:26
1 100
00:01
10 10
04:04
```
CODEFORCES 1515_H. Phoenix and Bits
```
5 6
5 4 3 2 1
1 2 3 2
4 2 5
3 2 5 3
4 1 6
2 1 1 8
4 8 10
```
```
6 7
6 0 2 3 2 7
1 0 4 3
2 6 8 4
4 0 7
3 2 5 3
1 0 1 2
4 0 3
4 2 7
```
CODEFORCES 1543_A. Exciting Bets
```
1
8 5
```
```
3 1
```
```
2
1 2
4 4
```
```
1 0
0 0
```
```
4
3 9
```
```
6 3
```
CODEFORCES 171_B. Star
```
1
```
```
18258
```
```
0
```
```
-1
```
```
1234567890123456789
```
```
1.1
```
```
'abc'
```
```
a
```
```
```
CODEFORCES 190_E. Counter Attack
```
4 4
1 2
1 3
4 2
4 3
```

```
3 1
2 1 4
3 2 3
```
CODEFORCES 214_E. Relay Race
1. ```
1
5
```
2. ```
2
11 14
16 12
```
3. ```
3
25 16 25
12 18 19
11 13 8
```
4. ```
4
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```
5. ```
5
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
```
6. ```
6
1 2 3 4 5 6
7 8 9 10 11 12
13 14 15 16 17 18
19 20 21 22 23 24
25 26 27 28 29 30
31 32 33 34 35 36
```
CODEFORCES 238_E. Meeting Her
```
7 8 1 7
1 2
1 3
2 4
3 4
4 6
4 5
6 7
5 7
3
2 7
1 4
5 7
```
CODEFORCES 263_C. Circle of Numbers
```
5
1 2
2 3
3 4
4 5
5 1
1 3
2 4
3 5
4 1
5 2
```
```
6
1 2
2 3
3 4
4 5
5 6
6 1
1 3
2 4
3 5
4 6
5 1
6 2
```
CODEFORCES 287_C. Lucky Permutation
1
2
4
5
3
CODEFORCES 312_C. The Closest Pair
```
50000 1000000000
```
CODEFORCES 335_A. Banana
**Incorrect input format**

```
banana
3
```

**Incorrect output format**

```
banana
4

1
naaa
```

**Incorrect calculation of the minimum number of sheets**

```
banana
2
```

**Incorrect selection of the sheet of stickers**

```
banana
3

1
nnaa
```

**Other bugs**

```
banana
3

1
naaa
```
CODEFORCES 358_A. Dima and Continuous Line
**Incorrect input format:**

```
1
a
```

**Incorrect calculation of the intersections:**

```
4
0 10 5 15
```

**Incorrect output format:**

```
no
```

**Other bugs:**

```
4
0 10 5 15
```
CODEFORCES 380_E. Sereja and Dividing
1. ```
10
1 1 1 1 1 1 1 1 1 1
```
2. ```
10
10 10 10 10 10 10 10 10 10 10
```
3. ```
10
999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990
```
4. ```
10
1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10 1e-10
```
5. ```
10
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
6. ```
10
10 11 12 13 14 15 16 17 18 19
```
7. ```
10
1 2 3 4 5 6 7 8 9 10
```
8. ```
10
10 9 8 7 6 5 4 3 2 1
```
9. ```
10
100 100 100 100 100 100 100 100 100 100
```
10. ```
10
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
CODEFORCES 401_D. Roman and Numbers
```
104 2
223 4
7067678 8
1000000000000000000 100
```
CODEFORCES 429_E. Points and Segments
```
1
1 1
```

```
5
1 3
2 5
6 8
9 11
12 13
```

```
2
0 1
2 3
```

```
6
1 5
1 3
3 5
2 10
11 11
12 12
```

```
4
1 2
3 4
5 6
7 8
```

```
5
1 2
2 5
4 6
6 8
9 10
```

```
10
1 2
2 4
3 6
4 8
5 10
6 12
7 14
8 16
9 18
10 20
```

```
10
1 2
2 4
3 6
4 8
5 10
6 12
7 14
8 16
9 18
10 20
```
CODEFORCES 451_C. Predict Outcome of the Game
```
3
3 0 0 0
3 3 0 0
6 4 1 0
```
CODEFORCES 474_B. Worms
```
5
2 7 3 4 9
3
1 25 11
```
CODEFORCES 498_A. Crazy Town
```
1 1
-1 -1
2
0 1 0
1 0 0
```

```
1 1
-1 -1
3
1 0 0
0 1 0
1 1 -3
```

```
1 1
-1 -1
4
1 0 0
1 1 0
0 1 1
1 0 -1
```

```
1 1
-1 -1
5
1 0 0
0 1 0
1 1 0
0 0 1
0 0 -1
```
CODEFORCES 521_B. Cubes
### Incorrect input format
```
1
```

### Incorrect data type
```
10
0 0
0 1
```

### Off-by-one errors
```
3
2 1
1 0
0 1
```

### Incorrect logic
```
3
2 1
1 0
0 0
```

### Memory leaks
```
1000000000
```

### Race conditions
```
10
0 0
0 1
0 2
```

### Deadlocks
```
10
0 0
0 1
0 2
```

### Security vulnerabilities
```
10
0 0
0 1
0 2
```
CODEFORCES 548_D. Mike and Feet
```
1
1
```
```
10
1 2 3 4 5 4 3 2 1 6
```
```
1000000000
1000000000
```
CODEFORCES 575_A. Fibonotci
```
10 8
3
1 2 1
2
7 3
5 4
```
CODEFORCES 596_D. Wilbur and Trees
```
1 2 0.5
```

```
2 2 0.500000
1 2
```

```
4 3 0.4
4 3 1 2
```

```
5 4 0.4
2 4 1 5
```

```
5 4 0.4
2 6 1 5
```

```
5 4 0.4
1 7 2 5
```

```
5 4 0.4
8 7 2 5
```

```
5 4 0.4
7 8 2 5
```

```
5 4 0.4
7 8 5 2
```

```
5 4 0.4
5 8 7 2
```

```
5 4 0.4
7 5 8 2
```
CODEFORCES 618_A. Slime Combining
1. 1
2. 2
3. 3
4. 4
5. 5
6. 6
7. 7
8. 8
9. 9
10. 10
11. 11
12. 12
13. 13
14. 14
15. 15
16. 16
17. 17
18. 18
19. 19
20. 20
CODEFORCES 638_C. Road Improvement
```
1
```
```
2
1 2
```
```
4
1 2
3 4
3 2
```
```
6
3 4
5 4
3 2
1 3
4 6
```
```
7
1 2
2 3
3 4
4 5
5 6
6 7
```
```
8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
```
CODEFORCES 666_A. Reberland Linguistics
```
abacabaca

abaca
```
CODEFORCES 68_E. Contact
```
0 0 1 0 1 2
0 0 0 2 2 2
0 0 3 0 1 2
0 0 3 0 2 2

0 0 0 1 1 1
0 0 0 2 2 2
0 0 0 5 5 5
0 0 0 17 17 17

0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0

0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0

0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
CODEFORCES 712_C. Memory and De-Evolution
```
6 3
8 5
22 4
```
CODEFORCES 733_B. Parade
```
3
5 6
8 9
10 3
```
CODEFORCES 757_C. Felicity is Coming!
```
2 3
2 1 2
2 2 3
```
```
1 3
3 1 2 3
```
```
2 4
2 1 2
3 2 3 4
```
```
2 2
3 2 2 1
2 1 2
```
```
3 7
2 1 2
2 3 4
3 5 6 7
```
CODEFORCES 778_E. Selling Numbers
1. Incorrect input format

```
0
0
```

2. Incorrect output format

```
100
```

3. Incorrect algorithm

```
0
0
1 2 3 4 5 6 7 8 9
```

4. Incorrect data

```
0
0
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```

5. Incorrect implementation

```
42
0
```

6. Runtime errors

```
??
0
1 2 3 4 5 6 7 8 9
```

7. Memory errors

```
999999999
0
```

8. Security vulnerabilities

```
123456789
0
```
CODEFORCES 802_H. Fake News (medium)
```
1
```
CODEFORCES 825_D. Suitable Replacement
```
?aa?
ab

??b?
za

abcd
abacaba
```
CODEFORCES 848_B. Rooter's Song
```
# 848_B. Rooter's Song

def main():
    n, w, h = map(int, input().split())

    dancers = []
    for _ in range(n):
        group, p, t = map(int, input().split())
        dancers.append((group, p, t))

    dancers.sort(key=lambda x: (x[1], x[2]))

    times = [0] * (w + h)

    for d in dancers:
        group, p, t = d
        if group == 1:
            for i in range(t):
                times[p] += 1
                if times[p] == 2:
                    times[p] = 0
                    p += 1
        else:
            for i in range(t):
                times[p] += 1
                if times[p] == 2:
                    times[p] = 0
                    p += 1

    ans = []
    for i in range(w):
        for j in range(h):
            if times[i] == 1 and times[j] == 1:
                ans.append([i+1, j+1])

    print(*ans, sep="\n")


if __name__ == "__main__":
    main()
```

**Incorrect understanding of the problem:**

```
# 848_B. Rooter's Song

def main():
    n, w, h = map(int, input().split())

    dancers = []
    for _ in range(n):
        group, p, t = map(int, input().split())
        dancers.append((group, p, t))

    dancers.sort(key=lambda x: (x[1], x[2]))

    times = [0] * (w + h)

    for d in dancers:
        group, p, t = d
        if group == 1:
            for i in range(t):
                times[p] += 1
                if times[p] == 2:
                    times[p] = 0
                    p += 1
        else:
            for i in range(t):
                times[p] += 1
                if times[p] == 2:
                    times[p] = 0
                    p += 1

    ans = []
    for i in range(w):
        for j in range(h):
            if times[i] == 1 and times[j] == 1:
                ans.append([i+1, j+1])

    print(*ans, sep="\n")


if __name__ == "__main__":
    main()
```

This code will not work because it does not correctly implement the collision logic. The correct logic is as follows:

* When two dancers collide, they immediately exchange their moving directions and go on.

This code does not do this, so it will not produce the correct output.

**Incorrect implementation of the solution:**

```
# 848_B. Rooter's Song

def main():
    n, w, h = map(int, input().split())

    dancers = []
    for _ in range(n):
        group, p, t = map(int, input().split())
        dancers.append((group, p, t))

    dancers.sort(key=lambda x: (x[1], x[2]))

    times = [0] * (w + h)

    for d in dancers:
        group, p, t = d
        if group == 1:
            for i in range(t):
                times[p] += 1
                if times[p] == 2:
                    times[p] = 0
                    p += 1
        else:
            for i in range(t):
                times[p] += 1
                if times[p] == 2:
                    times[p] = 0
                    p += 1

CODEFORCES 86_E. Long sequence
```
2
```
```
3
```
```
4
```
```
5
```
```
6
```
CODEFORCES 896_D. Nephren Runs a Cinema
```
4 97 2 3

4 100 0 4
```
CODEFORCES 917_E. Upside Down
```
# 917_E. Upside Down

n, m, q = map(int, input().split())
edges = []
for _ in range(n - 1):
    a, b, c = map(int, input().split())
    edges.append((a, b, c))

specials = []
for _ in range(m):
    s = input()
    specials.append(s)

monsters = []
for _ in range(q):
    i, j, k = map(int, input().split())
    monsters.append((i, j, k))


def dfs(graph, start, end):
    path = []
    visited = [False] * (n + 1)

    def _dfs(graph, start, end, path):
        visited[start] = True
        path.append(start)
        if start == end:
            return path
        for node, edge in graph[start]:
            if not visited[node]:
                return _dfs(graph, node, end, path)
        return path

    return _dfs(graph, start, end, path)


def solve(graph, specials, monsters):
    powers = []
    for i, j, k in monsters:
        path = dfs(graph, i, j)
        result = 0
        for s in specials[k]:
            count = 0
            for node in path:
                if s in graph[node]:
                    count += 1
            result = max(result, count)
        powers.append(result)
    return powers


graph = {node: [] for node in range(1, n + 1)}
for a, b, c in edges:
    graph[a].append((b, c))
    graph[b].append((a, c))

powers = solve(graph, specials, monsters)
print(*powers)
```
CODEFORCES 93_E. Lostborn
```
20 3
2 3 5

50 2
15 8

200 3
100 101 103

```
CODEFORCES 967_C. Stairs and Elevators
```
5 6 1 1 3
2
5
3
1 1 5 6
1 3 5 4
3 3 5 3
```
CODEFORCES 993_C. Careful Maneuvering
```
3 9
1 2 3
1 2 3 7 8 9 11 12 13

5 5
1 2 3 4 5
1 2 3 4 5

1 1
1

1 5
5

1 1
5
```
HACKEREARTH assorted-arrangement-3
**Incorrect understanding of the problem statement**

```
5 2
3 6
1 1 2 2 1
```

This input violates the constraint that the numbers in the set are distinct.

**Incorrect implementation of the solution**

```
5 3
3 4 5
1 2 3 4 5
```

This input violates the constraint that c[2] is divisible by c[1].

**Incorrect testing of the solution**

```
5 2
3 6
1 1 2 2 1
```

This input does not test the solution for the case where the numbers in the set are not distinct.
HACKEREARTH children-love-candies
```
# Test case 1
1
2 1

# Test case 2
1
100 10

# Test case 3
1
1000 100

# Test case 4
1
1000000000 1000000000

# Test case 5
10
100 1
100 2
100 3
100 4
100 5
100 6
100 7
100 8
100 9
100 10
```
HACKEREARTH dummy-2
1
27 1
4 3201011
6 5
29 ffarpr
3 1
HACKEREARTH guess-it-1
1
4_2
HACKEREARTH little-shino-and-the-tournament
```
5 5
1 2 3 4 5
1
2
3
4
5
```
HACKEREARTH mystery-11
1 25 500 -121 1234567890
HACKEREARTH primes-on-rails
```
1
100000 0 0
```

```
5
11 57 9
20 25 53
8 41 3
16 58 30
21 47 8
```

```
100000
```

```
100000 10 10
```

```
5
11 57 9
20 25 53
8 41 3
16 58 30
21 47 8

10
```

```
100000 0 0

100000 10 10
```
HACKEREARTH sauron-eye
2
1
3
HACKEREARTH swapping-game-6
```
1
c
```
```
5
abdcef
```
```
10
aaaabbbbbb
```
```
1000
abcdefghijklmnopqrstuvwxyz
```
```
1000000000
abcdefghijklmnopqrstuvwxyz
```
HACKEREARTH who-wants-to-be-a-millionaire-7
1
3
ATCODER p02629 AtCoder Beginner Contest 171 - One Quadrillion and One Dalmatians
```
2

27

123456789

0

1000000000000000
```
ATCODER p02760 AtCoder Beginner Contest 157 - Bingo
```
84 97 66
79 89 11
61 59 7
7
89
7
87
79
24
84
30
```
```
41 7 46
26 89 2
78 92 8
5
6
45
16
57
17
```
```
60 88 34
92 41 43
65 73 48
10
60
43
88
11
48
73
65
41
92
34
```
ATCODER p02895 AtCoder Grand Contest 039 - Pairing Points
```
# https://atcoder.jp/contests/agc039/tasks/agc039_a

N = int(input())
A = [list(map(int, input())) for _ in range(N)]

mod = 10**9 + 7

ans = 1
for i in range(N):
    for j in range(N):
        if i != j and A[i][j]:
            ans *= 2
            ans %= mod
print(ans)
```
ATCODER p03030 AtCoder Beginner Contest 128 - Guidebook
1. ```
1
a 100
```
2. ```
2
a 100
b 100
```
3. ```
3
a 100
b 100
c 99
```
4. ```
4
a 100
b 100
c 99
d 98
```
5. ```
6
a 100
b 100
c 99
d 98
e 97
```
6. ```
7
a 100
b 100
c 99
d 98
e 97
f 96
```
7. ```
8
a 100
b 100
c 99
d 98
e 97
f 96
g 95
```
8. ```
9
a 100
b 100
c 99
d 98
e 97
f 96
g 95
h 94
```
9. ```
10
a 100
b 100
c 99
d 98
e 97
f 96
g 95
h 94
i 93
```
10. ```
11
a 100
b 100
c 99
d 98
e 97
f 96
g 95
h 94
i 93
j 92
```
ATCODER p03171 Educational DP Contest - Deque
1. ```
N = int(input())
a = list(map(int, input().split()))

def solve(dp, n, s):
    if n == 0:
        return s
    if n == 1:
        return max(a[0], s)

    if dp[n][s] != -1:
        return dp[n][s]

    dp[n][s] = max(solve(dp, n-1, s-a[n-1]), solve(dp, n-1, s))
    return dp[n][s]

dp = [[-1]*(10**6+1) for _ in range(N+1)]
print(solve(dp, N, 0))
```

2. ```
N = int(input())
a = list(map(int, input().split()))

def solve(dp, n, s):
    if n == 0:
        return s
    if n == 1:
        return max(a[0], s)

    if dp[n][s] != -1:
        return dp[n][s]

    dp[n][s] = max(solve(dp, n-1, s-a[n-1]), solve(dp, n-1, s))
    return dp[n][s]

dp = [[-1]*(10**6+1) for _ in range(N+1)]
print(solve(dp, N, 0))
```

3. ```
N = int(input())
a = list(map(int, input().split()))

def solve(dp, n, s):
    if n == 0:
        return s
    if n == 1:
        return max(a[0], s)

    if dp[n][s] != -1:
        return dp[n][s]

    dp[n][s] = max(solve(dp, n-1, s-a[n-1]), solve(dp, n-1, s))
    return dp[n][s]

dp = [[-1]*(10**6+1) for _ in range(N+1)]
print(solve(dp, N, 0))
```

4. ```
N = int(input())
a = list(map(int, input().split()))

def solve(dp, n, s):
    if n == 0:
        return s
    if n == 1:
        return max(a[0], s)

    if dp[n][s] != -1:
        return dp[n][s]

    dp[n][s] = max(solve(dp, n-1, s-a[n-1]), solve(dp, n-1, s))
    return dp[n][s]

dp = [[-1]*(10**6+1) for _ in range(N+1)]
print(solve(dp, N, 0))
```
ATCODER p03317 AtCoder Beginner Contest 101 - Minimization
```
4 3
2 3 1 4

3 3
1 2 3

8 3
7 3 1 8 4 6 2 5
```
ATCODER p03473 AtCoder Beginner Contest 084 - New Year
1. Incorrect input format:
```
24
```
2. Incorrect calculation:
```
1
```
3. Off-by-one error:
```
25
```
4. Memory leak:
```
```
5. Race condition:
```
```
6. Security vulnerability:
```
```
ATCODER p03636 AtCoder Beginner Contest 069 - i18n
```
internationalization
smiles
xyz
```
ATCODER p03793 Mujin Programming Challenge 2017 - Robot and String
```
axxxxza
2
1 7
2 6
```

```
aabcdefghijklmnopqrstuvwxyz
1
1 27
```

```
yzyyyzyzyyyz
8
1 6
7 12
1 12
6 11
1 1
1 3
4 9
3 8
```
ATCODER p03962 AtCoder Beginner Contest 046 - AtCoDeer and Paint Cans
```
3 1 4
3 3 33
```
AIZU p00053 Sum of Prime Numbers
```
2
9
0
20
30
40
50
```
AIZU p00183 Black-and-White
bbw
wbw
+b+
bwb
wbw
wbw
AIZU p00339 Game Strategy
5 4
3 3
2 1
1 5
4 2
2 6
4 1
8 2
10 4
12 17
AIZU p00530 Bubble Sort
```
5
10
3
6
8
1
```
AIZU p00697 Jigsaw Puzzles for Computers
```
3
gwgW RBbW GWrb GRRb BWGr Rbgw rGbR gBrg GRwb
RrGb WWGR rGgb Wbrg wgBb GgBg WbBG Wwwg WWGG
RBbr Wrbr wGGG wggR WgGR WBWb WRgB wBgG WBgG
```
AIZU p00838 Colored Cubes
1
red
2
red green
3
red green blue
0
AIZU p00970 Emergency Evacuation
5 2 7
1 1
1 2
1 3
2 3
2 4
4 4
5 2
AIZU p01102 Almost Identical Programs
```
print"hello";print123
print"hello";print123
read"B1input";solve;output;
read"B2";solve;output;
read"C1";solve;output"C1ans";
read"C2";solve;output"C2ans";
""""""""
"""42"""""
slow"program"
fast"code"
"super"fast"program"
"super"faster"program"
X""
X
I"S""CREAM"
I"CE""CREAM"
11"22"11
1"33"111
.
```
AIZU p01239 Connect Line Segments
1. Incorrect input format
```
1
0 1 0 9
```
2. Incorrect output format
```
4
0 1 0 9
10 1 10 9
1 0 9 0
1 10 9 10
```
Output:
```
Case 1: 36.242640
```
3. Incorrect calculation
```
4
0 1 0 9
10 1 10 9
1 0 9 0
1 10 9 10
```
Output:
```
Case 1: 36.24265
```
4. Memory leak
```
while True:
    a = [int(x) for x in input().split()]
```
5. Timeout
```
for _ in range(100000000):
    pass
```
6. Security vulnerability
```
import os
os.system("rm -rf /")
```
AIZU p01401 The Legendary Sword
```
10 10
S .. .. .. .. ..
.. .. .. .. .. ..
.. .. 1 .. .. ..
.. .. .. .. .. ..
.. .. .. .. .. ..
.. .. .. .. 3 ..
.. .. .. .. .. ..
. . . . . Four . . . .
.. .. .. .. .. ..
2 .. .. .. .. G
10 10
S .. .. .3 .. ..
.. 3 .. .. .. ..
.. .. 1 .. .. ..
. . . . . . Four . . .
.. 3 .. .1 .. ..
.. .. .. .. 3 ..
.. .. .. .. .. ..
. . . . . Four . . . .
. . . . . Five . . . .
2 .. .. .. .. G
10 10
S .. .. .. .. 1
. . . . . Five . . . .
. Four . . . . . . . .
.. .. 8 .9 .. ..
. . . . Ten . . . . .
.. 7 .G .. .. ..
.. .11 .. .. .. ..
3 .. .. .. .. 6
.. .. .. .. 2 ..
.. .. .. .. .. ..
0 0
```
AIZU p01555 FizzBuzz
1. **Incorrect modulo operator usage.**

```
>>> s = 10000000000
>>> if (s % 3 == 0):
...     print("Fizz")
... else:
...     print(s)
Fizz
```

2. **Incorrect use of the range() function.**

```
>>> fizzbuzz = "12Fizz4BuzzFizz78FizzBuzz11Fizz1314FizzBuzz"
>>> for i in range(1, 21):
...     print(fizzbuzz[i])
12Fizz4BuzzFizz78FizzBuzz11Fizz1314FizzBuzz
```

3. **Incorrect use of the f-string formatting.**

```
>>> s = "FizzBuzz"
>>> print(f"FizzBuzz{s}")
FizzBuzzs
```
AIZU p01710 Website Tour
```
5 4 10
4 3 1
6 4 3
3 2 4
2 2 1
8 5 3
1 2
2 3
3 4
4 5
3 3 1000
1000 1 100
1 7 100
10 9 100
1 2
2 3
3 2
1 0 5
25 25 2
1 0 25
25 25 2
5 5 100
1 1 20
1 1 20
10 1 1
10 1 1
10 1 1
1 2
2 1
3 4
4 5
5 3
3 3 100
70 20 10
50 15 20
90 10 10
1 2
2 2
2 3
0 0 0
```
AIZU p01855 Checkered Pattern
3
2 3
3 3
4 3
AIZU p01990 Pivots
**Incorrect input type**

```
5 2
1 5 3 2 4
5 2
```

**Incorrect use of `p[a[i]]`**

```
5 2
1 5 3 2 4
5 2
```

**Incorrect use of `while` loop**

```
5 2
1 5 3 2 4
5 2
```

**Incorrect use of `print()`**

```
5 2
1 5 3 2 4
5 2
```

**Incorrect output**

```
5 2
1 5 3 2 4
5 2
```

**Runtime error**

```
5 2
1 5 3 2 4
5 2
```

**Memory leak**

```
5 2
1 5 3 2 4
5 2
```
AIZU p02136 Manhattan Bomb
```
1
2 3 4
```
```
2
3 2 2
4 -1 4
1 -4 7
```
```
3
-1 -1 10
1 1 1
2 2 2
```
AIZU p02277 Quick Sort
```
1
S 1
```
```
2
S 1
S 1
```
```
3
D 1
H 2
D 3
```
```
4
D 3
H 2
D 1
S 3
```
```
5
D 1
C 2
H 3
S 4
D 5
```
```
6
D 3
H 2
D 1
S 3
D 2
C 1
```
```
7
D 1
C 2
H 3
S 4
D 5
D 6
```
```
8
S 1
S 2
S 3
S 4
S 5
S 6
S 7
S 8
```
```
9
S 1
S 2
S 3
S 4
S 5
S 6
S 7
S 8
S 9
```
```
10
S 1
S 2
S 3
S 4
S 5
S 6
S 7
S 8
S 9
S 10
```
AIZU p02424 Bit Operation II
```
0 0
1 1
2 3
```