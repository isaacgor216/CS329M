CODECHEF approx
```
3
0
6
20
```
CODECHEF cieldist
**Incorrect use of variables**
```
15 15 50
15 15 18
43 88 200
2013 2013 2013
```

**Incorrect use of math functions**
```
15 15 50
15 15 18
43 88 200
2013 2013 2013
```

**Incorrect use of floating-point numbers**
```
15 15 50
15 15 18
43 88 200
2013 2013 2013
```

**Incorrect use of the `round()` function**
```
15 15 50
15 15 18
43 88 200
2013 2013 2013
```

**Incorrect use of the `abs()` function**
```
15 15 50
15 15 18
43 88 200
2013 2013 2013
```
CODECHEF etmx07
```
abxyzba
codechefdoc
 ```
CODECHEF lapin
1
a

5
abcde
rotor
xyzxy
abbaab
ababc
CODECHEF pcsc7
4, 3
CODECHEF stem
```
1
4
grace graceful disgraceful gracefully
```

```
1
6
abcdefgh
```

```
2
12
abcabcabcabcabcabcabcab
abcabcabcabcabcabcabcac
```
CODEFORCES 1008_B. Turn the Rectangles
1. ```
1
1000000000
```
2. ```
2
1000000000 1000000000
1000000000 1000000000
```
3. ```
3
1 2
2 3
3 1
```
4. ```
4
1 2
2 1
3 4
4 3
```
5. ```
5
1 2
2 1
3 4
4 3
5 5
```
6. ```
6
1 2
2 1
3 4
4 3
5 5
6 6
```
CODEFORCES 1030_G. Linear Congruential Generator
```
4
2 3 5 7
```

```
3
5 3 3
```

```
7
5 5 5 5 5 5 5
```

```
8
2 2 2 2 2 2 2 2
```
CODEFORCES 1053_E. Euler tour
```
# 1. Incorrect input format
1

# 2. Incorrect output format
2
1 2 0 1

# 3. Incorrect algorithm
4
1 0 3 2 0 0 0

# 4. Incorrect data structures
3
1 2 3 4 5 6

# 5. Incorrect runtime
5
1000000000

# 6. Incorrect memory usage
1000000000
```
CODEFORCES 1075_F. Deduction Queries
```
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 21 19:38:18 2022

@author: liuzheng
"""

import sys
input = sys.stdin.buffer.readline


def solve():
    n = int(input())
    last = 0
    for _ in range(n):
        t = int(input())
        if t == 1:
            l, r, x = map(int, input().split())
            l ^= last
            r ^= last
            x ^= last
            if l > r:
                l, r = r, l
            if l < 0 or r >= 2**30:
                continue
            print(x)
        else:
            l, r = map(int, input().split())
            l ^= last
            r ^= last
            if l < 0 or r >= 2**30:
                last = -1
                print(-1)
                continue
            xor = 0
            for i in range(l, r + 1):
                xor ^= i
            last = xor
            print(xor)


def main():
    solve()


if __name__ == "__main__":
    main()
```
CODEFORCES 1096_G. Lucky Tickets
**1. Incorrect input format**

```
4 2
a 8
```

**2. Incorrect calculation of the number of lucky tickets**

```
4 2
1 8
```

**3. Incorrect modulo operation**

```
4 2
1 8
```

**4. Incorrect output format**

```
4 2
1 8
```

**5. Other errors**

```
4 2
1 8
```
CODEFORCES 1118_A. Water Buying
1. ```
10
1 3
7 3 2
1 1000 1
1000000000000 42 88
```

2. ```
4
10 1 3
7 3 2
1 1000 1
1000000000000 42 88
```

3. ```
4
10 1 3
7 3 2
1 1000 1
1000000000000 42 88
```

4. ```
4
10 1 3
7 3 2
1 1000 1
1000000000000 42 88
```

5. ```
4
10 1 3
7 3 2
1 1000 1
1000000000000 42 88
```
CODEFORCES 1144_D. Equalize Them All
```
# 1. Incorrect understanding of the problem

```
n = int(input())
a = list(map(int, input().split()))

# 2. Incorrect implementation of the algorithm

def find_median(array):
  n = len(array)
  mid = n // 2
  return array[mid]

median = find_median(a)

# 3. Incorrect test cases

# Test case where the input is invalid

n = -1
a = [1, 2, 3]

# Test case where the output is incorrect

n = 3
a = [1, 2, 3]

median = 2

# 4. Incorrect submission

# Submission without the required header file

# 5. Incorrect runtime

# Solution that runs in O(n^2) time

def find_median(array):
  n = len(array)
  for i in range(n):
    for j in range(i + 1, n):
      if array[i] > array[j]:
        array[i], array[j] = array[j], array[i]

# 6. Incorrect memory usage

# Solution that uses O(n) additional memory

def find_median(array):
  n = len(array)
  new_array = [0] * n
  for i in range(n):
    new_array[i] = array[i]
  new_array.sort()

  return new_array[n // 2]
```
```
# 1. Incorrect understanding of the problem

```
n = int(input())
a = list(map(int, input().split()))

# 2. Incorrect implementation of the algorithm

def find_median(array):
  n = len(array)
  mid = n // 2
  if n % 2 == 0:
    return (array[mid - 1] + array[mid]) // 2
  else:
    return array[mid]

median = find_median(a)

# 3. Incorrect test cases

# Test case where the input is invalid

n = -1
a = [1, 2, 3]

# Test case where the output is incorrect

n = 3
a = [1, 2, 3]

median = 2

# 4. Incorrect submission

# Submission without the required header file

# 5. Incorrect runtime

# Solution that runs in O(n^2) time

def find_median(array):
  n = len(array)
  for i in range(n):
    for j in range(i + 1, n):
      if array[i] > array[j]:
        array[i], array[j] = array[j], array[i]

# 6. Incorrect memory usage

# Solution that uses O(n) additional memory

def find_median(array):
  n = len(array)
  new_array = [0] * n
  for i in range(n):
    new_array[i] = array[i]
  new_array.sort()

  return new_array[n // 2]
```
```
# 1. Incorrect understanding of the problem

```
n = int(input())
a = list(map(int, input().split()))

# 2. Incorrect implementation of the algorithm

def find_median(array):
  n = len(array)
  mid = n // 2
  if n % 2 == 0:
    return (array[mid - 1] + array[mid]) // 2
  else:
    return array[mid]

median = find_median(a)

# 3. Incorrect test cases

# Test case where the input is invalid

n = -1
a = [1, 2, 3]

# Test case where the output is incorrect

n = 3
a = [1, 2, 3]

median = 2

# 4. Incorrect submission

# Submission without the required header file

# 5. Incorrect runtime

# Solution that runs in O(n^2) time

def find_median
CODEFORCES 1165_C. Good String
1. **Incorrect input format.**

```
3
aaa
```

This input is incorrect because it does not have a space between the number 3 and the string `aaa`.

2. **Incorrect output format.**

```
4
aabc
```

This output is incorrect because it does not have a newline character after the number 4.

3. **Incorrect logic.**

```
n = int(input())
s = input()
if len(s) % 2 == 0:
    print(0)
    print(s)
else:
    for i in range(1, len(s)):
        if s[i] == s[i - 1]:
            print(2)
            print(s[:i - 1] + s[i + 1:])
            break
```

This program is incorrect because it does not consider the case where the string has more than one repeated character. For example, the input `4` `aabb` should result in the output `1` `ab`, but this program outputs `2` `ab`.

4. **Runtime error.**

```
n = int(input())
s = input()
if len(s) % 2 == 0:
    print(0)
    print(s)
else:
    for i in range(1, len(s)):
        if s[i] == s[i - 1]:
            print(1)
            print(s[:i - 1] + s[i + 1:])
            break
else:
    print(n)
    print('')
```

This program will run into a runtime error if the input is a very large number.

5. **Memory error.**

```
n = int(input())
s = input()
if len(s) % 2 == 0:
    print(0)
    print(s)
else:
    for i in range(1, len(s)):
        if s[i] == s[i - 1]:
            print(1)
            print(s[:i - 1] + s[i + 1:])
            break
    else:
        print(n)
        print('')
```

This program will run into a memory error if the input is a very long string.
CODEFORCES 1184_C2. Heidi and the Turing Test (Medium)
```
1 1
```
```
1 2
```
```
1000 1000
```
```
100000 100000
```
```
1000000 1000000
```
```
1000000000 1000000000
```
```
1000000000 1000000001
```
CODEFORCES 1202_E. You Are Given Some Strings...
```
#include <iostream>
#include <unordered_map>
#include <string>

using namespace std;

int main() {
  string t;
  cin >> t;

  int n;
  cin >> n;

  unordered_map<string, int> m;

  for (int i = 0; i < n; i++) {
    string s;
    cin >> s;

    m[s]++;
  }

  int ans = 0;

  for (int i = 0; i < n; i++) {
    string s1 = t + s[i];
    ans += m[s1];
  }

  for (int i = 0; i < n; i++) {
    for (int j = i + 1; j < n; j++) {
      string s2 = t + s[i] + s[j];
      ans += m[s2];
    }
  }

  cout << ans << endl;

  return 0;
}
```
CODEFORCES 121_A. Lucky Sum
```
2 7
4 7
7 7
1 1000000000
```
CODEFORCES 1244_E. Minimizing Difference
```
2 1
1 2
```

```
5 1
1 1 1 1 1
```

```
3 10
100 100 100
```

```
10 2
4 5 5 7 5 4 5 2 4 3
```

```
5 100
1 1 1 1 1
```

```
5 100
100 1 1 1 1
```

```
10 100
100 1 1 1 1
```

```
1000000 1000000
1000000 1000000
```
CODEFORCES 1264_C. Beautiful Mirrors with queries
```
2 2
50 50
2
2
```

```
5 5
10 20 30 40 50
2
3
4
5
3
```
CODEFORCES 1285_E. Delete a Segment
```
1
5
1 4
2 3
3 6
5 7
```
CODEFORCES 1304_F2. Animal Observation (hard version)
```
# 1
# Input
3 5 3
0 2 1 1 0
0 0 3 1 2
1 0 4 3 1
3 3 0 0 4

# Output
25

# 2
# Input
3 3 1
1 2 3
4 5 6
7 8 9

# Output
31

# 3
# Input
3 3 2
1 2 3
4 5 6
7 8 9

# Output
44

# 4
# Input
3 3 3
1 2 3
4 5 6
7 8 9

# Output
45
```
CODEFORCES 1329_B. Dreamoon Likes Sequences
```
1
1000000000 1000000000
```
CODEFORCES 1349_B. Orac and Medians
```
1
1 1
```
```
1
5 3
1 5 2 6 1
```
```
1
1 6
```
```
1
3 2
1 2 3
```
```
1
4 3
3 1 2 3
```
```
1
10 3
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1369_F. BareLee
```
1
1 1
```
CODEFORCES 1391_E. Pairs of Pairs
```
1
3 1
1 2
```
```
1
3 2
1 2
```
```
4
4 3
1 4
2 3
4 1
```
```
3
1 1
```
```
1
0 0
```
CODEFORCES 1416_B. Make Them Equal
```
1
5
1 2 3 4 5
```
CODEFORCES 1433_A. Boring Apartments
1. Incorrect input format
```
1
1234
```

2. Incorrect output format
```
1
a
```

3. Incorrect logic
```
1
9999
```

4. Memory leaks
```
1000000000
```

5. Race conditions
```
1000000000
```

6. Security vulnerabilities
```
1000000000
```
CODEFORCES 1456_E. XOR-ranges
```
4 3
3 3
5 5
6 6
1 1
5 2 7
```
```
3 3
2 2
3 4
4 6
1 10 100
```
```
5 2
0 200
201 205
206 210
211 215
216 220
1 5 6 7 8
```
```
1 2
0 200
201 205
1 10 100
```
CODEFORCES 1480_B. The Great Hero
```
1
1000 1000 1
```

```
2
10 10 1
1000 1000 1
```

```
3
10 10 3
10 10 10
```

```
4
1000 1000 4
200 300 400 500
```

```
5
1000 1000 1000 1000
999 999 1
```

```
6
1000 1000 1
1000000
```
CODEFORCES 1508_A. Binary Literature
```
1
2
101010
111111
110011
```
CODEFORCES 1534_B. Histogram Ugliness
```
1
5
1 2 3 4 5
```
CODEFORCES 161_D. Distance in Tree
1. ```
5 2
1 2
2 3
3 4
2 5
```

2. ```
5 3
1 2
2 3
3 4
4 5
```
CODEFORCES 180_F. Mathematical Analysis Rocks!
```
1
1
1
```
```
2
1 2
2 1
```
```
3
1 2 3
3 2 1
```
```
4
2 1 4 3
3 4 2 1
```
```
5
5 2 3 1 4
1 3 2 4 5
```
```
6
4 3 5 2 1
1 5 2 3 4
```
```
7
2 3 5 1 4 6
6 5 4 3 2 1
```
```
8
1 2 3 4 5 6 7 8
8 7 6 5 4 3 2 1
```
```
9
1 2 3 4 5 6 7 8 9
9 8 7 6 5 4 3 2 1
```
CODEFORCES 204_B. Little Elephant and Cards
```
0
3
4 7
4 7
7 4
5
4 7
7 4
2 11
9 7
1 1
```
CODEFORCES 229_A. Shifts
```
3 6
101010
000100
100000

2 3
111
000
```
CODEFORCES 252_D. Playing with Permutations
```
4 1
2 3 4 1
1 2 3 4

4 1
4 3 1 2
3 4 2 1

4 3
4 3 1 2
3 4 2 1

4 2
4 3 1 2
2 1 4 3

4 1
4 3 1 2
2 1 4 3
CODEFORCES 277_E. Binary Tree on Plane
```
3
0 0
1 0
2 1

4
0 0
1 0
2 1
2 0

5
0 0
1 0
2 1
3 1
4 0

```
CODEFORCES 2_B. The least round way
```
1. Incorrect input format

```
```

2. Incorrect output format

```
```

3. Incorrect algorithm

```
```

4. Off-by-one errors

```
```

5. Memory errors

```
```

6. Synchronization errors

```
```

7. Race conditions

```
```

8. Deadlocks

```
```

9. Security vulnerabilities

```
```

10. Other bugs

```
```
CODEFORCES 325_B. Stadium and Games
**1. Incorrect input format**

```
1
```

**2. Incorrect output format**

```
1
2
```

**3. Incorrect calculation of the number of games**

```
3
```

**4. Incorrect calculation of the number of teams**

```
4
```

**5. Incorrect handling of edge cases**

```
0
```

**6. Incorrect handling of invalid input**

```
a
```
CODEFORCES 348_C. Subset Sums
```
5 3 5
5 -5 5 1 -4
2 1 2
4 2 1 4 5
2 2 5
? 2
+ 3 4
? 1
+ 2 1
? 2
```
CODEFORCES 371_D. Vessels
```
2
5 10
6
1 1 4
2 1
1 2 5
1 1 4
2 1
2 2
```
CODEFORCES 393_A. Nineteen
```
n = input()
s = n
count = 0
for i in range(n - 1):
    if n == 9:
        count += 1
    elif n == 10:
        count += 1
    elif n == 11:
        count += 1
    elif n == 12:
        count += 1
    elif n == 13:
        count += 1
print(count)
```
CODEFORCES 416_B. Art Union
```
5 3
1 2 3
4 5 6
7 8 9
10 11 12
13 14 15
```
CODEFORCES 442_E. Gena and Second Distance
```
1 1 1
```
```
1 1 2
0 0
0 0
```
```
5 5 5
0 0
0 5
5 0
5 5
0 0
```
CODEFORCES 465_A. inc ARG
```
1
0

2
00

3
010

4
1100

4
1111

5
10101

6
110101

7
111011

8
111111

9
1111111

10
11111111
```
CODEFORCES 488_E. Prefix Product Sequence
1. ```
2
```
2. ```
3
```
3. ```
1
```
4. ```
6
```
5. ```
10
```
6. ```
100
```
CODEFORCES 512_D. Fox And Travelling
```
# 512_D. Fox And Travelling

def solve():
    n, m = map(int, input().split())
    adj = [[] for _ in range(n)]
    for _ in range(m):
        u, v = map(int, input().split())
        adj[u - 1].append(v - 1)
        adj[v - 1].append(u - 1)

    dp = [0] * (n + 1)
    dp[0] = 1
    for i in range(n):
        for j in range(n):
            if i == j:
                continue
            if dp[i] == 0:
                continue
            for k in adj[j]:
                if k == i:
                    continue
                dp[k] += dp[i] % 10**9 + 9

    print(*dp[:n + 1])


solve()
```
CODEFORCES 536_E. Tavas on the Path
```
2 3
10
1 2 3
1 2 2
1 2 3
1 2 4

3 6
0 0 0 0 0
1 2 2
2 3 5
3 4 7
4 5 3
1 3 6
1 3 7
1 3 5
3 5 7
4 5 3
1 4 2
```
CODEFORCES 566_A. Matching Names
**1. Invalid input data**
```
1
foo
bar
```
**2. Program does not find optimal solution**
```
5
a
b
c
d
e
a
b
c
d
e
```
**3. Program cannot handle all possible input cases**
```
1000000
a
a
a
a
a
a
a
a
a
a
```
**4. Program is not secure**
```
1
password
```
**5. Program is not efficient**
```
1000000
a
b
c
d
e
f
g
h
i
j
```
CODEFORCES 587_B. Duff in Beach
```
3 5 3
5 9 1
```
```
5 10 3
1 2 3 4 5
```
```
3 12 4
1 2 3 4 5 6 7 8 9 10 11 12
```
CODEFORCES 609_D. Gadgets for dollars and pounds
```
5 4 2 2
1 2 3 2 1
3 2 1 2 3
1 1
2 1
1 2
2 2
```
CODEFORCES 630_C. Lucky Numbers
```
1
2
3
4
5
10
```
CODEFORCES 656_G. You're a Professional
**1. Using an incorrect data type for the number of friends or items.**

```
3 3 2
YYY
NNN
YNY
```

**2. Using an incorrect data type for the friends' opinions.**

```
3 3 2
YYY
NNN
YNY
```

**3. Misunderstanding the problem statement.**

```
3 3 2
YYY
NNN
YNY
```

**4. Using an incorrect algorithm.**

```
3 3 2
YYY
NNN
YNY
```

**5. Not handling errors correctly.**

```
3 3 2
YYY
NNN
YNY
```

**6. Not testing the program thoroughly.**

```
3 3 2
YYY
NNN
YNY
```
CODEFORCES 680_B. Bear and Finding Criminals
1. ```
6 3
1 1 1 0 1 0
```

2. ```
5 2
0 0 0 1 0
```

3. ```
6 3
1 1 0 1 0 0
```

4. ```
6 3
1 0 1 1 0 0
```

5. ```
6 2
0 0 0 0 1 0
```
CODEFORCES 703_A. Mishka and Game
```
1
1 1
```
```
2
1 6
6 1
```
```
3
1 5
3 3
2 2
```
```
5
1 5
3 3
2 2
6 1
1 6
```
```
100
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
1 1
```
CODEFORCES 725_A. Jumping Ball
**1. Incorrect input format**

```
1
a
```

**2. Incorrect output format**

```
4
1234
```

**3. Incorrect logic**

```
n = int(input())
s = input()

count = 0
for i in range(n):
    if s[i] == '<':
        if i == 0:
            count += 1
        else:
            count += 0
    elif s[i] == '>':
        if i == n - 1:
            count += 1
        else:
            count += 0

print(count)
```

**4. Memory leaks**

```
n = int(input())
s = input()

count = 0
for i in range(n):
    if s[i] == '<':
        if i == 0:
            count += 1
        else:
            count += 0
    elif s[i] == '>':
        if i == n - 1:
            count += 1
        else:
            count += 0

print(count)
```

**5. Race conditions**

```
n = int(input())
s = input()

count = 0
for i in range(n):
    if s[i] == '<':
        if i == 0:
            count += 1
        else:
            count += 0
    elif s[i] == '>':
        if i == n - 1:
            count += 1
        else:
            count += 0

print(count)
```

**6. Deadlocks**

```
n = int(input())
s = input()

count = 0
for i in range(n):
    if s[i] == '<':
        if i == 0:
            count += 1
        else:
            count += 0
    elif s[i] == '>':
        if i == n - 1:
            count += 1
        else:
            count += 0

print(count)
```

**7. Security vulnerabilities**

```
n = int(input())
s = input()

count = 0
for i in range(n):
    if s[i] == '<':
        if i == 0:
            count += 1
        else:
            count += 0
    elif s[i] == '>':
        if i == n - 1:
            count += 1
        else:
            count += 0

print(count)
```

**8. Other bugs**

```
n = int(input())
s = input()

count = 0
for i in range(n):
    if s[i] == '<':
        if i == 0:
            count += 1
        else:
            count += 0
    elif s[i] == '>':
        if i == n - 1:
            count += 1
        else:
            count += 0

print(count)
```
CODEFORCES 747_A. Display Size
1. ```
8
```
2. ```
64
```
3. ```
5
```
4. ```
999999
```
CODEFORCES 76_D. Plus and xor
```
1
0
```

```
10
10
```

```
142
76
```

```
255
255
```

```
255
1
```
CODEFORCES 794_A. Bank Robbery
5 3 7
8
4 7 5 5 3 6 2 8


6 5 7
5
1 5 7 92 3
CODEFORCES 814_E. An unavoidable detour for home
```
3
3 2 3
```
```
3
2 2 2
```
```
5
2 3 3 2 2
```
```
20
2 2 2 2 3 2 3 2 2 2 2 2 2 2 2 2 2 3 3 2
```
```
50
2 2 2 2 3 2 3 2 2 2 2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 3 2 3 2 2 2 2 2 3 3 2
```
CODEFORCES 83_E. Two Subsequences
```
3
01
10
01
```
```
4
000
111
110
001
```
```
5
10101
01010
11111
01000
10010
```
```
6
11111111
11111111
11111111
11111111
11111111
11111111
```
```
10
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
```
CODEFORCES 860_A. Did you mean...
1. ```
hellno
```
2. ```
abacaba
```
3. ```
asdfasdf
```
4. ```
hello
```
5. ```
hackcerrs
```
6. ```
backtothefutttture
```
CODEFORCES 886_F. Symmetric Projections
```
3
1 2
2 1
3 3
```

```
2
4 3
1 2
```
CODEFORCES 909_F. AND-permutations
1. ```
3
```

2. ```
6
```
CODEFORCES 931_C. Laboratory Work
```
1
100
```
```
3
100 100 101
```
```
5
-10 -10 -9 -9 -9 -9 -9
```
```
6
-1 1 1 0 0 -1
```
CODEFORCES 958_F1. Lightsabers (easy)
**Incorrect input format**

```
1 1
1
1
```

**Incorrect output format**

```
1 1
1 2
2
```

**Incorrect algorithm**

```
1 2
1 1 2 2 1
1 2
```

**Incorrect data structures**

```
1 1
1 1 2 2 1
1 2
```

**Incorrect error handling**

```
1 1
1 1 2 2 1
1 2
```
CODEFORCES 985_C. Liebig's Barrels
```
1 1 0
1
```

```
5 3 1
1 2 3 4 5
```

```
3 4 2
1 2 3 4 5
```

```
4 2 1
2 2 1 2 3 2 2 3
```

```
4 2 2
1 2 3 4 5 6
```

```
5 1 0
1000000000
```
HACKEREARTH abed-and-timelines
```
1
4 4
3 0
2 2
9
```
HACKEREARTH bomb-defusal-4
```
2
2 1 2 3 4
1 1 2 3 4
```
HACKEREARTH cupcake-challenge-1
```
1
1 1 1
```
```
2
1 1 1
1 2 3
```
```
3
2 2 2
4 4 4
1 1 1
```
HACKEREARTH fun-with-factorial
```
4
1
2
3
4
```
HACKEREARTH jungle-run
```
10
S P P P P P P P P
T P T T T P T T T
T P T T T T T T T
T P P P P P T T T
T T T T P P T T T
T T T T P P T T T
T T T T P P T T T
T T T T P P T T T
T T T T P P T T T
T T T T E T T T T
HACKEREARTH minimizing-path-cost
```
# Python 3 program to find shortest
# path in a graph using Dijkstra's
# algorithm

from collections import defaultdict

# Class to represent a graph
class Graph:

	# Constructor
	def __init__(self, vertices):
		self.V = vertices
		self.graph = defaultdict(list)

	# Function to add an edge to the graph
	def addEdge(self, u, v, w):
		self.graph[u].append((v, w))

	# Function to find shortest
	# path from a given source vertex
	def shortestPath(self, src):
		# Create a visited array
		# to keep track of visited
		# vertices
		visited = [False] * self.V

		# Create a distance array
		# to store the shortest
		# distance from source
		# vertex to all other vertices
		dist = [float("inf")] * self.V

		# Initialize the distance
		# of source vertex to 0
		dist[src] = 0

		# Create a queue and enqueue
		# the source vertex
		queue = []
		queue.append(src)

		# While queue is not empty
		while queue:

			# Dequeue the front element
			# of the queue
			u = queue.pop(0)

			# Mark the current vertex as
			# visited
			visited[u] = True

			# Iterate over all adjacent
			# vertices of the dequeued
			# vertex
			for v, w in self.graph[u]:
				# If the adjacent vertex
				# is not visited and
				# the distance to
				# the adjacent vertex
				# is less than the
				# current distance
				# then update the distance
				# of the adjacent vertex
				if not visited[v] and dist[v] > dist[u] + w:
					dist[v] = dist[u] + w
					queue.append(v)

		# Return the shortest distance
		# from source to all vertices
		return dist


# Driver code
if __name__ == '__main__':

	# Number of vertices in the graph
	V = 5

	# Create a graph
	g = Graph(V)

	# Add edges to the graph
	g.addEdge(0, 1, 10)
	g.addEdge(0, 2, 5)
	g.addEdge(1, 2, 3)
	g.addEdge(1, 3, 15)
	g.addEdge(2, 4, 20)
	g.addEdge(3, 4, 10)

	# Source vertex
	src = 0

	# Destination vertex
	dest = 4

	# Find shortest path from
	# source to destination
	dist = g.shortestPath(src)

	# Print the shortest distance
	# from source to destination
	print(dist[dest])
```
HACKEREARTH palindrome-check-2
```
aba

racecar

madam

```
HACKEREARTH rhezo-and-big-powers-1
**Incorrect use of modulo operator**
```
10
3
```

**Using the wrong data type**
```
10**10
10**10
```

**Off-by-one errors**
```
2
10
```

**Incorrect use of recursion**
```
10
100000000
```

**Using the wrong algorithm**
```
10**10
10**10
```

**Not handling overflows correctly**
```
10**10**100
10**100
```
HACKEREARTH special-numbers-8
```
1
2 1
3 5
2 3
```
```
1
3 2
3 5 7
2 3 2
```
```
1
4 3
5 7 11 13
10 11 13 17
```
```
1
1 1
1000000000
1000000000
```
HACKEREARTH trailing-zeros
1. **Incorrect formula**

```
Input: 10
Output: 1
```

2. **Not handling negative numbers correctly**

```
Input: -10
Output: Error
```

3. **Not handling non-integer numbers correctly**

```
Input: 1.5
Output: Error
```

4. **Not handling large numbers correctly**

```
Input: 1000000000
Output: Error
```

5. **Not handling overflow correctly**

```
Input: 2147483647
Output: Error
```

6. **Using an inefficient algorithm**

```
Input: 1000000000
Output: 200000000
```
ATCODER p02576 AtCoder Beginner Contest 176 - Takoyaki
```
20 12 6
1000 1 1000
```
ATCODER p02707 AtCoder Beginner Contest 163 - management
```
5
1 1 2 2
```

```
10
1 1 1 1 1 1 1 1 1
```

```
7
1 2 3 4 5 6
```
ATCODER p02836 AtCoder Beginner Contest 147 - Palindrome-philia
```
redcoder
```
```
vvvvvv
```
```
abcdabc
```
ATCODER p02973 AtCoder Beginner Contest 134 - Sequence Decomposing
```
5
2
1
4
5
3

4
0
0
0
0
```
ATCODER p03109 AtCoder Beginner Contest 119 - Still TBD
2019/04/30
2019/05/01
ATCODER p03256 AtCoder Grand Contest 027 - ABland Yard
```
2 3
AB
1 1
1 2
2 2

4 3
ABAB
1 2
2 3
3 1

13 23
ABAAAABBBBAAB
7 1
10 6
1 11
2 10
2 8
2 11
11 12
8 3
7 12
11 2
13 13
11 9
4 1
9 7
9 6
8 13
8 6
4 10
8 7
4 3
2 1
8 12
6 9

13 17
BBABBBAABABBA
7 1
7 9
11 12
3 9
11 9
2 1
11 5
12 11
10 8
1 11
1 8
7 7
9 10
8 8
8 12
6 2
13 11
```
ATCODER p03409 AtCoder Beginner Contest 091 - 2D Plane 2N Points
```
3
2 0
3 1
1 3
4 2
0 4
5 5
```

```
3
0 0
1 1
5 2
2 3
3 4
4 5
```

```
2
2 2
3 3
0 0
1 1
```

```
5
0 0
7 3
2 2
4 8
1 6
8 5
6 9
5 4
9 1
3 7
```

```
5
0 0
1 1
5 5
6 6
7 7
2 2
3 3
4 4
8 8
9 9
```
ATCODER p03572 CODE FESTIVAL 2017 qual C - Three Gluttons
3
1 2 3
2 3 1

3
1 2 3
1 2 3
ATCODER p03727 AtCoder Grand Contest 014 - Blue and Red Tree
```
3
1 2
2 3
1 3
3 2

3
1 2
2 3
1 3
1 2
```
ATCODER p03891 CODE FESTIVAL 2016 Relay (Parallel) - Magic Square 2
```
8
3
5
```
```
1
1
1
```
```
10
20
30
```
```
1
100
100
```
```
100
100
100
```
ATCODER p04050 AtCoder Grand Contest 001 - Arrays and Palindrome
```
3 2
2 1
```

```
6 1
6
```

```
55 10
1 2 3 4 5 6 7 8 9 10
```

```
999999999 1
999999999
```
AIZU p00129 Hide-and-Seek Supporting System
1
3 5 1 13 4 1
0 0 5 5
2
Safe Danger
AIZU p00262 Triangle of Blocks
```
# AIZU p00262 Triangle of Blocks

def main():
    N = int(input())
    A = list(map(int, input().split()))
    ans = 0
    i = 0
    while i < N:
        j = i
        while j < N and A[j] == A[i]:
            j += 1
        if j == N:
            break
        ans += j - i
        A[i:j] = A[j:j + (j - i)]
        i += (j - i)
    print(ans)


if __name__ == '__main__':
    while True:
        N = int(input())
        if N == 0:
            break
        main()
```

## 1. The input format is not correct

```
0
```

## 2. The output format is not correct

```
-1
```

## 3. The program does not work for all test cases

```
5
1 2 3 4 5
```

## 4. The program is not efficient

```
10000
10000
100
```

## 5. The program is not robust

```
100
100
100
```
AIZU p00449 Boat Travel
```
3 4
0 1 2
1 1 2 5
0 1 3
1 1 3 7
```
AIZU p00640 Distorted Love
1
100 100
index 0
1
click 50 50
show
AIZU p00783 Napoleon's Grumble
```
# 1. Incorrectly handling palindromes that overlap

AAA

# 2. Incorrectly handling palindromes that appear in the center of another palindrome

AABCAAAAAA

# 3. Incorrectly handling palindromes that consist of only one or two characters

A

# 4. Incorrectly handling non-alphabetic characters

123

# 5. Incorrectly handling case-insensitive characters

madam

# 6. Incorrectly handling multiple lines of input

A
B
```
AIZU p00916 Count the Regions
```
# 1
3
4 28 27 11
15 20 42 5
11 24 33 14

# 2
5
4 28 27 11
12 11 34 2
7 26 14 16
14 16 19 12
17 28 27 21

# 3
2
300000 1000000 600000 0
0 600000 1000000 300000

# 4
0
```
AIZU p01049 Array Update
1
1 1
1
1 1 2
1
1
AIZU p01181 Moduic Squares
3 1 6 8 10 7 0 0 2 5
0 0 0 0 0 0 0 0 0 1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1
AIZU p01318 Immortal Jewels
```
9
0 0 2 1
10 0 2 1
0 10 2 1
2 2 2 0
8 0 3 1
13 4 1 1
16 1 1 2
-1 0 1 1
4 0 1 1
```
AIZU p01486 CatChecker
1. m
2. 
3. mmemewwemewwmmemewwemeww
4. 😀😀😀😀😀😀😀😀
5. m\u0000mewwemeww
AIZU p01648 Median Tree
```
2 1
1 2 5
4 6
1 2 1
1 3 2
1 4 3
2 3 4
2 4 5
3 4 6
8 17
1 4 767
3 1 609
8 3 426
6 5 972
8 1 607
6 4 51
5 1 683
3 6 451
3 4 630
8 7 912
3 7 43
4 7 421
3 5 582
8 4 538
5 7 832
1 6 345
8 2 608
0 0
```
AIZU p01799 New Game AI
```
1 1
```
```
2 1
1 5
```
```
2 2
1 1
2 2
```
```
10 10
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
```
```
10 10
10 10
```
AIZU p01933 Displayed tweets
4 3
0
1
2
0
AIZU p02071 Consistent Trading
**1. Inconsistent input format**

```
1 1 1 1 1
```

**2. Incorrect logic**

```
4 3
1 2 101
2 3 99
1 4 100
```

**3. Memory leaks**

```
5 6
3 1 4
2 3 4
5 4 15
2 1 16
2 4 20
5 3 3
```

**4. Race conditions**

```
4 4
1 2 2
2 3 2
3 4 2
4 2 3
```

**5. Security vulnerabilities**

```
1 1 1 1 1
```
AIZU p02213 Don't Rotate the Dice!
```
3 3
631
4 # 2
516
```
AIZU p02367 Bridges
1. Incorrect implementation of DFS

```
#include <iostream>
#include <vector>

using namespace std;

int main() {
  int V, E;
  cin >> V >> E;

  vector<vector<int>> adj(V);
  for (int i = 0; i < E; i++) {
    int u, v;
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  // DFS traversal
  vector<bool> visited(V, false);
  vector<int> low(V, -1);
  vector<int> parent(V, -1);

  int time = 0;
  for (int i = 0; i < V; i++) {
    if (!visited[i]) {
      dfs(i, visited, low, parent, time);
    }
  }

  // Find bridges
  vector<pair<int, int>> bridges;
  for (int i = 0; i < V; i++) {
    for (int j = 0; j < adj[i].size(); j++) {
      int u = i;
      int v = adj[i][j];
      if (low[u] < low[v] && parent[u] != v) {
        bridges.push_back({u, v});
      }
    }
  }

  // Print bridges
  for (int i = 0; i < bridges.size(); i++) {
    cout << bridges[i].first << " " << bridges[i].second << endl;
  }

  return 0;
}

void dfs(int u, vector<bool>& visited, vector<int>& low, vector<int>& parent, int& time) {
  visited[u] = true;
  low[u] = time++;

  for (int v : adj[u]) {
    if (!visited[v]) {
      parent[v] = u;
      dfs(v, visited, low, parent, time);
      low[u] = min(low[u], low[v]);
    } else if (v != parent[u]) {
      low[u] = min(low[u], low[v]);
    }
  }
}
```

2. Using an incorrect data structure

```
#include <iostream>
#include <vector>

using namespace std;

int main() {
  int V, E;
  cin >> V >> E;

  // Adjacency list representation of a graph
  vector<vector<int>> adj(V);
  for (int i = 0; i < E; i++) {
    int u, v;
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
  }

  // DFS traversal
  vector<bool> visited(V, false);
  vector<int> low(V, -1);
  vector<int> parent(V, -1);

  int time = 0;
  for (int i = 0; i < V; i++) {
    if (!visited[i]) {
      dfs(i, visited, low, parent, time);
    }
  }

  // Find bridges
  vector<pair<int, int>> bridges;
  for (int i = 0; i < V; i++) {
    for (int j = 0; j < adj[i].size(); j++) {
      int u = i;
      int v = adj[i][j];
      if (low[u] < low[v] && parent[u] != v) {
        bridges.push_back({u, v});
      }
    }
  }

  // Print bridges
  for (int i = 0; i < bridges.size(); i++) {
    cout << bridges[i].first << " " << bridges[i].second << endl;
  }

  return 0;
}

void dfs(int u, vector<bool>& visited, vector<int>& low, vector<int>& parent, int& time) {
  visited[u] = true;
  low[u]