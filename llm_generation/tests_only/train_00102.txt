CODECHEF cd1it1
1. ```
5
9 34 1 290 32
```
2. ```
6
17 13 10 1 3 1
```
3. ```
1
1
```
4. ```
2
1 2
```
5. ```
5
1 2 3 4 5
```
CODECHEF ct03
1
PPPEE
CODECHEF hotel
3
3
1 2 3
4 5 6
5
1 2 3 4 5
2 3 4 5 6
7
13 6 5 8 2 10 12
19 18 6 9 9 11 15
CODECHEF montrans
```
5
10 10 100
100 100 100
99 99 69
99 99 99
99 99 100
```
CODECHEF resn04
```
1
1
1
```

```
2
5
1 1 1 1 1
7
5 4 3 2 1 1
```

```
3
5
1 1 2 3 4
5
1 1 1 1 1
5
5 5 5 5 5
```

```
4
5
1 1 1 1 1
2
1 1
2
1 1
5
5 5 5 5 5
```

CODECHEF twofrnds
1
1 1

2
1 2
2 3

3
1 4
3 4
2 6
CODEFORCES 1017_F. The Neutral Zone
```
12 0 0 1 0
4 1 2 3 4
```
CODEFORCES 1041_C. Coffee Break
```
4 5 3
3 5 1 2
```
CODEFORCES 1064_B. Equations of Mathematical Magic
```
1
1
```
CODEFORCES 1085_G. Beautiful Matrix
```
2
1 2
2 1

```
```
3
1 2 3
2 3 1
3 1 2

```
```
3
1 2 3
3 1 2
2 3 1

```
```
4
1 2 3 4
2 3 4 1
3 4 1 2
4 1 2 3

```
```
5
1 2 3 4 5
2 3 4 5 1
3 4 5 1 2
4 5 1 2 3
5 1 2 3 4

```
CODEFORCES 1105_E. Helping Hiasat 
```
5 3
1
2 motarack
2 mike
1
2 light

```

```
4 3
1
2 alice
2 bob
2 tanyaromanova
```

```
6 5
1
2 mike
2 alice
2 bob
1
2 tanyaromanova
```
CODEFORCES 1133_A. Middle of the Contest
```
1. Using incorrect data types

```
10:00
11:00

```
2. Not handling the case where the contest starts and ends at the same time

```
10:00
10:00

```
3. Not handling the case where the contest lasts for more than 24 hours

```
00:00
24:00

```
4. Not handling the case where the contest starts and ends at midnight

```
00:00
00:00

```
5. Not handling the case where the contest starts and ends at noon

```
12:00
12:00

```
6. Not handling the case where the contest starts and ends at 12:00 AM

```
00:00
00:00
```
CODEFORCES 1153_D. Serval and Rooted Tree
```
3
0 0 1
1 2 3
```
CODEFORCES 1175_C. Electrification
```
1
1 0
```
```
2
1 0
1 1
```
```
3
2 0
1 2 3
2 1
1 1000000000
```
```
10
1 0
1 1
2 0
2 1
3 0
3 1
4 0
4 1
5 0
5 1
```
```
1000000
1000000
```
```
1000000000
1000000000
```
CODEFORCES 1194_B. Yet Another Crosses Problem
1
1 1
*

2
2 2
..
..

3
3 3
...
.*.
.*.

4
4 4
*.**
....
*.**
*.**

5
5 5
*****
*.*.*
*****
..*.*
..***

6
1 4
****

7
5 5
.....
..*..
.***.
..*..
.....

8
5 3
...
.*.
.*.
***
.*.

9
3 3
.*.
*.*
.*.

10
4 4
*.**
....
*.**
*.**
CODEFORCES 1210_F2. Marek and Matching (hard version)
```
# -*- coding: utf-8 -*-
# @Author: shawn0805
# @Date:   2022-05-28 18:55:01
# @Last Modified by:   shawn0805
# @Last Modified time: 2022-05-28 19:21:40

from collections import Counter

def main():
    n = int(input())
    arrs = []
    for _ in range(n):
        arr = list(map(int, input().split()))
        arrs.append(arr)

    res = 1
    for arr in arrs:
        cnt = Counter(arr)
        for v in cnt.values():
            res *= pow(v+1, -1, 10**9+7)
    print(res)

if __name__ == "__main__":
    main()
```

```
2
50 50
50 50
```

```
3
3 1 4
1 5 9
2 6 5
```

```
5
99 99 99 99 99
99 99 99 99 99
99 99 99 99 99
99 99 99 99 99
99 99 99 99 99
```
CODEFORCES 1231_E. Middle-Out
1. ```
5
test
estt
```
2. ```
5
aashd
dasha
```
3. ```
1
a
z
```
CODEFORCES 1252_H. Twin Buildings
```
1
2
```
```
2
5 5
3 4
```
```
3
10 1
9 8
7 6
```
```
10
999999999 999999999
999999999 999999999
999999999 999999999
999999999 999999999
999999999 999999999
999999999 999999999
999999999 999999999
999999999 999999999
999999999 999999999
999999999 999999999
```
CODEFORCES 1276_A. As Simple as One and Two
1
onetwone

2
onetwonetwooneooonetwooo

3
two

4
one

5
twooooo

6
ttttwo

7
ttwwoo

8
ooone

9
onnne

10
oneeeee

11
oneeeeeeetwooooo
CODEFORCES 1296_B. Food Buying
```
1
1000000000
```
CODEFORCES 131_B. Opposites Attract
```
1
0
```
```
2
1 1
```
```
3
-1 -1 0
```
```
4
1 0 -1 -1
```
```
5
-3 3 0 0 3
```
```
6
-3 -3 0 0 0 0
```
```
7
-3 -3 -3 -3 0 0 0
```
CODEFORCES 1338_D. Nested Rubber Bands
```
3
1 2
2 3
```

```
4
1 2
2 3
3 4
```

```
6
1 3
2 3
3 4
4 5
4 6
```

```
8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
```

```
10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
```

```
100
51 52
52 53
53 54
54 55
55 56
56 57
57 58
58 59
59 60
60 61
61 62
62 63
63 64
64 65
65 66
66 67
67 68
68 69
69 70
70 71
71 72
72 73
73 74
74 75
75 76
76 77
77 78
78 79
79 80
80 81
81 82
82 83
83 84
84 85
85 86
86 87
87 88
88 89
89 90
90 91
91 92
92 93
93 94
94 95
95 96
96 97
97 98
98 99
99 100
```
CODEFORCES 1360_C. Similar Pairs
```
1
4
11 14 16 12
```

```
1
2
1 8
```

```
1
4
1 1 1 1
```

```
1
4
1 2 5 6
```

```
1
2
12 13
```

```
1
6
1 6 3 10 5 8
```

```
1
6
1 12 3 10 5 8
```
CODEFORCES 1380_D. Berserk And Fireball
5 2
5 2 3
3 1 4 5 2
3 5
CODEFORCES 1400_D. Zigzags
```
1
3
1 2 3
```

```
2
4
2 2 2 2
6
1 3 3 1 2 3
```

```
5
3
1 2 3
4
1 1 1 1
5
1 1 1 1 1
6
1 1 1 1 1 1
```
CODEFORCES 1424_D. Does anyone else hate the wind?
**1. Incorrect input format**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1 0
1 2 0
```

**2. Incorrect data type**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1 0.5
1 2 0
```

**3. Missing data**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1
1 2 0
```

**4. Unexpected errors**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1 0
1 2 1000000
```

**5. Bugs in the algorithm**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1 0
1 2 0
```

**6. Incorrect implementation**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1 0
1 2 0
```

**7. Inefficient implementation**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1 0
1 2 0
```

**8. Insufficient testing**

```
3 3
5 2 15
M S S
S S S
S S P
S W N N N N N N N N N N N N N
2 1 0
1 2 0
```
CODEFORCES 1444_E. Finding the Vertex
**Incorrect input format**
```
1
```

**Incorrect output format**
```
1
```

**Using too many queries**
```
5
1 2
2 3
3 4
4 5
5 6
5
2
3
6
```

**Not finding the special vertex**
```
5
1 2
2 3
3 4
4 5
5 1
5
2
3
```

**Not terminating**
```
5
1 2
2 3
3 4
4 5
5 1
5
2
3
```

**Other bugs**
```
5
1 2
2 3
3 4
4 5
5 1
5
2
1
```
CODEFORCES 1469_F. Power Sockets
1. Incorrect input format

```
1 2
3
```

2. Incorrect output format

```
1 2
3 4
```

3. Incorrect data

```
1 2
3
```

4. Insufficient memory

```
1 2
1000000000
```

5. Incorrect algorithm

```
n = int(input())
k = int(input())
l = list(map(int, input().split()))


def find_min(nums):
    min_num = nums[0]
    for num in nums:
        if num < min_num:
            min_num = num
    return min_num


min_num = find_min(l)

if min_num >= k:
    print(min_num - 1)
else:
    print(-1)
```

6. Runtime errors

```
n = int(input())
k = int(input())
l = list(map(int, input().split()))


def find_min(nums):
    min_num = nums[0]
    for num in nums:
        if num < min_num:
            min_num = num
    return min_num


min_num = find_min(l)

if min_num >= k:
    print(min_num - 1)
else:
    print(-1)


print(k)
```

7. Logic errors

```
n = int(input())
k = int(input())
l = list(map(int, input().split()))


def find_min(nums):
    min_num = nums[0]
    for num in nums:
        if num < min_num:
            min_num = num
    return min_num


min_num = find_min(l)

if min_num >= k:
    print(min_num - 1)
else:
    print(-1)

if min_num == 1:
    print(0)
```
CODEFORCES 1495_B. Let's Go Hiking
```
5
1 2 5 4 3

5
4 3 2 1 5

```
CODEFORCES 1517_G. Starry Night Camping
```
5
0 0 4
0 1 5
1 0 3
1 1 1
-1 1 2
```
```
32
2 2 1
2 3 1
3 2 1
3 3 1
2 6 1
2 5 1
3 6 1
3 5 1
2 8 1
2 9 1
1 8 1
1 9 1
2 12 1
2 11 1
1 12 1
1 11 1
6 2 1
7 2 1
6 3 1
5 3 1
6 6 1
7 6 1
5 5 1
6 5 1
6 8 1
5 8 1
6 9 1
7 9 1
6 12 1
5 12 1
6 11 1
7 11 1
```
CODEFORCES 1545_E2. AquaMoon and Time Stop (hard version)

CODEFORCES 172_E. BHTML+BCSS
```
# 172_E. BHTML+BCSS


def get_tags(s):
    stack = []
    for c in s:
        if c == '<':
            stack.append(c)
        elif c == '>':
            if len(stack) == 0:
                raise ValueError("Unmatched closing tag")
            stack.pop()
    return stack


def get_nested_elements(s):
    stack = []
    for c in s:
        if c == '<':
            stack.append(c)
        elif c == '>':
            if len(stack) == 0:
                raise ValueError("Unmatched closing tag")
            stack.pop()
    return stack


def get_nested_elements_with_names(s):
    stack = []
    nested_elements = {}
    for c in s:
        if c == '<':
            stack.append(c)
        elif c == '>':
            if len(stack) == 0:
                raise ValueError("Unmatched closing tag")
            tag = stack.pop()
            if tag[1:-1] not in nested_elements:
                nested_elements[tag[1:-1]] = []
            nested_elements[tag[1:-1]].append(c)
    return nested_elements


def main():
    with open('input.txt') as f:
        html = f.readline().strip()
        m = int(f.readline().strip())
        for _ in range(m):
            query = f.readline().strip()
            print(len(get_nested_elements_with_names(query)))


if __name__ == '__main__':
    main()
```
CODEFORCES 193_A. Cutting Figure
```
5 4
####
#..#
#..#
#..#
####
```

```
1 1
#
```

```
5 5
#####
#...#
#####
#...#
#####
```

```
1 5
#####
```

```
5 1
####
```

```
2 2
#.
.#
```

```
5 5
#.#.#.#
#.#.#.#
#.#.#.#
#.#.#.#
#.#.#.#
```
CODEFORCES 217_A. Ice Skating
1. Incorrect input format
```
2
2 1
1 2
```

2. Incorrect output format
```
2
2 1
1 2
```

3. Incorrect algorithm
```
2
2 1
1 2
```

4. Incorrect data type
```
2
2 1
1 2
```

5. Incorrect memory management
```
2
2 1
1 2
```

6. Incorrect error handling
```
2
2 1
1 2
```

7. Incorrect unit testing
```
2
2 1
1 2
```

8. Incorrect integration testing
```
2
2 1
1 2
```

9. Incorrect deployment
```
2
2 1
1 2
```

10. Incorrect documentation
```
2
2 1
1 2
```
CODEFORCES 240_A. Cinema
```
5 3
1 2 3
6
firstfilm
3
0 0 0
secondfilm
4
0 0 4 5
thirdfilm
1
2
fourthfilm
1
5
fifthfilm
1
4
sixthfilm
2
1 0

```
CODEFORCES 265_D. Good Sequences
```
1
1
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
5
2 3 4 6 9
```

```
9
1 2 3 5 6 7 8 9 10
```

```
10
1 2 3 4 5 6 7 8 9 9
```
CODEFORCES 289_D. Polo the Penguin and Houses 
```
5 2

5 4

10 5

1000 100
```
CODEFORCES 314_D. Sereja and Straight Lines
1
0 0
CODEFORCES 337_A. Puzzles
```
5 10
1 2 3 4 5
```
```
3 3
3 1 2
```
```
5 10
1 2 3 4 5
```
```
4 6
10 12 10 7 5 22
```
```
5 10
1 1 1 1 1
```
CODEFORCES 35_C. Fire Again
```
3 3
1
2 2
```
```
1 1
```
```
3 3
1
1 1
```
```
3 3
2
1 1 3 3
```
```
2 2
```
CODEFORCES 383_A. Milking cows
```
4
0 0 1 0
```
```
5
1 0 1 0 1
```
```
10
0 1 0 1 0 1 0 1 0 0
```
```
100000
0
```
CODEFORCES 403_E. Two Rooted Trees
```
3
1 2 3
1 2 3
1
```
CODEFORCES 431_A. Black Square
```
1 2 3 4
123214

1 5 3 2
11221

3 4 2 1
122432413

0 0 0 0
123456789
```
CODEFORCES 453_C. Little Pony and Summer Sun Celebration
1. **Incorrect input format**
```
2 0
0
```

2. **Incorrect output format**
```
2 1 2
```

3. **Incorrect logic**
```
2 0
1 2
1 1 1
```

4. **Memory leaks**
```
5 3
1 2
2 3
1 4
1 5
0 1 0 0 0
```

5. **Timeout**
```
1000000 1000000
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1
CODEFORCES 476_A. Dreamoon and Stairs
1. ```
1 2
```

2. ```
10 10
```

3. ```
10 5
```

4. ```
10000 2
```

5. ```
10000 1
```
CODEFORCES 49_B. Sum
1. **Incorrect input format**

```
1 2
```

2. **Incorrect base**

```
1 2 0
```

3. **Invalid expression**

```
1 2 3
```

4. **Incorrect output format**

```
1 2 3 4
```

5. **Off-by-one errors**

```
1 9
```

6. **Memory leaks**

```
while True:
    pass
```

7. **Race conditions**

```
x = 1

def foo():
    global x
    x = 2

foo()
print(x)
```

8. **Deadlocks**

```
import threading

def foo():
    while True:
        pass

t1 = threading.Thread(target=foo)
t2 = threading.Thread(target=foo)

t1.start()
t2.start()
```

9. **Unhandled exceptions**

```
try:
    1 / 0
except Exception as e:
    pass
```

10. **Security vulnerabilities**

```
import os

os.system('ls -la')
```
CODEFORCES 523_D. Statistics of Recompressing Videos
```
# 523_D. Statistics of Recompressing Videos

# 1. Incorrect data type

n, k = map(int, input().split())
# 2. Incorrect data format

videos = []
for _ in range(n):
    videos.append(list(map(int, input().split())))
# 3. Undefined behavior

videos[0][0] = -1
# 4. Off-by-one errors

videos.append([1000000000, 1000000000])
# 5. Memory leaks

videos = []
# 6. Race conditions

# 7. Deadlocks

# 8. Security vulnerabilities

# 9. Incorrect algorithm

videos = []
```
CODEFORCES 54_B. Cutting Jigsaw Puzzle
**Test Case 1:**

```
2 4
ABDC
ABDC
```

**Test Case 2:**

```
2 6
ABCCBA
ABCCBA
```

**Test Case 3:**

```
3 4
AAAB
AAAB
AAAB
```
CODEFORCES 576_C. Points on Plane
```
1
0 0
```
```
10
999999 999999
999999 999999
999999 999999
999999 999999
999999 999999
999999 999999
999999 999999
999999 999999
999999 999999
999999 999999
```
```
10
0 0
10 10
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
```
CODEFORCES 599_A. Patrick and Shopping
1. Incorrect input format
```
1 2 3
```
2. Incorrect data type
```
1 2 a
```
3. Off-by-one error
```
1 2 1
```
4. Incorrect logic
```
1 2 3
```
5. Infinite loop
```
1 2 3
```
6. Memory leak
```
1 2 3
```
7. Security vulnerability
```
1 2 3
```
8. Incorrect output format
```
1 2 3
```
CODEFORCES 61_E. Enemy is weak
```
3
3 2 1

3
2 3 1

4
10 8 3 1

4
1 5 4 3

4
1 1 1 1
CODEFORCES 63_D. Dividing Island
1. **Incorrect input format**

```
3 4 2 2 3
5 8 3
```

This input is incorrect because there is no space between the numbers 5 and 8.

2. **Incorrect output format**

```
YES
aaabb
aabbb
cbb..
ccb..
```

This output is incorrect because the first line does not start with a capital letter.

3. **Off-by-one errors**

```
3 4 2 2 3
4 8 3
```

This input is incorrect because the sum of the squares in the first line is 11, which is not equal to the sum of the squares in the second line.

4. **Logic errors**

```
3 4 2 2 3
5 8 3
```

This input is incorrect because the solution does not divide the island into two connected figures.

5. **Runtime errors**

```
3 4 2 2 3
5 8 3
```

This input is incorrect because the solution takes too long to run.
CODEFORCES 669_B. Little Artem and Grasshopper
```
1
>
1
```

```
2
&gt;&lt;
1 2
```

```
3
&gt;&gt;&lt;
2 1 1
```

```
2
&gt;
1
```

```
5
&gt;>>>>
1 1 2 3 4
```
CODEFORCES 690_D2. The Wall (medium)
```
1 1
1 2
2 2
3 2
20 1
37 63
```
CODEFORCES 714_D. Searching Rectangles
```
5
2
1
0
1
1
1
0
1
```
CODEFORCES 735_A. Ostap and Grasshopper
```
5 2
#G#T#

5 3
#G#T#

5 2
..GT..

10 3
G..#..#..T

```
CODEFORCES 75_A. Life Without Zeros
1. Incorrect input format:
```
101
1021
```

2. Mathematical errors:
```
101
102
```

3. Off-by-one errors:
```
105
106
```

4. Incorrect output format:
```
101
102
NOO
```

5. Other bugs:
```
101
102
YESS
```
CODEFORCES 77_E. Martian Food
1. ```
1
4 3 1
```
2. ```
2
10 3 1
10 3 2
```
3. ```
3
10 3 3
10 3 4
10 3 5
```
4. ```
4
20 4 1
20 4 2
20 4 3
20 4 4
```
5. ```
5
40 10 1
40 10 2
40 10 3
40 10 4
40 10 5
```
CODEFORCES 803_D. Magazine Ad
1. ```
4
garage for sa-le
```

2. ```
4
Edu-ca-tion-al Ro-unds are so fun
```

3. ```
5
This is a test
```

4. ```
1
aaa
```

5. ```
100
abcdefghijklmnopqrstuvwxyz
```
CODEFORCES 828_B. Black Square
```
1 1
W

5 4
WWWW
WWWB
WWWB
WWBB
WWWW

2 1
B

1 2
BB

3 3
WWW
WWW
WWW

3 3
BBB
WWW
BBB

```
CODEFORCES 84_C. Biathlon
```
1
1000
1
0
```
```
3
2 1
5 2
10 1
5
0 1
1 3
3 0
4 0
4 0
```
```
4
1 1
2 2
3 3
4 4
4
0 0
0 1
1 0
1 1
```
```
1
1000000000
1
1000000000
```
```
6
1 1
2 2
3 3
4 4
5 5
6 6
5
0 0
0 1
1 0
1 1
2 2
```
CODEFORCES 871_E. Restore the Tree
```
2 1
0 1 2
```

```
3 1
1 2 1
```

```
3 2
1 2 1
1 3 1
```

```
4 2
0 1 2 3
1 0 2 3
```

```
1 1
1 1 1
```

```
10 4
0 1 2 3 4 5 6 7 8 9
1 0 2 3 4 5 6 7 8 9
2 0 1 3 4 5 6 7 8 9
3 0 1 2 4 5 6 7 8 9
```
CODEFORCES 898_E. Squares and not squares
```
4
12 14 30 4
```
```
6
0 0 0 0 0 0
```
```
6
120 110 23 34 25 45
```
```
10
121 56 78 81 45 100 1 0 54 78
```
```
10
121 56 78 81 45 100 1 0 54 77
```
```
10
121 56 78 81 45 100 1 0 54 78
1
```
```
2
100000 100000
```
CODEFORCES 919_F. A Game With Numbers
```
1
0
0 0 0 0 0 0 0 0
1 2 3 4 1 2 3 4
```

```
1
1 2 3 4 1 2 3 4
0 0 0 0 0 0 0 0
```

```
0
0 0 0 0 0 0 0 0
0 0 0 0 4 0 0 0
```

```
1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
```

```
0
0 0 0 0 0 0 0 0
1 2 3 4 1 2 3 4
```
CODEFORCES 946_E. Largest Beautiful Number
```
1
89
```

```
1
88
```

```
1
1000
```

```
1
28923845
```
CODEFORCES 975_C. Valhalla Siege
```
5 5
1 2 1 2 1
3 10 1 1 1
```
```
4 4
1 2 3 4
9 1 10 6
```
```
4 4
1 2 3 4
2 1 1 1
```
```
5 5
10 10 10 10 10
1000000000 1000000000 1000000000 1000000000 1000000000
```
```
1000000 5
1000000 1000000 1000000 1000000 1000000
```
CODEFORCES 995_B. Suit and Tie
```
# 1. The input format is not clear.

1

# 2. The output format is not clear.

0

# 3. The problem is not well-defined.

1
1

# 4. The problem is too difficult.

100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20

# 5. The problem is too easy.

2
1 2
```
HACKEREARTH bad-odd-times
2

7

1 1 2 2 2 2 3

5

4 4 4 7 7
HACKEREARTH chotu-and-teddy-day
```
1
10 10
```
```
1
11 10
```
```
1
20 5
```
```
1
20 20
```
HACKEREARTH edit-strings
1. ```
3 4
.abc
1 a
2 b
3 c
```

2. ```
4 5
..a.b
1 .
2 b
3 c
4 a
```

3. ```
4 6
..a.b
1 a
2 .
3 b
4 c
5 a
```

4. ```
5 7
..a.b
1 a
2 .
3 b
4 c
5 a
6 .
```

5. ```
0 1
```

6. ```
1 1
a
```
HACKEREARTH haunted
1 1
1
HACKEREARTH lucifer-needs-help
5 10
2 3 4 5 6
HACKEREARTH name-count
```
1
3 3
```

```
2
3 4
```

```
3
3 5
```

```
4
4 5
```

```
5
5 6
```
HACKEREARTH problem-5
```
2
4
```

```
0
0
```

```
-1
0
```

```
10
10
```

```
1.11
1
```
HACKEREARTH service-lane-1
```
8 5
2 3 1 2 3 2 3 3
0 3
4 6
6 7
3 5
0 7
```
HACKEREARTH the-amazing-race-1
1
5
4 1 2 1 4
HACKEREARTH xenny-and
```
10 1
100 2
5 3
1024 2
```
ATCODER p02641 AtCoder Beginner Contest 170 - Forbidden List
```
# 1. Using incorrect data types

x, n = map(int, input().split())
nums = list(map(int, input().split()))

print(x - 1)
```

```
# 2. Using incorrect comparison operators

x, n = map(int, input().split())
nums = list(map(int, input().split()))

print(x - 1)
```

```
# 3. Using incorrect logic

x, n = map(int, input().split())
nums = list(map(int, input().split()))

print(x - 1)
```

```
# 4. Not handling edge cases correctly

x, n = map(int, input().split())
nums = list(map(int, input().split()))

if len(nums) == 0:
    print(x - 1)
else:
    print(x - 1)
```

```
# 5. Using inefficient algorithms

x, n = map(int, input().split())
nums = list(map(int, input().split()))

for i in range(x - 1, x + 2):
    if i not in nums:
        print(i)
        break
```
ATCODER p02771 AtCoder Beginner Contest 155 - Poor
5 7 5
4 4 4
4 9 6
3 3 4
ATCODER p02906 AtCoder Grand Contest 038 - Unique Path
```
# 2 <= N <= 10^5
# N-1 <= M <= N * (N-1)/2
# 1 <= Q <= 10^5
# 0 <= A_i,B_i <= N-1
# A_i != B_i
# 0 <= C_i <= 1
# All values in input are integers.

# input
5 5 3
0 1 0
1 2 1
2 3 0

# output
Yes
```
ATCODER p03041 AtCoder Beginner Contest 126 - Changing a Character
```
3 1
ABC

3 2
ABC

3 3
ABC

3 4
ABC

3 5
ABC

1 1
A

2 1
AB

2 2
AB

2 3
AB

3 1
AAA

4 1
AAAA

4 2
AAAA

4 3
AAAA

4 4
AAAA

```
ATCODER p03183 Educational DP Contest - Tower
```
3
2 2 20
2 1 30
3 1 40
```
```
4
1 2 10
3 1 10
2 4 10
1 6 10
```
```
5
1 10000 1000000000
1 10000 1000000000
1 10000 1000000000
1 10000 1000000000
1 10000 1000000000
```
```
8
9 5 7
6 2 7
5 7 3
7 8 8
1 9 6
3 3 3
4 1 7
4 5 5
```
ATCODER p03330 AtCoder Beginner Contest 099 - Good Grid
2 3
0 1 1
1 0 1
1 4 0
1 2
3 3
ATCODER p03489 AtCoder Regular Contest 087 - Good Sequence
```
1
1000000000

1
1

4
3 3 3 3

5
2 4 1 4 2

6
1 2 2 3 3 3

1
1000000000

8
2 7 1 8 2 8 1 8
```
ATCODER p03651 AtCoder Grand Contest 018 - Getting Difference
```
3 7
9 3 4
```
```
3 5
6 9 3
```
```
4 11
11 3 7 15
```
```
5 12
10 2 8 6 4
```
ATCODER p03807 AtCoder Grand Contest 010 - Addition
```
3
1 2 3
```
```
5
1 2 3 4 5
```
ATCODER p03975 Kyoto University Programming Contest 2016 - A Barricade
```
5 5 9
4
3
6
9
1
```
AIZU p00064 Secret Number
1. Incorrect input format
```
100
```

2. Integer overflow
```
99999999999
```

3. Off-by-one error
```
100
100
```

4. Incorrect use of whitespace
```
100 200
```
AIZU p00196 Baseball Championship
6
A 1 0 0 2 0
B 0 0 1 1 0
C 1 1 1 1 1
D 1 0 0 1 2
E 2 0 0 0 0
F 1 1 0 2 1
4
g 1 1 1
h 0 1 2
w 0 0 0
b 0 2 1
0
AIZU p00350 String Game
10
abcd
5
set 2 3 e
set 5 7 a
set 7 9 a
comp 1 7 2 5
comp 2 9 1 7
AIZU p00546 Zombie Island
13 21 1 1
1000 6000
7
1 2
3 7
2 4
5 8
8 9
2 5
3 4
4 7
9 10
10 11
5 9
7 12
3 6
4 5
1 3
11 12
6 7
8 11
6 13
7 8
12 13
AIZU p00710 Hanafuda Shuffle
4
1
5
1
4
AIZU p00849 Manhattan Wiring
```
5 5
0 0 0 0 0
0 0 0 3 0
2 0 2 0 0
1 0 1 1 1
0 0 0 0 3
2 3
2 2 0
0 3 3
6 5
2 0 0 0 0
0 3 0 0 0
0 0 0 0 0
1 1 1 0 0
0 0 0 0 0
0 0 2 3 0
5 9
0 0 0 0 0 0 0 0 0
0 0 0 0 3 0 0 0 0
0 2 0 0 0 0 0 2 0
0 0 0 0 3 0 0 0 0
0 0 0 0 0 0 0 0 0
9 9
3 0 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
2 0 0 0 0 0 0 0 3
9 9
0 0 0 1 0 0 0 0 0
0 2 0 1 0 0 0 0 3
0 0 0 1 0 0 0 0 2
0 0 0 1 0 0 0 0 3
0 0 0 1 1 1 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
9 9
0 0 0 0 0 0 0 0 0
0 3 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 2 3 2
0 0
```
AIZU p00981 Wall Painting
```
8 5 10 5
1 1 7
3 1 2
1 5 6
3 1 4
3 6 8
```
AIZU p01113 Floating-Point Numbers
```
1
0000000000000000000000000000000000000000000000000000
2
0000000000000000000000000000000000000000000000000000
3
0000000000000000000000000000000000000000000000000000
4
0000000000000000000000000000000000000000000000000000
7
1101000000000000000000000000000000000000000000000000
100
1100011010100001100111100101000111001001111100101011
123456789
1010101010101010101010101010101010101010101010101010
1000000000000000000
1111111111111111111111111111111111111111111111111111
0
```
AIZU p01251 Left Hand Rule
```
3 3 3
1 0 1 2
1 2 2 2
2 2 2 1
0 0 1 0 1 1
3 3 4
1 0 1 2
1 2 2 2
2 2 2 1
2 1 1 1
0 0 1 0 1 1
3 3 0
0 0 1 0 1 1
0 0 0
```
AIZU p01412 Power of Power
```
1
1000000000
```
```
1
0
0
```
```
4
1
2
3
4
```
```
4
4
3
2
1
```
```
5
0
1
2
3
4
```
AIZU p01566 Pipeline Plans
1. Incorrect input format:
```
3 3
4 2 2 0 0 0 0 0 0 0 0 1
```
2. Incorrect output format:
```
3 3
4 2 2 0 0 0 0 0 0 0 0 1
```
3. Incorrect algorithm:
```
3 3
4 2 2 0 0 0 0 0 0 0 0 1
```
4. Incorrect data structures:
```
3 3
4 2 2 0 0 0 0 0 0 0 0 1
```
5. Incorrect implementation:
```
3 3
4 2 2 0 0 0 0 0 0 0 0 1
```
AIZU p01728 KuruKuruKururin
```
1 2
3 3
2 -1
4
1 0 1 5
0 1 4 1
0 4 6 4
5 0 5 5
```

```
1 2
3 3
2 -1
4
1 0 1 5
0 1 6 1
0 4 6 4
5 0 5 5
```

```
1 4
3 3
7 0
5
1 0 1 5
0 1 6 1
0 4 6 4
8 0 2 5
6 0 4 2
```

```
2 2
4 2
4 5
5
1 5 2 0
0 4 3 4
0 1 8 1
7 0 7 5
8 4 5 4
```
AIZU p01866 Hamming Distance
5
00001
3
2
11100
3
5
00001
0
0
AIZU p02003 Board
4 2
.#
..

5 5
.#.#.
.#.#.
.###.
.#.#.
.....

4 7
..#.#.
..#.#.
..#.#.
..#.#.
..#.#.
AIZU p02147 A Polygon And Circles
```
4
2 3
1 2
2 1
3 2
4
1 3
1 1
3 3
3 1
```
AIZU p02288 Maximum Heap
1. ```
5
4 1 3 2 16
```

2. ```
6
1 2 3 4 5 6
```

3. ```
10
4 1 3 2 16 9 10 14 8 7
```

4. ```
15
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
```
AIZU p02435 Stack
```
1
1
0 0 1
```
```
1
1
0 0 1
1 0
```
```
2
3
0 0 1
0 1 2
1 0
```
```
3
9
0 0 1
0 0 2
0 0 3
0 2 4
0 2 5
1 0
1 2
2 0
1 0
```