CODECHEF cd101
4,5,7
5,6,11
CODECHEF csub
1
5
10010

CODECHEF horses
```
1
5
4 9 1 32 13
```
CODECHEF mnmx
```
3
2
3 4
3
4 2 5
5
1 2 3 4 5
```
CODECHEF resist
```
1
1000000000 1000000007
```
CODECHEF twodogs
```
5 5
2 4 3 2 1

5 5
2 4 9 2 5

5 1
1

5 1000000
1000000 1000000

5 1000000
1 1 1 1 1
```
CODEFORCES 1017_E. The Supersonic Rocket
```
3 4
0 0
0 2
2 0
0 2
2 2
2 0
1 1
```

```
3 4
0 0
0 2
2 0
0 2
2 2
2 0
0 0
```

```
3 3
0 0
0 2
2 0
0 2
2 2
2 0
```

```
4 4
0 0
0 2
2 0
0 2
2 2
2 0
1 1
```

```
4 4
0 0
0 2
2 0
0 2
2 2
2 0
1 1
1 0
```
CODEFORCES 1041_B. Buying a TV Set
```
17 15 5 3
14 16 7 22
4 2 6 4
1000000000000000000 1000000000000000000 999999866000004473 999999822000007597
```
CODEFORCES 1064_A. Make a triangle!
```
3 4 5

2 5 3

100 10 10

1 1 1

1000000000 1 1
```
CODEFORCES 1085_F. Rock-Paper-Scissors Champion
3 5
RPS
1 S
2 R
3 P
1 P
2 P
CODEFORCES 1105_D. Kilani and the Game
```
3 3 2
1 1
1..
...
..2

3 4 4
1 1 1 1
....
#...
1234

3 3 3
1 1 1
1..
..1

3 3 1
3
1..
...
..1

3 3 2
1 2
1.2
..2
```
CODEFORCES 1132_G. Greedy Subsequences
```
1 1
1

1 2
1 2

2 1
1 2

2 2
1 2

3 2
1 1 3

4 2
1 2 3 4

5 2
1 2 3 4 5

6 2
1 2 3 4 5 6

6 3
1 5 2 5 3 6

6 4
1 5 2 5 3 6

7 6
4 5 2 5 3 6 6

8 6
1 2 3 4 5 6 7

9 6
1 2 3 4 5 6 7 8

10 6
1 2 3 4 5 6 7 8 9
```
CODEFORCES 1153_C. Serval and Parenthesis Sequence
10
(???(???(?
CODEFORCES 1175_B. Catch Overflow!
```
1
for 2147483647
end
```
```
1
for 100
end
add
```
```
5
for 10
add
end
for 10
add
end
for 10
add
end
```
```
4
for 100
end
for 100
add
end
add
```
```
2
for 2147483647
end
for 100
add
end
```
CODEFORCES 1194_A. Remove a Progression
```
1
2 2
```
CODEFORCES 1210_F1. Marek and Matching (easy version)
```
2
50 50
50 50
```
```
3
3 1 4
1 5 9
2 6 5
```
```
4
3 2 1 4
2 1 4 3
1 4 3 2
4 3 2 1
```
```
5
10 10 10 10 10
10 10 10 10 10
10 10 10 10 10
10 10 10 10 10
10 10 10 10 10
```
```
6
10 10 10 10 10 10
10 10 10 10 10 10
10 10 10 10 10 10
10 10 10 10 10 10
10 10 10 10 10 10
10 10 10 10 10 10
```
CODEFORCES 1231_D. Anadi and Domino
```
# 1. Incorrect input format

input = '4 4
1 2
2 3
3 4
4 1'

# 2. Incorrect output format

input = '4 4
1 2
2 3
3 4
4 1'
output = 'f'

# 3. Incorrect data type

input = '4 4
1 2
2 3
3 4
4 1'
output = '1.5'

# 4. Incorrect algorithm

input = '4 4
1 2
2 3
3 4
4 1'
output = '5'

# 5. Incorrect implementation

input = '4 4
1 2
2 3
3 4
4 1'
output = '4'
```
CODEFORCES 1252_G. Performance Review
```
5 3 3
50 40 30 20 10
4 1 2 3 100
1 4
2 6 7
1 3 300
2 1 400
2 1 5
```
CODEFORCES 1272_F. Two Bracket Sequences
```
()))
())

()
)

)
))

())
(()(()(()(
CODEFORCES 1296_A. Array with Odd Sum
```
1
3
1 2 3

2
2
3 4

3
4
5 5 5 5

4
1
1

5
5
1 1 1 1 1
```
CODEFORCES 131_A. cAPS lOCK
```
@
c
a
A
aA
aA1
aAb
aAb1
aAb12
aAb123
aAb1234
aAb12345
aAb123456
aAb1234567
aAb12345678
aAb123456789
aAb1234567890
aAb1234567890Z
```
CODEFORCES 1338_C. Perfect Triples
```
1
1
10
1
100
1
1000
1
10000
1
100000
1
1000000
1
10000000
1
100000000
```
CODEFORCES 1360_B. Honest Coach
```
2
3
1 2 3
3
1 1 1
```
CODEFORCES 1380_C. Create The Teams
```
1
3 5
3 2 4
```
```
1
4 8
2 4 2 3
```
```
1
4 11
1 3 3 7
```
```
3
5 10
7 11 2 9 5
4 8
2 4 2 3
4 11
1 3 3 7
```
```
5
2 1
1 1
4 3
3 1 1
4 7
1 1 1 1 1
```
```
1
40 10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 1400_C. Binary String Reconstruction
```
# 1. Incorrect understanding of the problem statement.
1
110110
1
```

```
# 2. Incorrect implementation of the algorithm.
1
101110
2
```

```
# 3. Incorrect handling of invalid input.
1
101110
0
```

```
# 4. Incorrect output formatting.
1
101110
2
```
CODEFORCES 1424_C. Du≈°an's Railway
```
10 3
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 4
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 5
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 6
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 7
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 8
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 9
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
```
CODEFORCES 1444_D. Rectangular Polyline
```
1
2
1 1
2
1 1
```
```
1
1
1
1
```
```
1
0
```
```
2
3
1 2 3
2
3 4
```
```
2
1
1
1
```
```
2
1 2
2
1 2
```
```
2
1 2
2
1 2
```
```
2
2 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
3
1 2 3
3
1 2 3
```
```
2
1 1
2
1 1
```
```
2
2 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
2 1
2
1 1
```
```
2
1 2
2
1 2
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
```
2
1 1
2
1 1
```
CODEFORCES 1469_E. A Bit Similar
```
1
10 10
1111111111
```
CODEFORCES 1495_A. Diamond Miner
```
# 1495_A. Diamond Miner

import math

T = int(input())

for _ in range(T):
    n = int(input())
    x = [0]*n
    y = [0]*n
    for i in range(n):
        x[i], y[i] = map(int, input().split())
    x.sort()
    y.sort()
    sum = 0
    for i in range(n):
        sum += math.sqrt((x[i]-x[0])**2 + (y[i]-y[0])**2)
    print(sum)
```
CODEFORCES 1517_F. Reunion
1
1
1
2
2
3
1 2
2 3
1 3
2 3 4
1 2 3 4
2 3 4 5
1 2 3 4 5
CODEFORCES 1545_E1. AquaMoon and Time Stop (easy version)
```
2
1
1 2 1 2
2 3 2 3
```
CODEFORCES 172_D. Calendar Reform
```
25 3
50 5
101 20
```
CODEFORCES 192_E. Fools and Roads

CODEFORCES 216_E. Martian Luck
```
10 5 6
3 2 0 5 6 1

7 6 4
3 5 0 4

257 0 3
0 0 256

10 4 5
0 4 3 1

257 0 5
0 0 0 0
```
CODEFORCES 23_E. Tree
```
1
```
```
1 2
```
```
1 2
2 3
```
```
1 2
1 3
2 4
2 5
3 6
3 7
6 8
```
```
3
1 2
1 3
```
CODEFORCES 265_C. Escape from Stones
```
llrlr

rrlll

lrlrr
```
CODEFORCES 289_C. Polo the Penguin and Strings
7 4
4 7
6 5
6 6
CODEFORCES 314_C. Sereja and Subsequences
```
1
42
```
```
3
1 2 2
```
```
5
1 2 3 4 5
```
CODEFORCES 336_E. Vasily the Bear and Painting Square
0 0
0 1
0 2
1 1
0 3
1 2
1 3
2 1
2 2
2 3
3 1
3 2
3 3
4 1
4 2
4 3
5 1
5 2
5 3
6 1
6 2
6 3
7 1
7 2
7 3
8 1
8 2
8 3
9 1
9 2
9 3
10 1
10 2
10 3
CODEFORCES 35_B. Warehouse
1 1 3
+1 1 1 a
+1 1 1 b
+1 1 1 c
+1 1 1 d
-1 c
-1 b
CODEFORCES 382_E. Ksenia and Combinatorics
```
1 1
```

```
2 1
```

```
3 1
```

```
4 2
```

```
50 50
```
CODEFORCES 403_D. Beautiful Pairs of Numbers
```
1
2 1
```
```
1
2 2
```
```
1
3 1
```
```
1
3 2
```
```
1
3 3
```
```
2
1 1
2 1
```
```
2
2 1
2 2
```
```
2
3 1
3 2
```
```
2
3 2
3 3
```
```
10
10 10
```
```
10
100 100
```
CODEFORCES 430_E. Guess the Tree
1. **Incorrect input format**

```
1
```

2. **Incorrect output format**

```
NOO
```

3. **Incorrect logic**

```
4
1 1 1 4
```

4. **Memory leaks**

```
while(1):
    n = int(input())
    print("YES")
```

5. **Race conditions**

```
n = int(input())
c = [int(x) for x in input().split()]

def dfs(node, parent):
    if node == n:
        return True
    for i in range(n):
        if c[i] == 1 and i != parent:
            c[i] -= 1
            if dfs(i, node):
                return True
    return False

for i in range(n):
    if c[i] == 1:
        c[i] -= 1
        if dfs(i, -1):
            break

print("YES" if c[i] == 0 else "NO")
```

6. **Deadlocks**

```
import threading

def worker1():
    while(1):
        n = int(input())
        c = [int(x) for x in input().split()]

        def dfs(node, parent):
            if node == n:
                return True
            for i in range(n):
                if c[i] == 1 and i != parent:
                    c[i] -= 1
                    if dfs(i, node):
                        return True
            return False

        for i in range(n):
            if c[i] == 1:
                c[i] -= 1
                if dfs(i, -1):
                    break

        print("YES" if c[i] == 0 else "NO")

def worker2():
    while(1):
        n = int(input())
        c = [int(x) for x in input().split()]

        def dfs(node, parent):
            if node == n:
                return True
            for i in range(n):
                if c[i] == 1 and i != parent:
                    c[i] -= 1
                    if dfs(i, node):
                        return True
            return False

        for i in range(n):
            if c[i] == 1:
                c[i] -= 1
                if dfs(i, -1):
                    break

        print("YES" if c[i] == 0 else "NO")

t1 = threading.Thread(target=worker1)
t2 = threading.Thread(target=worker2)
t1.start()
t2.start()
t1.join()
t2.join()
```

7. **Security vulnerabilities**

```
import os

def read_file(filename):
    with open(filename, "r") as f:
        return f.read()

def write_file(filename, content):
    with open(filename, "w") as f:
        f.write(content)

n = int(input())
c = [int(x) for x in input().split()]

if n == 1:
    print("YES")
elif n == 2:
    if c[0] == 1 and c[1] == 1:
        print("YES")
    else:
        print("NO")
else:
    filename = "flag.txt"
    content = read_file(filename)
    if content == "FLAG":
        print("YES")
    else:
        print("NO")
        write_file(filename, "FLAG")
```

8. **Performance problems**

```
n = int(input())
c = [int(x) for x in input().split()]

def dfs(node, parent):
    if node == n:
        return True
    for i in range(n):
        if c[i] == 1 and i != parent:
            c[i] -= 1
            if dfs(i, node):
                return True
    return False
CODEFORCES 453_B. Little Pony and Harmony Chest
1. **Incorrect input format.**
```
1
a
```
2. **Incorrect output format.**
```
5
1 6 4 2 8
a b c d e
```
3. **Incorrect logic.**
```
5
1 6 4 2 8
1 5 3 1 8
```
4. **Incorrect implementation.**
```
5
1 6 4 2 8
1 5 3 1 8
```
5. **Runtime errors.**
```
5
1 6 4 2 8
1 5 3 1 8
```
CODEFORCES 475_F. Meta-universe
1. Incorrect input format
```
5
0 0
0 2
2 0
2 1
2 2
```

2. Incorrect output format
```
5
```

3. Incorrect algorithm
```
5
0 0
0 2
2 0
2 1
2 2
```

4. Memory errors
```
500000000
```

5. Time errors
```
1000000000000000000
```
CODEFORCES 49_A. Sleuth
1. Incorrect input format

```
Is it a melon
```

2. Incorrect output format

```
Is it an apple?
YESS
```

3. Incorrect logic

```
Is it a banana?
NO
```

4. Runtime errors

```
Is it an apple?
```

5. Memory errors

```
Is it an apple?
```

6. Security vulnerabilities

```
Is it an apple?
```
CODEFORCES 523_C. Name Quest
```
# 523_C. Name Quest

s = input()
t = input()

count = 0
for i in range(len(t) - len(s) + 1):
    if t[i:i+len(s)] == s:
        count += 1

print(count * count)
```
CODEFORCES 54_A. Presents
```
5 2
1 3
```
```
10 1
3 6 7 8
```
```
10 2
1 2 4 5 6 7 8 9 10
```
```
1 1
1
```
```
1 5
1
```
CODEFORCES 576_B. Invariance of Tree
```
4
4 3 2 1
```

```
3
3 1 2
```

```
5
1 2 3 4 5
```

```
1
1
```

```
100
1 2 3 4 5 6 7 8 9 10 ... 99 100
```
CODEFORCES 598_F. Cut Length
```
3 3
0 0
1 0
0 1
0 0 1 0
0 0 1 0
0 0 1 1
```
CODEFORCES 61_D. Eternal Victory
```
1
```

```
2
1 2 3
```

```
3
1 2 3
1 3 3
```

```
10
1 2 5
1 3 4
2 3 2
2 4 3
3 4 5
3 5 7
4 5 6
4 6 8
5 6 9
```
CODEFORCES 63_C. Bulls and Cows
```
1
1234 2 2
```
```
2
1234 2 2
1256 0 2
```
```
2
0123 1 1
4567 1 2
```
```
1
0123 1 1
```
```
2
4567 1 2
1234 2 2
```
```
1
4567 1 2
```
```
2
1234 2 2
2134 2 2
```
```
2
1234 2 2
0124 0 3
```
CODEFORCES 669_A. Little Artem and Presents
1. ```
1
```
2. ```
2
```
3. ```
3
```
4. ```
4
```
5. ```
5
```
6. ```
6
```
7. ```
7
```
8. ```
8
```
9. ```
9
```
10. ```
10
```
CODEFORCES 690_D1. The Wall (easy)
1. Incorrect input format

```
3 7
.......
.......
.B.B..
```

2. Incorrect output format

```
3 7
.......
.......
.BB.B..

4
```

3. Incorrect logic

```
3 7
.......
.......
.BB.B..

1
```

4. Runtime error

```
3 7
.......
.......
.BB.B..

```

5. Time complexity

```
3 7
.......
.......
.BB.B..
```

6. Space complexity

```
3 7
.......
.......
.BB.B..
```
CODEFORCES 714_C. Sonya and Queries
```
1
+1
```
```
1
+2
-2
```
```
1
+0
+1
```
```
3
+1
+2
+3
```
```
5
+1000000000
+1000000001
-1000000000
+1000000001
? 000000000
```
```
10
+1
+2
+3
-2
-1
? 10
+1
-1
? 10
+1
+1
? 0
```
CODEFORCES 734_F. Anton and School
1. Incorrect input format

```
n=4
b=[6,8,4,4]
c=[16,22,10,10]
```

2. Incorrect output format

```
n=4
b=[6,8,4,4]
c=[16,22,10,10]

1 2 3 4
```

3. Using incorrect data types

```
n=4
b=[6,8,4,4]
c=[16,22,10,10]

1.2 2.3 3.4 4.5
```

4. Using incorrect algorithms

```
n=4
b=[6,8,4,4]
c=[16,22,10,10]

1 2 3 4
```

5. Not handling special cases

```
n=0
b=[]
c=[]
```
CODEFORCES 758_F. Geometrical Progression
```
1 1 10
2 6 9
3 1 10
3 3 10
```
CODEFORCES 77_D. Domino Carpet
2 2
#########
#..O#O..#
#...#...#
#########
#O..#O..#
#...#...#
#########
CODEFORCES 803_C. Maximal GCD
```
6 3
8 2
5 3
```
CODEFORCES 828_A. Restaurant Tables
**Incorrect input format**

```
1 1 1
1
```

This input is not in the correct format. The first line should contain three integers, but this input only contains one integer.

**Incorrect data type**

```
1 1 2
1 2 3
```

The second line of this input contains three integers, but the third integer is not a valid integer. It should be either 1 or 2, but it is 3.

**Off-by-one errors**

```
4 1 2
1 2 1 1
```

This input is correct, but the program will output 1 instead of 0 because it will incorrectly increment the index of the `t` array by one when it iterates over it.

**Logic errors**

```
4 1 2
1 2 1 1
```

This input is correct, but the program will output 2 instead of 0 because it will incorrectly check if there is a vacant two-seater table before checking if there is a vacant one-seater table.

**Memory errors**

```
4 1 2
1 2 1 1
```

This input is correct, but the program will run out of memory because it will allocate a new array for each group of people.

**Timeout errors**

```
4 1 2
1 2 1 1
```

This input is correct, but the program will take too long to run because it will iterate over the input data multiple times.

**Security vulnerabilities**

```
4 1 2
1 2 1 1
```

This input is correct, but the program contains a security vulnerability because it does not properly sanitize the input data. This could allow an attacker to inject malicious code into the program.
CODEFORCES 84_B. Magical Array
```
4
2 1 1 4

5
-2 -2 -2 0 1
```
CODEFORCES 871_D. Paths
**Incorrect implementation of the gcd function:**

```
n = int(input())

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

ans = 0
for i in range(1, n):
    for j in range(i + 1, n + 1):
        ans += gcd(i, j)
print(ans)
```

**Incorrect calculation of the shortest distance between two vertices:**

```
n = int(input())

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

ans = 0
for i in range(1, n):
    for j in range(i + 1, n + 1):
        ans += min(gcd(i, j), gcd(j, i))
print(ans)
```

**Incorrect handling of cases where there is no path between two vertices:**

```
n = int(input())

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

ans = 0
for i in range(1, n):
    for j in range(i + 1, n + 1):
        if gcd(i, j) == 0:
            ans += 1
print(ans)
```

**Incorrect output format:**

```
n = int(input())

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

ans = 0
for i in range(1, n):
    for j in range(i + 1, n + 1):
        ans += gcd(i, j)
print(ans, end=" ")
```

**Runtime errors:**

```
n = int(input())

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

ans = 0
for i in range(1, n):
    for j in range(i + 1, n + 1):
        ans += gcd(i, j)
print(ans)
```

**Logic errors:**

```
n = int(input())

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

ans = 0
for i in range(1, n):
    for j in range(i + 1, n + 1):
        ans += gcd(i, j)
print(ans - n)
```
CODEFORCES 898_D. Alarm Clock
1. Incorrect input format
```
2 2 2
1 3
```

2. Incorrect algorithm
```
3 3 2
1 2 3
```

3. Incorrect output format
```
3 3 2
1 2 3
4
```

4. Incorrect error handling
```
2 2 2
1 3
```

5. Inefficient code
```
3 3 2
1 2 3
```
CODEFORCES 919_E. Congruence Equation
```
2 3 5 8
```
```
4 6 7 13
```
```
233 233 10007 1
```
```
2 3 5 10
```
CODEFORCES 946_D. Timetable
```
2 5 1
01001
10110

2 5 0
01001
10110

4 8 2
01000000
00100000
00010000
00001000

5 20 2
1111111111111111111111111111
0000000000000000000000000000
1111111111111111111111111111
0000000000000000000000000000
```
CODEFORCES 975_B. Mancala
```
0 1 1 0 0 0 0 0 0 7 0 0 0 0
```
CODEFORCES 995_A. Tesla
```
4 5
1 2 0 4
1 2 0 4
5 0 0 3
0 5 0 3
```
HACKEREARTH bad-day
1
2
HACKEREARTH chotu-and-palindromic-strings
1
aba
baba
2
xy
zw
HACKEREARTH easy-to-debug
10
HACKEREARTH hasan-and-trip-1
3
0 0 1
3 1 1
6 0 9
HACKEREARTH lovely-couple-1
```
1
3 3
```
HACKEREARTH mystery-9-1
1
114
HACKEREARTH problem-3-16
1
3 2
1 1 2
HACKEREARTH sequences-everywhere
```
2 6
```
```
2 2
```
```
1 1
```
```
1000000000000000000 1000000000000000001
```
```
1000000000000000000 1000000000000000000
```
HACKEREARTH thanks-giving
a
HACKEREARTH xaviers-challenge
```
1
xyzabc
```
ATCODER p02640 AtCoder Beginner Contest 170 - Crane and Turtle
```
1 2
```
```
2 100
```
```
3 8
```
ATCODER p02770 AtCoder Beginner Contest 156 - Modularness
```
3 1
3 1 4
5 3 2
```

```
7 3
27 18 28 18 28 46 1000000000
1000000000 1 7
1000000000 2 10
1000000000 3 12
```
ATCODER p02905 AtCoder Grand Contest 038 - LCMs
```
3
2 4 6

8
1 2 3 4 6 8 12 12

10
356822 296174 484500 710640 518322 888250 259161 609120 592348 713644
```
ATCODER p03040 AtCoder Beginner Contest 127 - Absolute Minima
```
4
1 4 2
2
1 1 -8
2
```
ATCODER p03181 Educational DP Contest - Subtree
```
3 100
1 2
2 3
```
```
4 100
1 2
1 3
1 4
```
```
1 100
```
```
10 2
8 5
10 8
6 5
1 5
4 8
2 10
3 6
9 2
1 7
```
ATCODER p03329 AtCoder Beginner Contest 099 - Strange Bank
1. 127
2. 3
3. 44852
ATCODER p03486 AtCoder Beginner Contest 082 - Two Anagrams
```
# Problem: ATCODER p03486 AtCoder Beginner Contest 082 - Two Anagrams

# Solution:

def main():
    s = input()
    t = input()

    if s == t:
        print("Yes")
    else:
        if sorted(s) < sorted(t):
            print("Yes")
        else:
            print("No")

if __name__ == "__main__":
    main()
```

**Program inputs:**

```
yx
axy

ratcode
atlas

cd
abc

w
ww

zzz
zzz
```
ATCODER p03650 AtCoder Regular Contest 079 - Namori Grundy
```
4
1 2 3 4
```
ATCODER p03806 AtCoder Beginner Contest 054 - Mixing Experiment
1. 3 1 1
1 2 1
2 1 2
3 3 10

2. 1 1 10
10 10 10

3. 1 2 2
1 1 1
1 1 1
1 1 1
1 1 1

4. 10 3 5
10 10 10
10 10 10
10 10 10
10 10 10
10 10 10
10 10 10
10 10 10
10 10 10
10 10 10

5. 4 2 3
1 1 1
2 2 2
3 3 3
4 4 4
ATCODER p03974 CODE FESTIVAL 2016 qual B - Lexicographical disorder
```
5
aa
abbaa
abbba
aaab
aaaaaba
5
1 abcdefghijklmnopqrstuvwxyz
2 bacdefghijklmnopqrstuvwxyz
3 abcdefghijklmnopqrstuvwxyz
4 bacdefghijklmnopqrstuvwxyz
5 abcdefghijklmnopqrstuvwxyz
```
AIZU p00063 Palindrome
```
abcba
sx
abcddcba
rttrd
```
AIZU p00195 What is the Most Popular Shop in Tokaichi?
```
1593 4311
4321 2155
1256 6421
5310 1455
2152 5421
1549 3386
4528 3719
1234 4321
3330 3109
2739 2199
0 0
```
AIZU p00349 Ant
```
4 5 5
2 1 S
2 2 E
2 3 E
3 1 S
3 3 E
```
AIZU p00545 Walking in JOI Kingdom
5 5 3
-8 1
-4 2
-2 2
4 2
10 1
1
3
5
AIZU p00709 Square Carpets
```
4 3
0 1 1 1
1 1 1 1
1 1 1 1

8 5
0 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
1 1 1 0 1 1 1 1
0 1 1 1 0 1 1 1

8 8
0 1 1 0 0 1 1 0
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
0 1 1 0 0 1 1 0
0 1 1 0 0 1 1 0
1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1
0 1 1 0 0 1 1 0

10 10
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 0 1 1 0 1 1 0 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 0 1 1 0 1 1 0 1
1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1
1 1 0 1 1 0 1 1 0 1
1 1 1 1 1 1 1 1 1 1
0 0
```
AIZU p00848 Sum of Different Primes
```
24 3
24 2
2 1
1 1
4 2
18 3
17 1
17 3
17 4
100 5
1000 10
1120 14
0 0
```
AIZU p00980 Estimating the Flood Risk
5 4 2
1 1 10
5 4 3
AIZU p01112 Playoff by all the teams
```
5
3
3 2
4 1
5 1
3
1
1 2
3
2
1 2
3 2
5
4
4 1
4 2
5 1
5 2
5
3
4 1
4 2
5 1
5
4
3 2
4 1
5 1
5 2
9
11
6 1
6 4
7 2
7 3
7 4
8 2
8 3
8 4
9 1
9 3
9 5
9
10
6 1
6 4
7 2
7 3
7 4
8 2
8 3
8 4
9 1
9 3
5
6
4 3
2 1
5 1
2 4
1 3
2 3
9
1
1 2
0
```
AIZU p01250 Pi is Three
0.15
0.05
0.0
AIZU p01411 Entangled with Lottery
```
9 4 3 2 1
2 1
7 3

9 4 3 2 3
2 1
7 3

9 4 3 2 1
2 1
8 3

9 4 3 2 3
2 1
8 3

9 4 3 2 1
2 1
9 1

9 4 3 2 3
2 1
9 1
```
AIZU p01565 Move on Dice
```
3 3
->|
..v
.^<
JAG
2012
SUMMER
HOGE
HOGE
CAMP
1 1
2 2
```
```
1 3
+++
1
2
3
4
5
6
1 3
1 1
```
```
3 3
->|
..v
.^<
JAG
2012
SUMMER
HOGE
HOGE
CAMP
1 1
1 2
```
```
1 3
+++
1
2
3
4
5
6
1 3
2 3
```
```
1 3
+++
1
2
3
4
5
6
1 3
3 3
```
```
4 4
..^.
..v.
...<
...>
1
2
3
4
5
6
7
8
9
10
11
12
1 1
4 4
```
```
1 3
+++
1
2
3
4
5
6
1 3
1 1
```
AIZU p01727 A + B
```
# 1
4 10000 00101
Q
A 0
B 1
Q

# 2
9 0110111101 0010100111
Q
B 4
Q
A 4
Q
B 9
Q
A 8
Q
```
AIZU p01865 Steelyard
1
5
1 1
2 1
3 1
4 1
5 1
AIZU p02002 Expression
1. **Incorrect precedence of operators.**

```
# 02002 Expression

import sys
from sys import stdin

def read():
    return stdin.readline()

def solve(s, i, j):
    if i == j:
        return int(s[i])
    if s[i] == "^":
        return solve(s, i+1, j)^solve(s, i+2, j)
    if s[i] == "&":
        return solve(s, i+1, j)&solve(s, i+2, j)
    return solve(s, i+1, j)|solve(s, i+2, j)

N = int(read())
s = read()
Q = int(read())
for _ in range(Q):
    l, r = map(int, read().split())
    print(solve(s, l-1, r-1))
```

2. **Incorrect handling of zero-padded values.**

```
# 02002 Expression

import sys
from sys import stdin

def read():
    return stdin.readline()

def solve(s, i, j):
    if i == j:
        return int(s[i])
    if s[i] == "^":
        return solve(s, i+1, j)^solve(s, i+2, j)
    if s[i] == "&":
        return solve(s, i+1, j)&solve(s, i+2, j)
    return solve(s, i+1, j)|solve(s, i+2, j)

N = int(read())
s = read()
Q = int(read())
for _ in range(Q):
    l, r = map(int, read().split())
    print(solve(s, l-1, r-1))
```

3. **Incorrect handling of boundary cases.**

```
# 02002 Expression

import sys
from sys import stdin

def read():
    return stdin.readline()

def solve(s, i, j):
    if i == j:
        return int(s[i])
    if s[i] == "^":
        return solve(s, i+1, j)^solve(s, i+2, j)
    if s[i] == "&":
        return solve(s, i+1, j)&solve(s, i+2, j)
    return solve(s, i+1, j)|solve(s, i+2, j)

N = int(read())
s = read()
Q = int(read())
for _ in range(Q):
    l, r = map(int, read().split())
    print(solve(s, l-1, r-1))
```

4. **Incorrect error handling.**

```
# 02002 Expression

import sys
from sys import stdin

def read():
    return stdin.readline()

def solve(s, i, j):
    if i == j:
        return int(s[i])
    if s[i] == "^":
        return solve(s, i+1, j)^solve(s, i+2, j)
    if s[i] == "&":
        return solve(s, i+1, j)&solve(s, i+2, j)
    return solve(s, i+1, j)|solve(s, i+2, j)

N = int(read())
s = read()
Q = int(read())
for _ in range(Q):
    l, r = map(int, read().split())
    print(solve(s, l-1, r-1))
```

5. **Incorrect output formatting.**

```
# 02002 Expression

import sys
from sys import stdin

def read():
    return stdin.readline()

def solve(s, i, j):
    if i == j:
        return int(s[i])
    if s[i] == "^":
        return solve(s, i+1,
AIZU p02146 Averaging
```
5
4 0 4 0 0
1 2
1 3
1 4
2 5

7
0 7 2 5 0 3 0
1 2
1 3
1 4
2 5
3 6
3 7

10^10
```
AIZU p02287 Complete Binary Tree
```
1
1
```
```
2
1 1
```
```
3
1 2 3
```
```
4
1 2 3 4
```
```
5
1 2 3 4 5
```
```
6
1 2 3 4 5 6
```
```
7
1 2 3 4 5 6 7
```
```
8
1 2 3 4 5 6 7 8
```
```
9
1 2 3 4 5 6 7 8 9
```
```
10
1 2 3 4 5 6 7 8 9 10
```
AIZU p02434 Vector II
1. **Incorrect input format**

```
1 1
0 -1 1
```

2. **Incorrect output format**

```
3 1
0 0 1
1 0
```

3. **Incorrect array index**

```
3 1
0 0 1
0 3 -1
```

4. **Incorrect array element**

```
3 1
0 0 1
0 0 -1000000001
```

5. **Incorrect operation**

```
3 1
0 0 1
2 10
```

6. **Memory leak**

```
3 1
0 0 1
1 0
```

7. **Time complexity**

```
3 1
0 0 1
1 0
```

8. **Space complexity**

```
3 1
0 0 1
1 0
```