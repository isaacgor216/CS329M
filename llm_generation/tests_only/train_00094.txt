CODECHEF cballs
1
5
1 1 1 1 1
CODECHEF cs05
2
20
99
0
CODECHEF hatfact
1
1
2
3
4
5
6
7
CODECHEF mike1
```
3 2
1 2
4 5
7 0
2
1 2
2 2
```
CODECHEF recmsg
```
1
abc
```
CODECHEF treeroot
```
1
1
1 0
```
CODEFORCES 1016_E. Rest In The Shades
```
# s_y, a, b
-3, 1, 6
# n
2
# l_i, r_i
2, 4
6, 7
# q
5
# x_i, y_i
3, 1
1, 3
6, 1
6, 4
7, 6
```
CODEFORCES 103_E. Buying Sets
```
1
1
1
1
```

```
2
1 1
1 2
1 10 20
```

```
3
1 1
2 2 3
3 1 2 3
10 20 -3
```

```
4
2 1 2
2 2 3
2 3 4
2 4 5
1 -1 1 -1 1
```

```
5
2 1 2
2 2 3
2 3 4
2 4 5
2 5 1
-1 1 -1 1 -1
```

```
6
2 1 2
2 2 3
2 3 4
2 4 5
2 5 1
2 6 7
1 -1 1 -1 1 -1 -1
```

```
7
2 1 2
2 2 3
2 3 4
2 4 5
2 5 1
2 6 7
2 8 9
1 -1 1 -1 1 -1 -1 -1
```
CODEFORCES 1062_F. Upgrading Cities
```
7 7
1 2
2 3
3 4
4 7
2 5
5 4
6 4
```

```
6 7
1 2
2 3
3 4
1 5
5 3
2 6
6 4
```

```
1 1
```

```
1 0
```

```
0 0
```
CODEFORCES 1084_E. The Fair Nut and Strings
```
2 4
aa
bb
```
```
3 3
aba
bba
```
```
4 5
abbb
baaa
```
```
2 1
b
a
```
```
5 2
bbbb
bbbb
```
```
1 20
b
```
CODEFORCES 1104_B. Game with string
```
a
```
```
iiq
```
```
abba
```
```
abacaba
```
CODEFORCES 1131_G. Most Dangerous Shark
```
2 7
3
1 2 2
1 2 1
1
3
2
3
2 2
1 3
1 1
```

```
1 1
1
1
100000
1
1 100000
```
CODEFORCES 1152_C. Neko does Maths
```
6 10
21 31
5 10
```
CODEFORCES 1174_A. Ehab Fails to Be Thanos
```
1
1
```

```
2
1 2
```

```
3
1 2 3
```

```
4
1 2 3 4
```

```
5
1 2 3 4 5
```

```
6
1 2 3 4 5 6
```
CODEFORCES 1191_F. Tokitsukaze and Strange Rectangle
```
3
1 1
1 2
1 3
```
```
3
1 1
2 1
3 1
```
```
4
2 1
2 2
3 1
3 2
```
CODEFORCES 120_F. Spiders
1
2
3 1 2 2 3
1
1 1
2
4 1 2 2 3 2 4
7 3 4 1 2 2 4 4 6 2 7 6 5
CODEFORCES 1230_C. Anadi and Domino
```
4 4
1 2
2 3
3 4
4 1
```
```
7 0
```
```
3 1
1 3
```
```
7 21
1 2
1 3
1 4
1 5
1 6
1 7
2 3
2 4
2 5
2 6
2 7
3 4
3 5
3 6
3 7
4 5
4 6
4 7
5 6
5 7
6 7
```
CODEFORCES 1251_F. Red-White Fence
```
5 2
3 3 1 1 1
2 4
7
6 8 10 12 14 16 18
```
CODEFORCES 1271_E. Common Number
```
11 3
11 6
20 20
14 5
1000000 100
```
CODEFORCES 1294_F. Three Paths on a Tree
```
5
1 2
2 3
3 4
4 5
```
CODEFORCES 1315_F. Au Pont Rouge
```
4 2 1
abac

19 5 1821
aupontrougevkoffice

2 2 1
ab
```
CODEFORCES 1337_B. Kana and Dragon Quest game
```
1
100 3 4
```

```
1
189 3 4
```

```
1
64 2 3
```

```
1
63 2 3
```

```
1
30 27 7
```

```
1
10 9 1
```

```
1
69117 21 2
```
CODEFORCES 1359_F. RC Kaboom Show
1. ```
1
0 0 0 0 0
```

2. ```
3
0 0 1 0 1
0 0 -1 0 1
0 0 0 0 1
```

3. ```
2
0 0 1 0 1
0 0 -1 0 1
```

4. ```
5
0 0 1 0 1
0 0 -1 0 1
0 0 0 1 1
0 0 0 -1 1
0 0 0 0 1
```

5. ```
10
0 0 1 0 1
0 0 -1 0 1
0 0 0 1 1
0 0 0 -1 1
0 0 0 0 1
0 0 0 1 1
0 0 0 -1 1
0 0 0 0 1
0 0 0 1 1
0 0 0 -1 1
```
CODEFORCES 137_A. Postcards and photos
```
# Incorrect input format
C

# Incorrect output format
CCCCPPPPPP
2

# Incorrect logic
CCCCCCPPCPPPPPPPPPP
5

# Off-by-one errors
CCCCCCPPCPPPPPPPPPP
7

# Memory leaks
CCCCCCCCCCCC
2

# Data races
CCCCCCCCCCCC
2

# Race conditions
CCCCCCCCCCCC
2

# Deadlocks
CCCCCCCCCCCC
2

# Unhandled exceptions
CCCCCCCCCCCC
2

# Security vulnerabilities
CCCCCCCCCCCC
2
```
CODEFORCES 13_A. Numbers
1. **Incorrect input format**

    * Input: `1 2`
    * Expected output: `Error`

2. **Incorrect base conversion**

    * Input: `10`
    * Expected output: `Error`

3. **Incorrect calculation of the average**

    * Input: `3`
    * Expected output: `2/1`

4. **Other bugs**

    * Input: `1000`
    * Expected output: `Error`
CODEFORCES 1423_J. Bubble Cup hypothesis
```
1
2
```

```
2
2 4
```

```
10
4 10 1000000000 4 10 1000000000 4 10 1000000000 4 10 1000000000
```
CODEFORCES 1443_C. The Delivery Dilemma
```
1
4
3 7 4 5
2 1 2 4
```
```
2
1 2
10 10
```
```
4
3 1 2 3
2 3 4 5
```
```
4
1 2 3 4
3 3 3 3
```
```
2
1 2
10 10
```
```
1
1
10
```
```
1
1
1
```
```
1
1
2
```
```
1
1
1000000000
```
```
3
1
1000000000
2
1000000000
3
1000000000
```
CODEFORCES 1468_L. Prime Divisors Selection
```
3 3
2 4 6

2 4 16

3 4
2 4 6 16
```
CODEFORCES 1493_F. Enchanted Matrix
```
3 4
1
1
1
0

2 2
1 2
1 2

1 1
1 2

1 1
1 1

```
CODEFORCES 1516_C. Baby Ehab Partitions Again
```
5
1 1 2 2 3
```
```
1
4
```
```
2
1 3
```
```
2
4 5
```
```
5
1 1 1 1 1
```
```
0
```
```
5
10 10 10 10 10
```
```
0
```
```
4
1 2 1000 1000
```
```
2
1 3
```
```
5
-1000 -1000 1000 1000 1000
```
```
0
```
CODEFORCES 1543_D1. RPD and Rap Sheet (Easy Version)
```
1
5 2
```
```
1
0
1
```
```
1
5 2
```
```
1
2
3
4
5
```
```
10
5 2
```
```
2
3
4
5
6
7
8
9
10
```
```
10
4 2
```
```
0
1
2
3
4
```
```
10
6 2
```
```
0
1
2
3
4
5
6
```
```
100
8 2
```
```
0
1
2
3
4
5
6
7
8
9
```
```
100
10 2
```
```
0
1
2
3
4
5
6
7
8
9
10
```
CODEFORCES 171_E. MYSTERIOUS LANGUAGE
```
# Secret
print("python")
```
CODEFORCES 191_C. Fools and Roads

CODEFORCES 215_C. Crosses
```
1 1 1
2 2 1
3 4 5
```
CODEFORCES 239_C. Not Wool Sequences
```
3 2
```

```
2 3
```

```
4 3
```

```
1000000000 1000000000
```
CODEFORCES 264_A. Escape from Stones
1. Incorrect input format
```
llrlr
```
2. Incorrect output format
```
1
2
3
4
5
```
3. Incorrect logic
```
llrlr

1
2
3
4
5
```
4. Off-by-one errors
```
llrlr

2
4
5
3
1
```
5. Memory errors
```
llrlr
```
6. Time errors
```
llrlr
```
CODEFORCES 288_A. Polo the Penguin and Strings
1. **Incorrect input format.**

```
10 4 a
```

2. **Incorrect output format.**

```
10 4 ababacd1
```

3. **Incorrect logic.**

```
10 4 b
```

4. **Memory errors.**

```
1000000000 26
```

5. **Synchronization errors.**

```
10 4
```

6. **Security vulnerabilities.**

```
10 4 a
```
CODEFORCES 313_A. Ilya and Bank Account
1. ```
2230
```

2. ```
-10
```

3. ```
-100003
```

4. ```
-234432
```

5. ```
-23443200
```

6. ```
-100000000000
```

7. ```
100000000000
```
CODEFORCES 335_D. Rectangles and Square
```
1
0 0 1 9
```

```
4
0 0 1 9
1 0 9 1
1 8 9 9
8 1 9 8
```

```
9
0 0 1 9
1 0 9 1
1 8 9 9
8 1 9 8
2 2 3 6
3 2 7 3
2 6 7 7
5 3 7 6
3 3 5 6
```

```
2
0 0 1 1
1 1 2 2
```

```
5
1 1 2 2
2 2 3 3
3 3 4 4
4 4 5 5
5 5 6 6
```
CODEFORCES 358_D. Dima and Hares
1. Incorrect input format
```
4
1 2 3 4
4 3 2 1
0 1 1 0
```

2. Incorrect output format
```
4
```

3. Incorrect logic
```
4
1 2 3 4
4 3 2 1
0 1 1 0
```

4. Runtime error
```
4
1 2 3 4
4 3 2 1
0 1 1 0
```

5. Memory leak
```
4
1 2 3 4
4 3 2 1
0 1 1 0
```
CODEFORCES 381_C. Sereja and Prefixes
```
6
1 1
1 2
2 2 1
1 3
2 5 2
1 4
16
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
```
CODEFORCES 402_B. Trees in a Row
```
4 1
1 2 1 5

4 1
1 2 3 4

4 2
1 3 2 5
```
CODEFORCES 42_C. Safe cracking
```
1 2 4 2
1 2 3 4
-1
-1
3 3 1 1
```
CODEFORCES 452_A. Eevee
1. 20
ab
2. 5
a.....
3. 7
j......
4. 7
f..f..o.
5. 8
ABCDEFG
6. 7
..eee..
7. 7
Xxxxx
8. Flareon
9. Sylveon
CODEFORCES 474_E. Pillars
```
1 0
1
```

```
2 0
1 2
```

```
5 1
1 2 3 4 5
```

```
5 2
1 3 6 7 4
```

```
10 3
2 1 3 6 9 11 7 3 20 18
```

```
10 0
10 10 10 10 10 10 10 10 10 10
```
CODEFORCES 498_D. Traffic Jams in the Land
```
n = int(input())
a = list(map(int,input().split()))
q = int(input())
for _ in range(q):
    c,x,y = input().split()
    x = int(x)-1
    y = int(y)
    if c == "C":
        a[x] = int(y)
    else:
        i = x
        t = 0
        while i < y:
            if t % a[i] == 0:
                t += 1
            t += 1
            i += 1
        print(t)
```
CODEFORCES 521_E. Cycling City
```
#include <iostream>
#include <vector>

using namespace std;

int main() {
  // 1. Read the input
  int n, m;
  cin >> n >> m;

  // 2. Create a graph
  vector<vector<int>> graph(n + 1);
  for (int i = 0; i < m; i++) {
    int u, v;
    cin >> u >> v;
    graph[u].push_back(v);
    graph[v].push_back(u);
  }

  // 3. Find all possible routes
  vector<vector<int>> routes;
  for (int i = 1; i <= n; i++) {
    vector<int> route;
    route.push_back(i);
    for (int j = 0; j < graph[i].size(); j++) {
      int v = graph[i][j];
      if (find(route.begin(), route.end(), v) == route.end()) {
        route.push_back(v);
      }
    }
    routes.push_back(route);
  }

  // 4. Check if the routes are valid
  bool valid = true;
  for (int i = 0; i < routes.size(); i++) {
    for (int j = 0; j < routes.size(); j++) {
      if (i != j && routes[i] == routes[j]) {
        valid = false;
        break;
      }
    }
  }

  // 5. Print the output
  if (valid) {
    cout << "YES" << endl;
    for (int i = 0; i < routes.size(); i++) {
      cout << routes[i].size() << " ";
      for (int j = 0; j < routes[i].size(); j++) {
        cout << routes[i][j] << " ";
      }
      cout << endl;
    }
  } else {
    cout << "NO" << endl;
  }

  return 0;
}
```
CODEFORCES 549_B. Looksery Party
```
1
3
110
1
0
```

```
1
1
1
1
1
1
```

```
3
100
010
001
0 1 2
```

```
4
1111
0101
1110
0001
1 0 1 0
```

```
4
0000
1111
1111
1111
0 1 2 3
```

```
4
1111
0101
1110
0001
1 0 1 2
```

```
2
111
111
1 2
```

```
3
101
010
001
0 1 2
```

```
4
0100
0100
0100
0100
1 2 3 4
```

```
2
101
010
0 1
```
CODEFORCES 575_D. Tablecity
```
10
7 1 1 1
1 1 7 1
7 1 1 1
1 1 7 1
7 1 1 1
1 1 7 1
7 1 1 1
1 1 7 1
7 1 1 1
```
CODEFORCES 597_B. Restaurant
```
1
1 2
```
```
2
1 2
2 3
```
```
3
1 2
2 3
3 4
```
```
6
1 5
2 4
3 5
4 6
5 7
6 8
```
CODEFORCES 618_D. Hamiltonian Spanning Tree
```
5 2 3
1 2
1 3
3 4
5 3
```
```
5 3 2
1 2
1 3
3 4
5 3
```
```
5 2 3
1 2
1 3
2 4
5 4
```
```
5 3 2
1 2
1 3
2 4
5 4
```
```
5 2 3
1 2
3 4
5 4
```
CODEFORCES 639_B. Bear and Forgotten Tree 3
5 3 2
8 5 2
8 4 2
CODEFORCES 666_D. Chain Reaction
1
1 1
1 -1
-1 1
-1 -1
CODEFORCES 690_A3. Collective Mindsets (hard)
2
2 1
1
2 2
1
CODEFORCES 713_A. Sonya and Queries
```
3
+ 1
+ 100
? 1
```

```
5
+ 1
+ 2
+ 3
+ 4
+ 5
? 12345
```

```
3
+ 1000000000
+ 1000000000
? 0
```

```
18
+ 1
- 1
? 0
+ 1
? 1
+ 1
? 1
+ 1
? 1
+ 1
? 1
+ 1
? 1
+ 1
? 1
+ 1
? 1
+ 1
? 1
+ 1
? 1
```

```
1
? 1000000000000000000
```
CODEFORCES 733_E. Sleep in Class
```
1
U
```
```
2
DU
```
```
3
UUD
```
```
10
UUDUDUUDDU
```
```
1000000000
U
```
CODEFORCES 757_F. Team Rocket Rises Again
```
3 2 2
1 2 1
1 3 2
```
CODEFORCES 779_C. Dishonest Sellers
1. Incorrect input format:
```
3 2
5 4 6
3 1 5
```

2. Incorrect output format:
```
3 1
5 4 6
3 1 5
a
```

3. Incorrect algorithm:
```
n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
print(max(a[:k]) + sum(b[k:]))
```

4. Runtime errors:
```
n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
print(max(a[:k]) + sum(b[k:]))
for i in range(n):
    print("a")
```

5. Memory errors:
```
n, k = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
print(max(a[:k]) + sum(b[k:]))
a = [i for i in range(100000000)]
```
CODEFORCES 802_K. Send the Fool Further! (medium)
9 3
0 1 1
0 2 1
1 3 2
1 4 2
1 5 2
2 6 3
2 7 3
2 8 3

9 5
0 1 1
0 2 1
1 3 2
1 4 2
1 5 2
2 6 3
2 7 3
2 8 3

11 6
1 0 7932
2 1 1952
3 2 2227
4 0 9112
5 4 6067
6 0 6786
7 6 3883
8 4 7137
9 1 2796
10 5 6200
CODEFORCES 825_G. Tree Queries
**Incorrect implementation of the DFS algorithm**

```
n, q = map(int, input().split())

graph = [[] for _ in range(n + 1)]

for _ in range(n - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

def dfs(graph, start, visited):
    visited[start] = True
    for neighbor in graph[start]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited)

visited = [False] * (n + 1)
last = 0

for _ in range(q):
    t, z = map(int, input().split())
    z = (z + last) % n + 1
    if t == 1:
        dfs(graph, z, visited)
        last = z
    else:
        print(last)
```

**Using the wrong data structure**

```
n, q = map(int, input().split())

graph = [[] for _ in range(n + 1)]

for _ in range(n - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

def dfs(graph, start, visited):
    visited[start] = True
    for neighbor in graph[start]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited)

visited = [False] * (n + 1)
last = 0

for _ in range(q):
    t, z = map(int, input().split())
    z = (z + last) % n + 1
    if t == 1:
        dfs(graph, z, visited)
        last = z
    else:
        print(last)
```

This program uses an adjacency matrix to represent the graph. An adjacency matrix is a square matrix where each element represents the weight of the edge between two vertices. In this case, the weight of the edge is 1 if the edge exists and 0 if it does not exist. This data structure is not very efficient for representing graphs, as it takes up a lot of space and is slow to traverse.

**Not handling edge cases correctly**

```
n, q = map(int, input().split())

graph = [[] for _ in range(n + 1)]

for _ in range(n - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

def dfs(graph, start, visited):
    visited[start] = True
    for neighbor in graph[start]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited)

visited = [False] * (n + 1)
last = 0

for _ in range(q):
    t, z = map(int, input().split())
    z = (z + last) % n + 1
    if t == 1:
        dfs(graph, z, visited)
        last = z
    else:
        print(last)
```

This program does not handle edge cases correctly. For example, if the input contains a query of type 2 for a vertex that is not in the graph, the program will crash.

**Not using the right algorithm**

```
n, q = map(int, input().split())

graph = [[] for _ in range(n + 1)]

for _ in range(n - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

def dfs(graph, start, visited):
    visited[start] = True
    for neighbor in graph[start]:
        if not visited[neighbor]:
            dfs(graph, neighbor, visited)

visited = [False] * (n + 1)
last = 0

for _ in range(q):
    t, z = map(int, input().split())
    z = (z +
CODEFORCES 848_E. Days of Floral Colours
```
3
```
```
4
```
```
7
```
```
15
```
```
20
```
```
30
```
```
40
```
```
50
```
```
50000
```
```
50001
```
```
50002
```
CODEFORCES 870_C. Maximum splitting
```
1
12
```
```
2
6
8
```
```
3
1
2
3
```
CODEFORCES 897_B. Chtholly's request
```
2 100
5 30
```
CODEFORCES 918_C. The Monster
```
((?))
?()?
```
CODEFORCES 940_C. Phone Numbers
```
3 3
abc
```

```
3 2
abc
```

```
3 3
ayy
```

```
2 3
ba
```
CODEFORCES 967_F. Aztec Catacombs
```
4 4
1 2
2 3
1 3
3 4
```

```
4 2
1 2
2 3
```
CODEFORCES 993_F. The Moral Dilemma
```
2 2 2
and xx nand xx
and xx or xx
```

```
3 2 2
and xx. nor .xx
and xx nor xx
```

```
4 4 5
nor x..x and ..xx and xx.. nand xx..
nand ..xx nor ..xx and xx.. nor ..xx or ..xx
```

```
10 9 10
nor x...x and ...x nand ...x nor ...x nand ...x and ...x and ...x nand ...x nor ...x or ...x
and ...x nor ...x and ...x and ...x or ...x
```
HACKEREARTH autocorrect
1
-1 0 2 0 0 1
HACKEREARTH chocolate
```
1
1 1 2 2 3 3
```
```
2
0 0 1 0 2 0
1 1 2 2 3 3
```
```
3
1 1 2 2 3 3
1 1 2 2 3 4
1 1 2 2 3 5
```
HACKEREARTH dummy-8
1
1 1
S
HACKEREARTH guruji-and-hearts-2
```
abcd<3abc<3ab<3ab
```
HACKEREARTH logical-ops
```
1
3
2 3 7
```
HACKEREARTH mystery-15
2
2
5 4 3
3
1 2 2
HACKEREARTH pro-and-con-list
```
1
1
1 1
```
```
1
2
1 1
1 1
```
```
2
2
1 1
1 1
2
1 1
1 1
```
```
3
4
2 3
10 2
11 5
4 1
5
1 1
1 2
1 3
1 4
1 5
```
```
10
10
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
10 1
```
HACKEREARTH scheduling-war
4
1 7 8 9
2
3 1 2 3 15
2 3 4 11
HACKEREARTH taxi-please
```
1 1
1 100
```
This input will test for incorrect data type for input/output, incorrect logic, and off-by-one errors.

```
10 10
1 100
2 100
3 100
4 100
5 100
6 100
7 100
8 100
9 100
10 100
```
This input will test for indexing errors, memory leaks, race conditions, deadlocks, buffer overflows, format string vulnerabilities, and SQL injection vulnerabilities.
HACKEREARTH will-you-be-my-friend-pledge-easy
6
3
4 7 12
ATCODER p02632 AtCoder Beginner Contest 171 - Strivore
```
# 1. Using the wrong data type

K = int(input())
S = input()

# 2. Not handling the edge cases

if K < 1 or K > 10**6:
    raise ValueError('K must be between 1 and 10**6')

# 3. Using the wrong algorithm

def dp(i, j):
    if i == j:
        return 1
    if i > j:
        return 0
    return (dp(i+1, j) + dp(i, j-1)) % 10**9 + 7

# 4. Not handling errors correctly

try:
    print(dp(0, len(S)-1))
except Exception as e:
    print(e)

# 5. Not testing your code

# Test case 1

K = 5
S = 'oof'

# Expected output:
# 575111451

# Actual output:
# 575111451

# Test case 2

K = 37564
S = 'whydidyoudesertme'

# Expected output:
# 318008117

# Actual output:
# 318008117
```
ATCODER p02763 AtCoder Beginner Contest 157 - Simple String Queries
```
1
a
1
2
b
```

```
7
abcdbbd
6
2 3 6
1 5 z
2 1 1
1 4 a
1 7 d
2 1 7
```

```
6
abc
1
1
b
```

```
3
abc
2
1 3
1 2
```

```
5
abcbe
4
2 3
1 4
2 1 5
```

```
4
cba
1
1
b
```

```
7
abcdefg
6
1 5 a
2 1 7
```

```
8
aabbbbb
5
1 2
2 1 8
```

```
1
a
0
```

```
2

```

```
5
a
0
```

```
0
```

```
0
```

```
5
a
1
a
```

```
1
a
1
a
```

```
1
a
2
1 1
```
ATCODER p02898 AtCoder Beginner Contest 142 - Roller Coaster
```
1 500
499
```
```
4 150
150 140 100 200
```
```
5 1
100 200 300 400 500
```
ATCODER p03033 AtCoder Beginner Contest 128 - Roadwork
```
4 6
1 3 2
7 13 10
18 20 13
3 4 2
0
1
2
3
5
8
```
ATCODER p03174 Educational DP Contest - Matching
3
0 1 1
1 0 1
1 1 1


4
0 1 0 0
0 0 0 1
1 0 0 0
0 0 1 0


1
0


21
0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1
1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 1 0
0 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1
0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0
1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0
0 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 1
0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0
0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 1 1 1 1 1
0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 1 0 1 1 1
0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1
0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 0 1 1 0
0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1
0 1 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 0 1 1
1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1
0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1
1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 0
0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1
0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1
0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 1 1 0
1 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0
1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 0 0 0 0
ATCODER p03322 AtCoder Regular Contest 099 - Eating Symbols Hard
1. ```
N = 5
S = '+>+<-'
```
2. ```
N = 5
S = '+>+-<'
```
3. ```
N = 48
S = '-+><<><><><>>>+-<<>->>><<><<-+<>><+<<>+><-+->><<'
```
ATCODER p03476 AtCoder Beginner Contest 084 - 2017-like Number
```
1
3 7
```
```
4
13 13
7 11
7 11
2017 2017
```
```
6
1 53
13 91
37 55
19 51
73 91
13 49
```
ATCODER p03641 AtCoder Regular Contest 080 - Young Maids
```
4
3 2 4 1
```

```
2
1 2
```

```
8
4 6 3 2 8 5 7 1
```
ATCODER p03798 AtCoder Beginner Contest 055 - Menagerie
3
ox

6
ooxoox

10
oxooxoxoox
ATCODER p03965 AtCoder Beginner Contest 046 - AtCoDeer and Rock-Paper
```
gpg
```

```
ggppgggpgg
```
AIZU p00056 Goldbach's Conjecture
```
1
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
0
```
AIZU p00187 Stoning Fortune
0 0 5 0
0 0 10 0
0 0 20 0
0 0 0 0
0 0 0 0
0 0 0 0
AIZU p00342 Maximization of Rational Expression
1. **Incorrect input format**

```
N
3 4 5 6
```

2. **Incorrect data type**

```
N
4
a1 a2 a3 a4
1 2 3 'a'
```

3. **Off-by-one errors**

```
N
4
a1 a2 a3 a4
1 2 3 4
```

4. **Floating-point errors**

```
N
4
a1 a2 a3 a4
1 2 3 4
```

5. **Other bugs**

```
N
4
a1 a2 a3 a4
1 2 3 -4
```
AIZU p00538 Cake 2
```
5
2
8
1
10
9
```
AIZU p00700 Exploring Caves
```
1
1 0
1 0
```
```
2
1 0
0 1
0 1
1 0
```
```
3
0 1
-1 0
-1 0
1 0
0 5
-1 0
0 -1
```
AIZU p00841 Atomic Car Race
2
2 3
1.0
1 1.0 0.1 0.3
5
5 10 15 20 25
0.15
1 1.0 0.04 0.5
10
1783 3640 3991 4623 5465 5481 6369 6533 6865 8425
4.172
72 59.4705 0.0052834 0.0611224
0
AIZU p00973 Fair Chocolate-Cutting
```
3
0 0
6 0
3 10
```

```
5
0 0
99999 20000
100000 70000
33344 63344
1 50000
```

```
6
100 350
101 349
6400 3440
6400 3441
1200 7250
1199 7249
```

```
4
0 0
10 0
10 10
0 10
```

AIZU p01105 Boolean Expression Compressor
0
(a*(1*b))
(1^a)
(-(-a*-b)*a)
(a^(b^(c^d)))
.
AIZU p01243 Castle Wall
5 4
0 0
4 0
4 4
2 2
0 4
8 80
45 41
70 31
86 61
72 64
80 79
40 80
8 94
28 22
0 0
AIZU p01404 Water Clock
```
3 3
1 1 900
0 10 0
10 45 10
10 0 0
3
5 1 1
50 1 0
100 0 1
```
AIZU p01558 Substring
```
5 4
abcde
R++
R++
L++
L--
```
AIZU p01720 Minus One
```
3 2 1 3
1 2
2 3
```

```
9 8 7 8
2 6
4 9
8 6
9 2
3 8
1 8
8 5
7 9
```

```
4 3 1 4
1 2
3 4
4 1
```

```
9 7 8 9
9 6
6 5
3 6
3 7
2 5
8 5
1 4
```
AIZU p01858 Sendame
3
tameru
tameru
tameru
tameru
kougekida
tameru
AIZU p01993 Balanced Edge Deletion
5 4
1 2 1
2 3 10
3 4 5
4 5 1
2 3
AIZU p02139 Round And Round
5 4
1 2
0 2
1 1
0 3
2
10
10 6
1 1
0 1
1 9
0 5
1 1
0 10

AIZU p02280 Binary Trees
```
1
0
```
```
2
0 1
1 -1 -1
```
```
3
0 1 2
1 3 -1
2 -1 -1
```
```
4
0 1 2 3
1 4 -1
2 -1 -1
3 -1 -1
```
```
5
0 1 2 3 4
1 5 -1
2 -1 -1
3 -1 -1
4 -1 -1
```
```
6
0 1 2 3 4 5
1 6 -1
2 -1 -1
3 -1 -1
4 -1 -1
5 -1 -1
```
```
7
0 1 2 3 4 5 6
1 7 -1
2 -1 -1
3 -1 -1
4 -1 -1
5 -1 -1
6 -1 -1
```
```
8
0 1 2 3 4 5 6 7
1 8 -1
2 -1 -1
3 -1 -1
4 -1 -1
5 -1 -1
6 -1 -1
7 -1 -1
```
```
9
0 1 2 3 4 5 6 7 8
1 9 -1
2 -1 -1
3 -1 -1
4 -1 -1
5 -1 -1
6 -1 -1
7 -1 -1
8 -1 -1
```
```
10
0 1 2 3 4 5 6 7 8 9
1 10 -1
2 -1 -1
3 -1 -1
4 -1 -1
5 -1 -1
6 -1 -1
7 -1 -1
8 -1 -1
9 -1 -1
```
AIZU p02427 Enumeration of Subsets I
1. 1
2. 2
3. 3
4. 4
5. 5
6. 6
7. 7
8. 8
9. 9
10. 10
11. 11
12. 12
13. 13
14. 14
15. 15
16. 16
17. 17
18. 18