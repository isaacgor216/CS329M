CODECHEF cd1it2
1
1
10
101
CODECHEF cteams
```
1
5 10
```
```
2
2 3
1 7
```
```
4
2 3
1 7
5 5
3 1
```
```
5
2 3
1 7
5 5
3 1
8 15
```
```
6
2 3
1 7
5 5
3 1
8 15
9 10
```
CODECHEF hs08test
1. Incorrect input format
```
1 120.00
```
2. Insufficient funds
```
300 120.00
```
3. Bank charges
```
30 120.00
```
4. Floating-point rounding errors
```
4.5 100.00
```
5. Off-by-one errors
```
5 120.00
```
6. Other logic errors
```
-10 120.00
```
CODECHEF moves
```
3 2
4 3
5 3
0 0
```
CODECHEF resn05
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
CODECHEF twonim
```
1
5
1 1 1 1 1
```

```
2
2
1 1
3
2 3 1
```

```
3
4
1 1 2 3
4
2 3 3 3
5
3 3 3 3 3
```
CODEFORCES 1017_G. The Tree
```
8 10
1 2 1 2 5 4 5
1 2
3 2
3 1
1 1
1 1
3 5
3 7
3 4
2 2
3 5

8 11
1 1 2 3 3 6 6
1 1
1 1
1 3
3 2
3 4
3 6
3 7
2 3
1 6
3 7
3 6
```
CODEFORCES 1041_D. Glider
```
1 1000000000
```
```
1 1000000000
1000000000 1000000001
```
```
1 1000000000
1000000000 1000000001
1000000000 1000000002
```
```
10 1000000000
1000000000 1000000001
1000000000 1000000002
1000000000 1000000003
1000000000 1000000004
1000000000 1000000005
1000000000 1000000006
1000000000 1000000007
1000000000 1000000008
1000000000 1000000009
```
```
1 1000000000
1000000000 1000000001
1000000000 1000000002
1000000000 1000000003
1000000000 1000000004
1000000000 1000000005
1000000000 1000000006
1000000000 1000000007
1000000000 1000000008
1000000000 1000000009
1000000000 1000000010
```
```
1 1000000000
1000000000 1000000001
1000000000 1000000002
1000000000 1000000003
1000000000 1000000004
1000000000 1000000005
1000000000 1000000006
1000000000 1000000007
1000000000 1000000008
1000000000 1000000009
1000000000 1000000010
1000000000 1000000011
```
```
3 4
2 5
7 9
10 11
```
```
5 10
5 7
11 12
16 20
25 26
30 33
```
CODEFORCES 1064_C. Oh Those Palindromes
```
1
a
```
```
1
b
```
```
3
aaa
```
```
5
abba
```
```
16
gagadbcgghhchbdf
```
```
20
xyxyxyxyxyxyxyxyxyxyxyxyxyxyxy
```
CODEFORCES 1086_A. Connect Three
```
1 1
2 2
3 3

1 1
2 2
4 4
CODEFORCES 1106_A. Lunar New Year and Cross Counting
1. **Incorrect input format.**

```
1
X
```

This input is incorrect because it does not contain a positive integer.

2. **Incorrect output format.**

```
1.23
```

This output is incorrect because it is not an integer.

3. **Off-by-one error.**

```
5
....
.XXX.
.XXX.
.XXX.
....
```

This input contains one cross, but the output is 0.

4. **Memory leak.**

```
#include <stdio.h>

int main() {
    int n, i, j;
    scanf(" %d ", &n);
    int a[n][n];
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf(" %d ", &a[i][j]);
        }
    }
    return 0;
}
```

This program has a memory leak because it does not free the memory allocated for the array `a`.

5. **Race condition.**

```
#include <stdio.h>

int main() {
    int n, i, j;
    scanf(" %d ", &n);
    int a[n][n];
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf(" %d ", &a[i][j]);
        }
    }
    int count = 0;
    for (i = 1; i < n - 1; i++) {
        for (j = 1; j < n - 1; j++) {
            if (a[i][j] == 'X' && a[i - 1][j - 1] == 'X' && a[i - 1][j + 1] == 'X' && a[i + 1][j - 1] == 'X' && a[i + 1][j + 1] == 'X') {
                count++;
            }
        }
    }
    printf(" %d ", count);
    return 0;
}
```

This program has a race condition because it is not thread-safe.

6. **Deadlock.**

```
#include <stdio.h>

int main() {
    int n, i, j;
    scanf(" %d ", &n);
    int a[n][n];
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf(" %d ", &a[i][j]);
        }
    }
    int count = 0;
    for (i = 1; i < n - 1; i++) {
        for (j = 1; j < n - 1; j++) {
            if (a[i][j] == 'X' && a[i - 1][j - 1] == 'X' && a[i - 1][j + 1] == 'X' && a[i + 1][j - 1] == 'X' && a[i + 1][j + 1] == 'X') {
                if (i % 2 == 0) {
                    while (j < n - 1 && a[i][j + 1] == 'X') {
                        j++;
                    }
                    if (j == n - 1) {
                        count++;
                    }
                } else {
                    while (j > 0 && a[i][j - 1] == 'X') {
                        j--;
                    }
                    if (j == 0) {
                        count++;
                    }
                }
            }
        }
    }
    printf(" %d ", count);
    return 0;
}
```

This program has a deadlock because it is possible for the two threads to wait indefinitely for each other to release a lock.

7. **Stack overflow.**

```
#include <stdio.h>

CODEFORCES 1133_B. Preparation for International Women's Day
```
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    sort(a.begin(), a.end(), greater<int>());

    int ans = 0;
    int i = 0;
    while (i < n) {
        int j = i + 1;
        while (j < n && (a[i] + a[j]) % k == 0) {
            j++;
        }
        ans += j - i;
        i = j;
    }

    cout << ans << endl;

    return 0;
}
```

**Input 1:**

```
7 2
1 2 2 3 2 4 10
```

**Input 2:**

```
8 2
1 2 2 3 2 4 6 10
```

**Input 3:**

```
7 3
1 2 2 3 2 4 5
```
CODEFORCES 1153_E. Serval and Snake
```
3
3
0
0

0
0
```
CODEFORCES 1175_D. Array Splitting
```
5 2
-1 -2 5 -4 8

7 6
-3 0 -1 -2 -2 -4 -1

4 1
3 -1 6 0
```
CODEFORCES 1194_C. From S To T
```
1
a
a
b
```
```
2
a
aa
b
```
```
3
ab
acxb
cax
```
```
4
aaaa
aaabbcc
a
```
```
5
aaaa
aabbcc
ab
```
```
6
ab
baaa
aaaaa
```
CODEFORCES 1210_G. Mateusz and Escape Room
```
5
0 2 3
1 2 3
4 3 3
4 3 3
4 3 3
```
CODEFORCES 1231_F. Marcin and Training Camp
```
1
0
1
```

```
2
1 0
1 1
```

```
3
1 2 3
1 2 3
```

```
4
3 2 3 6
2 8 5 10
```

```
5
1 2 3 4 5
1 2 3 4 5
```
CODEFORCES 1252_I. Mission Possible
```
5 2 2 90 90
70 33
80 70
40 50 20
50 60 30
60 40 40
30 60 10
```
CODEFORCES 1276_B. Two Fairs
```
3
7 7 3 5
1 2
2 3
3 4
4 5
5 6
6 7
7 5
4 5 2 3
1 2
2 3
3 4
4 1
4 2
4 3 2 1
1 2
2 3
4 1
```
CODEFORCES 1296_C. Yet Another Walking Robot
```
1
5
LLDDR
```
CODEFORCES 131_C. The World is a Theatre
1. **Using the wrong data type:**

```
n, m, t = map(int, input().split())
```

2. **Incorrect calculation of the number of ways:**

```
n, m, t = map(int, input().split())
ways = (n - 3) * (m - 1) + (n - 4) * (m - 2)
print(ways)
```

3. **Off-by-one errors:**

```
n, m, t = map(int, input().split())
ways = (n - 3) * (m - 1) + (n - 4) * (m - 2) + 1
print(ways)
```

4. **Incorrect use of the input/output streams:**

```
n, m, t = input().split()
n, m, t = int(n), int(m), int(t)
ways = (n - 3) * (m - 1) + (n - 4) * (m - 2)
print(ways)
```

5. **Other bugs:**

```
n, m, t = map(int, input().split())
ways = (n - 3) * (m - 1) + (n - 4) * (m - 2)
print(ways, end=' ')
print(n, m, t)
```
CODEFORCES 1338_E. JYPnation
```
5
6
4
5
2
1
```
CODEFORCES 1360_D. Buying Shovels
1
8 7
2
8 1
1
6 10
999999733 999999732
999999733 999999733
CODEFORCES 1380_E. Merging Towers
```
10 3
1 2 3 4 5 6 7 8 9 10
1 2
2 3
```
CODEFORCES 1400_E. Clear the Multiset
```
1
10
```

```
5
1 0 1 0 1
```

```
6
1 1 1 1 1 1
```

```
5
1 2 3 4 5
```

```
10
1 1 1 2 2 2 3 3 3 4
```
CODEFORCES 1424_E. 5G Antenna Towers
```
10 10 3
4 2 2 3 2 3 3 2 3
3 3.5 2 4.5 2 4.5 3
4 7 8 7.5 8.5 8 8 7.5 9
5
2 3.5 0.5
3.3 2 0.4
5 2.5 0.5
7.5 8.5 0.5
3 7 0.5
```
CODEFORCES 1445_A. Array Rearrangment
```
1
3 4
1 2 3
1 1 2
```
```
2
2 6
1 4
2 5
```
```
4 4
1 2 3 4
1 2 3 4
```
```
1 5
5
```
CODEFORCES 146_A. Lucky Ticket
```
2
47

4
4738

4
4774

3
477

2
74

1
4
```
CODEFORCES 1495_C. Garden of the Sun
```
1
3 3
X.X
...
X.X
```

```
1
1 10
....X.X.X.
```

```
2
2 2
..
..
```

```
2
3 3
X.X
...
X.X
```

```
4
4 4
....
.X.X
....
.X.X
```

```
5
5 5
.X...
....X
.X...
.....
X.X.X
```

```
5
5 5
.X...
....X
.X...
.....
X.X.X
```

```
10
10 10
.................
.................
.................
.................
.................
.................
.................
.................
.................
.................
```
CODEFORCES 1517_H. Fly Around the World
```
1
3
0 1
0 1
0 1
1 1
1 1
-100 100
```
CODEFORCES 1545_F. AquaMoon and Potatoes
```
10 5
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5
5 1 2 3 4
10 5
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5
5 1 2 3 4
10 5
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5
5 1 2 3 4
2 10
```
CODEFORCES 173_A. Rock-Paper-Scissors
**Incorrect input format**

```
1
R
S
```

**Incorrect output format**

```
1 2
```

**Incorrect logic**

```
1
R
S
```

**Off-by-one errors**

```
1
R
S
```

**Memory leaks**

```
1
R
S
```

**Race conditions**

```
1
R
S
```

**Deadlocks**

```
1
R
S
```
CODEFORCES 193_B. Xor
```
3 2 1
7 7 7
8 8 8
1 2 3
1 3 2


3 2 0
1 1
1 1
1 -1
1 2


5 1 0
100 100 100 100 100
100 100 100 100 100
0 0 0 0 0
1 2 3 4 5
```
CODEFORCES 217_B. Blackboard Fibonacci
1. 2 1
2. 6 10
3. 4 5
4. 2 1
5. 2 1
6. 2 1
7. 2 1
CODEFORCES 241_A. Old Peykan
```
1 1
10
10

```

```
2 3
1 2
2 3 4

```

```
2 3
1 2
2 3 4

```

```
10 10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
```

```
100 100
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 265_E. Choosing Balls
```
# 1
6 3
1 -2 3 4 0 -1
1 2 1 2 1 1
5 1
-2 1
1 0

# 2
4 1
-3 6 -1 2
1 2 3 1
1 -1

# 3
6 2
1 2 3 4 5 6
1 1
2 1
```
CODEFORCES 289_E. Polo the Penguin and XOR operation
```
1
```
```
2
```
```
3
```
```
4
```
```
5
```
```
6
```
```
7
```
```
8
```
```
9
```
```
10
```
CODEFORCES 314_E. Sereja and Squares
1. ```
n = int(input())
s = input()
ans = 0
for i in range(n - 1):
    if s[i] != s[i + 1]:
        ans += 1
print(ans % 4294967296)
```
2. ```
n = int(input())
s = input()
print(0)
```
3. ```
n = int(input())
s = input()
ans = 0
for i in range(n):
    if s[i] == '?':
        ans += 1
print(ans % 4294967296)
```
4. ```
n = int(input())
s = input()
ans = 0
for i in range(n):
    if s[i] == '?':
        ans += 26
print(ans % 4294967296)
```
5. ```
n = int(input())
s = input()
print('1')
```
6. ```
n = int(input())
s = input()
print('1')
```
CODEFORCES 337_B. Routine Problem
1. Incorrect input format:
```
1 2 3 4
```

2. Incorrect output format:
```
1/3 4
```

3. Incorrect calculation of the empty screen ratio:
```
1 1 3 2
```

4. Incorrect use of floating-point numbers:
```
1 1 3.14 2
```

5. Incorrect use of the gcd() function:
```
1 1 3 2
```
CODEFORCES 35_D. Animals
```
3 4
1 1 1

3 6
1 1 1

2 1000000000
1000000000
```
CODEFORCES 383_B. Volcanoes
```
1
1
```
```
1
0
```
```
1
1
```
```
2
1 2
2 1
```
```
1
1
1
```
CODEFORCES 404_A. Valera and X
3
wsw
sws
wsw
CODEFORCES 431_B. Shower Line
```
0 0 0 0 9
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
7 0 0 0 0

0 43 21 18 2
3 0 21 11 65
5 2 0 1 4
54 62 12 0 99
87 64 81 33 0
```
CODEFORCES 453_D. Little Pony and Elements of Harmony
```
2 2 10000
4 1 2 3
0 1 0
```
CODEFORCES 476_B. Dreamoon and WiFi
```
++-+-
+-+-+


+-+-
+-??


+++
??-
```
CODEFORCES 49_C. Disposition
```
2

3
```
CODEFORCES 524_C. The Art of Dealing with ATM
```
# -*- coding: utf-8 -*-
"""
Created on Mon Dec 27 01:09:25 2021

@author: xiaoyu
"""


def main():

    n, k = map(int, input().split())
    bills = list(map(int, input().split()))
    q = int(input())

    ans = []
    for i in range(q):
        x = int(input())
        pos = bisect.bisect_right(bills, x)
        if pos <= k:
            ans.append(pos)
        else:
            ans.append(-1)

    print(*ans)


if __name__ == '__main__':
    main()

```
CODEFORCES 54_C. First Digit Law
```
1
1 2
50
```
```
2
1 2
9 11
50
```
```
1
1 2
200
```
```
1
1 2
100
```
CODEFORCES 576_D. Flights for Regular Customers
```
3 2
1 2 0
2 3 1

```

```
2 1
1 2 100500

```

```
3 3
2 1 0
2 3 6
1 2 0
```

```
4 4
1 2 0
2 3 0
3 4 0
4 1 0
```

```
3 5
1 2 0
1 3 1
2 3 0
3 2 0
```
CODEFORCES 599_B. Spongebob and Joke
```
3 3
3 2 1
1 2 3

3 3
1 1 1
1 1 1

3 3
1 2 1
3 3 3
```
CODEFORCES 620_A. Professor GukiZ's Robot
```
0 0
4 5

-100 100
100 -100

-100 -100
100 100

0 0
0 0

-100 -100
-100 -101
```
CODEFORCES 63_E. Sweets Game
```
. . .
. . O .
. . O O .
. . . .
. . . .
```

```
O . .
. . . .
. . . .
. . . .
. . . .
```

```
. . .
. . . .
. . . .
. . . .
. . . .
```
CODEFORCES 669_C. Little Artem and Matrix
```
2 2 6
2 1
2 2
3 1 1 1
3 2 2 2
3 1 2 8
3 2 1 8
```
CODEFORCES 690_D3. The Wall (hard)
```
1 1 1
1 2 2
1 2 3
3 2 2
5 4 9
40 37 65
```
CODEFORCES 714_E. Sonya and Problem Wihtout a Legend
```
1
1

5
1 2 3 4 5

7
2 1 5 11 5 9 11

5
5 4 3 2 1
```
CODEFORCES 735_B. Urbanization
```
# 2 2 1
# 1 4

# 3 2 1
# 1 4 2

# 4 2 1
# 1 4 2 3

# 3 1 1
# 1 2 3
```
CODEFORCES 75_B. Facetook Priority Wall
1. ```
john
3
john posted on alice's wall
alice commented on john's post
bob likes john's post
```

2. ```
a
1
likes likes posted's post
```

3. ```
john
1
posted posted's wall
```

4. ```
john
0
```

5. ```
john
2
john posted on alice's wall
alice commented on john's post
```
CODEFORCES 780_A. Andryusha and Socks
```
1
1
```
```
3
2 1 1 3 2 3
```
```
4
1 3 2 4 4 3 2 1
```
```
5
1 2 3 4 5 5 4 3 2 1
```
```
10
1 2 3 4 5 6 7 8 9 10 10 9 8 7 6 5 4 3 2 1
```
CODEFORCES 803_E. Roma and Poker
```
# -*- coding: utf-8 -*-
"""
Created on Wed May  4 11:46:59 2022

@author: zzh
"""

n,k=map(int,input().split())
s=input()

win=0
draw=0
lose=0

for i in range(n):
    if s[i]=='W':
        win+=1
    elif s[i]=='L':
        lose+=1
    else:
        draw+=1

if win-lose==k:
    if draw==0:
        print('NO')
    else:
        s=s.replace('?','D')
        print(s)
else:
    if win-lose>k and draw>=k:
        print('NO')
    elif win-lose<k and draw>=k:
        print('NO')
    else:
        if win-lose>k:
            s=s.replace('?','L')
        elif win-lose<k:
            s=s.replace('?','W')
        print(s)
```
CODEFORCES 828_C. String Reconstruction
1. ```
3
a 4 1 3 5 7
ab 2 1 5
ca 1 4
```

2. ```
1
a 1 3
```

3. ```
3
ab 1 1
aba 1 3
ab 2 3 5
```
CODEFORCES 84_D. Doctor

CODEFORCES 873_A. Chores
```
4 2 2
3 6 7 10
```
CODEFORCES 898_F. Restoring the Expression
```
099

199100

123123123456456456579579579

12345168
```
CODEFORCES 91_A. Newspaper Headline
```
abc
xyz

abc
dabc

abcabc
abc

abcabcabcabc
abc
```
CODEFORCES 946_F. Fibonacci String Subsequences
```
# 946_F. Fibonacci String Subsequences

from math import sqrt


def fibonacci(n):
    return ((((1 + sqrt(5)) / 2) ** n) - (((1 - sqrt(5)) / 2) ** n)) / sqrt(5)


def cost(s):
    n = len(s)
    return (n - len(s)) * cost(s) + count(s)


def count(s):
    n = len(s)
    count = 0
    for i in range(n):
        if s[i] == '1':
            count += 1
    return count


def solve():
    n, x = map(int, input().split())
    s = input()
    ans = 0
    for i in range(n - x):
        ans = ans + cost(s[i:i + x])
    print(ans % 1000000007)


if __name__ == "__main__":
    solve()
```

**Input 1:**

```
2 4
11
```

**Input 2:**

```
10 100
1010101010
```

**Input 3:**

```
100 1000
1111111111111111111111111111111111111111111111111111111111111111
```
CODEFORCES 975_D. Ghosts
```
4 1 1
1 -1 -1
2 1 1
3 1 1
4 -1 -1

3 1 0
-1 1 0
0 0 -1
1 -1 -2

3 1 0
0 0 0
1 0 0
2 0 0
```
CODEFORCES 995_C. Leaving the Bar
```
1
-1000000 1000000
```

```
2
1 0
0 1
```

```
4
-1000000 1000000
1000000 -1000000
-1000000 -1000000
1000000 1000000
```
HACKEREARTH bajirao-returns
```
1
1
```

```
2
1 1
1 1
```

```
3
1 2 3
3 1 2
1 4 1
```

```
4
1 2 3 4
3 1 2 4
1 4 1 2
4 1 2 3
```

```
5
1 2 3 4 5
5 1 2 3 4
1 5 1 2 3
5 1 2 3 4
1 5 1 2 3
```
HACKEREARTH chris-angle
1. ```
1
90
```
2. ```
1
180
```
3. ```
1
87
```
4. ```
1
720
```
5. ```
1
4
```
HACKEREARTH eggs-and-building
1
100 2
104 3
HACKEREARTH have-a-nice-day
1
3
1 2 3
1 4 2

HACKEREARTH lucky-kitties
3
74
HACKEREARTH name-string-1
```
1
1 2 5
```
HACKEREARTH problem-7
```
#Incorrect input format
1

#Incorrect output format
2
print("5")

#Incorrect calculation of the number of triangles
3
def triangle(n):
  return n * (n + 1) // 2

print(triangle(3))

#Memory issues
4
def triangle(n):
  triangles = []
  for i in range(n):
    for j in range(i):
      triangles.append((i, j))
  return len(triangles)

print(triangle(10000000))

#Time complexity
5
def triangle(n):
  return n * (n + 1) // 2

for i in range(10000000):
  triangle(i)
```
HACKEREARTH seven-segment-display
1
12345678910
HACKEREARTH the-art-of-security-4
1
1
HACKEREARTH xenny-and-bitsums
1
1 3
ATCODER p02642 AtCoder Beginner Contest 170 - Not Divisible
```
5
24 11 8 3 16

4
5 5 5 5

10
33 18 45 28 8 19 89 86 2 4
```
ATCODER p02772 AtCoder Beginner Contest 155 - Papers  Please
1. ```
5
6 7 9 10 31
```

2. ```
3
28 27 24
```

3. ```
0
```

4. ```
1
1
```

5. ```
10
1 2 3 4 5 6 7 8 9 10
```
ATCODER p02907 AtCoder Grand Contest 038 - Gachapon
```
3
2 2
1 1
```

```
3
1 3
2 2
3 1
```

```
15
29 3
78 69
19 15
82 14
9 120
14 51
3 7
6 14
28 4
13 12
1 5
32 30
49 24
35 23
2 9
```
ATCODER p03042 AtCoder Beginner Contest 126 - YYMM or MMYY
1. 1234
2. 1905
3. 0112
4. 1700
5. 1000
6. 5000
7. 9999
8. a100
9. 0000
10. 1111
ATCODER p03184 Educational DP Contest - Grid 2
```
3 4 2
2 2
1 4
```

```
5 2 2
2 1
4 2
```

```
5 5 4
3 1
3 5
1 3
5 3
```

```
100000 100000 1
50000 50000
```
ATCODER p03331 AtCoder Grand Contest 025 - Digits Sum
```
15

100000
```
ATCODER p03490 AtCoder Regular Contest 087 - FT Robot
```
FTFFTFFF
4 2
```

```
FTFFTFFF
-2 -2
```

```
FF
1 0
```

```
TF
1 0
```

```
FFTTFF
0 0
```

```
TTTT
1 0
ATCODER p03652 AtCoder Grand Contest 018 - Sports Festival
4 5
5 1 3 4 2
2 5 3 1 4
2 3 1 4 5
2 5 4 3 1

```
1 2
2 1
3 3
```
ATCODER p03808 AtCoder Grand Contest 010 - Boxes
1. ```
N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    if (A[i] - 1) % N == 0:
        print("YES")
        break
else:
    print("NO")
```
2. ```
N = int(input())
A = list(map(int, input().split()))

for i in range(N):
    A[i] -= 1
    if A[i] < 0:
        print("NO")
        break
else:
    print("YES")
```
3. ```
N = int(input())
A = list(map(int, input().split()))

ans = True
for i in range(N):
    if A[i] % N != 0:
        ans = False
        break

if ans:
    print("YES")
else:
    print("NO")
```
4. ```
N = int(input())
A = list(map(int, input().split()))

ans = True
for i in range(N):
    A[i] -= 1
    if A[i] < 0:
        ans = False
        break

if ans:
    print("YES")
else:
    print("NO")
```
ATCODER p03976 Kyoto University Programming Contest 2016 - Problem Committee
```
2 3
A
B
1
```
ATCODER
Input



Output
AIZU p00065 Trading
```
123,10
56,12
34,14

123,3
56,4
123,5
```
AIZU p00197 Greatest Common Divisor: Euclidean Algorithm
```
# 1. Incorrect implementation of the Euclidean algorithm.

# 2. Using the wrong data type.

# 3. Off-by-one errors.

# 4. Incorrect use of variables.

# 5. Incorrect indentation.

# 6. Incorrect error handling.

# 7. Incorrect testing.

1 1
0 0
AIZU p00351 Evening
0 2

2 2 3
1 2 2
1 2 1
2 2 2
1 2 3
-1 1 2
0 1 1
0 2 1
-1 1 1
AIZU p00547 Food stalls
```
5 5
..483
.59.9
3.866
79...
4.8..
```
AIZU p00711 Red and Black
```
6 9
....#.
.....#
......
......
......
......
......
#@...#
.#..#.
11 9
.#.........
.#.#######.
.#.#.....#.
.#.#.###.#.
.#.#..@#.#.
.#.#####.#.
.#.......#.
.#########.
...........
11 6
..#..#..#..
..#..#..#..
..#..#..###
..#..#..#@.
..#..#..#..
..#..#..#..
7 7
..#.#..
..#.#..
###.###
...@...
###.###
..#.#..
..#.#..
0 0
```
AIZU p00850 Power Calculus
```
1
-10
1000000
999999
0
```
AIZU p00982 Twin Trees Bros.
3
0 0 0
1 0 0
3 0 0
1 2
2 3
0 0 0
0 2 2
0 3 3
4 5
5 6
AIZU p01114 Equilateral Triangular Fence
4
1
0 1
1 2
-1 2
2 1
4
1
1 1
2 2
1 3
1 4
4
1
1 1
2 2
3 1
4 1
4
1
1 2
2 1
3 2
4 2
5
2
0 1
0 2
0 3
0 4
0 5
6
3
0 2
2 2
1 1
0 3
2 3
1 4
0
AIZU p01252 Alice and Bob
1
3 3 7 7
2 2 8 2
2
2 5 5 9
6 1 9 5
1 5 10 5
2
2 1 3 2
2 3 3 4
1 1 4 4
1
3 3 7 7
1 5 9 5
1
3 3 7 7
1 5 8 5
1
3 3 7 7
1 5 10 5
0
AIZU p01413 Quest of Merchant
1 2 100 20
alfalfa 10 10
carrot 5 10
1 1 6
carrot 4
1 -3 0
alfalfa 5
AIZU p01567 Presentation
```
(()())
((()())(((()())(()()))()))
(((()())(()()))(()()))
((()(()()))((()(()()))()))
(()())
```
AIZU p01729 Air Pollution
```
3
3 -1 4
2 1 3

3
3 -1 4
2 1 5

4
3 -1 -1 3
1 1 1 1
```
AIZU p01867 AddMul
3
a+a
AIZU p02004 GuruGuru
RRRRLLLLRRRR

RLLRLLLLRRRLLLRRR

LR

RRLRRLRRRRLRRLRRRRLRRLRRRRLRRLRR
AIZU p02148 Tousa Tree
```
2 3
0 1
1 2
1 1 0 0 1
0 0 1
1 1 0 0 1
```
AIZU p02289 Priority Queue
```
# p02289 Priority Queue

class PriorityQueue:
    def __init__(self):
        self.heap = []

    def insert(self, k):
        self.heap.append(k)
        self._siftup(len(self.heap) - 1)

    def extractMax(self):
        max_val = self.heap[0]
        self.heap[0] = self.heap[-1]
        del self.heap[-1]
        self._siftdown(0)
        return max_val

    def _siftup(self, i):
        while i > 0 and self.heap[(i - 1) // 2] < self.heap[i]:
            self.heap[(i - 1) // 2], self.heap[i] = self.heap[i], self.heap[(i - 1) // 2]
            i = (i - 1) // 2

    def _siftdown(self, i):
        while 2 * i + 1 < len(self.heap):
            j = 2 * i + 1
            if j + 1 < len(self.heap) and self.heap[j + 1] > self.heap[j]:
                j += 1
            if self.heap[i] < self.heap[j]:
                self.heap[i], self.heap[j] = self.heap[j], self.heap[i]
                i = j
            else:
                break


def main():
    pq = PriorityQueue()
    while True:
        op = input()
        if op == "end":
            break
        elif op == "insert":
            k = int(input())
            pq.insert(k)
        else:
            print(pq.extractMax())


if __name__ == "__main__":
    main()
```

#### Invalid input
```
insert 1
insert 2
insert -1
extract
```

#### Duplicate input
```
insert 1
insert 1
extract
```

#### Insufficient space
```
insert 1000000000
```
AIZU p02436 Queue
1. ```
1 1
0 0 1
```
2. ```
1 1
0 0 1
1 0
```
3. ```
1 1
0 0 1
2 0
```
4. ```
2 3
0 0 1
0 1 2
1 1
```
5. ```
2 4
0 0 1
0 0 2
1 0
1 1
```
6. ```
3 9
0 0 1
0 0 2
0 0 3
0 2 4
0 2 5
1 0
1 2
2 0
1 0
```