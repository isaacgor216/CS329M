CODECHEF appuzzle
```
1
3 8 55
```
CODECHEF cielrcpt
```
1
10
```
CODECHEF exebit01
```
1
0
```
CODECHEF lastride
```
1
500000000 500000001
```
CODECHEF pd32
```
1
0
10 100
1234567890 9876543210
0 0
```
CODECHEF stfm
```
5 7
1 2 3 4 5
```
CODEFORCES 1008_D. Pave the Parallelepiped
```
1
1 1 1
```

```
1
1 6 1
```

```
1
2 2 2
```

```
1
100 100 100
```

```
10
10 10 10
10 10 11
10 11 10
11 10 10
10 10 9
10 9 10
9 10 10
11 11 11
12 12 12
13 13 13
```
CODEFORCES 1031_B. Curiosity Has No Limits
```
4
3 3 2
1 2 0
```
CODEFORCES 1054_B. Appending Mex
1. ```
4
0 1 2 1
```
2. ```
3
1 0 1
```
3. ```
4
0 1 2 239
```
4. ```
1
1000000000
```
5. ```
100000
0
```
6. ```
100000
100000
```
7. ```
100000
100000 100000
```
8. ```
100000
100000 100000 100000
```
9. ```
100000
100000 100000 100000 100000
```
10. ```
100000
100000 100000 100000 100000 100000
```
CODEFORCES 1076_B. Divisor Subtraction
```
5
4
2
1
```
CODEFORCES 1097_B. Petr and a Combination Lock
```
1
180

2
10
10

3
10
10
10

4
10
10
10
10
```
CODEFORCES 1118_C. Palindromic Matrix
```
1
10
```
```
2
1 1
```
```
3
1 1 1
```
```
4
1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
5
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
```
CODEFORCES 1144_F. Graph Without Long Directed Paths
```
# 1. Inability to find all the edges

2 1
1 2

# 2. Incorrect orientation of edges

3 3
1 2
2 3
3 1

# 3. Incorrect output format

4 4
1 2
2 3
3 4
4 1

# 4. Time complexity

1000000 1000000
1 2
2 3
3 4
...

# 5. Space complexity

1000000 1000000
1 2
2 3
3 4
...
```
CODEFORCES 1165_E. Two Arrays and Sum of Functions
```
5
1 8 7 2 4
9 7 2 9 3
```

```
1
1000000
1000000
```

```
2
1 3
4 2
```
CODEFORCES 1184_D1. Parallel Universes (Easy)
```
5 2 10 4
0 1
1 1
0 4
1 2
```
CODEFORCES 1203_A. Circle of Students
```
# 1
q = int(input())
for i in range(q):
    n = int(input())
    l = list(map(int, input().split()))
    print('YES' if l == sorted(l) or l == list(reversed(sorted(l))))

# 2
q = int(input())
for i in range(q):
    n = int(input())
    l = list(map(int, input().split()))
    print('YES' if l == sorted(l) or l == list(reversed(sorted(l))))

# 3
q = int(input())
for i in range(q):
    n = int(input())
    l = list(map(int, input().split()))
    print('YES' if l == sorted(l) or l == list(reversed(sorted(l))))

# 4
q = int(input())
for i in range(q):
    n = int(input())
    l = list(map(int, input().split()))
    print('YES' if l == sorted(l) or l == list(reversed(sorted(l))))

# 5
q = int(input())
for i in range(q):
    n = int(input())
    l = list(map(int, input().split()))
    print('YES' if l == sorted(l) or l == list(reversed(sorted(l))))
```
CODEFORCES 121_C. Lucky Permutation
```
7 4
```

```
4 7
```

```
10 7
```

```
1 1
```

```
1000000000 1000000000
```
CODEFORCES 1244_G. Running in Pairs
```
5 20
```
CODEFORCES 1264_D2. Beautiful Bracket Sequence (hard version)
```
(?(?(()?))(??(()?)(()))
```
CODEFORCES 1286_A. Garland
```
1
0
```
```
5
0 5 0 2 3
```
```
7
1 0 0 5 0 0 2
```
```
2
1 2
```
```
5
1 2 3 4 5
```
CODEFORCES 1305_B. Kuroni and Simple Strings
```
(()((
```
CODEFORCES 1329_D. Dreamoon Likes Strings
```
1
a
```
CODEFORCES 1349_D. Slime and Biscuits
```
2
1 1

2
1 2

5
0 0 0 0 35

5
8 4 2 0 1

```
CODEFORCES 136_B. Ternary Logic
```
14 34
14 50
50 34
387420489 225159023
5 5
-14 14
110 110
1000000000 1000000000
```
CODEFORCES 1392_B. Omkar and Infinity Clock
```
1
2 1
-199 192
```
CODEFORCES 1416_D. Graph and Queries
5
0
0
5
5
CODEFORCES 1433_C. Dominant Piranha
```
1
5
5 3 4 4 5
```
```
1
5
5 1 1 1 1
```
```
5
5
4 4 3 4 4
```
```
5
5
5 5 4 3 2
```
```
3
1 1 2
```
```
5
5 4 3 5 5
```
CODEFORCES 1458_B. Glass Half Spilled
```
3
6 5
6 5
10 2
```
CODEFORCES 1481_B. New Colony
```
# 1. Incorrect input format

1
5 1
1

# 2. Incorrect output format

3
5 1
1

# 3. Incorrect logic

2
5 1
1

# 4. Incorrect implementation

1
5 1
1

# 5. Runtime errors

1
5 1
1

# 6. Logical errors

1
5 1
1
```
CODEFORCES 1508_C. Complete the MST
```
4 4
2 1 14
1 4 14
3 2 15
4 3 8
```
```
6 6
3 6 4
2 4 1
4 5 7
3 4 10
3 5 1
5 2 15
```
```
5 6
2 3 11
5 3 7
1 4 10
2 4 14
4 3 8
2 5 6
```
```
5 4
1 2 1
3 4 2
2 4 3
```
CODEFORCES 1534_D. Lost Tree
```
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int n;
    cin >> n;

    vector<vector<int>> adj(n);
    for (int i = 0; i < n - 1; i++) {
        int u, v;
        cin >> u >> v;
        adj[u - 1].push_back(v - 1);
        adj[v - 1].push_back(u - 1);
    }

    // Find a node with degree 1.
    int r = -1;
    for (int i = 0; i < n; i++) {
        if (adj[i].size() == 1) {
            r = i;
            break;
        }
    }

    // If there is no node with degree 1, then the tree is not connected.
    if (r == -1) {
        cout << "! -1" << endl;
        return 0;
    }

    // Find the other endpoint of the edge that is connected to r.
    int s = adj[r][0];

    // Print the tree.
    cout << "!" << endl;
    for (int i = 0; i < n - 1; i++) {
        cout << r + 1 << " " << s + 1 << endl;
    }

    return 0;
}
```
CODEFORCES 162_A. Pentagonal numbers
1
2
5
100
CODEFORCES 181_B. Number of Triplets
```
3
1 1
2 2
3 3

3
0 0
-1 0
0 1

4
0 0
1 0
0 1
1 1
```
CODEFORCES 204_D. Little Elephant and Retro Strings
```
3 2
XXX
```
```
4 2
XXXX
```
```
10 2
XXBXXWXXXX
```
```
20 2
XXXXXXXXXXXXX
```
```
100 2
XXXXXXXXXXXXX
```
```
1000 2
XXXXXXXXXXXXX
```
```
10000 2
XXXXXXXXXXXXX
```
```
100000 2
XXXXXXXXXXXXX
```
```
1000000 2
XXXXXXXXXXXXX
```
```
10000000 2
XXXXXXXXXXXXX
```
```
100000000 2
XXXXXXXXXXXXX
```
CODEFORCES 229_C. Triangles
```
5 5
1 2
1 3
2 3
2 4
3 4
```

```
5 3
1 2
2 3
1 3
```

```
5 0
```

```
1 1
```

```
1 2
```
CODEFORCES 253_A. Boys and Girls
```
1 1
2 2
3 4
3 3
100 100
200 200
100 0
0 100
```
CODEFORCES 278_B. New Problem
```
5
threehorses
goodsubstrings
secret
primematrix
beautifulyear


4
aa
bdefghijklmn
opqrstuvwxyz
c
```
CODEFORCES 300_A. Array
```
3
-1 2 0

4
-1 -2 -3 0

1
0

2
1 2

5
1 2 3 4 5
```
CODEFORCES 325_D. Reclamation
```
3 4 9
2 2
3 2
2 3
3 4
3 1
1 3
2 1
1 1
1 4
```
CODEFORCES 348_E. Pilgrims
```
3 2
1 2
1 2 1
```
```
5 4
1 2 3 4 5
1 2 1
2 3 2
3 4 3
4 5 4
```
```
10 5
1 2 3 4 5
1 2 1
2 3 2
1 4 1
4 5 2
1 6 1
6 7 8
6 8 10
7 8 1
```
CODEFORCES 372_A. Counting Kangaroos is Fun
```
8
2
5
7
6
9
8
4
2

8
9
1
6
2
6
5
8
3
```
CODEFORCES 393_C. Blocked Points
```
1
```
```
2
```
```
3
```
```
0
```
```
-1
```
```
4000000000
```
```
10000000000
```
CODEFORCES 416_D. Population Size
```
1
-1

1
1

5
-1 -1 -1 -1 -1

9
8 6 4 2 1 4 7 10 2

9
-1 6 -1 2 -1 4 7 -1 2

7
-1 -1 4 5 1 2 3

```
CODEFORCES 443_B. Kolya and Tandem Repeat
```
# Test case 1: Non-lowercase English letters
s = 'A'
k = 2

# Test case 2: Empty string
s = ''
k = 2

# Test case 3: String without repeated characters
s = 'abcde'
k = 2

# Test case 4: String with repeated characters that are not adjacent to each other
s = 'abca'
k = 2

# Test case 5: String with repeated characters that are adjacent to each other
s = 'aa'
k = 2

# Test case 6: String with repeated characters that are adjacent to each other and separated by a single non-repeating character
s = 'aabb'
k = 2

# Test case 7: String with repeated characters that are adjacent to each other and separated by multiple non-repeating characters
s = 'aaaab'
k = 2

# Test case 8: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters
s = 'abaaaa'
k = 2

# Test case 9: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are not adjacent to each other
s = 'abaaaa'
k = 4

# Test case 10: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other
s = 'abaaaa'
k = 6

# Test case 11: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other and separated by a single non-repeating character
s = 'abaaaa'
k = 8

# Test case 12: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other and separated by multiple non-repeating characters
s = 'abaaaa'
k = 10

# Test case 13: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are not adjacent to each other
s = 'abaaaa'
k = 12

# Test case 14: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other
s = 'abaaaa'
k = 14

# Test case 15: String with repeated characters that are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other and separated by a mixture of non-repeating characters and repeated characters, where the repeated characters are adjacent to each other and separated by a single non-repeating character
s = 'abaaaa'
k = 16
```
CODEFORCES 465_C. No to Palindromes!
```
1 1
a

3 3
cba

3 4
cba

4 4
abcd

1 2
aa

2 2
ab

2 3
ab
```
CODEFORCES 489_B. BerSU Ball
```
1
1
1
```
```
4
1 4 6 2
5
5 1 5 7 9
```
```
4
1 2 3 4
4
10 11 12 13
```
```
5
1 1 1 1 1
3
1 2 3
```
CODEFORCES 513_A. Game
1. Incorrect input format

```
3 2 2 1
```

2. Incorrect variable type

```
1 2 'a' 1
```

3. Incorrect calculation

```
1 3 1 1
```

4. Incorrect output format

```
1 2 1 1
First Second
```

5. Other bugs

```
1 2 1 1
First
```
CODEFORCES 538_B. Quasi Binary
```
9
```
```
32
```
```
1000000000
```
```
1000000000000000000
```
CODEFORCES 566_C. Logistical Questions
```
5
3 1 2 6 5
1 2 3
2 3 1
4 3 9
5 3 1

5
3 1 2 6 5
1 2 3
2 3 1
4 3 9
5 3 1
```
CODEFORCES 587_D. Duff in Mafia
```
5 7
2 1 3 7
3 1 1 6
5 4 1 8
4 5 1 1
3 2 2 3
4 5 2 5
2 3 2 4
```
CODEFORCES 609_F. Frogs and mosquitoes
```
# 398C - Frogs and Mosquitoes

import bisect
from heapq import *

n, m = map(int, input().split())
frogs = []
for _ in range(n):
    x, t = map(int, input().split())
    frogs.append((x, t))

mosquitos = []
for _ in range(m):
    p, b = map(int, input().split())
    mosquitos.append((p, b))

frogs.sort()
mosquitos.sort()

ans = [0] * n
for i, (p, b) in enumerate(mosquitos):
    eaten = set()
    l = 0
    for j, (x, t) in enumerate(frogs):
        if x <= p and p - x <= t and p not in eaten:
            eaten.add(p)
            ans[j] += 1
            l += b
    heap = [(-b, p)]
    while heap and heap[0][1] < p + l:
        b, p = heapq.heappop(heap)
        eaten.add(p)
        ans[bisect.bisect_left(frogs, (p, -1))] += 1
        heapq.heappush(heap, (-b, p + l))
print('\n'.join(' '.join(map(str, x)) for x in ans))
```
CODEFORCES 630_E. A rectangle
```
1 1 1 2
```
CODEFORCES 658_B. Bear and Displayed Friends
```
5 3 11
100 500 200 300 400
1 5
2 1
2 5
```
CODEFORCES 680_D. Bear and Tower of Cubes
1. ```
1
```
2. ```
48
```
3. ```
6
```
4. ```
32
```
5. ```
16
```
6. ```
24
```
7. ```
128
```
8. ```
1015
```
CODEFORCES 703_C. Chris and Road
```
3 5 1 2
1 2
3 1
4 3
```
CODEFORCES 725_C. Hidden Word
```
AAAAA
```
```
Impossible
```
```
ABBCC
```
```
Impossible
```
```
ABCDEFGHIJKLMNOPQRSTUVWXYZ
```
```
YXWVUTGHIJKLM
ZABCDEFSRQPON
```
```
BUVTYZFQSNRIWOXXGJLKACPEMDH
```
```
Impossible
```
CODEFORCES 747_C. Servers
**Incorrect input format**

```
1 1
a 2 3
```

**Incorrect output format**

```
1 2
3
```

**Overflow**

```
1000000000 1 1
```

**Incorrect logic**

```
4 3
1 3 2
2 2 1
3 4 3
```

**Runtime errors**

```
1000000000 1000000000 1000000000
```
CODEFORCES 76_F. Tourist
1. **Incorrect input format**

```
3
-1 1
42 7
40 8
2
```

This input is incorrect because it contains extra spaces between the numbers. The developer should handle this input correctly by removing the extra spaces.

2. **Incorrect time calculations**

```
4
-1 1
0 1
1 1
2 1
2
```

This input is incorrect because the tourist's speed is limited to 2, but the time it takes to travel between the points (-1, 1) and (0, 1) is 1. The developer should correctly handle this by taking the tourist's speed into account when calculating the time it takes to travel between two points.

3. **Incorrect event handling**

```
3
-1 1
0 1
1 1
2
```

This input is incorrect because the tourist can only visit one event at a time. The developer should correctly handle this by only visiting the event that occurs first in time.

4. **Incorrect output format**

```
3
-1 1
0 1
1 1
2
```

This input is incorrect because the output format is not correct. The developer should correctly format the output so that it is easy to read and understand.

5. **Other bugs**

```
4
-1 1
0 1
1 1
2 1
2
```

This input is incorrect because the developer made a mistake in their algorithm. The developer should correctly implement the algorithm so that it finds the maximum number of events that the tourist can visit.



2. **Incorrect input format**

```
3
-1 1
42 7
40 8
2
```

This input is incorrect because it contains extra spaces between the numbers. The developer should handle this input correctly by removing the extra spaces.

2. **Incorrect time calculations**

```
4
-1 1
0 1
1 1
2 1
2
```

This input is incorrect because the tourist's speed is limited to 2, but the time it takes to travel between the points (-1, 1) and (0, 1) is 1. The developer should correctly handle this by taking the tourist's speed into account when calculating the time it takes to travel between two points.

3. **Incorrect event handling**

```
3
-1 1
0 1
1 1
2
```

This input is incorrect because the tourist can only visit one event at a time. The developer should correctly handle this by only visiting the event that occurs first in time.

4. **Incorrect output format**

```
3
-1 1
0 1
1 1
2
```

This input is incorrect because the output format is not correct. The developer should correctly format the output so that it is easy to read and understand.

5. **Other bugs**

```
4
-1 1
0 1
1 1
2 1
2
```

This input is incorrect because the developer made a mistake in their algorithm. The developer should correctly implement the algorithm so that it finds the maximum number of events that the tourist can visit.
CODEFORCES 794_C. Naming Company
1. ```
tinkoff
zscoder
```
2. ```
xxxxxx
xxxxxx
```
3. ```
ioi
imo
```
4. ```
aaab
aaab
```
5. ```
aaaaaaaaaaa
aaaaaaaaaaa
```
6. ```
abcdefghijklmnopqrstuvwxy
abcdefghijklmnopqrstuvwxy
```
7. ```
aaa
aaa
```
8. ```
z
z
```
9. ```
a
b
```
10. ```
b
a
```
CODEFORCES 815_B. Karen and Test
```
5
3 6 9 12 15
```
```
4
3 7 5 2
```
```
1
1000000000
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
100000
1 1 1 1 1 1 1 1 1 1
```
```
200000
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
```
```
1000000000
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
CODEFORCES 840_B. Leha and another game about graph
```
1 0
1

10 10
0 0 0 0 0 0 0 0 0 0
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10

10 10
0 0 0 0 0 0 0 0 0 0
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
```
CODEFORCES 860_C. Tests Renumeration
```
5
a 1
b 0
c 1
d 0
e 0
```
CODEFORCES 887_B. Cubes for Masha
```
1
3 4 5 6 7 8
```

This input is valid because it meets the following criteria:

* It contains a single integer, which is the number of cubes.
* Each of the following lines contains 6 integers, which are the numbers on the faces of the corresponding cube.

The program should be able to process this input correctly and produce the correct output.
CODEFORCES 90_B. African Crossword
```
3 3
a b c
c d e
e a b
```

```
5 5
a a a
a a a
a a a
```

```
1 1
a
```
CODEFORCES 931_E. Game with String
```
technocup
```
```
tictictactac
```
```
bbaabaabbb
```
CODEFORCES 958_F3. Lightsabers (hard)
```
10 3 3
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 985_E. Pencils and Boxes
```
1 1 0
1
```

```
4 2 2
5 5 5 5
```

```
5 3 3
1 2 3 4 5
```

```
4 2 1
1 2 3 4
```

```
6 3 10
7 2 7 7 4 2
```

```
6 2 3
4 5 3 13 4 10
```

```
3 2 5
10 16 22
```

```
5 5 5
1 1 1 1 1
```
HACKEREARTH ac-or-cooler
```
5 10
2 5 2 2 10
2 1 4 1 9
```
HACKEREARTH box-n-ball-1
5
1 2 3
3 3 7
987548 4578445 9645875456
1 2 3
5 5 5
HACKEREARTH cutting-the-birthday-cake
```
1
1 1 1
```
```
1
10 1 1
```
```
1
10 10 10
```
```
2
10 10 10
10 10 11
```
```
2
10 10 10
10 10 11
```
```
2
10 10 11
10 10 10
```
```
1
10 1 10
```
```
1
10 10 11
```
HACKEREARTH fun-with-primes-3
```
2
33
122
```
HACKEREARTH just-find-the-next-number
1
0
HACKEREARTH minimum-coins
10
[1,2,5]

10
[10]

-2
[1,2]
HACKEREARTH palindrome-count-1
```
dskjkd

racecarx

abcdcba

a
```
HACKEREARTH rhezo-and-prime-problems
1. ```
1
1
```
2. ```
2
1 1
```
3. ```
3
8 1 3
```
4. ```
4
8 1 3 7
```
5. ```
5
1 2 3 4 5
```
6. ```
6
1 2 3 4 5 6
```
7. ```
7
1 2 3 4 5 6 7
```
8. ```
8
1 2 3 4 5 6 7 8
```
9. ```
9
1 2 3 4 5 6 7 8 9
```
10. ```
10
1 2 3 4 5 6 7 8 9 10
```
HACKEREARTH special-sum-3
```
1
5
```
HACKEREARTH trick-with-the-cards
2
3
5
ATCODER p02578 AtCoder Beginner Contest 176 - Step
```
5
2 1 5 4 3
```
ATCODER p02709 AtCoder Beginner Contest 163 - Active Infants
2
1 3

4
1 3 4 2

6
5 5 6 1 1 1
ATCODER p02838 AtCoder Beginner Contest 147 - Xor Sum 4
```
#include <iostream>
#include <vector>

using namespace std;

int main() {
    int N;
    cin >> N;

    vector<long long> A(N);
    for (int i = 0; i < N; i++) {
        cin >> A[i];
    }

    long long sum = 0;
    for (int i = 0; i < N; i++) {
        sum += A[i];
    }

    sum %= 1000000007;

    cout << sum << endl;

    return 0;
}
```

**Input 1:**

```
3
1 2 3
```

**Input 2:**

```
10
3 1 4 1 5 9 2 6 5 3
```

**Input 3:**

```
10
3 14 159 2653 58979 323846 2643383 27950288 419716939 9375105820
```
ATCODER p02975 AtCoder Grand Contest 035 - XOR Circle
3
1 2 3
3
1 2 4
4
1 2 4 8
1
1000000000
ATCODER p03111 AtCoder Beginner Contest 119 - Synthetic Kadomatsu
```
5 100 90 80
98
40
30
21
80
```
ATCODER p03258 AtCoder Grand Contest 027 - ABBreviate
```
aaaa

aabb

ababababa

babbabaaba
```
ATCODER p03414 AtCoder Regular Contest 092 - Two Faced Edges
```
# N,M=map(int,input().split())
# edges=[[int(i) for i in input().split()] for _ in range(M)]
# indegree=[0]*(N+1)
# for u,v in edges:
#     indegree[v]+=1
# s=[0]*(N+1)
# for i in range(1,N+1):
#     if indegree[i]==0:
#         s[i]=1
#         while s[i]:
#             s[i]=0
#             for u,v in edges:
#                 if u==i:
#                     s[v]=1
# print(*['same' if i==0 else 'diff' for i in s])


```

```
# N,M=map(int,input().split())
# edges=[[int(i) for i in input().split()] for _ in range(M)]
# G=[[0]*(N+1) for _ in range(N+1)]
# for u,v in edges:
#     G[u][v]=1
# s=[0]*(N+1)
# t=[0]*(N+1)
# for i in range(1,N+1):
#     if s[i]==0:
#         dfs(G,i,s,t)
# print(*['same' if s[i]==t[i] else 'diff' for i in range(1,N+1)])

```

```
# N,M=map(int,input().split())
# edges=[[int(i) for i in input().split()] for _ in range(M)]
# G=[[0]*(N+1) for _ in range(N+1)]
# for u,v in edges:
#     G[u][v]=1
# visited=[0]*(N+1)
# count=[0]*(N+1)
# for i in range(1,N+1):
#     if visited[i]==0:
#         dfs(G,i,visited,count)
# print(*['same' if count[i]==count[j] else 'diff' for i,j in edges])

```
ATCODER p03574 AtCoder Beginner Contest 075 - Minesweeper
```
3 5
.....
.#.#.
.....

3 5


6 6
.
.#.##
.#
.#..#.
.##..
.#...

3 3
###
###
###

4 4
.#.#
.#.#
.#.#
.#.#

5 5
.#..#
.#..#
.#..#
.#..#
.#..#
```
ATCODER p03729 AtCoder Beginner Contest 060 - Shiritori
```
rng, gorilla, apple
yakiniku, unagi, sushi
a, a, a
aaaaaaaaab, aaaaaaaaaa, aaaaaaaaab
```
ATCODER p03893 CODE FESTIVAL 2016 Relay (Parallel) - Trichotomy
1. ```
1
```
2. ```
2
```
3. ```
3
```
4. ```
4
```
5. ```
5
```
6. ```
6
```
7. ```
7
```
8. ```
8
```
9. ```
9
```
10. ```
10
```
11. ```
11
```
12. ```
12
```
13. ```
13
```
14. ```
14
```
15. ```
15
```
16. ```
16
```
17. ```
17
```
18. ```
18
```
19. ```
19
```
20. ```
20
```
21. ```
21
```
22. ```
22
```
23. ```
23
```
24. ```
24
```
25. ```
25
```
26. ```
26
```
27. ```
27
```
28. ```
28
```
29. ```
29
```
30. ```
30
```
ATCODER p04052 AtCoder Grand Contest 001 - Wide Swap
4 2
4 2 3 1


5 1
5 4 3 2 1


8 3
4 5 7 8 3 1 2 6
AIZU p00131 Doctor's Strange Particles
1
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0
1 1 1 0 0 0 0 0 0 0
0 1 0 0 0 0 0 0 0 0
0 0 0 0 1 1 0 0 0 0
0 0 0 1 0 0 1 0 0 0
0 0 0 0 1 1 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 1 1 1
0 0 0 0 0 0 0 0 1 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
AIZU p00264 East Wind
```
0 0
```
AIZU p00451 Common Sub-String
**Incorrect use of string comparison operators.**

```
ABRACADABRA
ECADADABRBCRDARA
```

**Using the wrong data type.**

```
ABRACADABRA
ECADADABRBCRDARA
```

**Not handling invalid input.**

```
NONE
```

**Not using error handling.**

```
NONE
```

**Not using unit tests.**

```
NONE
```
AIZU p00642 Ben Toh
1
2
3
4
5
6
7
8
9
10
0
AIZU p00786 BUT We Need a Diagram
```
a(A,b(B,C));
x( y( y( z(z), v( s, t ) ) ), u ) ;

a( b( c,
      d(
         e(f),
         g
       )
    ),
   h( i(
         j(
            k(k,k),
            l(l)
          ),
         m(m)
       )
    )
 );

a(B(C),d(e(f(g(h(i(j,k),l),m),n),o),p))
.
AIZU p00918 Dragon's Cruller
4 9
6 3 0
8 1 2
4 5 7
6 3 0
8 1 2
4 5 7
31 31
4 3 6
0 1 5
8 2 7
0 3 6
4 1 5
8 2 7
92 4
1 5 3
4 0 7
8 2 6
1 5 0
4 7 3
8 2 6
12 28
3 4 5
0 2 6
7 1 8
5 7 1
8 6 2
0 3 4
0 0
AIZU p01051 Squid Ink
```
5 5
S....
.....
.....
.....
....G
```
```
5 5
Sxxxx
xxxxx
xxxxx
xxxxx
xxxxG
```
```
4 5
S#...
.#.#.
.#.#.
...#G
```
```
4 5
S#ooo
o#o#o
o#o#o
ooo#G
```
```
4 5
G####
ooxoo
x#o
Soooo
```
AIZU p01183 Tetrahedra
1. 7 1 2 2 2 2 2 2
2. 0
AIZU p01320 Magical Island 2
3 5 2
-4 6
-5 3
0 0
0 5
-3 8
-1 -4
-3 -8
4 4 1
1 1
-1 -1
-1 1
1 -1
0 0 0
AIZU p01488 TransferTrain
1
1
Tokyo
100

AIZU p01650 Stack Maze
```
3 3
ac#
b#C
.BA
3 3
aaZ
a#Z
aZZ
3 3
..#
.#.
#..
1 50
abcdefghijklmnopqrstuvwxyYXWVUTSRQPONMLKJIHGFEDCBA
1 50
aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyY
1 50
abcdefghijklmnopqrstuvwxyABCDEFGHIJKLMNOPQRSTUVWXY
1 50
aaaaaaaaaabbbbbbbbbbcccccCCCCCBBBBBBBBBBAAAAAAAAAA
10 10
...#......
a###.#####
.bc...A...
##.#C#d#.#
.#B#.#.###
.#...#e.D.
.#A..###.#
..e.c#..E.
####d###.#
##E...D.C.
0 0
```
AIZU p01801 Wall Making Game
```
1 1
.
```
```
2 2
.#
.#
```
```
2 3
###
###
```
```
0 0
```
```
100 100
```
AIZU p01935 Protect from the enemy attack
4 4
0 1 3
0 2 4
1 3 1
2 3 5
AIZU p02074 N-by-M grid calculation
1, 2
2, 1, 1
2
1, 2, 1000000000000000
5
1 2 8 9 1000000000000000
1
xx
AIZU p02216 Array Game
```
3
1 4 1
```
```
2
1 2
```
```
5
3 1 4 1 5
```
```
8
2 4 8 16 32 64 128 256
```
```
3
999999999 1000000000 1000000000
```
AIZU p02369 Cycle Detection for a Directed Graph
```
3 3
0 1
0 2
1 2

3 3
0 1
1 2
2 0

3 3
0 1
1 2
0 2
```