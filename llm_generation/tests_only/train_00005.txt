CODECHEF abacus05
1
10 20 30 40 500
CODECHEF cheflcm
```
1
1
```
CODECHEF dishown
```
2
3
1 2 5
2
0 1 3
1 1
10
10
10 10 10 10 10 10 10 10 10 10
5
0 1 2
0 3 4
0 5 6
0 7 8
0 9 10
0 1 2
0 3 4
0 5 6
0 7 8
0 9 10
```
CODECHEF intest
```
1000000000 1000000
```
CODECHEF nita02
5 6
0 0 0 0 0 0
1 1 1 1 1 1
2 2 2 2 2 2
1 1 1 1 1 1
3 3 3 3 3 3
5 6
0 0 0 0 1 0
1 1 1 1 1 1
1 1 1 1 1 1
2 2 2 2 2 2
3 3 3 3 3 3
CODECHEF seagm2
```
1
2 3
1.0000 0.0000 0.0000
0.0000 1.0000 0.0000
CODEFORCES 1000_F. One Occurrence
```
1
1
1
1
```
```
2
1 2
1 1
```
```
3
1 1 1
1
```
```
6
1 1 2 3 2 4
2
2 6
1 2
```
```
6
1 1 2 3 2 4
3
3 6
1 2
```
```
5
5 5 5 5 5
1
1
```
```
10
1 2 3 4 5 6 7 8 9 10
1
1
```
CODEFORCES 1025_G. Company Acquisitions
```
3
-1 -1 -1
```

```
2
2 -1
```

```
40
3 3 -1 -1 4 4 -1 -1 -1 -1 -1 10 10 10 10 10 10 4 20 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 3 3 3 3 3 3 3 3
```
CODEFORCES 1045_I. Palindrome Pairs
```
3
aa
bb
cd
```
CODEFORCES 106_C. Buns
1. Incorrect input format:
```
n, m, c0, d0 = map(int, input().split())
for i in range(m):
    ai, bi, ci, di = map(int, input().split())
```
This input will cause the program to crash because it does not contain the correct number of arguments.

2. Incorrect variable type:
```
n, m, c0, d0 = map(str, input().split())
for i in range(m):
    ai, bi, ci, di = map(str, input().split())
```
This input will cause the program to crash because the variable types are not correct.

3. Off-by-one error:
```
n, m, c0, d0 = map(int, input().split())
for i in range(m):
    ai, bi, ci, di = map(int, input().split())
    max_profit = 0
    for j in range(m):
        if ai >= bi and ci >= bi:
            if di + c0 > max_profit:
                max_profit = di + c0
    print(max_profit)
```
This input will cause the program to output the wrong answer because it is calculating the maximum profit for each bun type individually, rather than for all bun types combined.

4. Infinite loop:
```
n, m, c0, d0 = map(int, input().split())
while True:
    ai, bi, ci, di = map(int, input().split())
```
This input will cause the program to enter an infinite loop because there is no condition that will terminate the loop.

5. Memory leak:
```
n, m, c0, d0 = map(int, input().split())
for i in range(m):
    ai, bi, ci, di = map(int, input().split())
    buns = []
    for j in range(m):
        if ai >= bi and ci >= bi:
            buns.append((di + c0, j))
    buns.sort(reverse=True)
    max_profit = 0
    for bun in buns:
        if n >= bun[0]:
            n -= bun[0]
            max_profit += bun[1]
    print(max_profit)
```
This input will cause the program to leak memory because it is not releasing the memory that is used to store the buns list.

6. Race condition:
```
n, m, c0, d0 = map(int, input().split())
def get_bun(ai, bi, ci, di):
    if ai >= bi and ci >= bi:
        return di + c0
    return 0

def get_max_profit(n, m):
    buns = []
    for i in range(m):
        bun = get_bun(ai, bi, ci, di)
        if bun > 0:
            buns.append(bun)
    buns.sort(reverse=True)
    max_profit = 0
    for bun in buns:
        if n >= bun:
            n -= bun
            max_profit += bun
    return max_profit

print(get_max_profit(n, m))
```
This input will cause the program to have a race condition because two threads may try to access the buns list at the same time. This could lead to incorrect results or even a crash.

7. Security vulnerability:
```
n, m, c0, d0 = map(int, input().split())
def get_bun(ai, bi, ci, di):
    if ai >= bi and ci >= bi:
        return di + c0
    return 0

def get_max_profit(n, m):
    buns = []
    for i in range(m):
        bun = get_bun(ai, bi, ci, di)
        if bun > 0:
            buns.append(bun)
    buns.sort(reverse=True)
    max_profit = 0
    for bun in buns:
        if n >= bun:
            n -= bun
            max_profit += bun
    return max_profit

print(get_max_profit(n, m))
```
This input will cause the
CODEFORCES 1091_B. New Year and the Treasure Geolocation
```
2
2 5
-6 4
7 -2
-1 -3

4
2 2
8 2
-7 0
-2 6
1 -14
16 -12
11 -18
7 -14
```
CODEFORCES 110_E. Lucky Tree
```
4
1 2 4
3 1 2
1 4 7
```
```
4
1 2 4
1 3 47
1 4 7447
```
```
2
1 2 4
```
```
1
1 2 4
```
```
3
1 2 4
2 3 4
```
```
5
1 2 7
2 3 4
3 4 7
4 5 7
```
```
10
1 2 4
2 3 7
3 4 4
4 5 4
5 6 4
6 7 4
7 8 4
8 9 4
9 10 4
```
CODEFORCES 113_B. Petr#
```
# Incorrect input format

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Incorrect output format

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Off-by-one errors

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Incorrect use of variables

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Incorrect logic

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Incorrect use of functions

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Memory leaks

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Race conditions

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Deadlocks

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))

# Security vulnerabilities

t = input()
sbegin = input()
send = input()
print(t.count(sbegin+send))
```
CODEFORCES 1158_A. The Party and Sweets
**Incorrect input format:**

```
1 2
1 2
3 4
```

**Incorrect output format:**

```
12
```

**Incorrect data:**

```
3 2
1 2 1
3 4
```

**Incorrect algorithm:**

```
n, m = map(int, input().split())
b = list(map(int, input().split()))
g = list(map(int, input().split()))
if min(b) > max(g):
    print(-1)
else:
    print(sum(b))
```

**Incorrect implementation:**

```
n, m = map(int, input().split())
b = list(map(int, input().split()))
g = list(map(int, input().split()))
if min(b) > max(g):
    print(-1)
else:
    print(sum(b))
```
CODEFORCES 117_E. Tree or not Tree
```
5 2
2 1
4 3
2 4
2 5
4 1
5 4
1 5

6 2
4 6
4 3
1 2
6 5
1 5
1 4
2 5
2 6
```
CODEFORCES 1198_F. GCD Groups 2
```
2
2 3

3
6 15 35

4
6 10 15 1000

5
6 10 15 1000 75
```
CODEFORCES 1215_E. Marbles
```
# -*- coding: utf-8 -*-
"""
Created on Mon May  3 16:59:30 2021

@author: LENOVO
"""

n=int(input())
a=list(map(int,input().split()))
b=[]
for i in range(n-1):
    if a[i]!=a[i+1]:
        b.append(i+1)
print(len(b))
```
CODEFORCES 1238_G. Adilbek and the Watering System
```
1
1 5 4 2
```

```
2
2 4 2
0 4 5 4
```

```
0
0 4 5 4
```

```
2
5 3 1
1 2 4
3 1 3
```

```
3
2 3 5 1
2 1 1
1 4 3
```

```
2
2 1 1
1 4 3
1 2 4
```

```
1
1 4 3
```

```
1
1 2 1
```
CODEFORCES 1257_B. Magic Stick
1. 1
2 3

2. 2
1 1

3. 3
3 6
6 8

4. 4
1 2
4 1

5. 5
31235 6578234

6. 6
1000000000 1000000000

7. 7
987654321 987654321

8. 8
1000000000 1000000000000

9. 9
1 1000000000

10. 10
1000000000 1

CODEFORCES 1280_C. Jeremy Bearimy
```
2
3
1 2 3
3 2 4
2 4 3
4 5 6
5 6 5
2
1 2 1
1 3 2
1 4 3
```
CODEFORCES 1300_B. Assigning to Classes
```
1
1
1
```

```
2
3
6 5 4 1 2 3
5
13 4 20 13 2 5 8 3 17 16
```

```
1
1000000000
```
CODEFORCES 1324_C. Frog Jumps
```
6
LRLRRLL
L
LLR
RRRR
LLLLLL
R
```
CODEFORCES 1343_B. Balanced Array
```
1. ```
1
2
```

2. ```
1
4
```

3. ```
1
6
```

4. ```
1
8
```

5. ```
1
10
```
CODEFORCES 1365_C. Rotation Matching
```
5
1 2 3 4 5
2 3 4 5 1
```
```
5
5 4 3 2 1
1 2 3 4 5
```
```
4
1 3 2 4
4 2 3 1
```
```
4
1 2 3 4
4 3 2 1
```
```
10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
```
```
10
1 2 3 4 5 6 7 8 9 10
10 9 8 7 6 5 4 3 2 1
```
```
10
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 11
```
CODEFORCES 1385_C. Make It Good
```
1
5
3 4 5 3 2
```
CODEFORCES 1407_A. Ahahahahahahahaha
```
1
8
0 1 0 1 0 1 1 0
```
CODEFORCES 1427_G. One Billion Shades of Grey
**Incorrect input format**

```
3
1 7 6
4 0 6
1 1 1
```

**Incorrect output format**

```
1000
```

**Incorrect calculation of the minimum possible total contrast**

```
3
1 7 6
4 0 6
1 1 1
```

**Incorrect handling of broken tiles**

```
3
1 7 6
4 0 6
1 1 1
```

**Incorrect handling of non-broken tiles that are already painted**

```
3
1 7 6
4 0 6
1 1 1
```

**Off-by-one errors**

```
3
1 7 6
4 0 6
1 1 1
```

**Incorrect array indexing**

```
3
1 7 6
4 0 6
1 1 1
```

**Incorrect logic**

```
3
1 7 6
4 0 6
1 1 1
```

**Memory leaks**

```
3
1 7 6
4 0 6
1 1 1
```

**Synchronization issues**

```
3
1 7 6
4 0 6
1 1 1
```
CODEFORCES 1450_G. Communism
```
3 2 3
abc
CODEFORCES 1474_E. What Is It?
```
2
3
5
```
CODEFORCES 14_B. Young Photographer
```
2 0
1 2
```

```
3 3
0 7
14 2
4 6
```

```
1 0
```

```
2 0
1 2
1 3
```

```
1 0
```

```
1 0
5 10
```

```
2 0
1 2
3 4
```
CODEFORCES 1523_G. Try Booking
```
6 5
2 3
3 5
1 1
1 5
1 6
```
CODEFORCES 156_A. Message
1. Incorrect input format
```
s = ""
u = "a"
```
2. Incorrect output format
```
s = "abc"
u = "bcd"
```
Output:
```
3
```
3. Incorrect algorithm
```
s = "abc"
u = "bcd"
```
Output:
```
2
```
4. Runtime error
```
s = "abcdef"
u = "klmnopq"
```
5. Logic error
```
s = "aaa"
u = "aa"
```
Output:
```
0
```
6. User error
```
s = "abcdef"
u = "klmnopq"
```
Input:
```
2001
```
CODEFORCES 177_E2. Space Voyage
```
2 5
1 5
2 4
```

```
1 5
1 5
2 4
```

```
10 100
1 100
2 100
3 100
4 100
5 100
6 100
7 100
8 100
9 100
10 100
```

```
10 500
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 11
```
CODEFORCES 199_B. Special Olympics
```
60 60 45 55
80 80 8 32

60 60 45 55
80 60 15 25

50 50 35 45
90 50 35 45

0 0 0 0
0 0 0 0
```
CODEFORCES 222_C. Reducing Fractions
1. **Incorrect input format.**

```
1 2
100 5 2
50 10
```

This input is incorrect because there is no space between the two integers in the first line.

2. **Incorrect output format.**

```
3 2
2 1
1 1 1
```

This output is incorrect because the number of values in the second line is not equal to the number of values in the first line.

3. **Incorrect calculation of the greatest common divisor.**

```
3 2
100 5 2
50 10
```

This input is incorrect because the greatest common divisor of 100 and 50 is 50, not 2.

4. **Incorrect reduction of the fraction.**

```
3 2
100 5 2
50 10
```

This input is incorrect because the fraction 100/50 is not reduced, because it can be further reduced to 2/1.

5. **Incorrect handling of edge cases.**

```
0 0
```

This input is incorrect because the numerator and the denominator are both zero, which means that the fraction is undefined.
CODEFORCES 246_A. Buggy Sorting
1

2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
CODEFORCES 271_B. Prime Matrix
```
1. 2 3
1 2 3
5 6 1
4 4 1

2. 2 3
4 8 8
9 2 9

3. 2 2
1 3
4 2

4. 3 3
1 2 3
5 6 1
4 4 1

5. 5 2
1 1 2 2 1
1 1 2 2 1
1 1 2 2 1
1 1 2 2 1
1 1 2 2 1

6. 5 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5
1 2 3 4 5

7. 20 20
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 294_D. Shaass and Painter Robot
```
3 4
1 1 DR
3 4
3 3 DR
3 3
1 1 DR
3 3
1 2 DL
```
CODEFORCES 318_B. Strings of Power
```
# Incorrect input format

input = ''
```

```
# Incorrect substring matching

input = 'heavymetalismetal'
```

```
# Incorrect counting

input = 'heavymetalisheavymetal'
```

```
# Off-by-one errors

input = 'heavymetalisheavymetal1'
```

```
# Memory leaks

input = 'heavymetalisheavymetal'
```

```
# Race conditions

input = 'heavymetalisheavymetal'
```

```
# Deadlocks

input = 'heavymetalisheavymetal'
```

```
# Security vulnerabilities

input = 'heavymetalisheavymetal'
```
CODEFORCES 342_B. Xenia and Spies
```
3 5 1 3
1 1 2
2 2 3
3 3 3
4 1 1
10 1 3
```
CODEFORCES 365_D. Free Market
3 2
1 3 10

3 5
1 2 3

10 10000
10000 9999 1 10000 10000 10000 1 2 3 4
CODEFORCES 389_C. Fox and Box Accumulation
**Incorrect input format**

```
1
a
```

**Incorrect output format**

```
3
```

**Incorrect logic**

```
n = int(input())
x = list(map(int, input().split()))
piles = []
for i in range(n):
    piles.append(x[i])

print(len(piles))
```

**Memory leak**

```
n = int(input())
x = list(map(int, input().split()))

while n > 0:
    piles.append(x[n - 1])
    n -= 1

print(len(piles))
```

**Time complexity**

```
n = int(input())
x = list(map(int, input().split()))

piles = []
for i in range(n):
    piles.append(x[i])

print(len(piles))
```

**Space complexity**

```
n = int(input())
x = list(map(int, input().split()))

piles = []
for i in range(n):
    piles.append(x[i])

print(len(piles))
```
CODEFORCES 409_F. 000001
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
CODEFORCES 437_A. The Child and Homework
```
A.aa
B.bb
C.cc
D.dd

A.a
B.b
C.c
D.d

A.1234567890
B.123456789012
C.12345678901234
D.1234567890123456

A.1234567890
B.123456789012
C.12345678901234
D.1234567890123456

A.1234567890
B.123456789012
C.12345678901234
D.1234567890123456

A.1234567890
B.123456789012
C.12345678901234
D.1234567890123456

A.1234567890
B.123456789012
C.12345678901234
D.1234567890123456

A.1234567890
B.123456789012
C.12345678901234
D.1234567890123456
```
CODEFORCES 45_C. Dancing Lessons
```
4
BGBG
4 2 4 3
```
CODEFORCES 482_B. Interesting Array
```
1 0
```
```
3 1
1 3 3
```
```
3 2
1 3 3
1 3 2
```
```
3 2
1 3 3
2 3 2
```
CODEFORCES 506_B. Mr. Kitayuta's Technology
```
2 1
1 2
```

```
5 5
1 2
1 3
1 4
2 3
2 4
```

```
4 6
1 2
1 4
2 3
2 4
3 2
3 4
```

```
3 5
1 2
1 3
1 4
2 3
```
CODEFORCES 52_A. 123-sequence
```
1
1

2
1 2

3
1 2 3

4
1 2 2 3

5
1 1 2 2 3

6
1 1 1 2 2 3

7
1 1 1 1 2 2 3

8
1 1 1 1 1 2 2 3

9
1 1 1 1 1 1 2 2 3

10
1 1 1 1 1 1 1 2 2 3
```
CODEFORCES 555_C. Case of Chocolate
```
# 555C. Case of Chocolate

n, q = map(int, input().split())

ans = []

for i in range(q):
    x, y, d = map(int, input().split())
    
    if d == 'U':
        ans.append(n - y)
    else:
        ans.append(n - x)

for i in ans:
    print(i)
```
CODEFORCES 581_B. Luxurious Houses
```
5
1 2 3 1 2
```
```
4
3 2 1 4
```
```
2
1 1
```
```
1
1000000000
```
```
100000
1 2 3 4 5 6 7 8 9 100000
```
CODEFORCES 603_A. Alternative Thinking
1. Incorrect input format:
```
1
0
```
2. Incorrect output format:
```
10
```
3. Incorrect algorithm:
```
n = int(input())
s = input()

if s.count("1") == n or s.count("0") == n:
    print(n)
else:
    print(n - 1)
```
4. Incorrect data structures:
```
n = int(input())
s = input()

if s.count("1") == n or s.count("0") == n:
    print(n)
else:
    print(n - 1)
```
5. Incorrect error handling:
```
n = int(input())
s = input()

if s.count("1") == n or s.count("0") == n:
    print(n)
else:
    print(n - 1)
```
CODEFORCES 625_D. Finals in arithmetic
```
10100000
```
```
1
```
```
0
```
```
5
```
```
5
```
CODEFORCES 64_F. Domain
```
codeforces.com
mail.v-kontakte.ru
CODEFORCES 673_F. Bearish Fanpages
```
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 15 15:10:31 2022

@author: 10937575
"""


def main():
    n,q=map(int,input().split())
    t=list(map(int,input().split()))
    f=list(map(int,input().split()))
    fol=[[0]*n for _ in range(n)]
    pre=[[0]*n for _ in range(n)]
    for i in range(n):
        fol[i][f[i]]=1
        pre[f[i]][i]=1
    # print(fol)
    # print(pre)
    for i in range(q):
        tp=int(input())
        if tp==1:
            u,v=map(int,input().split())
            fol[u][v]=1
            fol[v][u]=1
            pre[u][v]=0
            pre[v][u]=0
        else:
            i=int(input())
            s=0
            for j in range(n):
                if fol[i][j]:
                    s+=t[j]*(j+1)
                if pre[i][j]:
                    s+=t[j]*(j+1)
            print(s)
        
if __name__ == '__main__':
    main()
```
CODEFORCES 699_A. Launch of Collider
1. Incorrect input format:
```
1
RL
10
```

2. Incorrect variable types:
```
1
RL
1.0
```

3. Incorrect calculations:
```
1
RL
10
```

4. Incorrect logic:
```
1
RL
10
```

5. Incorrect output format:
```
1
RL
10
```
CODEFORCES 71_C. Round Table Knights
3
1 1 1

3
0 0 0

6
0 1 0 1 0 1

6
1 1 1 1 1 1

4
0 1 0 1
CODEFORCES 740_E. Alyona and towers
```
# 5
# 5 5 5 5 5
# 3
# 1 3 2
# 2 2 1
# 4 4 1

# 10
# 2 1 3 1 4 1 5 1 6 1
# 10
# 1 10 1
# 2 10 1
# 3 10 1
# 4 10 1
# 5 10 1
# 6 10 1
# 7 10 1
# 8 10 1
# 9 10 1
# 10 10 1

# 5
# 1 2 3 4 5
# 1
# 1 5 1

# 1
# 1
# 0

# 1
# 1000000000
# 0
```
CODEFORCES 764_D. Timofey and rectangles
**1. Input 1**
```
3
-1 -1 1 1
2 2 3 3
4 4 5 5
```

**2. Input 2**
```
6
0 0 1 1
2 2 3 3
4 4 5 5
-1 -1 1 1
2 2 3 3
4 4 5 5
```

**3. Input 3**
```
1
0 0 1 1
```
CODEFORCES 788_A. Functions again
```
1
1000000000
```
```
5
1 4 2 3 1
```
```
4
1 5 4 7
```
CODEFORCES 809_C. Find a car
```
1
1 1 1 1 1
```
CODEFORCES 834_A. The Useless Toy
```
^ v 6
^ > 1
< ^ 3
```
CODEFORCES 854_D. Jury Meeting
```
2 6 5
1 1 0 5000
3 2 0 5500
2 2 0 6000
15 0 2 9000
9 0 1 7000
8 0 2 6500
```
CODEFORCES 879_B. Table Tennis
**Incorrect input format:**

```
1 2
1 2
```

**Incorrect output format:**

```
2 3
```

**Incorrect logic:**

```
2 2
1 2
```

**Memory leaks:**

```
2 2
1 2
```

**Race conditions:**

```
2 2
1 2
```

**Deadlocks:**

```
2 2
1 2
```
CODEFORCES 902_D. GCD of Polynomials
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
CODEFORCES 924_F. Minimal Subset Difference
```
1
1 100 0
```

```
10
1 100 0
1 100 1
1 100 2
1 100 3
1 100 4
1 100 5
1 100 6
1 100 7
1 100 8
1 100 9
```

```
10
1 1000 0
1 1000 1
1 1000 2
1 1000 3
1 1000 4
1 1000 5
1 1000 6
1 1000 7
1 1000 8
1 1000 9
```
CODEFORCES 954_A. Diagonal Walking
```
5
RUURU
```
```
17
UUURRRRRUUURURUUU
```
```
10
RRRRUUUU
```
```
10
UURRRRUUR
```
```
100
RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
```
```
1
R
```
CODEFORCES 97_E. Leaders
```
7 7
1 3
1 4
2 3
2 4
5 6
6 7
7 5
8
1 2
1 3
1 4
2 4
1 5
5 6
5 7
6 7
```
CODEFORCES 99_E. Help Greg the Dwarf
```
1 1 1

2 2 1

10 10 10

1 1 1000000000

1000000000 1 1
```
HACKEREARTH benny-and-two-strings-2
```
1 1 0
a
a
```
```
5 5 4
aabc
abbc
```
```
7 8 4
abc
cabca
```
```
2 1 0
a
a
```
```
8 10 6
cabca
abcabc
```
HACKEREARTH comrades-ii-6
1
3
0 1 1
HACKEREARTH find-handi-bhaiya
```
1
0 0 0
```
HACKEREARTH imagination-game-easy-contest
```
1
2
2 2
1 1
```
HACKEREARTH marut-vs-devil-in-hunger-games-1
```
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
2
abcd
aabb
abc
xyz
```
HACKEREARTH nutcracker
```
1
10000
```
HACKEREARTH rajasthans-bawri
```
3
1 3 2 5
5 2 3 1
9 2 7 1
```
HACKEREARTH shortest-way
```
1
999999999 999999998
```
HACKEREARTH the-savior-3
4
2
1 1
4
1 2 3 4
4
2 4 6 8
3
1 3 3
ATCODER p02543 ACL Contest 1 - Keep Distances
5 3
1 2 4 7 8
2
1 5
1 2

ATCODER p02674 AtCoder Grand Contest 044 - Name-Preserving Clubs
2
3
4
13
26
123456789123456789
ATCODER p02802 AtCoder Beginner Contest 151 - Welcome to AtCoder
1. ```
2 5
1 WA
1 AC
2 WA
2 AC
2 WA
```

2. ```
100000 3
7777 AC
7777 AC
7777 AC
```

3. ```
6 0
```
ATCODER p02938 AtCoder Beginner Contest 138 - Coincidence
```
2 3
10 100
1 1000000000000000000
```
ATCODER p03075 AtCoder Beginner Contest 123 - Five Antennas
1
2
4
8
9
15

15
18
26
35
36
18
ATCODER p03217 Dwango Programming Contest V - Square Rotation
5 3
0 0
1 0
0 1
1 1
2 2

ATCODER p03366 AtCoder Grand Contest 023 - Go Home
**1. Input with invalid number of apartments**
```
3 2
1 3
3 4
4 2
```
**2. Input with invalid position of apartment**
```
3 2
1 3
4 4
3 2
```
**3. Input with invalid number of employees**
```
3 2
1 3
3 4
4 2
```
**4. Input with invalid tie**
```
3 2
1 3
3 4
4 2
```
ATCODER p03526 CODE FESTIVAL 2017 Final - Zabuton
```
3
0 2
1 3
3 4
```

```
3
2 4
3 1
4 1
```

```
10
1 3
8 4
8 3
9 1
6 4
2 3
4 2
9 2
8 3
0 1
```
ATCODER p03689 AtCoder Grand Contest 016 - +/- Rectangle
```
3 3 2 2
3 3 2 3
```
ATCODER p03842 AtCoder Grand Contest 008 - Next or Nextnext
```
3
1 2 3

2
1 1

3
2 1 1

3
1 1 1

13
2 1 4 3 6 7 5 9 10 8 8 9 11
```
ATCODER p04009 AtCoder Grand Contest 004 - Salvage Robots
```
3 3
o.o
.Eo
ooo

2 2
E.
..

3 4
o...
o...
oooE

5 11
ooo.ooo.ooo
o.o.o...o..
ooo.oE..o..
o.o.o.o.o..
o.o.ooo.ooo
```
AIZU p00095 Surf Smelt Fishing Contest
1
1 100
AIZU p00227 Thanksgiving
4 2
50 40 100 80
7 3
400 300 100 700 200 600 500
0 0
AIZU p00389 Pilling Blocks
```
4 2
5 2
3 2
1 2
```
AIZU p00605 Vampirish Night
```
2 3
5 4 5
1 2 3
3 2 1

3 5
1 2 3 4 5
0 1 0 1 2
0 1 1 2 2
1 0 3 1 1

0 0
```
AIZU p00742 Verbal Arithmetic
3
ACM
IBM
ICPC
3
GAME
BEST
GAMER
4
A
B
C
AB
3
A
B
CD
3
ONE
TWO
THREE
3
TWO
THREE
FIVE
3
MOV
POP
DIV
9
A
B
C
D
E
F
G
H
IJ
0
AIZU p00881 Twenty Questions
8 1
11010101
11 4
00111001100
01001101011
01010000011
01100110001
11 16
01000101111
01011000000
01011111001
01101101001
01110010111
01110100111
10000001010
10010001000
10010110100
10100010100
10101010110
10110100010
11001010011
11011001001
11111000111
11111011101
11 12
10000000000
01000000000
00100000000
00010000000
00001000000
00000100000
00000010000
00000001000
00000000100
00000000010
00000000001
00000000000
9 32
001000000
000100000
000010000
000001000
000000100
000000010
000000001
000000000
011000000
010100000
010010000
010001000
010000100
010000010
010000001
010000000
101000000
100100000
100010000
100001000
100000100
100000010
100000001
100000000
111000000
110100000
110010000
110001000
110000100
110000010
110000001
110000000
0 0
AIZU p01012 Planarian Regeneration
```
1 1 1
1 1 1
1 2 2
1 1 1
1 2 0
3 4 0
```
AIZU p01144 Princess's Marriage
1 0
2 8
5 6
4 5
3 1
5 10
5 10
5 10
0 0
AIZU p01283 Strange String Manipulation
**Program Inputs**

```
5
5 4 3 2 1
5
7 7 7 7 7
10
186 8 42 24 154 40 10 56 122 72
0
```
AIZU p01453 Spring Tiles
```
10 10
##########
#g..##..#
#.*#.*#.#
#..#...#.#
#.*#...#.#
#..#...#.#
#.*#.*#.#
#..##..#g
##########
```
AIZU p01603 Sanpo
```
4 5
1 2 1 4 7
2 3 1 2 77
2 4 1 2 777


2 10000
1 2 1 10 1


5 15
1 2 3 2 1
2 3 3 2 1
1 4 8 2 777
1 5 1 3 10
```
AIZU p01759 Vongress
4 5
1 1
-1 1
-1 -1
1 -1
1
1
1
1
1
AIZU p01899 Yamanote-line Game
```
# 5 130
130 170 100 120 140
```
AIZU p02036 Donuts Orientation
3 1000000007
AIZU p02179 Monster Buster
5
0.5 10 5 5 5
4 4 2 2
AIZU p02322 Knapsack Problem with Limitations II
4 8
4 3 2
2 1 1
1 2 4
3 2 2
AIZU p02467 Prime Factorize
```
1
```
```
12
```
```
126
```
```
1234567890
```