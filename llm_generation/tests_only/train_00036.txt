CODECHEF anuwta
```
2
1
2
```
CODECHEF chsparr
```
 ```
1
3 1 1 5
1 6 9
```
CODECHEF etmx05
CANDY
SOLVING
A123b456c789D
01234567890
CODECHEF laddu
```
1
4 INDIAN
CONTEST_WON 1
TOP_CONTRIBUTOR
BUG_FOUND 100
CONTEST_HOSTED
```
CODECHEF pcsc1
1,2,10,99,-1
CODECHEF stadium
4
3 5
4 6
1 3
2 5
CODEFORCES 1007_E. Mini Metro
```
3 3 10
2 4 10
3 3 9
4 2 8

4 10 5
1 1 1
1 0 1
0 5 8
2 7 100
```
CODEFORCES 1030_E. Vasya and Good Sequences
```
3
6 7 14

3
1 2 1 16

2
1 1

1
1

10
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000

```
CODEFORCES 1053_C. Putting Boxes Together
```
5 8
1 2 6 7 10
1 1 1 1 2
1 1
1 5
1 3
3 5
-3 5
-1 10
1 4
2 5
```
CODEFORCES 1075_D. Intersecting Subtrees
```
1
3
1 2
2 3
1
1
1
2
2
1

1
6
1 2
1 3
1 4
4 5
4 6
4
1 3 4 5
3
3 5 2
3
6
1 2
1 3
1 4
4 5
4 6
3
1 2 3
3
4 1 6
5
```
CODEFORCES 1096_E. The Top Scorer
```
2 6 3
```

```
5 20 11
```

```
10 30 10
```
CODEFORCES 1117_F. Crisp String
```
1 1
a
0 0
```

```
2 2
ab
1 1
1 1
```

```
7 3
abacaba
0 1 1
1 0 0
1 0 0
```

```
7 4
bacadab
0 1 1 1
1 0 0 0
1 0 0 0
1 0 0 0
```

```
3 3
cbc
0 0 0
0 0 1
0 1 0
```
CODEFORCES 1144_B. Parity Alternated Deletions
1. ```
n = int(input())
arr = list(map(int, input().split()))

res = 0
for i in range(1, n):
    if arr[i] % 2 != arr[i - 1] % 2:
        res += arr[i]

print(res)
```

2. ```
n = int(input())
arr = list(map(int, input().split()))

res = 0
for i in range(n):
    if i % 2 == 0:
        if arr[i] % 2 == 0:
            res += arr[i]
    else:
        if arr[i] % 2 == 1:
            res += arr[i]

print(res)
```

3. ```
n = int(input())
arr = list(map(int, input().split()))

res = 0
for i in range(n):
    if arr[i] == 0:
        continue
    elif arr[i] % 2 == 0:
        res += arr[i]
    else:
        res -= arr[i]

print(res)
```

4. ```
n = int(input())
arr = list(map(int, input().split()))

res = 0
for i in range(n):
    if i % 2 == 0:
        res += arr[i]
    else:
        res -= arr[i]

print(res)
```

5. ```
n = int(input())
arr = list(map(int, input().split()))

res = 0
for i in range(n):
    res += arr[i]

print(res)
```
CODEFORCES 1165_A. Remainder
```
11 5 2
11010100101

11 5 1
11010100101
```
CODEFORCES 1184_B3. The Doctor Meets Vader (Hard)
```
6 7
1 2
2 3
3 4
4 6
6 5
4 4
3 6
4 2 2
1 10 2 5
3 8 2 7
5 1 0 2
6 5 4 1
3 7 6
5 2 3
4 2
3 2
```
CODEFORCES 1202_C. You Are Given a WASD-string...
```
1
DSWAA
```
```
2
D
WA
```
```
3
DSAWWAW
D
WA
```
```
4
DD
W
SA
```
```
5
DD
SW
W
```
```
6
DD
SAA
DD
```
```
7
DD
SAA
DD
D
```
```
8
DD
SAA
DD
D
W
```
```
9
DD
SAA
DD
D
W
A
```
```
10
DD
SAA
DD
D
W
A
D
```
```
11
DD
SAA
DD
D
W
A
D
S
```
```
12
DD
SAA
DD
D
W
A
D
S
W
```
```
13
DD
SAA
DD
D
W
A
D
S
W
A
```
```
14
DD
SAA
DD
D
W
A
D
S
W
A
D
```
```
15
DD
SAA
DD
D
W
A
D
S
W
A
D
W
```
```
16
DD
SAA
DD
D
W
A
D
S
W
A
D
W
A
```
```
17
DD
SAA
DD
D
W
A
D
S
W
A
D
W
A
D
```
```
18
DD
SAA
DD
D
W
A
D
S
W
A
D
W
A
D
S
```
```
19
DD
SAA
DD
D
W
A
D
S
W
A
D
W
A
D
S
W
```
```
20
DD
SAA
DD
D
W
A
D
S
W
A
D
W
A
D
S
W
A
```
CODEFORCES 1219_H. Function Composition
```
1
1
1
1
```

```
5
1 2 3 4 5
5
1 1
2 2
3 3
4 4
5 5
```

```
10
1 2 3 4 5 6 7 8 9 10
5
10 1
5 7
10 6
1 1
10 8
```

```
10
1 2 3 4 5 6 7 8 9 10
5
10 1
5 7
10 6
1 1
10 8
10 10
```

```
5
3 1 4 1 5
3
1 1
2 2
3 3
4 4
```
CODEFORCES 1244_C. The Football Season
```
1 0 1 0
10 51 5 4
20 0 15 5
```
CODEFORCES 1264_A. Beautiful Regional Contest

CODEFORCES 1285_C. Fadi and LCM
**Incorrect input format**
```
123456789012345678901234567890
```

**Incorrect output format**
```
1 123456789012345678901234567890
```

**Wrong logic**
```
1
```

**Runtime error**
```
10**12
```

**Time complexity**
```
10**12
```

**Space complexity**
```
10**12
```
CODEFORCES 1304_E. 1-Trees and Queries
```
5
1 2
2 3
3 4
4 5
5
1 3 1 2 2
1 4 1 3 2
1 4 1 3 3
4 2 3 3 9
5 2 3 3 9
```
CODEFORCES 1328_F. Make k Equal
```
# 1. The input format is not correct.

n, k = [int(x) for x in input().split()]
a = [int(x) for x in input().split()]
```

```
# 2. The developer does not consider the corner cases.

n, k = 3, 1
a = [2, 3, 4]
```

```
# 3. The developer does not handle the case where all elements are equal.

n, k = 5, 5
a = [1, 1, 1, 1, 1]
```

```
# 4. The developer does not use the most efficient algorithm.

n, k = 5, 5
a = [1, 2, 3, 4, 5]
```

```
# 5. The developer does not test the program thoroughly.

n, k = 5, 5
a = [1, 2, 3, 4, 5]
```
CODEFORCES 1348_F. Phoenix and Memory
```
4
1 3
2 4
3 4
2 3
```

```
5
1 5
2 4
3 4
4 5
1 5
```

```
10
1 10
2 9
3 8
4 7
5 6
6 5
7 4
8 3
9 2
10 1
```

```
10
1 10
2 9
3 8
4 7
5 6
6 5
7 4
8 3
9 2
10 1
```
CODEFORCES 1369_D. TediousLee
```
1
6
```
CODEFORCES 1391_C. Cyclic Permutations 
3
4
10
583291
20212111
CODEFORCES 1413_F. Roads and Ramen
```
5
1 2 0
1 3 0
3 5 0
3 4 0
5
3
4
1
3
4
```
CODEFORCES 1431_I. Cyclic Shifts
```
3 5 4
abacc
ccbba
ccabc
abacc
acbbc
ababa
acbbc


6 4 4
daac
bcba
acad
cbdc
aaaa
bcbb
dcdd
acba
bbbb
dbcd


5 10 5
ltjksdyfgg
cbhpsereqn
ijndtzbzcf
ghgcgeadep
bfzdgxqmqe
ibgcgzyfep
bbhdgxqmqg
ltgcgxrzep
ljnpseldgn
ghhpseyzcf


5 10 5
ltjksdyfgg
cbhpsereqn
ijndtzbzcf
ghgcgeadep
bfzdgxqmqe
ibgcgzyfep
bbhdgxqmqg
ltgcgxrzep
ljnpseldgn
ghhpseyzcf
```
CODEFORCES 1455_F. String and Operations
1
2 3
ab
CODEFORCES 147_B. Smile House
**Incorrect input format**

```
1 2
```

**Incorrect data type**

```
1 2
a b c d
```

**Off-by-one error**

```
4 4
1 2 -10 3
1 3 1 -10
2 4 -10 -1
3 4 0 -3
```

**Incorrect logic**

```
4 4
1 2 -10 3
1 3 1 -10
2 4 -10 -1
3 4 0 -3
```

**Infinite loop**

```
4 4
1 2 -10 3
1 3 1 -10
2 4 -10 -1
3 4 0 -3
```

**Memory leak**

```
4 4
1 2 -10 3
1 3 1 -10
2 4 -10 -1
3 4 0 -3
```

**Security vulnerability**

```
4 4
1 2 -10 3
1 3 1 -10
2 4 -10 -1
3 4 0 -3
```
CODEFORCES 1506_F. Triangular Paths
```
1
1
1
1
```
```
1
2
1 2
1 1
```
```
4
2
2 3
1 2
2
1 2
1 1
```
```
3
1 1 1
1 1 1
```
CODEFORCES 152_E. Garden
```
# 1. Incorrect input format

1 1 0

# 2. Incorrect data type

1 1 1
a

# 3. Incorrect calculation

3 3 2
1 2 3
1 2 3
1 2 3
1 2
3 3

# 4. Incorrect output format

3 3 2
1 2 3
1 2 3
1 2 3
1 2
3 3
123

# 5. Other bugs

3 3 2
1 2 3
1 2 3
1 2 3
1 2
3 3
```
CODEFORCES 161_B. Discounts
```
3 2
2 1
3 2
3 1
```
CODEFORCES 180_D. Name
```
# Problem: CODEFORCES 180_D. Name
# Language: Python 3

# Inputs:

s = "abc"
t = "def"

# Output:

-1
```
CODEFORCES 203_E. Transportation
```
3 10 10
0 12 10
1 6 10
0 1 1
```
CODEFORCES 228_D. Zigzag
```
1
1
1
2
1 1 2
```

```
5
1 2 3 4 5
4
2 2 3 2
2 1 5 3
1 3 5
2 1 5 3
```

```
10
42 28 88 18 6 99 58 58 55 61
4
1 10 4
2 9 10 4
1 1 10
```

```
5
1 2 3 4 5
4
1 2 3 2
2 1 5 3
1 3 5
2 1 5 3
```
CODEFORCES 252_B. Unsorting Array
```
1
1

2
1 1

4
1 2 3 4

3
1 1 1

5
1 2 3 4 5
```
CODEFORCES 277_C. Game
```
2 1 0

2 2 4
0 1 2 1
0 1 2 1
1 2 1 0
1 1 1 2
```
CODEFORCES 29_E. Quarrel
1. Incorrect input format

```
2 1
1 2
```

2. Incorrect data

```
2 1
1 2
```

3. Incorrect solution

```
2 1
1 2
```

4. Inefficient solution

```
2 1
1 2
```

5. Incorrect implementation

```
2 1
1 2
```

6. Runtime errors

```
2 1
1 2
```

7. Memory errors

```
2 1
1 2
```
CODEFORCES 323_C. Two permutations
```
3
3 1 2
3 2 1
1
1 2 3 3
```
CODEFORCES 348_A. Mafia
```
3
3 2 2
```

```
4
2 2 2 2
```

```
1
1
```

```
5
5 5 5 5 5
```
CODEFORCES 371_B. Fox Dividing Cheese
1. 14 8
2. 6 6
3. 21 13
4. 1000000000 1000000000
5. 1 1000000000
6. 1000000000 1
7. 1000000000 1000000000
8. 1000000000 1000000001
9. 1000000000 1000000002
10. 1000000000 1000000003
CODEFORCES 392_D. Three Arrays
```
1
1
```
```
2
1 2
1 2
```
```
3
1 2 3
2 3 4
3 4 5
```
```
10
1 1 2 2 3 3 4 4 5 5
2 2 4 4 3 3 1 1 5 5
3 3 1 1 4 4 2 2 3 3
```
CODEFORCES 415_E. Mashmokh and Reverse Operation
```
1
1 2
3
0 1 1
```
```
1
1 2
3
0 1 1
```
```
2
1 4 2 3
3
1 2 0
```
```
2
1 4 2 3
3
2 1 0
```
```
1
1 2
3
0 1 0
```
```
1
1 2
3
1 1 0
```
```
1
1 2
3
2 1 1
```
```
1
1 2
3
1 2 2
```
```
1
1 2
3
1 1 2
```
```
1
1 2
3
2 1 2
```
```
2
1 4 2 3
3
1 0 2
```
```
2
1 4 2 3
3
0 1 2
```
```
2
1 4 2 3
3
2 0 1
```
CODEFORCES 442_C. Artem and Array 
```
# Incorrect input format

1
2
```

```
# Incorrect output format

5
1 2 3 4 5

6
```

```
# Incorrect calculation of the maximum number of points

5
3 1 5 2 6

10
```

```
# Incorrect handling of edge cases

0

0
```

```
# Incorrect use of data structures

5
1 2 3 4 5

6
```

```
# Incorrect use of algorithms

5
1 2 3 4 5

6
```

```
# Incorrect error handling

5
1 2 3 4 5

6
```

```
# Incorrect testing

5
1 2 3 4 5

6
```
CODEFORCES 464_D. World of Darkraft - 2
```
1 3
2 1
10 2
```
CODEFORCES 488_C. Fight the Monster
1. Incorrect input format:
```
1 2 1
1 100 1
1 100 100
```

2. Incorrect calculation of the minimum number of bitcoins:
```
1 2 1
100 100 100
1 1 1
```

3. Off-by-one errors:
```
1 2 1
1 100 1
1 100 100
```

4. Incorrect use of floating-point numbers:
```
1 2 1
1 100 1
1 100 100
```

5. Incorrect use of pointers:
```
1 2 1
1 100 1
1 100 100
```
CODEFORCES 512_B. Fox And Jumping
```
3
100 99 9900
1 1 1
```
```
5
10 20 30 40 50
1 1 1 1 1
```
```
7
15015 10010 6006 4290 2730 2310 1
1 1 1 1 1 1 10
```
```
8
4264 4921 6321 6984 2316 8432 6120 1026
4264 4921 6321 6984 2316 8432 6120 1026
```
```
2
1 1
```
```
2
1000000000 1000000000
```
```
10
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
```
11
1 2 3 4 5 6 7 8 9 10 11
1 2 3 4 5 6 7 8 9 10 11
```
```
100
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000
```
CODEFORCES 536_C. Tavas and Pashmaks
```
3
1 3
2 2
3 1
```
```
3
1 2
1 1
2 1
```
```
3
100 1
101 1
102 1
```
CODEFORCES 560_D. Equivalent Strings
```
a
a

a
b

ab
ba

aaba
abaa

abc
cba

abcd
dcba

aabb
abab
CODEFORCES 586_F. Lizard Era: Beginning
```
1
0 0 0
```

```
2
1 0 0
1 1 0
```

```
3
1 0 0
0 1 0
0 0 1
```

```
4
1 0 0
0 1 0
0 0 1
0 0 0
```

```
5
1 0 0
0 1 0
0 0 1
0 0 0
-1 0 0
```

```
10
1 0 0
0 1 0
0 0 1
0 0 0
-1 0 0
1 0 0
0 1 0
0 0 1
0 0 0
-1 0 0
```
CODEFORCES 609_B. The Best Gift
```
4 3
2 1 3 1

4 3
1 2 3 4

2 2
1 2

2 2
2 1
```
CODEFORCES 630_A. Again Twenty Five!
1. ```
2
```

2. ```
1000000000000000000
```

3. ```
1000000000
```
CODEFORCES 656_E. Out of Controls
```
# 3
# 0 1 1
# 1 0 4
# 1 4 0

# 4
# 0 1 2 3
# 1 0 4 5
# 2 4 0 6
# 3 5 6 0
```
CODEFORCES 67_E. Save the City!
```
5
4 8
8 8
9 4
4 0
0 4

5
4 8
5 8
5 4
7 4
2 2

10
4 8
8 8
9 4
4 0
0 4
8 0
7 2
6 4
5 6
4 8

2
0 0
0 1
```
CODEFORCES 702_E. Analysis of Pathes in Functional Graph
```
1. Incorrect input format

```
1
1
```

```
2. Incorrect data type

```
1 2
1 2
```

```
3. Off-by-one errors

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```

```
4. Array out-of-bounds errors

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```

```
5. Infinite loops

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```

```
6. Memory leaks

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```

```
7. Incorrect algorithm

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```

```
8. Incorrect implementation

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```

```
9. Test case errors

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```

```
10. Misinterpretation of the problem statement

```
7 3
1 2 3 4 3 2 6
6 3 1 4 2 2 3
```
CODEFORCES 724_F. Uniformly Branched Trees
```
5 2 433416647
10 3 409693891
65 4 177545087
```
CODEFORCES 746_F. Music in Car
```
1 1 5
6
9
```
```
7 2 11
3 4 3 5 1 4 6
7 7 3 6 5 3 9
```
```
8 4 20
5 6 4 3 7 5 4 1
10 12 5 12 14 8 5 8
```
```
1 1 5
6
9
```
```
1 1 3
4
7
```
CODEFORCES 76_B. Mice
```
1 1 0 0
0
0
```

```
3 2 0 2
0 1 3
2 5
```

```
4 3 0 1
0 1 2 3
1 2
```

```
5 4 0 1
0 1 2 3 4
1 2 3 4
```
CODEFORCES 793_F. Julia the snail
```
8
4
1 2
3 4
2 5
6 7
5
1 2
1 4
1 6
2 7
6 8


10
10
3 7
1 4
1 6
5 5
1 1
3 9
7 8
1 2
3 3
7 10
10
2 4
1 7
3 4
3 5
2 8
2 5
5 5
3 5
7 7
3 10
```
CODEFORCES 814_C. An impassioned circulation of affection
```
1
z
1
1 z
```
CODEFORCES 83_C. Track
```
5 3 2
Sba
ccc
aac
ccc
abT

5 3 1
Sba
ccc
aac
ccc
abT

5 3 4
Sba
ccc
aac
ccc
abT

5 3 5
Sba
ccc
aac
ccc
abT

1 3 3
TyS

1 4 1
SxyT

1 4 2
SxyT
```
CODEFORCES 85_D. Sum of Medians
```
1
add 1000000000
```

This input tests whether the program can handle inputs with large numbers.

```
10
add 1
add 2
add 3
add 4
add 5
add 6
add 7
add 8
add 9
sum
```

This input tests whether the program can correctly find the sum of medians of a set of numbers.

```
10
add 1
add 2
add 3
add 4
del 3
del 4
del 2
del 1
sum
```

This input tests whether the program can correctly handle the case where the set is empty.

```
10
add 1
del 1
add 1
del 1
add 1
del 1
add 1
del 1
add 1
del 1
sum
```

This input tests whether the program can correctly handle the case where the set is repeatedly added to and deleted from.
CODEFORCES 886_D. Restoration of string
```
1
abc
```

```
3
ab
ac
bc
```

```
4
abc
def
ghi
jkl
```

```
2
kek
pre
```

```
2
kek
kek
```
CODEFORCES 909_D. Colorful Points
```
aabb

aabcaa

'123'

''

abc
```
CODEFORCES 931_A. Friends Meeting
```
1
2

3
4

101
99

5
10

1000
1
```
CODEFORCES 958_E2. Guard Duty (medium)
2 5
1 4 6 7 12
CODEFORCES 985_A. Chess Placing
**Incorrect input format**

```
1
1 2
```

**Incorrect output format**

```
1
```

**Incorrect calculation of the minimum number of moves**

```
6
1 2 6
```

**Incorrect handling of edge cases**

```
1
```

**Incorrect use of data structures**

```
10
1 2 3 4 5
```
HACKEREARTH abc-garfield
```
1
0 0 0 0
```
HACKEREARTH bobs-journey-5
```
2
2
bhopal
delhi
3
bhopal
delhi
dehradun
```
HACKEREARTH cube-change-qualifier2
2
1
3
HACKEREARTH friendless-dr-sheldon-cooper-14
1
3 3
1 2
2 3
1 3
HACKEREARTH jumping-frog
```
6
2 3 1 3 2 4
2
1 0 4
2 3 5
```
HACKEREARTH mind-palaces-3
```
5 5
-10 -5 -3 4 9
-6 -2 0 5 10
-4 -1 1 6 12
2 3 7 8 13
100 120 130 140 150
3
0
-2
170
```
```
2 3
3 1
-1 -1
```
HACKEREARTH palin-pairs
1
z
HACKEREARTH reversemerge-shuffle-reverse
```
abccba
```
HACKEREARTH special-matrix-1
1
5
...**
*....
....
....
....
HACKEREARTH trailing-zero-problem-1
```
1
5
```
```
1
7
```
```
1
10
```
```
1
3
```
```
1
15
```
```
1
20
```
```
1
100
```
```
1
1000
```
```
1
10000
```
```
1
100000
```
```
1
1000000
```
```
1
10000000
```
```
1
100000000
```
```
1
1000000000
```
ATCODER p02574 AtCoder Beginner Contest 177 - Coprime
```
2
2 3
```
```
2
3 3
```
```
3
4 5 6
```
```
3
6 10 15
```
```
3
6 10 16
```
```
3
1 1 1
```
```
3
1 2 3
```
```
3
7 11 13
```
```
4
2 3 4 5
```
```
5
1 2 3 4 5
```
ATCODER p02705 AtCoder Beginner Contest 163 - Circle Pond
```
1
73
```
ATCODER p02834 AtCoder Beginner Contest 148 - Playing Tag on Tree
```
5 4 1
1 2
2 3
3 4
3 5

5 4 5
1 2
1 3
1 4
1 5

2 1 2
1 2

9 6 1
1 2
2 3
3 4
4 5
5 6
4 7
7 8
8 9
```
ATCODER p02971 AtCoder Beginner Contest 134 - Exception Handling
```
3
1
4
3
```
```
2
5
5
```
```
1000000000
```
```
1000000000
```
```
1000000000
1000000000
```
ATCODER p03107 AtCoder Beginner Contest 120 - Unification
0011
11011010001011
0
ATCODER p03254 AtCoder Grand Contest 027 - Candy Distribution Again
```
3 70
20 30 10

3 10
20 30 10

4 1111
1 10 100 1000

2 10
20 20
```
ATCODER p03407 AtCoder Beginner Contest 091 - Two Coins
```
50 100 120
500 100 1000
19 123 143
19 123 142
```
ATCODER p03570 CODE FESTIVAL 2017 qual C - Yet Another Palindrome Partitioning
```
# 入力
S = input()

# 動的計画法
dp = [[0] * 26 for _ in range(len(S) + 1)]
dp[0][0] = 1
for i in range(len(S)):
    for j in range(26):
        dp[i + 1][j] = dp[i][j]
        if S[i] == chr(ord('a') + j):
            dp[i + 1][j] += dp[i][j - 1]

# 答え
print(min(dp[-1]))
```

**Input 1:**

```
aabxyyzz
```

**Input 2:**

```
byebye
```

**Input 3:**

```
abcdefghijklmnopqrstuvwxyz
```

**Input 4:**

```
abcabcxabcx
```
ATCODER p03725 AtCoder Grand Contest 014 - Closed Rooms
3 3 3
#.#
#S.
###

3 3 3
.#
S.

3 3 3

S#
ATCODER p03889 CODE FESTIVAL 2016 Relay (Parallel) - Mirror String
1. ```
pdbq
```
2. ```
ppqb
```
3. ```
bdb
```
4. ```
bpb
```
5. ```
b
```
6. ```
d
```
7. ```
p
```
8. ```
q
```
9. ```
bpbd
```
10. ```
qpbd
```
11. ```
qpbdp
```
12. ```
pbdqp
```
13. ```
pdbqpb
```
14. ```
pdbqpq
```
15. ```
pdbqpbqp
```
16. ```
pdbqpqpbqp
```
17. ```
pdbqpqpbqppdbqpq
```
ATCODER p04048 AtCoder Grand Contest 001 - Mysterious Light
```
5 2
```
```
10 2
```
```
1000000000 500000000
```
AIZU p00127 Pocket Pager Input
341143514535
314
143565553551655311343411652235654535651124615163
551544654451431564
4
3411
6363636363
153414
AIZU p00260 Cats Going Straight
```
8
0 0
3 2
6 2
8 6
6 5
7 7
0 4
3 4
8
0 0
5 3
5 2
4 1
6 1
8 6
6 4
2 4
0
```
AIZU p00447 Searching Constellation
5
8 5
6 4
4 3
7 10
0 10
10
10 5
2 7
9 7
8 10
10 2
1 2
8 1
6 7
6 0
0 9
5
904207 809784
845370 244806
499091 59863
638406 182509
435076 362268
10
757559 866424
114810 239537
519926 989458
461089 424480
674361 448440
81851 150384
459107 795405
299682 6700
254125 362183
50795 541942
0
AIZU p00638 Old Bridges
3
2 3
3 6
1 2
3
2 3
3 5
1 2
0
AIZU p00781 Lattice Practices
10000 01000 00100 11000 01100 11111 01110 11100 10110 11110
10101 01000 00000 11001 01100 11101 01110 11100 10110 11010
END
AIZU p00914 Equal Sum Sets
```
9 3 23
9 3 22
10 3 28
16 10 107
20 8 102
20 10 105
20 10 155
3 4 3
4 2 11
0 0 0
```
AIZU p01046 Yu-kun Likes a lot of Money
```
3 3 1 10
@0.
...
...
0 100

3 3 1 10
@#b
.#.
.#.
b 100

3 3 1 20
@*C
..*
...
C 10
```
AIZU p01179 Cousin's Aunt
1
C is A's father's brother's son's aunt

2
C is A's mother's brother's son's aunt
C is A

3
C is A's father's brother's son's aunt
C is A's mother's brother's son's aunt

4
C is A's son's mother's mother's son
C is A's aunt's niece's aunt's niece

5
C is A's father's son's brother
C is A's son's son's mother

6
C is A

7
C is A's son's mother's mother's son
C is A's son's son's mother
C is A's son's son's mother
C is A's son's son's mother
C is A's son's son's mother
C is A's son's son's mother
AIZU p01316 Differential Pulse Code Modulation
```
2 7
4
2
1
0
-1
-2
-4
131
137
2 7
4
2
1
0
-1
-2
-4
131
123
10 7
-4
-2
-1
0
1
2
4
132
134
135
134
132
128
124
122
121
122
5 1
255
0
0
0
0
0
4 1
0
255
0
255
0
0 0
```
AIZU p01484 Icy Composer
```
1 2 3
123
```
```
1 2 1
a
```
```
3 2 1
aa
```
```
3 2 2
bbb
```
```
3 3 1
b
```
```
3 3 2
ab
```
```
3 3 3
abc
```
AIZU p01646 Dictionary
```
0
```
AIZU p01797 Kimagure Cleaner
```
1 2 3
L 4 5
? 4 5
```
AIZU p01931 Check answers
```
3
oxx
```
AIZU p02069 Universal and Existential Quantifiers
```
5 10
0 2
2 4
0 3
1 3
3 4
```
AIZU p02211 Apple Adventure
```
5 5 2
s..#a
.#...
a#e.#
...#a
.#...
```
AIZU p02365 Minimum-Cost Arborescence
```
# Incorrect implementation of Prim's algorithm

def prim(graph, start):
  """Finds a minimum spanning tree in a weighted graph using Prim's algorithm.

  Args:
    graph: A weighted graph represented as an adjacency list.
    start: The starting vertex of the minimum spanning tree.

  Returns:
    A list of edges in the minimum spanning tree.
  """

  # Initialize the set of vertices in the minimum spanning tree.

  mst = set()

  # Initialize the distance from the starting vertex to each other vertex.

  distance = {v: float('inf') for v in graph}
  distance[start] = 0

  # Initialize a queue of vertices to be processed.

  queue = [start]

  # While there are vertices in the queue, continue processing them.

  while queue:

    # Dequeue the next vertex from the queue.

    u = queue.pop(0)

    # Add the vertex to the minimum spanning tree.

    mst.add(u)

    # For each neighbor of the vertex, update the distance if necessary.

    for v in graph[u]:
      if v not in mst and distance[v] > graph[u][v]:
        distance[v] = graph[u][v]
        queue.append(v)

  # Return the edges in the minimum spanning tree.

  return [
      (u, v, graph[u][v]) for u, v in graph.items() if u in mst and v in mst
  ]


# Incorrect data structure to represent the graph

def prim(graph, start):
  """Finds a minimum spanning tree in a weighted graph using Prim's algorithm.

  Args:
    graph: A weighted graph represented as an adjacency matrix.
    start: The starting vertex of the minimum spanning tree.

  Returns:
    A list of edges in the minimum spanning tree.
  """

  # Initialize the set of vertices in the minimum spanning tree.

  mst = set()

  # Initialize the distance from the starting vertex to each other vertex.

  distance = {v: float('inf') for v in graph}
  distance[start] = 0

  # Initialize a queue of vertices to be processed.

  queue = [start]

  # While there are vertices in the queue, continue processing them.

  while queue:

    # Dequeue the next vertex from the queue.

    u = queue.pop(0)

    # Add the vertex to the minimum spanning tree.

    mst.add(u)

    # For each neighbor of the vertex, update the distance if necessary.

    for v in range(len(graph)):
      if v not in mst and distance[v] > graph[u][v]:
        distance[v] = graph[u][v]
        queue.append(v)

  # Return the edges in the minimum spanning tree.

  return [
      (u, v, graph[u][v]) for u, v in graph.items() if u in mst and v in mst
  ]


# Not handling negative edge weights correctly

def prim(graph, start):
  """Finds a minimum spanning tree in a weighted graph using Prim's algorithm.

  Args:
    graph: A weighted graph represented as an adjacency list.
    start: The starting vertex of the minimum spanning tree.

  Returns:
    A list of edges in the minimum spanning tree.
  """

  # Initialize the set of vertices in the minimum spanning tree.

  mst = set()

  # Initialize the distance from the starting vertex to each other vertex.

  distance = {v: float('inf') for v in graph}
  distance[start] = 0

  # Initialize a queue of vertices to be processed.

  queue = [start]

  # While there are vertices in the queue, continue processing them.

  while queue:

    # Dequeue the next vertex from the queue.

    u = queue.pop(0)

    # Add the vertex to the minimum spanning tree.

    mst.add(u)

    # For