CODECHEF aran01
2
aaa
dgd
CODECHEF cieltomy
```
1
3 3
1 2 3
2 3 6
1 3 7
```
CODECHEF fact25
1. Input:
```
1
2
5
3
```

2. Input:
```
-1
0
100
```

3. Input:
```
10
100
```
CODECHEF lch15jab
1
zzqzqq
CODECHEF permsuff
```
1
4 2
3 1 2 4
1 4
```

```
1
7 4
3 1 2 4 5 7 6
1 2
4 4
6 7
2 3
4 2
```

```
1
3 0
1 3 2
```
CODECHEF sticks
```
1
2
2 1
```
```
2
3
3 2 1
4
1 2 2 3
```
CODEFORCES 1008_E. Guess two numbers
1. Incorrect input format:
```
n = int(input())
```

2. Incorrect output format:
```
print(1, 2)
```

3. Incorrect algorithm:
```
while True:
    x, y = map(int, input().split())
    if x == a and y == b:
        break
```

4. Runtime error:
```
for _ in range(600):
    x, y = map(int, input().split())
```

5. Memory error:
```
for _ in range(600):
    x, y = map(int, input().split())
    a, b = x, y
```
CODEFORCES 1031_C. Cram Time
```
3 3
```
```
5 10
```
```
3 9
```
```
6 6
```
```
10 10
```
CODEFORCES 1054_C. Candies Distribution
```
5
0 0 1 1 2
2 0 1 0 0

4
0 0 2 0
1 1 1 1

3
0 0 0
0 0 0
```
CODEFORCES 1076_C. Meme Problem
```
1
0
```
CODEFORCES 1097_C. Yuhao and a Parenthesis
1. ```
5
)())
)
((
((
(
```

2. ```
4
(
((
(((
(())
```

3. ```
2
(())
()
```
CODEFORCES 1118_D1. Coffee and Coursework (Easy version)
**Program inputs:**
```
5 8
2 3 1 1 2

5 10
1 3 4 2 1 4 2

5 15
5 5 5 5 5

5 16
5 5 5 5 5

5 26
5 5 5 5 5
```
CODEFORCES 1144_G. Two Merged Sequences
```
1
1000000000
```
```
5
1 2 4 0 2
```
```
1
1000000000
```
```
1
0
```
```
10
0 1 2 3 4 5 6 7 8 9
```
```
10
5 1 3 6 8 2 9 0 10
```
```
10
1 1 1 1 1 1 1 1 1 1
```
CODEFORCES 1165_F1. Microtransactions (easy version)
1. ```
n,m=map(int,input().split())
k=[int(x) for x in input().split()]
dp=[0]*(n+1)
for i in range(m):
    t,t1=map(int,input().split())
    dp[t1]+=1
for i in range(1,n+1):
    dp[i]=max(dp[i-1],dp[i]+k[i-1])
print(dp[n])
```

2. ```
n,m=map(int,input().split())
k=[int(x) for x in input().split()]
c=[0]*(n+1)
for i in range(m):
    t,t1=map(int,input().split())
    c[t1]+=1
for i in range(1,n+1):
    k[i-1]=k[i-1]+c[i]
print(max(k))
```
CODEFORCES 1184_D2. Parallel Universes (Hard)
```
1 1 10
2 1 10
3 2 3
3 2 5
10 4 20
```
CODEFORCES 1203_B. Equal Rectangles
```
1
1
1 1 10 10
```
```
2
2
10 5 2 10 1 1 2 5
```
```
2
3
10 5 1 10 5 1 1 1
```
```
1
1
10000 10000 10000 10000
```
```
10
2
1 2 3 4 5 6 7 8 9 10
3
1 2 3 4 5 6 7 8 9 10
1
1 2 3 4 5 6 7 8 9 10
2
1 2 1 2 1 2 1 2 1 2
2
1 2 1 2 1 2 1 2 1 2
2
1 1 1 1 1 1 1 1 1 1
1
10000 10000 10000 10000
1
1
10000 10000 10000 10000
```
CODEFORCES 121_D. Lucky Segments
```
4 7
1 4
6 9
4 7
3 5
```
CODEFORCES 1245_A. Good ol' Numbers Coloring
```
1
100 100
```
```
1
1 100
```
```
1
10 9
```
```
1
7 3
```
```
3
1 10
2 2
10 10
```
CODEFORCES 1264_E. Beautiful League
**Incorrect input format**

```
3 1 1 2
```

**Incorrect output format**

```
010 001 100
```

**Incorrect logic**

```
3 1 1 2
```

**Incorrect data**

```
3 1 1 2
```

**Runtime errors**

```
3 1 1 2
```

**Time complexity**

```
3 1 1 2
```
CODEFORCES 1286_B. Numbers on Tree
```
# 1286B. Numbers on Tree
# https://codeforces.com/problemset/problem/1286/B

def dfs(curr, par, c, subtree_size, subtree_min):
    global ans

    if c != 0:
        subtree_min += 1
    if par != 0:
        subtree_min = min(subtree_min, ans[par])
    ans[curr] = subtree_size + subtree_min

    for child in graph[curr]:
        if child != par:
            dfs(child, curr, c + 1, subtree_size, subtree_min)


n = int(input())
graph = [[] for _ in range(n + 1)]
for _ in range(n - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

ans = [0 for _ in range(n + 1)]
dfs(1, 0, 0, 0, 0)
print('YES')
print(*ans[1:])
```

**Incorrect implementation of the tree traversal algorithm.**
```
# 1286B. Numbers on Tree
# https://codeforces.com/problemset/problem/1286/B

def dfs(curr, par, c, subtree_size, subtree_min):
    global ans

    if c != 0:
        subtree_min += 1
    if par != 0:
        subtree_min = min(subtree_min, ans[par])
    ans[curr] = subtree_size + subtree_min

    for child in graph[curr]:
        if child != par:
            dfs(child, curr, c + 1, subtree_size, subtree_min)


n = int(input())
graph = [[] for _ in range(n + 1)]
for _ in range(n - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

ans = [0 for _ in range(n + 1)]
dfs(2, 1, 0, 0, 0)
print('YES')
print(*ans[1:])
```

**Incorrect calculation of the subtree size.**
```
# 1286B. Numbers on Tree
# https://codeforces.com/problemset/problem/1286/B

def dfs(curr, par, c, subtree_size, subtree_min):
    global ans

    if c != 0:
        subtree_min += 1
    if par != 0:
        subtree_min = min(subtree_min, ans[par])
    ans[curr] = subtree_size + subtree_min

    for child in graph[curr]:
        if child != par:
            dfs(child, curr, c + 1, subtree_size + 1, subtree_min)


n = int(input())
graph = [[] for _ in range(n + 1)]
for _ in range(n - 1):
    u, v = map(int, input().split())
    graph[u].append(v)
    graph[v].append(u)

ans = [0 for _ in range(n + 1)]
dfs(1, 0, 0, 0, 0)
print('YES')
print(*ans[1:])
```

**Incorrect calculation of the minimum value in the subtree.**
```
# 1286B. Numbers on Tree
# https://codeforces.com/problemset/problem/1286/B

def dfs(curr, par, c, subtree_size, subtree_min):
    global ans

    if c != 0:
        subtree_min += 1
    if par != 0:
        subtree_min = min(subtree_min, ans[par])
    ans[curr] = 
CODEFORCES 1305_C. Kuroni and Impossible Calculation
```
2 10
8 5

3 12
1 4 5

3 7
1 4 9

10 100
1 2 3 4 5 6 7 8 9 10

10 1000
1000 1000 1000 1000 1000 1000 1000 1000 1000 1000
```
CODEFORCES 1329_E. Dreamoon Loves AA
```
1
10 3 1
0 5 7
```
CODEFORCES 1349_E. Slime and Hats
```
5
0 1 1 0 0

4
0 0 0 4

6
0 0 0 0 0 0

4
1 2 3 4

3
0 0 0
```
CODEFORCES 136_C. Replacement
**1. Incorrect input format**

```
1
a
```

**2. Incorrect output format**

```
5
1 2 3 4 5
```

**3. Incorrect algorithm**

```
n = int(input())
arr = list(map(int, input().split()))
arr.sort()
print(*arr)
```

**4. Incorrect implementation**

```
n = int(input())
arr = list(map(int, input().split()))
arr.sort()
print(*arr[1:])
```

**5. Incorrect testing**

```
n = int(input())
arr = list(map(int, input().split()))
arr.sort()
print(*arr)
```
CODEFORCES 1392_C. Omkar and Waterslide
1
4
5 3 2 5

CODEFORCES 1416_E. Split
1
3
6 8 2
1
4
3
5 6 6
CODEFORCES 1433_D. Districts Connection
```
1
3
1 2 2
```
CODEFORCES 1458_C. Latin Square
1. **Incorrect input format**
```
1
3 1
1 2 3
2 3 1
3 1 2
C
```

2. **Incorrect data type**
```
1
3 1
1 2 3
2 3 1
3 1 2
a
```

3. **Incorrect logic**
```
1
3 1
1 2 3
2 3 1
3 1 2
R
```

4. **Off-by-one errors**
```
1
3 1
1 2 3
2 3 1
3 1 2
CIC
```

5. **Memory errors**
```
1000000000
1
1
1
```

6. **Timeout errors**
```
1000000000
1000000000
1 2 3
2 3 1
3 1 2
C
```

7. **Other errors**
```
1
3 1
1 2 3
2 3 1
3 1 2
CICU
```
CODEFORCES 1481_C. Fence Painting
1
2 1
1 1
1 1
1
1
1 2
1 2
1 2
1
5 2
1 2 2 1 1
1 2 2 1 1
1 2
3 3
2 2 2
2 2 2
2 3 2
10 5
7 3 2 1 7 9 4 2 7 9
9 9 2 1 4 9 4 2 3 9
9 9 7 4 3
5 2
1 2 2 1 1
1 2 2 1 1
3 3
6 4
3 4 2 4 1 2
2 3 1 3 1 1
2 2 3 4
CODEFORCES 1508_D. Swap Pass
```
3
5 4 1
0 0 2
-3 -2 3
```
```
5
-1 -2 2
3 0 5
1 3 4
4 -3 3
5 2 1
```
```
3
5 4 1
0 0 2
-3 -2 3
```
```
1
2
```
```
2
1 2
2 3
```
```
3
1 1 1
2 2 2
3 3 3
```
```
4
1 2
2 3
3 4
4 1
```
```
6
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
6 6 6
```
```
8
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
6 6 6
7 7 7
8 8 8
```
```
8
1 1 1
2 2 2
3 3 3
4 4 4
5 5 5
6 6 6
7 7 7
8 8 8
```
CODEFORCES 1534_E. Lost Array
1. Incorrect input format

```
5 3
4
0
1
```

2. Invalid queries

```
5 3
1 2 3 4 5
```

3. Exceeding the query limit

```
5 3
1 2 3 4 5
```

4. Not flushing the output

```
5 3
1 2 3 4 5
```

5. Using the wrong data type

```
5 3
1 2 3 4 5
```

6. Using the wrong algorithm

```
5 3
1 2 3 4 5
```
CODEFORCES 162_B. Binary notation
1. ```
1
```
2. ```
1234567890
```
3. ```
-1
```
4. ```
1000000000
```
5. ```
a
```
CODEFORCES 181_C. Trading Business
1. Incorrect input format

```
1 1 10
a
```

2. Incorrect output format

```
1 1 10
Venus
6 5 3
7 6 5
8 6 10
Earth
10 9 0
8 6 4
10 9 3
Mars
4 3 0
8 4 12
7 2 5
3
```

3. Incorrect calculation of profit

```
1 1 10
Venus
6 5 3
7 6 5
8 6 10
Earth
10 9 0
8 6 4
10 9 3
Mars
4 3 0
8 4 12
7 2 5
-10
```

4. Incorrect handling of overflow

```
1 1 1000000000
Venus
6 5 3
7 6 5
8 6 10
Earth
10 9 0
8 6 4
10 9 3
Mars
4 3 0
8 4 12
7 2 5
```

5. Incorrect handling of underflow

```
1 1 0
Venus
6 5 3
7 6 5
8 6 10
Earth
10 9 0
8 6 4
10 9 3
Mars
4 3 0
8 4 12
7 2 5
-10
```

6. Incorrect handling of division by zero

```
1 1 0
Venus
6 5 3
7 6 5
8 6 10
Earth
10 9 0
8 6 4
10 9 3
Mars
4 3 0
8 4 12
7 2 5
0
```
CODEFORCES 204_E. Little Elephant and Strings
```
3 1
abc
a
ab

3 2
abc
a
ab

5 3
aaa
bbb
ccc
ddd
eee

7 4
rubik
furik
abab
baba
aaabbbababa
abababababa
zero
```
CODEFORCES 229_D. Towers
```
5
8 2 7 3 1
```
```
3
5 2 1
```
```
1000000 1000000
```
CODEFORCES 253_B. Physics Practical
**Incorrect input format**

```
1
2 3
```

**Incorrect output format**

```
1
```

**Incorrect algorithm**

```
n = int(input())
a = list(map(int, input().split()))
print(len(a) - 1)
```

**Incorrect runtime**

```
n = int(input())
a = list(map(int, input().split()))
print(len(a) - 1)
```

**Incorrect memory usage**

```
n = int(input())
a = list(map(int, input().split()))
print(len(a) - 1)
```
CODEFORCES 278_C. Learning Languages
```
5 5
1 2
2 2 3
2 3 4
2 4 5
1 5

8 7
0
3 1 2 3
1 1
2 5 4
2 6 7
1 3
2 7 4
1 1

2 2
1 2
0
```
CODEFORCES 300_B. Coach
```
3 0
```

```
6 4
1 2
2 3
3 4
5 6
```

```
3 3
1 2
2 3
1 3
```
CODEFORCES 325_E. The Red Button
1. 2
2. 3
3. 4
4. 16
5. 100
6. 1000
7. 10000
8. 100000
9. 1000000
10. 10000000
CODEFORCES 349_A. Cinema Line
```
1
100
```
```
4
25 25 50 50
```
```
2
25 100
```
```
4
50 50 25 25
```
```
1
25
```
```
2
50 50
```
CODEFORCES 372_B. Counting Rectangles is Fun
```
5 5 5
00101
00000
00001
01000
00001
1 2 2 4
4 5 4 5
1 2 5 2
2 2 4 5
4 2 5 3
```
CODEFORCES 393_D. Tower of Hanoi
```
# 393_D. Tower of Hanoi

t1 = [int(x) for x in input().split()]
t2 = [int(x) for x in input().split()]
t3 = [int(x) for x in input().split()]
n = int(input())

dp = [[[0] * (n + 1) for _ in range(4)] for _ in range(4)]

for i in range(4):
    for j in range(4):
        if i == j:
            dp[i][j][0] = 0
        else:
            dp[i][j][0] = float('inf')

for k in range(1, n + 1):
    for i in range(4):
        for j in range(4):
            for l in range(4):
                if i == j or j == l or l == i:
                    continue
                dp[i][j][k] = min(dp[i][j][k], dp[i][l][k - 1] + t1[i] + t2[l])
                dp[i][j][k] = min(dp[i][j][k], dp[i][l][k - 1] + t2[i] + t3[l])
                dp[i][j][k] = min(dp[i][j][k], dp[l][i][k - 1] + t1[j] + t2[l])
                dp[i][j][k] = min(dp[i][j][k], dp[l][i][k - 1] + t2[j] + t3[l])
                dp[i][j][k] = min(dp[i][j][k], dp[l][j][k - 1] + t1[i] + t3[l])
                dp[i][j][k] = min(dp[i][j][k], dp[l][j][k - 1] + t2[i] + t3[l])

print(dp[1][3][n])
```

```
# 393_D. Tower of Hanoi

t1 = [int(x) for x in input().split()]
t2 = [int(x) for x in input().split()]
t3 = [int(x) for x in input().split()]
n = int(input())

dp = [[0] * (n + 1) for _ in range(4)]

for i in range(4):
    for j in range(4):
        if i == j:
            dp[i][j] = 0
        else:
            dp[i][j] = float('inf')

for k in range(1, n + 1):
    for i in range(4):
        for j in range(4):
            for l in range(4):
                if i == j or j == l or l == i:
                    continue
                dp[i][j] = min(dp[i][j], dp[i][l] + t1[i] + t2[l])
                dp[i][j] = min(dp[i][j], dp[i][l] + t2[i] + t3[l])
                dp[i][j] = min(dp[i][j], dp[l][i] + t1[j] + t2[l])
                dp[i][j] = min(dp[i][j], dp[l][i] + t2[j] + t3[l])
                dp[i][j] = min(dp[i][j], dp[l][j] + t1[i] + t3[l])
                dp[i][j] = min(dp[i][j], dp[l][j] + t2[i] + t3[l])

print(dp[1][3])
```

```
# 393_D. Tower of Hanoi

t1 = [int(x) for x in input().split()]
t2 = [int(x) for x in input().split()]
t3
CODEFORCES 416_E. President's Path
```
1
```

This input will cause an incorrect input format error, because the number of cities is not an integer.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
```

This input will cause an incorrect data type error, because the number of cities is a string.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
100
```

This input will cause an off-by-one error, because the shortest path from city 1 to city 5 is 4 miles, but the program will incorrectly compute the shortest path as 5 miles.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
1 2
```

This input will cause an incorrect algorithm error, because the program will use a breadth-first search algorithm to compute the shortest path, when a depth-first search algorithm would be more efficient.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
1 2 3
```

This input will cause a memory leak, because the program will not properly release memory that it has allocated.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
1 2 3 4
```

This input will cause a race condition, because two threads are trying to access the same data at the same time.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
1 2 3 4 5
```

This input will cause a deadlock, because two or more threads are waiting for each other to release a lock.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
1 2 3 4 5 6
```

This input will cause a buffer overflow, because the program is not properly checking the size of a buffer before writing data to it.

```
5 6
1 2 1
2 3 1
3 4 1
4 1 1
2 4 2
4 5 4
1 2 3 4 5 6 a
```

This input will cause a format error, because the program is not printing the results in the correct format.
CODEFORCES 443_C. Borya and Hanabi
```
1
R1

2
R1 G1

3
R1 G1 B1

4
R1 G1 B1 Y1

5
B1 Y1 W1 G1 R1

6
B1 Y1 W1 G1 R1 B1

7
B1 Y1 W1 G1 R1 B1 R1

8
B1 Y1 W1 G1 R1 B1 R1 R1

9
B1 Y1 W1 G1 R1 B1 R1 R1 R1

10
B1 Y1 W1 G1 R1 B1 R1 R1 R1 R1
```
CODEFORCES 465_D. Restore Cube 
```
# Incorrect input format

1 2 3
4 5 6
7 8 9
10 11 12
13 14 15
16 17 18
19 20 21
22 23 24

# Malformed input data

1 2 3
4 5 6
7 8 9
10 11 12
1 2 3
4 5 6
7 8 9
10 11 12

# Incorrect output format

0 0 0
0 0 1
0 0 1
0 0 1
0 1 1
0 1 1
0 1 1
1 1 1

# Incorrect solution

0 0 0
0 0 0
0 0 0
0 0 0
1 1 1
1 1 1
1 1 1
1 1 1

# Inefficient solution

0 0 0
0 0 0
0 0 0
0 0 0
1 1 1
1 1 1
1 1 1
1 1 1

# Memory leak

0 0 0
0 0 0
0 0 0
0 0 0
1 1 1
1 1 1
1 1 1
1 1 1

# Security vulnerability

0 0 0
0 0 0
0 0 0
0 0 0
1 1 1
1 1 1
1 1 1
1 1 1

# Other bugs

0 0 0
0 0 0
0 0 0
0 0 0
1 1 1
1 1 1
1 1 1
1 1 1
```
CODEFORCES 489_C. Given Length and Sum of Digits...
1. **Incorrect data type**

```
m, s = map(int, input().split())
```

2. **Incorrect algorithm**

```
def find_smallest_number(m, s):
    if s == 0:
        return '0'
    if m == 1:
        return str(s)
    return find_smallest_number(m - 1, s - 1) + '9'

def find_largest_number(m, s):
    if s == 0:
        return '0'
    if m == 1:
        return str(s)
    return find_largest_number(m - 1, s - 1) + '0'

m, s = map(int, input().split())

if m == 0 or s < 0:
    print('-1 -1')
else:
    print(find_smallest_number(m, s), find_largest_number(m, s))
```

3. **Incorrect output format**

```
m, s = map(int, input().split())

if m == 0 or s < 0:
    print('-1 -1')
else:
    print(find_smallest_number(m, s), find_largest_number(m, s))
```

4. **Missing boundary checks**

```
m, s = map(int, input().split())

if m == 0 or s < 0:
    print('-1 -1')
else:
    print(find_smallest_number(m, s), find_largest_number(m, s))
```

5. **Other bugs**

```
m, s = map(int, input().split())

if m == 0 or s < 0:
    print('-1 -1')
else:
    print(find_smallest_number(m, s), find_largest_number(m, s))
```
CODEFORCES 513_B1. Permutations
```
1 1
2 1
3 1
4 2
5 2
6 3
7 4
8 5
```
CODEFORCES 538_C. Tourist's Notes
**Incorrect input format**

```
1 1
2 0
```

**Incorrect data**

```
8 2
2 0
7 3
```

**Incorrect logic**

```
8 2
2 0
7 0
```

**Incorrect output format**

```
8 2
2 0
7 0
IMPOSSIBLE
```

**Other bugs**

```
8 2
2 0
7 0
2
```
CODEFORCES 566_D. Restructuring Company
```
5 6
1 2 3
2 4 5
1 3 5
2 1 2
3 1 4
```
CODEFORCES 587_E. Duff as a Queen
5 5
1 2 3 4 2
2 1 5
1 2 2 8
2 1 5
1 1 3 10
2 2 2
CODEFORCES 60_A. Where Are My Flakes?
```
1 0
```
CODEFORCES 630_F. Selection of Personnel
7

10

777
CODEFORCES 658_C. Bear and Forgotten Tree 3
**1. Incorrect input format**

```
5 3 2
```

**2. Incorrect output format**

```
1 2
1 3
3 4
3 5
1
```

**3. Using the wrong data type**

```
n, d, h = input().split()
n = int(n)
d = int(d)
h = int(h)
```

**4. Off-by-one errors**

```
edges = [[1, 2], [1, 3], [3, 4], [3, 5]]
print(len(edges))
```

**5. Logical errors**

```
if h == 1:
    if d == n - 1:
        print(-1)
    else:
        print(1, 2)
else:
    if d == h + 1:
        print(-1)
    else:
        print(1, 2)
        print(1, h + 1)
        for i in range(3, n):
            print(i, i + 1)
```

**6. Infinite loops**

```
while True:
    print(1)
```

**7. Memory leaks**

```
file = open('file.txt', 'w')
file.write('hello world')
file.close()
```
CODEFORCES 680_E. Bear and Square Grid
```
5 2
..XXX
XX.XX
X.XXX
X...X
XXXX.
```
```
5 3
.....
.XXX.
.XXX.
.XXX.
.....
```
```
5 4
..XXX
XX.XX
X.XXX
X...X
XXXX.
```
```
5 5
..XXX
XX.XX
X.XXX
X...X
XXXX.
```
```
5 6
..XXX
XX.XX
X.XXX
X...X
XXXX.
```
```
5 7
..XXX
XX.XX
X.XXX
X...X
XXXX.
```
CODEFORCES 703_D. Mishka and Interesting sum
```
3
3 7 8
1
1 3
```

```
7
1 2 1 3 3 2 3
5
4 7
4 5
1 3
1 7
1 5
```

```
1
1
```

```
10
5 4 10 9 2 3 4 2 1 1
10
1 10
```

```
10
1 3 5 7 9 11 13 15 17 19
10
1 10
```
CODEFORCES 725_D. Contest Balloons
```
8
20 1000
32 37
40 1000
45 50
16 16
16 16
14 1000
2 1000
```
CODEFORCES 747_D. Winter Is Coming
1. ```
4 3 -5 20 -3 0
```

2. ```
4 2 -5 20 -3 0
```

3. ```
10 6 2 -5 1 3 0 0 -4 -3 1 0
```

4. ```

```
CODEFORCES 770_A. New Password
```
1 1
```
```
10 5
```
```
100 100
```
```
100 1
```
```
3 3
```
```
100 10
```
```
10 2
```
CODEFORCES 794_D. Labelling Cities
**1. The input format is not correct**

```
2 1
1 2
```

**2. The output format is not correct**

```
4 3
1 2
1 3
1 4
NO
```

**3. The program does not consider all possible cases**

```
4 3
1 2
1 3
1 4
```

**4. The program has a bug**

```
4 3
1 2
1 3
1 4
YES
1 2 3 4
```
CODEFORCES 815_C. Karen and Supermarket
```
1 1
```

```
1 1
1 1
```

```
1 10
1 10
```

```
5 10
3 1
3 1 1
3 1 2
3 1 3
3 1 4
```
CODEFORCES 840_C. On the Bench
```
3
1 2 4

7
5 2 4 2 4 1 1

10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 860_D. Wizard's Tour
```
4 5
1 2
3 2
2 4
3 4
4 1

10 10
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 1
```
CODEFORCES 887_C. Solution for Cube
**Incorrect input format**

```
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
```

**Incorrect output format**

```
YESYES
```

**Incorrect logic**

```
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
```

**Memory leaks**

```
#include <stdio.h>

int main() {
    int i, n;
    scanf(" %d ", &n);
    int *a = malloc(n * sizeof(int));
    for (i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    free(a);
    return 0;
}
```

**Race conditions**

```
#include <pthread.h>

int main() {
    pthread_t tid1, tid2;
    int i, n;
    scanf(" %d ", &n);
    int *a = malloc(n * sizeof(int));
    for (i = 0; i < n; i++) {
        scanf(" %d ", &a[i]);
    }
    pthread_create(&tid1, NULL, &solve_cube, a);
    pthread_create(&tid2, NULL, &solve_cube, a);
    pthread_join(tid1, NULL);
    pthread_join(tid2, NULL);
    free(a);
    return 0;
}

void solve_cube(int *a) {
    // ...
}
```

**Security vulnerabilities**

```
#include <stdio.h>
#include <stdlib.h>

int main() {
    char *buffer = malloc(100);
    scanf(" %s ", buffer);
    printf(" %s ", buffer);
    free(buffer);
    return 0;
}
```
CODEFORCES 90_C. Robbery
```
2 3 1
2 3
3 2 2
4 1 3
CODEFORCES 931_F. Teodor is not a liar!
```
1 4
1 2
3 4
```

```
2 4
1 2
3 4
```

```
4 6
1 3
2 3
4 6
5 6
```

```
6 10
1 3
2 3
4 5
5 6
7 8
8 9
9 10
```
CODEFORCES 959_A. Mahmoud and Ehab and the even-odd game
```
1
2
4
9
10
```
CODEFORCES 985_F. Isomorphic Strings
```
1 1
a
```

```
10 1
abc
```

```
7 4
abacaba
1 1 1
1 4 2
2 1 3
2 4 3
```

```
10 4
abc
1 2 2
1 5 4
2 1 3
2 4 3
```

```
10 4
abc
1 2 2
1 5 4
2 1 3
2 4 3
```

```
10 4
abc
1 2 2
1 5 4
2 1 3
2 4 3
```
HACKEREARTH acronym-2
1
a
2
hello a
H.A
HACKEREARTH brattleship-3
```
1
2 3 2
```
HACKEREARTH cypher
1
tdaejjptlzec
HACKEREARTH fun-with-string
```
my name is xavier
2
Wordrev 3
sortword 2
HACKEREARTH just-shortest-distance-problem
```
4 7
1 4
2 1 2
2 2 3
2 3 4
1 4
2 2 4
1 4
```
HACKEREARTH minimum-magic-tricks
```
1
1

3
2

10
3
```
HACKEREARTH palindrome-string-8
3
code
pop
abb
HACKEREARTH rivalry-of-code-3
1
ab
a
HACKEREARTH splendid-matrices-10

HACKEREARTH tricky-triplet-2
10
1 2 3 4 5 6 7 8 9 10
ATCODER p02579 AtCoder Beginner Contest 176 - Wizard in Maze
```
4 4
1 1
4 4
..#.
..#.
.#..
.#..


4 4
1 4
4 1
.##.


4 4
2 2
3 3
....
....
....
....


4 5
1 2
2 5
.###
.
..##
..##
```
ATCODER p02710 AtCoder Beginner Contest 163 - path pass i
3
1 2 1
1 2
2 3
ATCODER p02839 AtCoder Beginner Contest 147 - Balanced Path
```
2 2
1 2
3 4
3 4
2 1


2 3
1 10 80
80 10 1
1 2 3
4 5 6
```
ATCODER p02976 AtCoder Grand Contest 035 - Even Degrees
4 4
1 2
2 3
3 4
4 1

4 5
1 2
2 3
3 4
4 5
2 5

3 2
1 2
2 1
ATCODER p03112 AtCoder Beginner Contest 119 - Lazy Faith
1
2
3
100
101
102
100
101
102

ATCODER p03259 AtCoder Grand Contest 027 - Grafting
```
1
3
1 2
2 3
1 3
3 2
```

```
2
6
1 2
2 3
3 4
4 5
5 6
1 2
2 4
4 3
3 5
5 6
```

```
3
8
2 7
4 8
8 6
7 1
7 3
5 7
7 8
4 2
5 2
1 2
8 1
3 2
2 6
2 7
```

```
4
1
1
```

```
5
1
1
```

```
6
1
1
```

```
7
1
1
```

```
8
1
1
```

```
9
1
1
```
ATCODER p03415 AtCoder Beginner Contest 090 - Diagonal String
```
ant
obe
rec
```

```
edu
cat
ion
```

```
qwertyuiop
asdfghjkl
zxcvbnm
```

```
123456789
987654321
```

```
abcdefghijklmnopqrstuvwxyz
```
ATCODER p03575 AtCoder Beginner Contest 075 - Bridge
```
2 1
1 2
```
```
3 3
1 2
1 3
2 3
```
```
6 5
1 2
2 3
3 4
4 5
5 6
```
```
7 7
1 3
2 7
3 4
4 5
4 6
5 6
6 7
```
```
8 10
1 2
1 3
2 3
4 5
5 6
6 7
7 8
8 1
2 4
```
ATCODER p03730 AtCoder Beginner Contest 060 - Choose Integers
```
# 1. Using the wrong data type

```python
A, B, C = map(int, input().split())

# This will cause an error because `C` is a negative integer.
print("YES" if (C % B) == 0 else "NO")
```

```
# 2. Using the wrong operators

```python
A, B, C = map(int, input().split())

# This will give the wrong answer because `C` is divided by `B`, instead of being moduloed by `B`.
print("YES" if (C / B) == 0 else "NO")
```

```
# 3. Not considering the case where `C` is negative

```python
A, B, C = map(int, input().split())

# This will give the wrong answer because `C` is negative.
print("YES" if (C % B) == 0 else "NO")
```

```
# 4. Not considering the case where `A` is equal to `B`

```python
A, B, C = map(int, input().split())

# This will always give the answer `YES` because `A` and `B` are equal.
print("YES")
```

```
# 5. Not considering the case where `B` is equal to 1

```python
A, B, C = map(int, input().split())

# This will always give the answer `YES` because `B` is equal to 1.
print("YES")
```

```
# 6. Not considering the case where `A` is equal to 1 and `B` is equal to 1

```python
A, B, C = map(int, input().split())

# This will always give the answer `YES` because `A` and `B` are both equal to 1.
print("YES")
```

### Valid program inputs:

```
1 1 0
```

```
2 2 1
```

```
1 100 97
```

```
40 98 58
```

```
77 42 36
```
ATCODER p03894 CODE FESTIVAL 2016 Relay (Parallel) - Magician
```
2
5
4 5
1 2
```
AIZU p00000 QQ
```
for i in range(1,10):
  for j in range(1,10):
    print(i,'x',j,'=',i*j,end='   ')
  print()
```
AIZU p00132 Jigsaw Puzzle
```
14 20
####################
###.............####
####..........######
#######.....########
########.....#######
###..###......######
###..####......#####
#########......#####
###########.....####
############.....###
###.########......##
###.#######...###.##
##...###....#####.##
####################
10
12 15
#############..
.##########....
....#####......
.....#####.....
.....######....
......######...
......######...
........#####..
.........#####.
.........######
........###...#
.....####.....#
3 3
#..
###
#..
2 2
##
##
4 10
....#####.
....######
...###...#
####.....#
6 5
....#
..###
#####
##.##
#..##
#..#.
6 4
...#
.###
####
##.#
##.#
#...
2 6
######
.#####
2 7
..#####
#######
2 13
#############
.##########..
6 9
#####....
.######..
.######..
..######.
...#####.
....#####
8
3 1 2 3
4 1 2 3 4
7 2 3 4 5 6 7 8
5 2 3 10 7 8
6 2 3 9 5 6 4
8 2 3 4 6 9 5 4 10
4 4 5 6 9
5 10 2 3 4 9
0 0

14 20

.............####
..........######
.....########
.....#######
..###......######
..####......#####
......#####
.....####
.....###
.########......##
.#######...###.##
...###....#####.##

10
12 15
..
.##########....
....#####......
.....#####.....
.....######....
......######...
......######...
........#####..
.........#####.
.........######
........###...#
.....####.....#
3 3
..

..
2 2


4 10
....#####.
....######
...###...#
.....#
6 5
....#
..###

.##
..##
..#.
6 4
...#
.###

.#
.#
...
2 6

.#####
2 7
..#####

2 13

.##########..
6 9
....
.######..
.######..
..######.
...#####.
....#####
8
3 1 2 3
4 1 2 3 4
7 2 3 4 5 6 7 8
5 2 3 10 7 8
6 2 3 9 5 6 4
8 2 3 4 6 9 5 4 10
4 4 5 6 9
5 10 2 3 4 9
0 0
```
AIZU p00265 Modular Query
1. ```
3 3
9 3 8
4
6
5
```
2. ```
4 3
12 3 5 2
10
5
2
```
3. ```
5 4
4 8 10 20 30
2
10
5
15
```
4. ```
6 6
10 15 30 100 300 1000
5
10
20
30
50
100
```
5. ```
7 7
2 4 6 8 10 12 14
3
6
9
12
15
18
21
```
AIZU p00452 Darts
1. Incorrect input format

```
4 50
3
14
15
9
4 50
3
14
15
9
```

2. Incorrect calculation of the maximum score

```
4 50
3
14
15
9
4 50
3
14
15
9
```

3. Incorrect output format

```
4 50
3
14
15
9
4 50
3
14
15
9
```

4. Other bugs

```
4 50
3
14
15
9
4 50
3
14
15
9
```
AIZU p00643 Rolling Dice
1 2
8 8
0 0
0 1
3 3
1 2 5
2 8 3
0 1 2
0 0
2 2
3 3
1 2 5
2 8 3
0 1 2
0 0
1 2
2 2
1 2
3 4
0 0
0 1
2 3
1 2 3
4 5 6
0 0
1 2
0 0
AIZU p00787 Digital Racing Circuil
```
5 28
0 0.000
0 0 0 0 0 99999

3 30
20.000
0 1 0 0 0 99999

3 28
22.667
0 1 -1 1 1 0 0 -1 0 -1 1 0 0 0 1 0 -1 0 0 -1 -1 -1 -1 0 -1 0 -1 -1 -1 1 -1 1
-1 1 -1 0 1 0 1 1 1 1 1 0 1 1 99999

3 28
20.000
0 -1 1 -1 1 0 1 1 1 1 1 0 -1 0 -1 0 -1 1 -1 1
-1 1 -1 0 -1 -1 -1 -1 -1 -1 -1 0 1 0 1 -1 1 -1 1 -1 99999

99999
```
AIZU p00919 Directional Resemblance
0 0 0 0 0 0
AIZU p01052 Movie
```
4
1 31
2 2
2 3
3 3
```
```
5
1 10
10 20
20 21
22 31
4 20
```
```
1
1 31
```
AIZU p01184 International Party
1 2
English
French
1 English
1 French
AIZU p01321 Final Examination!
3
49 50 87 78 41
27 61 100 45 84
28 88 40 95 66
2
100 100 100 100 100
0 0 0 0 0
1
89 90 85 93 82
0
AIZU p01489 IkaNumber
1
69
-1
AIZU p01651 Counting 1's
3
2
2
1
1
2
1
63
0
64
1
4
1
1
1
1
0
AIZU p01802 Koto Municipal Subway
```
twenty one
7 5
7 6
7 7
76 5
8 41
0 0
```
AIZU p01936 Steps
3 5
3 7
1 1
1 2
1000000000 1000000000
1000000000 1000000001
1000000000 1000000002
AIZU p02076 Rooks Game
10 12
1 2
1 4
1 6
3 6
5 6
10 7
8 7
6 7
4 7
2 7
7 3
9 5
AIZU p02217 Tree of Peony
4
1 2
13
3 4
0 3 2 0
-3 4 5 -1
AIZU p02370 Topological Sort
1. **The input graph may not be a DAG.**

```
4 4
0 1
2 1
2 3
3 0
```

2. **The input graph may have multiple topological sorts.**

```
6 6
0 1
1 2
3 1
3 4
4 5
5 2
```

3. **The program may not be able to handle graphs with a large number of vertices or edges.**

```
10000 10000
0 1
1 2
...
9999 10000
```

4. **The program may not be able to handle graphs with cycles.**

```
4 5
0 1
1 2
2 3
3 0
0 2
```

5. **The program may not be able to handle graphs with self-loops.**

```
4 4
0 1
1 0
2 2
3 3
```

6. **The program may not be able to handle graphs with negative edge weights.**

```
4 4
0 1 -1
1 2 1
2 3 1
3 0 1
```

7. **The program may not be able to handle graphs with weighted edges.**

```
4 4
0 1 1
1 2 2
2 3 3
3 0 4
```

8. **The program may not be able to handle graphs with directed edges.**

```
4 4
0 1
1 2
2 3
3 0
```

9. **The program may not be able to handle graphs with undirected edges.**

```
4 4
0 1
1 2
2 3
3 0
```

10. **The program may not be able to handle graphs with both directed and undirected edges.**

```
4 5
0 1
1 2
2 3
3 0
0 2
```