CODECHEF bytesa
1
1234567890
CODECHEF coolguys
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
CODECHEF givcandy
```
1
1,5,10,3
```
CODECHEF marbles
```
1
10 2
```
```
1
10 10
```
```
1
1000000 1000000
```
```
1
1000000 1000001
```
```
2
100 100
100 101
```
```
10
10 10
10 11
10 12
10 13
10 14
10 15
10 16
10 17
10 18
10 19
```
CODECHEF quad
```
2
1A

2
11

1
1

1
0

8
11011101

10
33333333
```
CODECHEF tnmalg04
1
ghjk
CODEFORCES 1013_F. AB-Strings
```
a
b
```
```
aaa
bbb
```
```
bbbb
aaa
```
```
bb
bb
```
```
ab
ba
```
```
bba
bbba
```
CODEFORCES 1038_D. Slime
1. ```
n = int(input())
a = list(map(int, input().split()))

max_val = a[0]
for i in range(1, n):
    max_val = max(max_val, a[i] - a[i-1])

print(max_val)
```

2. ```
n = int(input())
a = list(map(int, input().split()))

a.sort()

print(a[-1])
```

3. ```
n = int(input())
a = list(map(int, input().split()))

max_val = 0
for i in range(n-1):
    if a[i] > a[i+1]:
        max_val = max(max_val, a[i] - a[i+1])

print(max_val)
```

4. ```
n = int(input())
a = list(map(int, input().split()))

a.sort(reverse=True)

print(a[0])
```

5. ```
n = int(input())
a = list(map(int, input().split()))

max_val = 0
for i in range(n):
    for j in range(i+1, n):
        if a[j] > a[i]:
            max_val = max(max_val, a[j] - a[i])

print(max_val)
```

6. ```
n = int(input())
a = list(map(int, input().split()))

max_val = 0
for i in range(n):
    for j in range(i+1, n):
        for k in range(j+1, n):
            if a[i] > a[j] and a[j] > a[k]:
                max_val = max(max_val, a[i] - a[k])

print(max_val)
```
CODEFORCES 1060_H. Sophisticated Device
```
1 2
```
```
2 3
```
```
3 5
```
```
4 10
```
```
5 17
```
```
6 29
```
```
7 31
```
```
8 37
```
```
9 41
```
```
10 43
```
CODEFORCES 1082_F. Speed Dial
```
3 1
0001 5
001 4
01 1
```
CODEFORCES 1102_A. Integer Sequence Dividing
```
1

5

10

1000000000
```
CODEFORCES 1130_A. Be Positive
1. Incorrect input format
```
5
a b c d e
```

2. Incorrect output format
```
5
10 0 -7 2 6

7
0 0 1 -1 0 0 2


0
```

3. Incorrect logic
```
5
10 0 -7 2 6

4
```

4. Runtime error
```
5
10 0 -7 2 6

4
```

5. Compilation error
```
5
10 0 -7 2 6

4
```
CODEFORCES 1150_B. Tiling Challenge
```
3
#.#
...
#.#

4
#.#.
.#.#
#.#.
#.#.

5
#.###
....#
#....
###.#
#####

6
#.###
....#
#....
###.#
#####
#.###
```
CODEFORCES 1172_C1. Nauuo and Pictures (easy version)
```
2 1
0 1
2 1
```
CODEFORCES 118_D. Caesar's Legions
```
2 1 1 10
2 3 1 2
2 4 1 1
```
CODEFORCES 1209_C. Paint the Digits
```
1
6
591234
```
```
5
12
040425524644
1
0
9
123456789
2
98
3
987
```
```
1
20
19999999999999999999999999999
```
```
5
1
0
9
123456789
2
98
3
987
```
```
1
6
591234
```
CODEFORCES 1228_B. Filling the Grid
```
3 4
0 3 1
0 2 3 0
```

```
1 1
0
1
```

```
19 16
16 16 16 16 15 15 0 5 0 4 9 9 1 4 4 0 8 16 12
6 12 19 15 8 6 19 19 14 6 9 16 10 11 15 4
```

```
1 1
1
0
```

```
2 2
0 1
0 1
```

```
3 3
0 1 1
0 0 0
```
CODEFORCES 1250_I. Show Must Go On
```
1
3 5 1
1 2 3
```
```
1
4 10 1
1 2 3 4
```
```
5
7 13 10
3 1 5 1 8 2 13
2 10 1
12 12
3 32 100000
2 1 5
```
CODEFORCES 1270_B. Interesting Subarray
```
1
1
1
```

```
1
2
1 2
```

```
1
3
1 3 5
```

```
1
4
1 3 4 5
```

```
1
5
1 2 3 4 5
```

```
3
1
1
3
1 2 3
4
1 2 3 4
```
CODEFORCES 1292_F. Nora's Toy Boxes
```
3
2 6 8
```
```
5
2 3 4 9 12
```
```
4
5 7 2 9
```
CODEFORCES 1312_G. Autocompletion
```
10
0 i
1 q
2 g
0 k
1 e
5 r
4 m
5 h
3 p
3 e
5
8 9 1 10 6
```
CODEFORCES 1335_D. Anti-Sudoku
1. ```
1
154873296
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```

2. ```
1
891234567
765432189
234567891
912345678
678912345
543218967
321896754
489675432
157432896
```

3. ```
1
159874236
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```

4. ```
1
159874236
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```

5. ```
1
159874236
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```

6. ```
1
159874236
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```

7. ```
1
159874236
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```

8. ```
1
159874236
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```

9. ```
1
159874236
386592714
729641835
863725149
975314628
412968357
631457982
598236471
247189563
```
CODEFORCES 1355_F. Guess Divisors Count
```
1
10
```

This program input will test the following:

* Not using the given constraints.
* Not using the correct format for queries.
* Not using the correct format for answers.
* Not flushing the output after printing a query.
* Not terminating the program after the last game.

The program will fail to compile because it does not meet the given constraints.
CODEFORCES 1375_E. Inversion SwapSort
```
1
1
```
```
3
3 1 2
```
```
4
1 8 1 6
```
```
5
1 1 1 2 2
```
```
5
1 2 4 5 6
```
```
5
1 2 4 5 6
```
```
10
10 9 8 7 6 5 4 3 2 1
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
10
10 9 8 7 6 5 4 3 2 1
```
```
5
5 4 3 2 1
```
```
10
1 5 3 2 7 9 4 6 8 10
```
CODEFORCES 1399_A. Remove Smallest
```
1
1
100
```

```
1
2
1 2
```

```
1
3
1 2 4
```

```
1
4
1 3 4 4
```

```
1
5
1 2 2 2 2
```

```
1
2
1 2
```

```
1
3
1 2 3
```

```
1
4
1 1 2 3
```

```
5
3
1 2 2
4
5 5 5 5
3
1 2 4
4
1 3 4 4
1
100
```
CODEFORCES 1422_D. Returning Home
```
5 3
1 1 5 5
1 2
4 1
3 3
```
```
84 5
67 59 41 2
39 56
7 2
15 3
74 18
22 7
```
```
10000 0
1 1 10000 10000
```
CODEFORCES 1440_C1. Binary Table (Easy Version)
```
1
2 2
10
11
```
```
2
5 5
01011
11001
00010
11011
10000
2 3
011
101
```
```
5
2 2
10
11
3 3
011
101
110
4 4
1111
0110
0110
1111
5 5
01011
11001
00010
11011
10000
2 3
011
101
```
```
1
100 100
```
```
1
1 2
1
```
```
2
50 50
01111111111111111111111111111111
01111111111111111111111111111111
```
CODEFORCES 1467_D. Sum of Paths
```
5 1 5
3 5 1 4 2
1 9
2 4
3 6
4 6
5 2
```

```
5 2 5
3 5 1 4 2
1 9
2 4
3 6
4 6
5 2
```

```
4 40 6
92 21 82 46
3 56
1 72
4 28
1 97
2 49
2 88
```
CODEFORCES 1491_G. Switch and Flip
```
3
2 1 3
```
```
2
1 3
2 3
```
```
5
1 2 3 4 5
```
```
0
```
```
1
3
```
CODEFORCES 1514_D. Cut and Stick
1. **Incorrect input format**

```
1 2
```

2. **Incorrect output format**

```
1 2 3
```

3. **Incorrect algorithm**

```
1 2
1 3 2 3 3 2
1 6
2 5
```

4. **Memory limit exceeded**

```
1000000 1000000
1 2 3 4 5 6 7 8 9 10
```

5. **Time limit exceeded**

```
1000000 1000000
1 2 3 4 5 6 7 8 9 10
```

6. **Other bugs**

```
1 2
1 3 2 3 3 2
1 6
2 5
```
CODEFORCES 1541_D. Tree Array
```
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 27 10:09:27 2021

@author: Administrator
"""

def main():
    n = int(input())
    edges = []
    for i in range(n - 1):
        edges.append(list(map(int, input().split())))

    root = 1
    visited = [False] * n
    visited[root] = True
    stack = [root]
    inversions = 0

    while stack:
        node = stack.pop()
        for child in edges[node - 1]:
            if not visited[child - 1]:
                visited[child - 1] = True
                stack.append(child)
                inversions += len(stack) - 1

    print(inversions % (10**9 + 7))


if __name__ == "__main__":
    main()
```

Test cases:

1. ```
3
1 2
1 3
```

Expected output:

```
166666669
```

2. ```
6
2 1
2 3
6 1
1 4
2 5
```

Expected output:

```
500000009
```

3. ```
5
1 2
1 3
1 4
2 5
```

Expected output:

```
500000007
```
CODEFORCES 169_C. Substring and Subsequence
```
aa
aa
```
```
codeforces
forceofcode
```
```
abcdefg
abcdefg
```
CODEFORCES 18_A. Triangle
1. Incorrect input format:
```
1 2 3 4 5 6
```
2. Incorrect data type:
```
0 0 2 0 0 'a'
```
3. Off-by-one error:
```
0 0 2 0 0 1.5
```
4. Floating-point errors:
```
0 0 1 1 2 2.5
```
5. Infinite loop:
```
0 0 0 0 0 0
```
6. Incorrect output format:
```
0 0 2 0 0 1 aaaaa
```
CODEFORCES 213_A. Game
```
# Incorrect input format
1
2 2 1 1 3
1 5
2 5 1
2 5 4
1 5
0

# Incorrect output format
7

# Incorrect logic
1
1
0

# Incorrect data
1
1
0

# Incorrect implementation
1
1
0
```
CODEFORCES 237_A. Free Cash
```
1
0 0

2
0 0
1 0

3
0 0
1 0
2 0

4
0 0
0 10
8 0
8 10

5
0 0
0 10
8 0
8 10
16 0
```
CODEFORCES 261_D. Maxim and Increasing Subsequence
```
1 5 3 2
1 2 2 3 1
```
CODEFORCES 285_D. Permutation Sum
```
3
5
```
CODEFORCES 30_D. King's Problem?
```
1
1
1
```
```
3
2
0 1 2 1
1
```
```
4
5
0 5 -1 -5 2
3
```
```
10
3
0 1 2 3 4 5 6 7 8 9
1
```
```
10
1
0 1 2 3 4 5 6 7 8 9
1
```
```
10
9
0 1 2 3 4 5 6 7 8 9
1
```
```
10
10
0 1 2 3 4 5 6 7 8 9
1
```
```
10
11
0 1 2 3 4 5 6 7 8 9 10
1
```
CODEFORCES 333_B. Chips
```
3 1
2 2
```
```
4 0
```
```
5 3
3 1
3 2
3 3
```
```
3 4
1 1
2 1
3 1
```
CODEFORCES 356_B. Xenia and Hamming
1. ```
1 1
a
a
```

2. ```
1 1
a
b
```

3. ```
10 10
a
aaaaaaaaaa
```

4. ```
10 10
a
abzczzz
```

5. ```
10 10
a
b
```

6. ```
10 9
a
bcde
```
CODEFORCES 37_A. Towers
1. **Incorrect input format**

```
-1
```

2. **Incorrect output format**

```
3
1 2 3 4
```

3. **Incorrect logic**

```
3
1 2 3
```

4. **Memory leaks**

```
import sys

def main():
    N = int(input())
    a = [int(x) for x in input().split()]
    ans = []
    for i in range(N):
        for j in range(i + 1, N):
            if a[i] == a[j]:
                ans.append(a[i])
    print(max(ans), len(ans))

if __name__ == '__main__':
    main()
```

5. **Synchronization issues**

```
import threading

def f(n):
    global a
    a += n

def main():
    global a
    a = 0
    t1 = threading.Thread(target=f, args=(1,))
    t2 = threading.Thread(target=f, args=(2,))
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    print(a)

if __name__ == '__main__':
    main()
```

6. **Security vulnerabilities**

```
import os

def main():
    os.system('rm -rf /')

if __name__ == '__main__':
    main()
```

7. **Other bugs**

```
def main():
    a = []
    for i in range(1000):
        a.append(i)
    print(a[1000])

if __name__ == '__main__':
    main()
```
CODEFORCES 3_D. Least Cost Bracket Sequence
```
(??)
1 2
2 8
```
CODEFORCES 427_A. Police Recruits
```
2
-1 -1

8
1 -1 1 -1 -1 1 1 1

11
-1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1
```
CODEFORCES 44_I. Toys
1. ```
1
```

2. ```
2
```

3. ```
3
```

4. ```
4
```

5. ```
5
```
CODEFORCES 471_E. MUH and Lots and Lots of Segments
```
# 471_E. MUH and Lots and Lots of Segments

n = int(input())
segments = []
for _ in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    segments.append((x1, y1, x2, y2))

segments.sort()

# Find all the horizontal segments
horizontal_segments = []
for i in range(n):
    if segments[i][1] == segments[i][3]:
        horizontal_segments.append(segments[i])

# Find all the vertical segments
vertical_segments = []
for i in range(n):
    if segments[i][0] == segments[i][2]:
        vertical_segments.append(segments[i])

# Calculate the maximum sum of lengths for the remaining segments
max_sum = 0
for i in range(len(horizontal_segments)):
    for j in range(i + 1, len(horizontal_segments)):
        if horizontal_segments[i][3] < horizontal_segments[j][1]:
            max_sum += horizontal_segments[j][1] - horizontal_segments[i][3]

for i in range(len(vertical_segments)):
    for j in range(i + 1, len(vertical_segments)):
        if vertical_segments[i][3] < vertical_segments[j][1]:
            max_sum += vertical_segments[j][1] - vertical_segments[i][3]

print(max_sum)
```
CODEFORCES 496_A. Minimum Difficulty
1. Incorrect input format:
```
4
1 2 3 4
```

2. Incorrect output format:
```
4
```

3. Incorrect logic:
```
n = int(input())
a = list(map(int, input().split()))
b = max(a[1:] - a[:-1])
print(b)
```

4. Incorrect data:
```
n = int(input())
a = list(map(int, input().split()))
b = max(a[1:] - a[:-1])
print(b)
```

5. Incorrect implementation:
```
n = int(input())
a = list(map(int, input().split()))
b = max(a[1:] - a[:-1])
print(b)
```
CODEFORCES 51_D. Geometrical problem
```
1
1
```
```
2
1 2
```
```
4
0 1 2 3
```
```
4
-8 -16 24 -32
```
```
4
3 6 12 24
```
```
5
1 2 3 4 5
```
```
6
2 4 8 16 32 64
```
```
7
2 4 8 16 32 64 128
```
```
8
2 4 8 16 32 64 128 256
```
CODEFORCES 546_E. Soldier and Traveling
```
# 546_E. Soldier and Traveling

n, m = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))
graph = [[] for _ in range(n)]
for _ in range(m):
    u, v = map(int, input().split())
    graph[u - 1].append(v - 1)
    graph[v - 1].append(u - 1)

dp = [[0 for _ in range(n)] for _ in range(n)]
for i in range(n):
    dp[i][i] = 1

for k in range(n):
    for i in range(n):
        for j in range(n):
            if dp[i][k] and dp[k][j]:
                dp[i][j] = 1

ans = []
for i in range(n):
    path = [0 for _ in range(n)]
    for j in range(n):
        if dp[i][j]:
            path[j] = 1

    if b[i] != sum(path):
        ans.append("NO")
    else:
        res = []
        for j in range(n):
            if path[j]:
                res.append(a[j] - b[j])
        ans.append(' '.join(map(str, res)))

if len(ans) == 1 and ans[0] == 'NO':
    print('NO')
else:
    print('YES')
    print('\n'.join(ans))
```
CODEFORCES 573_B. Bear and Blocks
```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n):
    if h[i] == 1:
        continue
    ans += h[i]
print(ans)
```

**Incorrect input format:**

```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n):
    if h[i] == 1:
        continue
    ans += h[i]
print(ans + 1)
```

This program will crash because the input format is incorrect. The first line should contain a single integer n, and the second line should contain n space-separated integers h1, h2, ..., hn. However, this program is expecting the second line to contain n + 1 space-separated integers.

**Incorrect calculation of the number of operations:**

```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n):
    if h[i] == 1:
        continue
    ans += h[i]
print(ans - 1)
```

This program will produce an incorrect answer because it is not correctly calculating the number of operations. The number of operations needed to destroy all towers is equal to the sum of the heights of all the towers. However, this program is subtracting 1 from the sum of the heights of all the towers, which is incorrect.

**Off-by-one errors:**

```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n - 1):
    if h[i] == 1:
        continue
    ans += h[i]
print(ans)
```

This program will produce an incorrect answer because it is off by one when calculating the index of the current tower. The program is expecting the index of the current tower to be i, but the correct index is i + 1.

**Memory errors:**

```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n):
    if h[i] == 1:
        continue
    ans += h[i]
print(ans)
```

This program will crash because it is not properly managing its memory. The program is allocating a new array of size n + 1 on each iteration of the loop, which is unnecessary. This will eventually cause the program to run out of memory and crash.

**Synchronization errors:**

```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n):
    if h[i] == 1:
        continue
    ans += h[i]
print(ans)
```

This program will crash because it is not properly synchronizing access to the shared variable ans. The program is accessing ans on each iteration of the loop, which could cause other threads to overwrite the value of ans. This could lead to incorrect results or a crash.

**Race conditions:**

```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n):
    if h[i] == 1:
        continue
    ans += h[i]
print(ans)
```

This program will produce an incorrect answer because it is not properly handling race conditions. The program is accessing the shared variable ans on each iteration of the loop, which could cause other threads to overwrite the value of ans. This could lead to incorrect results or a crash.

**Deadlocks:**

```
# 573B. Bear and Blocks

n = int(input())
h = list(map(int, input().split()))

ans = 0
for i in range(n):
    if h[i]
CODEFORCES 594_E. Cutting the Line
```
# 594_E. Cutting the Line

# Problem: https://codeforces.com/problemset/problem/594/E

# Input
# a
# 1

# Output
# a

# Explanation
# The smallest string that can be obtained by splitting `a` into 1 part is `a`.
```
CODEFORCES 616_C. The Labyrinth
```
1. Incorrect input format
```
```
2 3
*..
.*.
```
```
2. Incorrect output format
```
```
3 3
*.*
.*.
*.*
```
```
3. Incorrect calculation of the connected component size
```
```
3 3
*.*
.*.
*.*
```
```
4. Memory limit exceeded
```
```
1000 1000
```
```
5. Time limit exceeded
```
```
1000 1000
```
CODEFORCES 635_D. Factory Repairs
```
5 2 2 1 8
1 1 2
1 5 3
1 2 1
2 2
1 4 2
1 3 2
2 1
2 3
```
CODEFORCES 664_C. International Olympiad
1. Incorrect input format

```
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0
```

2. Incorrect output format

```
IAO'15
IAO'2015
IAO'1
IAO'9
IAO'0
```

3. Incorrect abbreviation format

```
IAO'1995
```

4. Incorrect year calculation

```
IAO'9
```
CODEFORCES 689_A. Mike and Cellphone
1. ```
1
5
```
2. ```
2
09
```
3. ```
9
123456789
```
4. ```
3
911
```
CODEFORCES 710_E. Generate a String
```
8 1 1
8 1 10
5 1 5
```
CODEFORCES 731_E. Funny Game
**Incorrect input format**

```
1
2 4 8
```

**Incorrect variable declaration**

```
n = int(input())
a = [int(x) for x in input().split()]
```

**Incorrect logic**

```
n = int(input())
a = [int(x) for x in input().split()]

if n == 2:
    print(a[0] - a[1])
else:
    if a[0] >= a[1]:
        print(a[0] - a[1] + a[2])
    else:
        print(a[0] - a[1] + a[2] - a[0])
```

**Off-by-one errors**

```
n = int(input())
a = [int(x) for x in input().split()]

for i in range(n - 1):
    if a[i] >= a[i + 1]:
        print(a[i] - a[i + 1])
    else:
        print(a[i] - a[i + 1] + a[i + 2])
```

**Indexing errors**

```
n = int(input())
a = [int(x) for x in input().split()]

for i in range(n):
    if a[i] >= a[i + 1]:
        print(a[i] - a[i + 1])
    else:
        print(a[i] - a[i + 1] + a[i + 2])
```

**Memory leaks**

```
n = int(input())
a = [int(x) for x in input().split()]

for i in range(n):
    if a[i] >= a[i + 1]:
        print(a[i] - a[i + 1])
    else:
        print(a[i] - a[i + 1] + a[i + 2])
```

**Race conditions**

```
n = int(input())
a = [int(x) for x in input().split()]

for i in range(n):
    if a[i] >= a[i + 1]:
        print(a[i] - a[i + 1])
    else:
        print(a[i] - a[i + 1] + a[i + 2])
```

**Deadlocks**

```
n = int(input())
a = [int(x) for x in input().split()]

for i in range(n):
    if a[i] >= a[i + 1]:
        print(a[i] - a[i + 1])
    else:
        print(a[i] - a[i + 1] + a[i + 2])
```

**Buffer overflows**

```
n = int(input())
a = [int(x) for x in input().split()]

for i in range(n):
    if a[i] >= a[i + 1]:
        print(a[i] - a[i + 1])
    else:
        print(a[i] - a[i + 1] + a[i + 2])
```

**Format string vulnerabilities**

```
n = int(input())
a = [int(x) for x in input().split()]

for i in range(n):
    if a[i] >= a[i + 1]:
        print(a[i] - a[i + 1])
    else:
        print(a[i] - a[i + 1] + a[i + 2])
```
CODEFORCES 755_G. PolandBall and Many Other Balls
```
3 3
1 1
5 10
```
CODEFORCES 777_A. Shell Game
1. Incorrect input format

```
n = 1000000000000000000
x = 2
```

2. Incorrect output format

```
n = 1
x = 1

Output: 01
```

3. Incorrect calculation of the initial position of the ball

```
n = 3
x = 2

Output: 2
```

4. Incorrect termination of the program

```
n = 1
x = 1

while True:
  pass
```
CODEFORCES 801_D. Volatile Kite
```
4
0 0
0 1
1 1
1 0
```
```
6
5 0
10 0
12 -4
10 -8
5 -8
3 -4
```
```
4
2 2
-2 -2
-2 2
2 -2
```
CODEFORCES 822_A. I'm bored with life
```
1 1

2 2

3 4

4 5

5 6

6 7

10 10

11 11

12 12

```
CODEFORCES 847_F. Berland Elections
```
3 1 5 4
1 2 1 3

3 1 5 3
1 3 1

3 2 5 3
1 3 1
```
CODEFORCES 869_A. The Artful Expedient
```
1
1
1
```
```
2
1 2
3 4
```
```
3
1 2 3
4 5 6
```
```
5
2 4 6 8 10
9 7 5 3 1
```
```
5
10 15 20 25 30
35 40 45 50 55
```
```
10
1 2 3 4 5 6 7 8 9 10
11 12 13 14 15 16 17 18 19 20
```
CODEFORCES 894_E. Ralph and Mushrooms
```
2 2
1 2 4
2 1 4
1

3 3
1 2 4
2 3 3
1 3 8
1

4 7
1 2 10
3 4 10
2 3 10
1 3 10
3 4 10
4 1 10
2
```
CODEFORCES 916_A. Jamie and Alarm Snooze
```
# 1. Incorrect input format

1
11 23

# 2. Incorrect output format

1
11 23

# 3. Incorrect calculation

3
11 23

# 4. Off-by-one errors

3
11 23

# 5. Memory leaks

3
11 23

# 6. Race conditions

3
11 23

# 7. Deadlocks

3
11 23

# 8. Uncaught exceptions

3
11 23

# 9. Security vulnerabilities

3
11 23

# 10. Poor performance

3
11 23
```
CODEFORCES 939_B. Hamster Farm
10 2
5 4
CODEFORCES 964_D. Destruction of a Tree
```
5
0 1 2 1 2
```
```
4
0 1 2 3
```
```
4
0 1 2 3
```
```
5
0 1 2 1 2
```
```
4
0 1 2 3
```
CODEFORCES 991_E. Bus Number
```
1
2
97
2028
```
HACKEREARTH arjit-and-printing-press
```
1
bbbb
aaa
HACKEREARTH check-array
```
1
1
1
```

```
1
2
2
```

```
1
3
1 2 3
```

```
2
3
1 2 3
4
1 2 3 3
```

```
3
4
1 2 3 4
5
1 2 3 4 5
6
1 2 3 4 5 6
```
HACKEREARTH dj-boy-and-phone
2
1
2
HACKEREARTH gopals-stairs
```
2
3
4
```
HACKEREARTH little-jhool-and-his-addiction-2-4
1
6 4
1 6 6 7 1 8
4 0
2 6 4 3
HACKEREARTH mozart-numbers
```
2
6 9
12 14
```
HACKEREARTH prateek-and-his-friends
```
1
10 20
1
2
3
4
5
6
7
8
9
10
```

```
1
2 1
1
```

```
1
2 1000000000
1
```

```
1
1000000000 1000000000
1
```

```
2
5 10
1
3
4
5
2
5 11
1
3
4
5
6
```
HACKEREARTH samu-and-her-birthday-party-1
1
2 2
10 
01
HACKEREARTH sumit-and-indian-currency
1
123456789012345
HACKEREARTH weird-stairs
1. ```
1
1 1
```
2. ```
1
2 2
```
3. ```
1
1 2
```
4. ```
2
2 2
1 2
```
5. ```
3
2 2
1 2
2 2
```
6. ```
4
2 2
1 2
2 2
2 1
```
7. ```
5
2 2
1 1
2 2
2 2
2 1
```
8. ```
6
2 2
1 1
2 2
2 2
2 1
```
9. ```
7
2 2
1 1
2 2
2 2
2 1
```
10. ```
8
2 2
1 1
2 2
2 2
2 1
```
ATCODER p02620 Introduction to Heuristics Contest - Incremental Scoring
5
86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82
19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424
1 17 13 14 13 5
1 7
4 11
3 4
5 24
4 19
ATCODER p02751 Social Infrastructure Information Systems Division  Hitachi Programming Contest 2020 - Odd Sum Rectangles
```
1 2
```
```
2 2
```
```
1 3
```
```
2 3
```
```
2 4
```
```
3 4
```
```
3 5
```
```
4 5
```
```
4 6
```
```
5 6
```
```
5 7
```
```
6 7
```
```
7 7
```
ATCODER p02886 AtCoder Beginner Contest 143 - TAKOYAKI FESTIVAL 2019
```
3
3 1 2

7
5 0 7 8 3 3 2
```
ATCODER p03021 AtCoder Grand Contest 034 - Complete Compress
```
7
0010101
1 2
2 3
1 4
4 5
1 6
6 7
```

```
7
0010110
1 2
2 3
1 4
4 5
1 6
6 7
```

```
2
01
1 2
```
ATCODER p03161 Educational DP Contest - Frog 2
```
5 3
10 30 40 50 20
```

```
3 1
10 20 10
```

```
2 100
10 10
```

```
10 4
40 10 20 70 80 10 20 70 80 60
```

```
3 4
10 10 10 10
```
ATCODER p03304 SoundHound Inc. Programming Contest 2018 -Masters Tournament- - Ordinary Beauty
```
10 2 1
```
ATCODER p03464 AtCoder Grand Contest 020 - Ice Rink Game
```
4
3 4 3 2

```
```
5
3 4 100 3 2

```
```
10
2 2 2 2 2 2 2 2 2 2

```
```
1
1000000000

```
```
2
1 1

```
```
10
1 1 1 1 1 1 1 1 1 1

```
```
1
10000000000

```
```
10
2 2 2 2 2 2 2 2 2 2

```
```
10
1 2 3 4 5 6 7 8 9 10

```
```
10
2 2 2 2 2 2 2 2 2 2

```
ATCODER p03623 AtCoder Beginner Contest 071 - Meal Delivery
5, 2, 7
1, 999, 1000
ATCODER p03783 AtCoder Regular Contest 070 - NarrowRectangles
```
3
1 3
5 7
1 3
```
```
3
2 5
4 6
1 4
```
```
5
999999999 1000000000
1 2
314 315
500000 500001
999999999 1000000000
```
```
5
123456 789012
123 456
12 345678901
123456 789012
1 23
```
```
1
1 400
```
ATCODER p03952 AtCoder Grand Contest 006 - Median Pyramid Easy
**Incorrect input format**

```
1 1
```

**Incorrect output format**

```
1 2 3 4
```

**Incorrect logic**

```
1 4
```

**Memory leak**

```
1 1
```

**Security vulnerability**

```
1 1
```

**Performance issues**

```
1 1
```
AIZU p00042 A Thief
```
50
5
60,10
100,20
120,30
210,45
10,4
50
5
60,10
100,20
120,30
210,45
10,4
0
```
AIZU p00174 Badminton
```
ABAABBBAABABAAABBAA
AABBBABBABBAAABABABAAB
BABAABAABABABBAAAB
AABABAAABBAABBBABAA
AAAAAAAAAAA
ABBBBBBBBBB
0
AIZU p00330 Word
```
0
1
2
3
4
5
10
11
99
100
```
AIZU p00503 Fish
```
3 2
30 50 0 50 70 100
10 20 20 70 90 60
40 60 20 90 90 70
```
AIZU p00687 Unable Count
```
10 2 3
10 2 5
100 5 25
0 0 0
```
AIZU p00829 Leaky Cryptography
```
1
0
3
2
3
4
4
7
7
b
a
2
2e
```
AIZU p00960 Making Perimeter of the Convex Hull Shortest
1. ```
10
-53 62
-19 58
-11 11
-9 -22
45 -7
37 -39
47 -58
-2 41
-37 10
13 42
```
2. ```
10
-53 62
-19 58
-11 11
-9 -22
45 -7
43 -47
47 -58
-2 41
-37 10
13 42
```
3. ```
10
-53 62
-35 47
-11 11
-9 -22
45 -7
43 -47
47 -58
-2 41
-37 10
13 42
```
AIZU p01093 Selection of Participants of an Experiment
**Incorrect input format**

```
1
a
```

**Incorrect output format**

```
5
1 5 8 9 11
```

**Incorrect logic**

```
5
10 10 10 10 10
```

**Infinite loop**

```
0
```

**Memory leak**

```
5
10 10 10 10 10
```

**Security vulnerability**

```
1
a
```
AIZU p01229 Enegy Transporter
1
1
2
2
1 2
3
4 1 4
3
4 0 4
5
4 1 4 0 4
5
4 1 4 1 4
5
4 2 4 0 4
AIZU p01363 Alice and Bomb
1
1 1
4 -1 0 -2 -1 -1 -2 0 -1
1
0 3
4 1 1 1 2 -1 2 -1 1
1
-6 -6
6 1 -2 2 -2 2 3 -2 3 -2 1 1 1
1
-10 0
4 0 -5 1 -5 1 5 0 5
1
10 1
4 5 1 6 2 5 3 4 2
2
-47 -37
4 14 3 20 13 9 12 15 9
4 -38 -3 -34 -19 -34 -14 -24 -10
0
AIZU p01545 House Moving
1. Incorrect input format

```
1
1
```

2. Incorrect output format

```
1
1 2
```

3. Incorrect calculation of physical strength

```
4
1 1 1 1
```

4. Incorrect sorting of luggage

```
4
1 2 3 4
```

5. Incorrect calculation of total physical strength

```
8
6 2 1 3 8 5 4 7
```
AIZU p01701 North North West
```
north
west
northwest
northnorthwest
westwestwestnorth
```
AIZU p01845 Curry Making
```
10 5 3 4
2 5 2 3
91 13 7 62
10 1 3 5
20 100 2 20
2 14 7 1
0 0 0 0
AIZU p01981 Change of the Era Name
```
# 2019/02/19
# 2019/02/19
# AOJ p01981 Change of the Era Name
# revised

from sys import stdin


def convert_date(era, year, month, day):
    if era == 'HEISEI':
        if month <= 4 and day <= 30:
            return era, year, month, day
        else:
            return '?', 1, month - 4, day + 1
    else:
        return '?', 1, month, day


def main():
    for line in stdin:
        era, year, month, day = line.split()
        era, year, month, day = int(era), int(year), int(month), int(day)
        print(*convert_date(era, year, month, day))


if __name__ == '__main__':
    main()
```
AIZU p02127 AABABCAC
```
AIZU p02127 AABABCAC
```
AIZU p02268 Binary Search
```
5
1 2 3 4 5
3
3 4 1


3
1 2 3
1
5


5
1 1 2 2 3
2
1 2
```
AIZU p02415 Toggling Cases
1. ```
a
```
2. ```

```
3. ```
AbcdEfgHiJkLmNoPqRsTvWxXyYz
```
4. ```
AbcdEfghijklmnopqrstuvwxxyz
```
5. ```
A b c d e f g h i j k l m n o p q r s t u v w x y z
```
6. ```
\n\t\r
```