CODECHEF axr1p2
1
10
71
#
CODECHEF cmb01
```
1
24 1

48
```
CODECHEF flow011
1
100000
CODECHEF lemusic
```
1
3
1 2
2 2
3 2
```
CODECHEF ppxor
```
1
3
1 2 3
```
CODECHEF sumtrian
```
1
1
```
```
1
1 2
```
```
2
3
1
2 1
```
```
3
4
1 
1 2 
4 1 2
2 3 1 1 
```
```
10
10
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 
1 2 3 4 5 6 
1 2 3 4 5 6 7 
1 2 3 4 5 6 7 8 
1 2 3 4 5 6 7 8 9 
1 2 3 4 5 6 7 8 9 10 
```
CODEFORCES 100_J. Interval Coloring
```
1
[1,2)
```

```
2
[1,3]
[2,6]
```

```
3
[1,3]
[2,6]
(5,7)
```

```
4
[1,3]
[2,6]
(5,7)
[8,9]
```

```
5
[1,4]
[2,5]
[3,6]
[4,7]
[5,8]
```
CODEFORCES 1033_G. Chip Game
```
2 2
4 5

2 20
4 5
```
CODEFORCES 1056_E. Check Transcription
```
00000100000
kkkkkkkkkkkkk

11111111111
ttttttttttt

00011100110011111100
bbbbbbbbbbbbbbbbbbbbbbbc

000000
aaaaaaaaaa

000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
```
CODEFORCES 107_A. Dorm Water Supply
3 2
1 2 10
2 3 20
CODEFORCES 1099_F. Cookies
```
5 50
1 5 1 7 7
1 3 2 2 2
1 1
1 1
2 0
2 0
```

```
3 179
2 2 1
6 6 6
1 3
2 3
```

```
3 45
1 5 1
2 2 1
3 1 1
```

```
4 18
1 5 1 7 7
1 3 2 2 2
1 1
1 1
2 0
```

```
6 100
1 5 1 7 7
1 3 2 2 2
1 1
1 1
2 0
2 0
```

```
6 25
1 5 1 7 7
1 3 2 2 2
1 1
1 1
2 0
2 0
```

```
6 100
1 5 1 7 7
1 3 2 2 2
1 1
1 1
2 0
2 0
```
CODEFORCES 111_E. Petya and Rectangle
```
1 1
1 1
1 2
```

```
1 1
1 1
1 2
```

```
4 4
1 1
4 4
```

```
4 4
1 1
4 4
```

```
3 3
1 1
3 3
```
CODEFORCES 1147_B. Chladni Figure
```
1 1
1 2
```

```
1 0
```

```
1 1
1 2
```

```
10 3
1 2
3 2
7 2
```

```
10 3
1 2
2 3
3 4
```

```
10 3
1 2
2 3
7 2
```

```
10 3
1 2
2 3
7 2
```

```
10 3
1 2
2 3
7 2
```

```
10 3
1 2
2 3
7 2
```

```
10 3
1 2
2 3
7 2
```
CODEFORCES 1168_C. And Reachability
1. **Incorrect data types**

```
n, q = map(int, input().split())
a = list(map(int, input().split()))
for _ in range(q):
    x, y = map(int, input().split())
    if a[x] & a[y] > 0:
        print('Shi')
    else:
        print('Fou')
```

This code will not work because the input is a list of integers, but we are trying to use the bitwise AND operator on strings. This will cause a runtime error.

2. **Incorrect bitwise operators**

```
n, q = map(int, input().split())
a = list(map(int, input().split()))
for _ in range(q):
    x, y = map(int, input().split())
    if a[x] | a[y] > 0:
        print('Shi')
    else:
        print('Fou')
```

This code will not work because the bitwise OR operator is not the same as the bitwise AND operator. The bitwise OR operator returns a 1 if either of the operands is a 1, while the bitwise AND operator returns a 1 only if both of the operands are a 1.

3. **Forgetting to initialize variables**

```
n, q = map(int, input().split())
a = list(map(int, input().split()))
for _ in range(q):
    x, y = map(int, input().split())
    if a[x] & a[y] > 0:
        print('Shi')
    else:
        print('Fou')
```

This code will not work because the variable `i` is not initialized before it is used in the loop condition. This will cause a runtime error.

4. **Using incorrect loop conditions**

```
n, q = map(int, input().split())
a = list(map(int, input().split()))
for i in range(1, n+1):
    for j in range(i+1, n+1):
        if a[i] & a[j] > 0:
            print('Shi')
        else:
            print('Fou')
```

This code will not work because the loop condition is incorrect. The loop should iterate over all pairs of integers from 1 to n, not all integers from i to n.

5. **Not handling edge cases**

```
n, q = map(int, input().split())
a = list(map(int, input().split()))
for _ in range(q):
    x, y = map(int, input().split())
    if x < y and a[x] & a[y] > 0:
        print('Shi')
    else:
        print('Fou')
```

This code will not work because it does not handle the case where x and y are equal. In this case, the program will print `Fou`, even though x is reachable from y.

6. **Using incorrect code formatting**

```
n, q = map(int, input().split())
a = list(map(int, input().split()))
for _ in range(q):
    x, y = map(int, input().split())
    if (x < y and a[x] & a[y] > 0):
        print('Shi')
    else:
        print('Fou')
```

This code is not properly formatted. It is difficult to read and understand, and it is more likely to contain errors.

7. **Not testing your code**

```
n, q = map(int, input().split())
a = list(map(int, input().split()))
for _ in range(q):
    x, y = map(int, input().split())
    if a[x] & a[y] > 0:
        print('Shi')
    else:
        print('Fou')
```

This code has not been tested. It is likely to contain errors that will not be caught until it is run on a test case.

Here are some program inputs that will validate whether an implementation meets each of the requirements listed above
CODEFORCES 1186_F. Vus the Cossack and a Graph
```
6 6
1 2
2 3
3 4
4 5
5 3
6 5
```
```
10 20
4 3
6 5
4 5
10 8
4 8
5 8
10 4
9 5
5 1
3 8
1 2
4 7
1 4
10 7
1 7
6 1
9 6
3 9
7 9
6 2
```
CODEFORCES 1205_E. Expected Value Again
```
2 3
```
```
1 5
```
```
100 1
```
```
10 10
```
CODEFORCES 1223_B. Strings Equalization
```
1
xabb
aabx
```
```
1
a
a
```
```
1
z
a
```
```
2
abc
cba
abcd
dcba
```
```
1
#
#
```
```
1

```
CODEFORCES 1248_E. Queue in the Train
```
10 100
994 952 646 725 532 847 311 984 133 751
```
CODEFORCES 1267_D. DevOps Best Practices
```
2
1 1 1
0 0 0
1 1 1
1 1 0
```
CODEFORCES 1288_E. Messenger Simulator
1. Incorrect input format
```
5 4
3 5 1 4
```

2. Incorrect output format
```
5 4
1 2 3 4 5
```

3. Incorrect logic
```
5 4
1 2 3 4
```

4. Incorrect data types
```
5 4
1 2 3 4
```

5. Off-by-one errors
```
5 4
1 2 3 4
```
CODEFORCES 130_E. Tribonacci numbers
1. **Incorrect modulo operation.**

```
Input:
4

Output:
1
```

The correct answer is 2.

2. **Off-by-one errors.**

```
Input:
5

Output:
2
```

The correct answer is 18.

3. **Incorrect initialization.**

```
Input:
4

Output:
0
```

The correct answer is 2.

4. **Incorrect recursion.**

```
Input:
4

Output:
1
```

The correct answer is 2.

5. **Incorrect output.**

```
Input:
4

Output:
2
```

The correct answer is 2.
CODEFORCES 1331_H. It's showtime
```
6100
9900
100002
123456
```
CODEFORCES 1352_C. K-th Not Divisible by n
```
1
6 1
```
```
1
3 7
```
```
1
4 12
```
```
1
2 1000000000
```
```
1
7 97
```
```
1
1000000000 1000000000
```
```
1
2 1
```
CODEFORCES 1372_A. Omkar and Completion
1. **Incorrect input format.**
```
1
3001
```

2. **Incorrect output format.**
```
1
1000
```

3. **Incorrect logic.**
```
1
4
2 2 2 2
```

4. **Memory leak.**
```
for i in range(1000):
    print(1)
```

5. **Security vulnerability.**
```
import os
import sys

def main():
    os.system('ls -la /etc/passwd')

if __name__ == '__main__':
    main()
```
CODEFORCES 1394_E. Boboniu and Banknote Collection
```
10
1 2 3 4 5 4 3 2 1
```
```
5
1 2 3 4 5
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
100
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
```
CODEFORCES 1419_C. Killjoy
```
1
2 69
68 70
```
```
1
6 4
4 4 4 4 4 4
```
```
9 38
-21 83 50 -59 -77 15 -71 -78 20
```
CODEFORCES 1437_C. Chef Monocarp
```
1
1
1
```

```
1
10
10
```

```
1
2
1
```

```
1
5
1 2 4 3
```

```
5
5
1 2 4 3 5
```

```
2
2
1 2
3
1 2 3
```
CODEFORCES 1462_A. Favorite Sequence
```
1
1
42
```
```
1
1
1 1 1 1 1 1 1 1
```
```
1
7
1 1 1 1 1 1 1
```
```
1
3
1 2 3
```
```
1
6
3 4 5 2 9 1
```
```
2
4
9 2 7 1
11
8 4 3 1 2 7 8 7 9 4 2
```
CODEFORCES 1487_B. Cat Cycle
1. ```
2
2 1
```
2. ```
2
2 2
```
3. ```
3
3 1
```
4. ```
3
3 2
```
5. ```
3
3 3
```
6. ```
5
5 5
```
7. ```
69
69 1337
```
CODEFORCES 1510_J. Japanese Game
```
#
```
```
_#
```
```
##
```
```
###
```
```
__#_____
```
```
#_#_#_#_#_#_
```
```
#_#_#_#_#_#_#_#_#_
```
```
#_#_#_#_#_#_#
```
```
_#_#_#_#_#_#_#
```
```
_#_#_#_#_#_#_
```
```
#_#_#_#_#_#_#_#
```
```
#_#_#_#_#_#_#_#_#_#
```
CODEFORCES 1538_D. Another Problem About Dividing Numbers
1. Incorrect input format:
```
1
1000000000 1000000000 1000000000
```
2. Incorrect output format:
```
1
Yes
```
3. Incorrect algorithm:
```
1
1000000000 1000000000 1000000000
```
4. Incorrect data structures:
```
1
1000000000 1000000000 1000000000
```
5. Incorrect error handling:
```
1
1000000000 1000000000 1000000000
```
CODEFORCES 164_D. Minimum Diameter
**1. Incorrect input format**

```
1 1
```

This input is invalid because it does not contain a pair of integers.

**2. Incorrect data type**

```
5 2
1 2
0 0
2 2
1 1
3 3
```

This input is invalid because the coordinates of the points are specified as strings.

**3. Incorrect algorithm**

```
5 2
1 2
0 0
2 2
1 1
3 3
```

This input is invalid because the algorithm does not take into account the fact that the points can coincide.

**4. Incorrect implementation**

```
5 2
1 2
0 0
2 2
1 1
3 3
```

This input is invalid because the program contains a logical error.

**5. Incorrect testing**

```
5 2
1 2
0 0
2 2
1 1
3 3
```

This input is invalid because the program is not tested with a variety of input values.

**6. Incorrect debugging**

```
5 2
1 2
0 0
2 2
1 1
3 3
```

This input is invalid because the program is not well-documented.
CODEFORCES 185_E. Soap Time! - 2
```
1 0
2 -2
```
CODEFORCES 207_D2. The Beaver's Problem - 3
```
# 1. Incorrect input format

1
name
text

# 2. Incorrect output format

3

# 3. Incorrect logic

12345
name
text
1

# 4. Memory leaks

1000000000
name
text

# 5. Timeouts

1000000000000
name
text
```
CODEFORCES 232_A. Cycles
1
10
100
CODEFORCES 257_E. Greedy Elevator
**Incorrect understanding of the problem statement.**
```
1 2
1 1 2
```
The output should be 2, but the program outputs 1.

**Incorrect implementation of the elevator algorithm.**
```
1 2
1 1 2
```
The output should be 2, but the program outputs 3.

**Incorrect handling of edge cases.**
```
1 2
1 1 2
```
The output should be 2, but the program outputs 1.

**Incorrect input/output formatting.**
```
1 2
1 1 2
```
The output should be 2, but the program outputs 1.

**Runtime errors.**
```
1 2
1 1 2
```
The output should be 2, but the program outputs 1.

**Memory errors.**
```
1 2
1 1 2
```
The output should be 2, but the program outputs 1.
CODEFORCES 280_E. Sequence Transformation
```
3 6 2 2
1 4 6

10 100000 8714 9344
3378 14705 17588 22672 32405 34309 37446 51327 81228 94982
CODEFORCES 303_D. Rotatable Number
1. ```
6 11
```

2. ```
5 8
```

3. ```
5 10
```

4. ```
6 100
```

5. ```
1 100
```

6. ```
0 100
```
CODEFORCES 32_E. Hide-and-Seek
```
-1 3
1 3
0 2 0 4
0 0 0 1

0 0
1 1
0 1 1 0
-100 -100 -101 -101

0 0
1 1
0 1 1 0
-1 1 1 3

0 0
10 0
100 100 101 101
1 0 3 0

1 1
0 0
0 1 1 0
1 0 3 0
```
CODEFORCES 351_C. Jeff and Brackets
```
2 6
1 2
2 1
```
```
1 10000000
2
3
```
CODEFORCES 375_D. Tree and Queries
```
10 4
3 2 1 4 5 6 7 8 9 10
1 2
1 5
2 3
5 6
1 3
1 4
2 3
5 3
```
CODEFORCES 398_A. Cards
```
0 2
```

```
0 0
```

```
3 0
```

```
4 0
```

```
10 10
```
CODEFORCES 420_B. Online Meeting
```
5 4
+ 1
+ 2
- 2
- 1
```
CODEFORCES 446_E. DZY Loves Bridges
```
2 1 4
1 1 1 2
```
CODEFORCES 469_A. I Wanna Be the Guy
4
3 1 2 3
2 2 4
CODEFORCES 490_F. Treeland Tour
```
6
1 2 3 4 5 1
1 2
2 3
3 4
3 5
3 6

5
1 2 3 4 5
1 2
1 3
2 4
3 5
```
CODEFORCES 515_A. Drazil and Date
```
1 1 3
1 1 1
0 0 0
5 5 11
10 15 25
0 5 1
0 0 2
```
CODEFORCES 542_B. Duck Hunt
```
1 1
1 1
```

```
3 3
-3 0
1 3
-1 2
```

```
4 5
-1 1
2 4
5 9
6 8
```

```
5 1
-1 5
3 7
6 9
10 12
15 17
```

```
10 10
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
-1000000000 1000000000
```

```
10 10
-1 1000000000
-1 1000000000
-1 1000000000
-1 1000000000
-1 1000000000
-1 1000000000
-1 1000000000
-1 1000000000
-1 1000000000
-1 1000000000
```
CODEFORCES 569_C. Primes or Palindromes?
```
1 2
1 3
1 4
1 5
1 6
```
CODEFORCES 590_A. Median Smoothing
```
4
0 0 1 1
```
```
1
0 0 1 1
```
```
5
0 1 0 1 0
```
```
2
0 0 0 0 0
```
```
7
0 0 0 0 1 0 1
```
```
1
0 0 0 0 0 0 0
```
```
4
0 1 1 0
```
```
-1
```
CODEFORCES 611_H. New Year and Forgotten Tree
```
12
?? ??
? ?
? ?
? ??
?? ?
?? ??
? ??
? ?
? ?
? ?
? ?
```
```
12
?? ??
? ?
? ?
? ??
?? ?
?? ??
? ??
? ?
? ?
?? ??
? ?
```
```
1
?
```
```
4
??
? ?
? ?
? ?
```
```
12
???
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
```
```
200000
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
```
```
100000
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
? ?
```
CODEFORCES 631_E. Product Sum
```
1
5
```

```
2
5 4
```

```
3
1 1 2
```

```
4
4 3 2 5
```

```
5
1 1 2 7 1
```

```
6
1 2 3 4 5 6
```

```
7
1 2 3 4 5 6 7
```

```
8
1 2 3 4 5 6 7 8
```

```
9
1 2 3 4 5 6 7 8 9
```
CODEFORCES 660_C. Hard Process
```
1. Incorrect input format

```
1
0
```

2. Incorrect output format

```
10 2
1 0 0 1 0 1 0 1 0 1
10 4
```

3. Incorrect algorithm

```
10 2
1 0 0 1 0 1 0 1 0 1
6
1 0 0 1 1 1 1 1 0 1
```

4. Incorrect data structures

```
10 2
1 0 0 1 0 1 0 1 0 1
6
1 0 0 1 1 1 1 1 0 1
```

5. Incorrect error handling

```
10 2
1 0 0 1 0 1 0 1 0 1
6
1 0 0 1 1 1 1 1 0 1
```
CODEFORCES 683_G. The Fraction
```
0.2(45)
0.75(0)
0.(9)
0.1(1)
0.(999999)
```
CODEFORCES 707_A. Brain's Photos
```
# Incorrect input format
1 1
A

# Incorrect output format
1 1
C
#Color

# Incorrect use of variables
1 1
C
c = 1
print("#Color")

# Incorrect logic
1 1
C
print("#Black&White")

# Incorrect error handling
1 1
A
```
CODEFORCES 72_B. INI-file
```
1
a=1
```
```
2
a=1
b=a
```
```
3
a=1
b=a
; comment
```
```
6
a=1
b=a
; comment
[z]
1=2
[y]
2=3
[z]
2=1
```
```
11
a= 1
b=a
a = 2
 ; comment
[z]
1=2
[y]
2=3
[z]
2=1
[w]
```
CODEFORCES 74_D. Hanger
9 11
1
2
0 5 8
1
1
3
0 3 8
9
0 6 9
6
0 1 9
CODEFORCES 773_C. Prairie Partition
1. Incorrect prairie partition

```
n = 5
arr = [1, 2, 4, 4, 4]
```

This input will cause the program to output -1, because the prairie partition of 4 is 1 + 2 + 1, which is not a valid prairie partition.

2. Incorrect sorting

```
n = 5
arr = [1, 2, 4, 4, 4]
```

This input will cause the program to output 1, because the prairie partition of 4 is 1 + 2 + 1, which is not a valid prairie partition. However, the resulting sequence of numbers will be in non-decreasing order, so the program will output 1.

3. Missing a possible solution

```
n = 6
arr = [1, 1, 1, 2, 2, 2]
```

This input will cause the program to output 2, because there is only one possible solution: [4, 5]. However, the program should also output 3, because there is also a possible solution: [3, 3, 3].

4. Incorrect implementation of the prairie partition algorithm

```
n = 5
arr = [1, 2, 4, 4, 4]
```

This input will cause the program to output 1, because the prairie partition of 4 is 1 + 2 + 1, which is not a valid prairie partition. However, the program will still output 1, because the algorithm will incorrectly return the prairie partition of 4 as 1 + 2 + 1.

5. Incorrect input validation

```
n = -1
arr = []
```

This input will cause the program to crash, because the input is not a valid sequence of positive integers.

6. Incorrect output formatting

```
n = 5
arr = [1, 2, 4, 4, 4]
```

This input will cause the program to output 1, because the prairie partition of 4 is 1 + 2 + 1, which is not a valid prairie partition. However, the program will output 1, because the output will be formatted incorrectly.

Here are some additional program inputs that will validate whether an implementation meets the other requirements of the problem spec:

* An input with a single number
* An input with a negative number
* An input with a number that is not a positive integer
* An input with a number that is too large
* An input with a sequence of numbers that is not in non-decreasing order
* An input with a sequence of numbers that contains duplicates
CODEFORCES 798_B. Mike and strings
```
2
a
a
```
```
3
a
b
c
```
```
3
abc
abc
abc
```
```
4
xzzwo
zwoxz
zzwox
xzzwo
```
```
5
abc
bcd
cde
def
efg
```
CODEFORCES 818_D. Multicolored Cars
3 10
1 2 3
CODEFORCES 843_E. Maximum Flow
```
5 6 1 5
1 2 1
2 3 1
3 5 1
1 4 1
4 3 0
4 5 1
```
CODEFORCES 864_C. Bus
```
6 9 2 4
6 10 2 4
6 5 4 3
-1
10 10 0 2
```
CODEFORCES 88_B. Keyboard
```
2 2 1
ab
cd
1
A
```
```
2 2 1
ab
cd
1
e
```
```
2 2 1
ab
cS
5
abcBA
```
```
3 9 4
qwertyuio
asdfghjkl
SzxcvbnmS
35
TheQuIcKbRoWnFOXjummsovertHeLazYDOG
```
CODEFORCES 912_E. Prime Gift
```
1
2
1

2
2 3
3

3
2 3 5
7

5
3 7 11 13 31
17
```
CODEFORCES 934_E. A Colourful Prospect
```
1
0 0 1
```

```
2
0 0 1
1 1 1
```

```
3
0 0 1
2 0 1
4 0 1
```

```
3
0 0 2
3 0 2
6 0 2
```

```
3
0 0 2
2 0 2
1 1 2
```

```
5
0 0 1
2 0 1
4 0 1
6 0 1
8 0 1
```

```
4
0 0 1
2 0 1
4 0 1
6 0 1
```

```
5
0 0 2
2 0 2
4 0 2
6 0 2
8 0 2
```
CODEFORCES 960_G. Bandit Blues
```
1 1 1

2 1 1

2 2 1

5 2 2

10 3 3

100 50 50

1000000000 500000000 500000000
```
CODEFORCES 988_D. Points and Powers of Two
1. ```
6
3 5 4 7 10 12
```

2. ```
6
-10 10 -10 10 10 -10
```

3. ```
6
1 1 1 1 1 1
```

4. ```
6
1 2 4 8 16 32
```
HACKEREARTH amazing-race-3
```
5 4 3
0 0
1 0
2 0
3 0
0 10
10 10
20 10
30 10
5 5 5 5 5
```
HACKEREARTH candy-1
```
1
5
1 3 4 5 7
```
HACKEREARTH defuse-the-bomb-3
1
12345 23
HACKEREARTH game-of-thrones
1
3
1 2 3
HACKEREARTH kth-shortest-path
```
1
2 2
1 2
1
0 0 1
```
```
2
2 2
1 2
3 4
2
1 1 1
1 1 2
```
```
3
2 2
1 2
3 4
2
1 1 1
1 1 2
2 2
1 2
## 4
3
1 1 1
1 1 2
1 0 1
```
```
1
2 2
1 2
1
0 0 1
```
```
2
2 2
1 2
3 4
2
1 1 1
1 1 2
```
HACKEREARTH monk-and-iq
5 4 4
2 8 5 1
9 10 5 1
HACKEREARTH passing-the-parcel
```
1
b
```

```
2
ab
```

```
3
bba
```

```
4
abba
```

```
5
abba
```

```
6
abba
```

```
7
abba
```

```
8
abba
```

```
9
abba
```

```
10
abba
```

```
11
abba
```

```
12
abba
```

```
13
abba
```

```
14
abba
```

```
15
abba
```

```
16
abba
```

```
17
abba
```

```
18
abba
```

```
19
abba
```

```
20
abba
```
HACKEREARTH roy-and-counting-sorted-substrings-1
```
1
3
abc
```
```
3
bba
```
```
4
abac
```
```
3
zyx
```
HACKEREARTH string-query-22
```
abcdbcaab
5
2 a
1 c
1 d
3 b
2 a
```
HACKEREARTH utkarsh-and-old-graph-3
```
5 4
1 2
2 3
4 5
3 4
```
```
10 5
1 2
2 3
3 4
4 5
5 6
```
```
10 5
1 2
2 3
3 4
4 5
5 6
1 7
```
```
5 0
```
ATCODER p02596 AtCoder Beginner Contest 174 - Repsept
1. ```
101
```
2. ```
2
```
3. ```
999983
```
ATCODER p02727 AtCoder Beginner Contest 160 - Red and Green Apples
```
1 2 2 2 1
2 4
5 1
3

2 2 2 2 2
8 6
9 1
2 1

2 2 4 4 4
11 12 13 14
21 22 23 24
1 2 3 4
```
ATCODER p02858 DISCO Presents Discovery Channel Code Contest 2020 Qual - DISCOSMOS
2 2 1
869 120 1001
ATCODER p02994 AtCoder Beginner Contest 131 - Bite Eating
```
5 2
```
ATCODER p03135 AtCoder Beginner Contest 117 - Entrance Examination
8 3
99 1
1 100
ATCODER p03280 AtCoder Beginner Contest 106 - Garden
2 2
5 7
ATCODER p03435 AtCoder Beginner Contest 088 - Takahashi's Information
```
1 0 1
2 1 2
1 0 1

2 2 2
2 1 2
2 2 2

0 8 8
0 8 8
0 8 8

1 8 6
2 9 7
0 7 7
```
ATCODER p03594 CODE FESTIVAL 2017 qual A - Four Coloring
```
2 2 1
2 3 2
2 2 3
ATCODER p03751 square869120Contest #4 - Atcoder Handles
1. ```
4
atc?der
atcder
atcoder
atcoder
atcoder
```
2. ```
5
atc?der
atcder
atcoder
atcoder
atcoder
```
3. ```
5
atc?der
atcder
atcoder
atcoder
atcoder
```
4. ```
10000
a?a
a
a
a
a
a
a
a
a
```
5. ```
10000
a?a
b
```
ATCODER p03915 CODE FESTIVAL 2016 Final - Zigzag MST
```
# python3

def main():
    N, Q = map(int, input().split())
    e = [[] for _ in range(N)]
    for _ in range(Q):
        A, B, C = map(int, input().split())
        A -= 1
        B -= 1
        e[A].append((B, C))
        e[B].append((A, C))

    ans = 0
    visited = [False] * N
    q = [(0, 0)]
    while q:
        a, c = q.pop(0)
        if visited[a]:
            continue
        visited[a] = True
        ans += c
        for b, w in e[a]:
            if not visited[b]:
                q.append((b, w))
    print(ans)

if __name__ == "__main__":
    main()
```
AIZU p00017 Caesar Cipher
```
xlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.
this is the picture that i took in the trip.

xly ly xxv xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx x.
the quick brown fox jumps over the lazy dog.

xly xxxx xx xxxx xxxx xx xxxx xxxx xxxx x xxxx xxxx x.
the quick brown fox jumps over the lazy dog.

xly xxxx xx xxxx xxxx xx xxxx xxxx xxxx x xxxx xxxx x.
the quick brown fox jumps over the lazy dog.

xly xxxx xx xxxx xxxx xx xxxx xxxx xxxx x xxxx xxxx x.
the quick brown fox jumps over the lazy dog.
```
AIZU p00149 Eye Test
1.0 1.2
0.8 1.5
1.2 0.7
2.0 2.0

2.1 0.1
0.1 2.1

0.1 0.1
1.1 1.1

1.1 1.2
2.1 2.1

1.2 1.2
1.2 1.2

1.2 1.2
1.2 1.2
AIZU p00301 Symmetric Ternary Number
1
100000
-100000
100001
0
1000000000000000
AIZU p00470 Commute routes
```
3 4
15 15
0 0
```
AIZU p00662 The Great Summer Contest
1 1 1 1 1 1
1 1 1 0 0 0
1 0 0 0 1 1
3 0 0 3 0 0
3 1 0 1 3 1
1 2 0 2 0 1
0 0 1 1 0 3
1 0 0 1 1 0
0 0 0 0 0 0
AIZU p00805 Fishnet
```
2
0.2000000 0.6000000
0.3000000 0.8000000
0.3000000 0.5000000
0.5000000 0.6000000
2
0.3333330 0.6666670
0.3333330 0.6666670
0.3333330 0.6666670
0.3333330 0.6666670
4
0.2000000 0.4000000 0.6000000 0.8000000
0.1000000 0.5000000 0.6000000 0.9000000
0.2000000 0.4000000 0.6000000 0.8000000
0.1000000 0.5000000 0.6000000 0.9000000
2
0.5138701 0.9476283
0.1717362 0.1757412
0.3086521 0.7022313
0.2264312 0.5345343
1
0.4000000
0.6000000
0.3000000
0.5000000
0
```
AIZU p00936 Squeeze the Cylinders
1. **Incorrect input format**

```
Input:
['a', 'b', 'c']

Output:
Invalid input.
```

2. **Incorrect output format**

```
Input:
2
10 10

Output:
40

Output:
Incorrect output format.
```

3. **Incorrect calculation**

```
Input:
2
10 10

Output:
30.00000000

Output:
Incorrect calculation.
```

4. **Off-by-one errors**

```
Input:
3
10 10 10

Output:
90.00000000

Output:
Incorrect calculation.
```

5. **Memory errors**

```
Input:
1000000
1000000

Output:
Out of memory.
```

6. **Threading errors**

```
Input:
1000000
1000000

Output:
Thread deadlock.
```

7. **Race conditions**

```
Input:
1000000
1000000

Output:
Race condition.
```

8. **Deadlocks**

```
Input:
1000000
1000000

Output:
Deadlock.
```

9. **Security vulnerabilities**

```
Input:
1000000
1000000

Output:
Security vulnerability.
```

10. **Other bugs**

```
Input:
1000000
1000000

Output:
Other bug.
```
AIZU p01069 Sum of Sequences
```
3 3 1
1 2 3
3 1 2
3
```

```
4 1 1
1
```

```
5 3 2
1 2 3 4 5
2 2 2
11
12
```
AIZU p01203 Compress Files
```
6 1
2 1
2 1
2 1
2 1
2 1
5 1
1 1
4 2
0 0
```
AIZU p01339 Alien's Counting
1. Incorrect input format
```
5 4
2 3
3 4
4 3
5 4
3 2
```

2. Incorrect data type
```
5 4
2 3
3 4
4 3
5 4
A
```

3. Incorrect calculation
```
5 4
2 3
3 4
4 3
5 4
10
```

4. Memory leak
```
5 4
2 3
3 4
4 3
5 4
```

5. Race condition
```
5 4
2 3
3 4
4 3
5 4
```

6. Security vulnerability
```
5 4
2 3
3 4
4 3
5 4
```

7. Incorrect output format
```
5 4
2 3
3 4
4 3
5 4
10
```

8. Other bugs
```
5 4
2 3
3 4
4 3
5 4
```
AIZU p01506 Digit
```
0 1000 10
1 1000 10
0 0 0
```
AIZU p01677 Broken Audio Signal
5
1 x 2 4 x
2
x x
2
1 2
2
2 1
2
1000000000 x
4
x 2 1 x
0
AIZU p01821 Identity Function
```
1

"abc"

-1

0.5

[1, 2, 3]

[1, 2, 3, 4]
```
AIZU p01956 Window
1. ```
N, H, W = map(int, input().split())
x = list(map(int, input().split()))

open_area = 0
for i in range(N):
    if i % 2 == 0:
        x[i] = max(0, x[i] - W)
    else:
        x[i] = min(W, x[i] + W)
    open_area += (x[i] - x[i - 1]) * H

print(open_area)
```

2. ```
N, H, W = map(int, input().split())
x = list(map(int, input().split()))

open_area = 0
for i in range(N):
    if i % 2 == 0:
        x[i] = max(0, x[i] - W)
    else:
        x[i] = min(W, x[i] + W)
    open_area += (x[i] - x[i - 1]) * H

print(open_area)
```

3. ```
N, H, W = map(int, input().split())
x = list(map(int, input().split()))

open_area = 0
for i in range(N):
    if i % 2 == 0:
        x[i] = max(0, x[i] - W)
    else:
        x[i] = min(W, x[i] + W)
    open_area += (x[i] - x[i - 1]) * H

print(open_area)
```

4. ```
N, H, W = map(int, input().split())
x = list(map(int, input().split()))

open_area = 0
for i in range(N):
    if i % 2 == 0:
        x[i] = max(0, x[i] - W)
    else:
        x[i] = min(W, x[i] + W)
    open_area += (x[i] - x[i - 1]) * H

print(open_area)
```
AIZU p02103 Great Devil Sakanikia
3 5 2
0 2
2 2
AIZU p02243 Single Source Shortest Path II
```
5
0 3 2 3 3 1 1 2
1 2 0 2 3 4
2 3 0 3 3 1 4 1
3 4 2 1 0 1 1 4 4 3
4 2 2 1 3 3
```
AIZU p02389 Rectangle
```
3 5
-1 5
1 0
100 100
```