CODECHEF aran07
```
1
100
```
CODECHEF circuits
```
4

1
0

3
0
0
1 1 2

3
0
0
2 1 2

5
0
0
0
2 1 2
1 3 4
```
CODECHEF fbfrw1
```
1 1
10
```
```
5 3
10 100 200 300 400
```
```
6 6
2000 2100 3000 1500 1250 3000
```
CODECHEF lcollis
1
3 3
100
100
100
CODECHEF piano1
1
TTTT
1
CODECHEF strbit
```
1
7 3
RGGRGRG
```
CODEFORCES 1009_C. Annoying Present
```
2 3
-1 3
0 0
-1 -4
```
```
3 2
0 2
5 0
```
CODEFORCES 1031_F. Familiar Operations
```
1
32 32
```
```
1
500000000 500000000
```
```
10
2 5
4 3
1 10
2 7
3 4
10 11
123456789 1234567890
2147483647 2147483647
2147483647 2147483646
```
```
1
1 2
```
CODEFORCES 1054_F. Electric Scheme
```
1
1 1
```
```
2
1 1
2 2
```
```
4
2 2
2 4
4 2
4 4
```
```
5
2 1
3 2
2 3
1 2
1 1
```
```
3
1 1
1 2
2 2
```
```
5
3 1
3 2
2 3
1 2
1 1
```
CODEFORCES 1076_F. Summer Practice Report
```
1 1
1
0

2 2
5 5
2 2

2 2
5 6
2 2

3 1
4 1 10 1
3 2 10 1

2 2
10 10
5 5

10 10
1000000000 1000000000
1000000000 1000000000
```
CODEFORCES 1097_F. Alex and a TV Show
```
4 13
1 1 1
1 2 4
1 3 6
4 4 4
1 4 4
2 2 1 2
2 3 3 4
4 4 4
3 2 2 3
4 2 1
4 2 2
4 2 3
4 2 4
```
CODEFORCES 1118_F1. Tree Cutting (Easy Version)
```
5
2 0 0 1 2
1 2
2 3
2 4
2 5
```
```
5
1 0 0 0 2
1 2
2 3
3 4
4 5
```
```
3
1 1 2
2 3
1 3
```
```
10
1 0 1 0 1 0 0 1 0 1
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
```
```
7
1 0 0 0 0 0 0
1 2
2 3
3 4
4 5
5 6
6 7
CODEFORCES 1145_C. Mystery Circuit
```
0
15
-1
```
CODEFORCES 1166_B. All the Vowels Please
```
1

11

13

36
```
CODEFORCES 1184_E3. Daleks' Invasion (hard)
```
3 3
1 2 8
2 3 3
3 1 4
```
CODEFORCES 1203_D2. Remove the Substring (hard version)
```
bbaba
bb

baaba
ab

abcde
abcde

asdfasdf
fasd

```
CODEFORCES 1220_B. Multiplication Table
```
5
0 4 6 2 4
4 0 6 2 4
6 6 0 3 6
2 2 3 0 2
4 4 6 2 0
```

```
3
0 99990000 99970002
99990000 0 99980000
99970002 99980000 0
```
CODEFORCES 1245_D. Shichikuji and Power Grid
```
3
2 3
1 1
3 2
3 2 3
3 2 3

3
2 1
1 2
3 3
23 2 23
3 2 3

4
1 1
1 2
2 3
3 4
1 2 3 4
1 2 3 4
```
CODEFORCES 1265_B. Beautiful Numbers
```
1
3
1 2 3

2
4
1 2 3 4
5
1 2 3 4 5
```
CODEFORCES 1286_D. LCC
```
1
-1000000000 1 100
```

This input tests for incorrect implementation of the binary search algorithm. The binary search algorithm is used to find the position of the first proton that collides with another proton. However, in this input, there are no protons that collide with each other. Therefore, the binary search algorithm should return -1. However, if the implementation of the binary search algorithm is incorrect, it may return a incorrect value.

```
2
1 1 100
2 1 100
```

This input tests for using an incorrect data structure. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, the coordinates of the protons are not sorted. Therefore, if a sorted array is used to store the input data, it will not be efficient.

```
3
1 1 100
2 1 100
3 1 100
```

This input tests for using an incorrect algorithm. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, all of the protons have the same coordinate, the same speed, and the same probability of flying to the right. Therefore, a simple algorithm can be used to find the expected value of the duration of the experiment.

```
1000000
1 1 100
```

This input tests for using incorrect mathematical formulas. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, the number of protons is very large. Therefore, the mathematical formulas used to calculate the expected value of the duration of the experiment must be very accurate.

```
1000000
1 1000000000 100
```

This input tests for using incorrect rounding. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, the speed of a proton is very large. Therefore, the results of calculations must be rounded to a very high precision.

```
1000000
1 1000000000 100
1000000
1 1000000000 100
```

This input tests for using incorrect error handling. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, the first tuple contains an invalid coordinate. Therefore, the program should handle the error and print an error message.

```
1000000
1 1 100
1000000
1 1 100
1000000
1 1 100
```

This input tests for using incorrect test cases. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, the first three tuples are identical. Therefore, the test cases are not comprehensive and do not test all of the possible scenarios.

```
1000000
1 1 100
1000000
1 1 100
```

This input tests for not debugging the program. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, there is a bug in the program. The bug causes the program to print an incorrect answer.

```
1000000
1 1 100
1000000
1 1 100
```

This input tests for not testing the program in production. The input data is a list of tuples, where each tuple contains the coordinate of a proton, the speed of a proton, and the probability that a proton flies to the right. However, in this input, the program is not
CODEFORCES 1305_F. Kuroni and the Punishment
```
2
1 1

3
1 1 1

4
2 2 2 2

5
1 2 3 4 5

10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 132_C. Logo Turtle
```
#input
FT
1

#output
2

#input
FFFTFFF
2

#output
6
```
CODEFORCES 134_A. Average Numbers
```
# 1. Using the wrong formula for the arithmetic mean
1
1 2 3 4 5

# 2. Not considering the case where all the numbers are the same
4
50 50 50 50

# 3. Using an incorrect algorithm
5
1 2 3 4 5

# 4. Making a mistake in the implementation of the algorithm
5
1 2 3 4 5

# 5. Not handling the input data correctly
1
-1

# 6. Not printing the output correctly
5
1 2 3 4 5
```
CODEFORCES 1370_A. Maximum GCD
```
1
1000000000

2
2

3
3

4
4

5
5

6
6

7
7

8
8

9
9

10
10
```
CODEFORCES 1392_F. Omkar and Landslide
**Incorrect understanding of the problem statement**

```
n = int(input())
h = list(map(int, input().split()))

for i in range(n):
    if h[i] + 2 <= h[i + 1]:
        print(h[i] + 1, end=" ")
    else:
        print(h[i], end=" ")
```

This code will not pass the time limit because it does not use fast IO.

**Incorrect implementation of the landslide algorithm**

```
n = int(input())
h = list(map(int, input().split()))

for i in range(n):
    if h[i] + 2 <= h[i + 1]:
        h[i] += 1
        h[i + 1] -= 1

print(*h)
```

This code will not pass the time limit because it does not handle the case where the landslide ends after the first minute.

**Incorrect handling of the edge cases**

```
n = int(input())
h = list(map(int, input().split()))

if n == 1:
    print(h[0])
else:
    for i in range(n - 1):
        if h[i] + 2 <= h[i + 1]:
            h[i] += 1
            h[i + 1] -= 1

    print(*h)
```

This code will not pass the time limit because it does not handle the case where n = 1.

**Incorrect use of fast IO**

```
n = int(input())
h = list(map(int, input().split()))

for i in range(n):
    if h[i] + 2 <= h[i + 1]:
        h[i] += 1
        h[i + 1] -= 1

print(" ".join(map(str, h)))
```

This code will not pass the time limit because it does not use fast IO.

**Correct solution**

```
from sys import stdin, stdout

def io():
    return stdin.readline().strip()

def ios():
    return map(int, stdin.readline().strip().split())

n = int(io())
h = list(ios())

while True:
    change = False
    for i in range(n - 1):
        if h[i] + 2 <= h[i + 1]:
            h[i] += 1
            h[i + 1] -= 1
            change = True
            break
    if not change:
        break

print(" ".join(map(str, h)))
```
CODEFORCES 1417_B. Two Arrays
```
1
5 7
1 2 3 4 5
```

```
1
3 6
3 3 3
```

```
1
1 0
```

```
2
3 7
1 2 3
3 6
3 3 3
```

```
1
5 8
1 5 7 2 4
```

```
1
6 7
1 2 3 4 5 6
```
CODEFORCES 1433_G. Reducing Delivery Cost
```
6 5 2
1 2 5
2 3 7
2 4 4
4 5 2
4 6 8
1 6
5 3

```
```
5 5 4
1 2 5
2 3 4
1 4 3
4 3 7
3 5 2
1 5
1 3
3 3
1 5
```
CODEFORCES 1458_F. Range Diameter Sum
```
4
1 2
2 4
3 2

10
1 8
2 9
5 6
4 8
4 2
7 9
3 6
10 4
3 9
```
CODEFORCES 1481_F. AB Tree
```
5 2
1 2 3 4 5
```
```
3 3
1 2 3
```
```
9 3
1 2 2 4 4 4 3 1
```
```
10 5
1 2 3 4 5 6 7 8 9 10
```
```
6 2
1 2 3 4 5 6
```
CODEFORCES 1509_A. Average Height
```
1
1
1
```
```
1
2
1 1
```
```
2
1 2
1 2
```
```
3
1 1 1
1 1 1
```
```
3
2 3 4
4 3 2
```
```
4
10 9 13 15
15 13 9 10
```
```
4
10 9 13 15
15 13 9 10
```
```
4
10 9 13 15
15 13 9 10
```
CODEFORCES 1535_A. Fair Playoff
```
1
3 7 9 5
```

```
1
4 5 6 9
```

```
1
5 3 8 1
```

```
1
6 5 3 2
```
CODEFORCES 162_E. HQ9+
```
H

H9

HQ

9

+

H9+

H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9+H9
CODEFORCES 182_A. Battlefield
```
2 4
0 5 6 5
3
0 0 0 4
1 1 4 1
6 0 6 4
```
CODEFORCES 205_C. Little Elephant and Interval
```
2 47
47 1024
```
CODEFORCES 22_B. Bargaining Table
3 3
000
010
000

5 4
1100
0000
0000
0000
0000

1 1
1
CODEFORCES 255_A. Greg's Workout
```
1
2
```

```
2
2 3
```

```
3
1 2 3
```

```
4
5 3 2 1
```

```
5
2 3 2 1 4
```

```
6
3 1 2 3 1 2
```

```
7
3 3 2 7 9 6 8
```
CODEFORCES 279_A. Point on Spiral
**1. Incorrect input format**

```
1 2
```

**2. Incorrect output format**

```
1 2
3
```

**3. Incorrect calculation of the number of turns**

```
1 2
0
```

**4. Incorrect handling of edge cases**

```
101 100
```

**5. Incorrect use of variables**

```
x = 1
y = 2
z = x + y
print(z)
```

**6. Incorrect use of functions**

```
x = 1
y = 2
print(abs(x + y))
```

**7. Incorrect use of data structures**

```
x = 1
y = 2
list = [x, y]
print(len(list))
```

**8. Incorrect use of algorithms**

```
x = 1
y = 2
for i in range(x, y + 1):
    print(i)
```

**9. Incorrect use of comments**

```
# This is a comment
x = 1
y = 2
print(x + y)
```

**10. Incorrect use of error handling**

```
try:
    x = int(input())
    y = int(input())
    print(abs(x - y))
except ValueError:
    print("Invalid input")
```
CODEFORCES 300_E. Empire Strikes Back
```
1
2
```
```
2
3 4
```
```
10
1 2 3 4 5 6 7 8 9 10
```
```
1000000000
1
```
CODEFORCES 327_C. Magic Five
```
1256
1

13990
2

555
2

```
CODEFORCES 349_D. Apple Tree
```
6
0 0 12 13 5 6
1 2
1 3
1 4
2 5
2 6
```
CODEFORCES 372_E. Drawing Circles is Fun

CODEFORCES 394_B. Very Beautiful Number
1 2
6 5
10 3
1 10
1000000000 1000000000
CODEFORCES 417_C. Football
```
3 1

3 2

3 1

4 2

2 1

3 4

4 3

5 3

1 2

2 5

3 4

4 5

5 1

5 2

5 3

5 4

5 5

6 1

2 1

3 4

4 5

6 1

6 2

6 3

6 4

6 5

6 6

10 1

1 2

2 3

3 4

4 5

5 6

6 7

7 8

8 9

9 10

10 1
```
CODEFORCES 444_A. DZY Loves Physics
```
5 6
13 56 73 98 17
1 2 56
1 3 29
1 4 42
2 3 95
2 4 88
3 4 63
```
```
5 0
1
```
```
1 0
```
CODEFORCES 466_B. Wonder Room
```
1 1 1
2 4 4
3 3 5
```
CODEFORCES 489_F. Special Matrices
```
3 1 1000
011
```
```
4 4 100500
0110
1010
0101
1001
```
```
4 1 1000
100
```
```
4 4 1000
1110
1011
1011
1110
```
```
3 2 1000000007
111
110
```
CODEFORCES 513_D1. Constrained Tree
```
3 2
1 2 LEFT
1 3 RIGHT
```

```
4 2
1 2 LEFT
1 3 RIGHT
```

```
3 3
1 2 LEFT
1 3 LEFT
2 3 RIGHT
```

```
1 0
```
CODEFORCES 538_F. A Heap of Heaps
```
1
1
```
```
2
1 2
```
```
3
1 5 4
```
```
4
1 5 4 3
```
```
5
1 5 4 3 2
```
```
6
2 2 2 2 2 2
```
```
7
1 5 4 3 2 6
```
```
8
5 1 2 3 4 6 7
```
```
9
1 5 4 3 2 6 7 8
```
```
10
5 1 2 3 4 6 7 8 9
```
CODEFORCES 566_G. Max and Min
```
2 2
42 43
2 3
3 2
3 10
10 3
```

```
1 1
1 1
3 4
1 1
```
CODEFORCES 588_B. Duff in Love
1. ```
1
```
2. ```
12
```
3. ```
100
```
4. ```
1000000000
```
CODEFORCES 60_D. Savior
1
1

2
1 2

2
3 5
CODEFORCES 630_I. Parking Lot
```
3
5
10
```
CODEFORCES 659_A. Round House
```
6 2 -5
```
```
5 1 3
```
```
3 2 7
```
```
1 1 0
```
```
100 100 0
```
```
100 100 -100
```
CODEFORCES 681_C. Heap Operations
1. ```
1
insert 1
```

2. ```
1
insert 1
removeMin
```

3. ```
2
insert 1
getMin 1
```

4. ```
2
insert 1
insert 1
```

5. ```
4
insert 1
insert 1
removeMin
getMin 2
```

6. ```
5
insert 1
insert 2
insert 3
insert 4
getMin 1
```
CODEFORCES 704_B. Ant Man

CODEFORCES 725_G. Messages on a Tree
```
8 3
0 1 1 2 3 3 4 5
6 1
8 2
4 5
```
CODEFORCES 748_A. Santa Claus and a Place in a Class
1. Incorrect input format
```
4 3 9
```

2. Incorrect calculation of the lane and desk numbers
```
4 3 24
```

3. Incorrect output format
```
4 3 R
```

4. Other bugs
```
-1 0 0
```
CODEFORCES 770_D. Draw Brackets!
```
1
[
```

```
2
[]
```

```
3
[[]
```

```
4
[[]
```

```
5
[[][]
```

```
6
[[[]]
```

```
7
[[][]]
```

```
8
[[][]][]
```

```
9
[[][]][]
```

```
10
[[][][][]
```

```
11
[[[][]][]
```

```
12
[[][][][]]
```

```
13
[[][][][]]
```

```
14
[[][][][]]
```

```
15
[[][][][]]
```

```
16
[[][][][]]
```

```
17
[[][][][]]
```

```
18
[[][][][]]
```

```
19
[[][][][]]
```

```
20
[[][][][]]
```
CODEFORCES 794_G. Replace All
```
A?
B?
3
```
CODEFORCES 816_A. Karen and Morning
```
05:39
13:31
23:59
-1
00:00
00:01
```
CODEFORCES 841_A. Generous Kefa
```
1 1
a
```
```
4 2
aabb
```
```
6 3
aacaab
```
```
1 2
a
```
CODEFORCES 862_B. Mahmoud and Ehab and the bipartiteness
1. **Incorrect input format**

```
3
1 2
1 3
```

2. **Incorrect data type**

```
3
1 2
1.3 3
```

3. **Incorrect logic**

```
3
1 2
1 3
1 4
```

4. **Off-by-one errors**

```
3
1 2
1 3
1 4
5
```

5. **Memory leaks**

```
while True:
    n = int(input())
    adj = [[] for _ in range(n)]
    for _ in range(n - 1):
        u, v = map(int, input().split())
        adj[u - 1].append(v - 1)
        adj[v - 1].append(u - 1)
```

6. **Race conditions**

```
from threading import Thread

def add_edge(u, v):
    adj[u - 1].append(v - 1)
    adj[v - 1].append(u - 1)

def main():
    n = int(input())
    adj = [[] for _ in range(n)]
    for _ in range(n - 1):
        u, v = map(int, input().split())
        t = Thread(target=add_edge, args=(u - 1, v - 1))
        t.start()
        t.join()

if __name__ == "__main__":
    main()
```

7. **Deadlocks**

```
from threading import Thread

def add_edge(u, v):
    adj[u - 1].append(v - 1)
    adj[v - 1].append(u - 1)

def main():
    n = int(input())
    adj = [[] for _ in range(n)]
    for _ in range(n - 1):
        u, v = map(int, input().split())
        t1 = Thread(target=add_edge, args=(u - 1, v - 1))
        t2 = Thread(target=add_edge, args=(v - 1, u - 1))
        t1.start()
        t2.start()
        t1.join()
        t2.join()

if __name__ == "__main__":
    main()
```
CODEFORCES 887_F. Row of Models
1. **Incorrect input format**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```

2. **Incorrect output format**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```

3. **Undefined behavior**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```

4. **Memory leaks**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```

5. **Race conditions**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```

6. **Deadlocks**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```

7. **Security vulnerabilities**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```

8. **Incorrect algorithm**

```
1 1
1
```

```
1 2
1
```

```
2 1
1 1
```
CODEFORCES 910_A. The Way to Home
```
8 4
10010101
```

```
8 3
11100101
```

```
12 3
101111100101
```

```
12 3
000000000000
```

```
1 1
0
```

```
2 1
1
```

```
6 3
10111
```

```
3 2
110
```
CODEFORCES 932_C. Permutation Cycle
```
10 1 3
```
```
10 2 3
```
```
10 1 2
```
```
10 3 4
```
CODEFORCES 959_D. Mahmoud and Ehab and another array construction task
1
1
CODEFORCES 986_B. Petr and Permutations
1. **Incorrect input format**

```
5
1 2 3 4 5
```

This input is incorrect because it does not have the correct number of elements. The input should have n distinct integers between 1 and n.

2. **Incorrect output format**

```
5
2 4 5 1 3
Um_nik
```

This output is incorrect because it does not match the expected output of "Petr" or "Um_nik".

3. **Off-by-one errors**

```
5
1 2 3 4 5
Petr
```

This output is incorrect because the permutation was generated using Alex's method, not Petr's method.

4. **Incorrect logic**

```
5
1 2 3 4 5
Petr
```

This output is incorrect because the permutation was generated using Alex's method, not Petr's method.

5. **Memory errors**

```
5
1 2 3 4 5
Petr
```

This output is incorrect because the permutation was generated using Alex's method, not Petr's method.

6. **Time limit errors**

```
5
1 2 3 4 5
Petr
```

This output is incorrect because the permutation was generated using Alex's method, not Petr's method.
HACKEREARTH agitated-chandan

HACKEREARTH breakup-app
**1. Incorrect input format**

```
1
g: 19 20
```

The input format is incorrect because it does not contain a space between the day and the message.

**2. Incorrect output format**

```
1
G: 19
```

The output format is incorrect because it does not contain the word "Date" or "No Date".

**3. Incorrect calculation of weightage**

```
3
G: 19
M: 19
G: 20
```

The weightage of the day 19 is calculated incorrectly because it is not added twice for the girlfriend's message.

**4. Incorrect decision making**

```
4
G: 19
M: 20
G: 19
M: 20
```

The date is not correctly decided because the program does not consider the fact that multiple days can have the same weightage.

**5. Incorrect handling of multiple days with the same weightage**

```
5
G: 19
M: 20
G: 20
M: 20
```

The date is incorrectly cancelled because the program does not consider the fact that multiple days can have the same weightage.
HACKEREARTH dalton-and-compiler-design
1
2
10
4
4
5
7
5
1
7
20
10
10
20
6
10
10
6
10
10
20
9
10
HACKEREARTH gajodhars-memory
```
2
3
CHANDIGARH
MUMBAI
CHENNAI
4
KASHMIR
DELHI
BANGLORE
KANYAKUMARI
```
HACKEREARTH k-distribution
1. ```
2 5
6 6
```

2. ```
3 10
1 2 3
```

3. ```
100 100
1 1 1 1 1 1 1 1 1 1
```

4. ```
100 0
1 1 1 1 1 1 1 1 1 1
```

5. ```
20 20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```
HACKEREARTH mirrors-and-trees
```
1
1
3
0
```
HACKEREARTH palindromic-numbers-7
1. ```
1
10 13
```
2. ```
2
10 13
20 30
```
3. ```
1
1000000 1000001
```
4. ```
1
1 1000000000
```
5. ```
2
999999999 1000000000
999999999 1000000001
```
HACKEREARTH road-demolishing
3
4 3
5 3
HACKEREARTH staircase
1
-1
100
12
5
0
9
3
6
10
11
12
13
14
15
20
HACKEREARTH troubling-triple
4 42
3 2 5 7
2
4 42
3 2 5 10
4
4 42
1 1 1 10
4
20 1000000
42 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100
651063
ATCODER p02582 AtCoder Beginner Contest 175 - Rainy Season
```
RRS
SSS
RSR
```
ATCODER p02713 AtCoder Beginner Contest 162 - Sum of gcd of Tuples (Easy)
1
200
ATCODER p02842 Sumitomo Mitsui Trust Bank Programming Contest 2019 - Tax Rate
432
1079
1001
ATCODER p02979 AtCoder Grand Contest 035 - Develop
```
3 1 998244353
6 3 998244353
9 4 702443618
17 7 208992811
123 45 678901234
```
ATCODER p03119 World Tour Finals 2019 - Magic
2 1
5 5
3 50
5 10 15
ATCODER p03262 AtCoder Beginner Contest 109 - Skip
```
# Problem: AtCoder Beginner Contest 109 - Skip

# Input

N = int(input())
X = int(input())
x_i = [int(i) for i in input().split()]

# Output

print(max(abs(x_i[i] - X) for i in range(N)))
```

**Test cases:**

* Input:

```
3
3
1 7 11
```

Output:

```
2
```

* Input:

```
3
81
33 105 57
```

Output:

```
24
```

* Input:

```
1
1
1000000000
```

Output:

```
999999999
```
ATCODER p03420 AtCoder Regular Contest 091 - Remainder Reminder
```
5 2
10 0
31415 9265
```
ATCODER p03578 CODE FESTIVAL 2017 qual B - Problem Set
```
1
1000000000
1
1000000000
```
ATCODER p03735 AtCoder Regular Contest 073 - Ball Coloring
```
1
1 1
```
```
2
100 100
101 101
```
```
3
1 2
3 4
5 6
```
ATCODER p03897 CODE FESTIVAL 2016 Relay (Parallel) - Connected Checkerboard
1

2

3

4

5

6

7

8

9

10
AIZU p00003 Is it a Right Triangle?
1
1 1 1

1
1 1 2
AIZU p00135 Clock Short Hand and Long Hand
1. Incorrect input format
```
1
02:15
```

2. Invalid time
```
1
00:60
```

3. Incorrect angle calculation
```
1
00:00
```

4. Incorrect output format
```
1
00:00
alert
```

5. Other bugs
```
1
02:15
```
AIZU p00268 Cats Going Straight II
```
3 3
0 0
0 1
1 1
1 2
1 3
0 2
```
AIZU p00455 Time Card
**1. Invalid input:**

```
9 0 0 18 0 1
```

**2. Invalid time format:**

```
9 0 0 18 0 59a
```

**3. Incomplete input:**

```
9 0 0
```

**4. Employee does not work a full day:**

```
9 0 0 17 59 59
```

**5. Unexpected output format:**

```
9 0 0
8 59 59
0 0 38
```
AIZU p00646 No Story
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
0
AIZU p00790 Die Game
0
3
north
1
south
east
2
north
east
south
3
north
1
east
2
south
3
north
1
south
east
3
north
1
east
2
south
3
north
1
south
east
3
north
1
east
2
south
3
north
1
east
2
south
AIZU p00922 Hidden Tree
9
3 4 1 3 1 2 4 4 6
4
3 12 6 3
10
10 9 8 7 6 5 4 3 2 1
11
10 9 8 7 6 5 4 3 2 1 1
8
1 1 1 1 1 1 1 1
0
AIZU p01055 Bomb Removal
```
2 2 1
2 1
3 1 1 1 2 2 2
```

```
3 3 2
1 3
3 2 3 2 2 2 1
5 2 1 1 1 1 2 2 2 3 2
```

```
3 3 1
2 2
2 2 2 2 1
```

```
2 2 1
2 1
2 1 1 1 2
```

```
2 2 1
2 1
3 1 1 1 2 2 2
```
AIZU p01187 Make Friendships
```
1
3 1 3 5
2 1 4
```
AIZU p01324 Consistent Unit System
```
1
1 km = 10^3 m
1
1 m = 10^2 cm
1
1 km = 10^5 cm
7
1 kilometre = 10^3 metre
1 megametre = 10^3 kilometre
1 metre = 10^-6 megametre
1 terametre = 10^3 gigametre
1 petametre = 10^3 terametre
1 gigametre = 10^-6 petametre
1 metre = 10^-15 petametre
4
1 a = 10^2 b
1 a = 10^3 c
1 b = 10^2 c
1 c = 10^1 d
4
1 acm = 10^2 icpc
1 icpc = 10^3 utpc
1 utpc = 10^4 topcoder
1 topcoder = 10^-1 acm
0
```
AIZU p01492 CarrotBreeding
2

AIZU p01654 Hashigo Sama
```
n, k = map(int, input().split())
l = list(map(int, input().split()))
for i in range(n - 1):
    f, p, t, q = map(int, input().split())
    l[f] = l[f] - (p + 1)
    l[t] = l[t] - (q + 1)
ans = 1
for i in range(n):
    if l[i] % 2 != 0:
        ans *= 2
    ans %= 1000000007
print(ans)
```
AIZU p01805 Alternate Escape
```
3 3 2 2
1 1 1
0 0 0 0
1 1 1
0 0 0 0
1 1 1
0 0 0 0
1 1 1
3 3 2 2
1 0 1
1 0 1 1
1 0 0
0 0 0 0
0 0 1
1 1 0 1
1 0 1
1 3 1 1
1 1 1
1 0 0 1
1 0 1
2 2 1 1
1 0
1 0 0
0 0
0 0 0
0 0
0 0 0 0
```
AIZU p01940 Unique Subsequence
```
aizucamp
azu

abracadabra
rada

hokkaido
dekai
```
AIZU p02089 AddMulSubDiv
```
3 3 3 10
1 -2 3
1 2 2 3
2 20 1 3
2 1 20 5
```
AIZU p02221 Tournament
2
100
1 4 2 3
AIZU p02373 Lowest Common Ancestor
1
8
3 1 2 3
2 4 5
0
0
0
2 6 7
0
0
4
4 6
4 7
4 3
5 2