CODECHEF bycd1602
1
5
3 2 4 1 2
CODECHEF cookmach
```
1
1 1
```

```
1
2 4
```

```
1
3 8
```

```
1
4 16
```

```
1
4 1
```

```
1
1 4
```
CODECHEF gerald08
```
1
1
```

```
2
1 2 0
2 1 1
```

```
3
1 2 0
1 3 1
2 3 0
```

```
4
1 2 0
1 3 1
2 4 0
3 4 1
```

```
5
1 2 0
1 3 1
2 4 0
2 5 1
3 4 0
```
CODECHEF manychef
1
??????????
CODECHEF qcj2
```
A B
A C
B D
C E
D F
E G
F H
G I
H J
I K
J L
K M
L N
M O
N P
O Q
P R
Q S
R T
S U
T V
U W
V X
W Y
X Z
END
```
CODECHEF tlg
```
5
140 82
89 134
90 110
112 106
88 90
```
CODEFORCES 1013_E. Hills
```
# 1. Incorrect input format

```

```
1
1 2 3
```

```
# 2. Incorrect data type

```

```
1
a 1 2 3
```

```
# 3. Incorrect assumptions

```

```
1
1 2 3
```

```
# 4. Off-by-one errors

```

```
1
1 2 3
```

```
# 5. Logic errors

```

```
1
1 2 3
```

```
# 6. Memory leaks

```

```
1
1 2 3
```

```
# 7. Race conditions

```

```
1
1 2 3
```

```
# 8. Deadlocks

```

```
1
1 2 3
```

```
# 9. Security vulnerabilities

```

```
1
1 2 3
```
CODEFORCES 1038_C. Gambling
```
2
1 4
5 1

3
100 100 100
100 100 100

2
2 1
5 6

1
1000000000
```
CODEFORCES 1060_G. Balls and Pockets
```
3 15
1 3 4
0 0
1 0
2 0
3 0
4 0
0 1
1 1
2 1
3 1
4 1
0 2
1 2
2 2
3 2
4 2
```
CODEFORCES 1082_E. Increasing Frequency
```
#Incorrect input format

1 2
```

```
#Incorrect output format

6 9
9 9 9 9 9 9
2
```

```
#Incorrect data type

6 9
9 9 9 9 9 9
a
```

```
#Incorrect calculation

6 9
9 9 9 9 9 9
10
```

```
#Incorrect logic

6 9
9 9 9 9 9 9
6
```

```
#Off-by-one error

6 9
9 9 9 9 9 9
7
```

```
#Infinite loop

6 9
9 9 9 9 9 9
```

```
#Memory leak

6 9
9 9 9 9 9 9
```

```
#Stack overflow

6 9
9 9 9 9 9 9
```

```
#Segmentation fault

6 9
9 9 9 9 9 9
```
CODEFORCES 1101_G. (Zero XOR Subset)-less
```
4
5 5 7 2

3
1 2 3

3
3 1 10
```
CODEFORCES 112_E. Petya and Spiders
```
1 1
2 3
```
CODEFORCES 1150_A. Stock Arbitraging
```
1 1 1
5
4
```
```
3 4 11
4 2 5
4 4 5 4
```
```
2 2 50
5 7
4 2
```
CODEFORCES 1172_B. Nauuo and Circle
1. **Incorrect input format**.

```
3
1 2
1 3
```

2. **Incorrect output format**.

```
4
```

3. **Incorrect algorithm**.

```
n = int(input())
edges = []
for _ in range(n - 1):
  edges.append(list(map(int, input().split())))

# This algorithm is incorrect because it does not take into account the fact that the edges must form a tree.
print(n!)
```

4. **Incorrect data structures**.

```
class Node:
  def __init__(self, value):
    self.value = value
    self.edges = []
```

5. **Incorrect error handling**.

```
def main():
  n = int(input())
  edges = []
  for _ in range(n - 1):
    edges.append(list(map(int, input().split())))
  print(count_permutations(n))

try:
  main()
except ValueError:
  print("Invalid input")
```

6. **Incorrect debugging**.

```
def main():
  n = int(input())
  edges = []
  for _ in range(n - 1):
    edges.append(list(map(int, input().split())))
  print(count_permutations(n))

main()
```
CODEFORCES 118_C. Fancy Number
```
4 3
4325

6 5
898196

3 2
533

10 6
0001112223
```
CODEFORCES 1209_B. Koala and Lights
```
1
1
1 1
```
```
2
01
2 2
3 1
```
```
3
110
3 3
3 2
4 1
```
```
4
1101
3 4
5 2
3 1
3 2
```
```
5
01110
5 3
5 5
2 4
3 5
4 2
```
```
6
011100
5 3
5 5
2 4
3 5
4 2
1 5
```
CODEFORCES 1228_A. Distinct Digits
```
1 10
```

```
1 2
```

```
100000 999999
```

```
1000000000 1000000001
```
CODEFORCES 1250_H. Happy Birthday
```
1
1 1 1 1 1 1 1 1 1 1
```
```
1
0 0 1 1 2 2 3 3 4 4
```
```
1
1 2 1 2 1 3 1 0 0 0
```
```
1
0 1 2 1 4 3 1 1 2 1
```
CODEFORCES 1270_A. Card Game
```
2
4 1 2
1 3
5 3 4 1
4 5 3 2
```
CODEFORCES 1292_E. Rin and The Unknown Flower
```
1
4
2 1 2
```
```
1
5
0
```
```
1
8
1 5
1 5
1 3
2 1 2
```
CODEFORCES 1312_F. Attack on Red Kingdom
```
1
5 2 3 4
1 1 2 3 4
```
CODEFORCES 1335_C. Two Teams Composing
```
1
5
2 1 5 4 3
```
```
1
1
```
```
1
2
```
```
5
5 5 5 5 5
```
```
2
7
4 2 4 1 4 3 4
```
```
1
1
```
```
3
10
1 4 2 3 5 6 7 8 9 10
```
```
4
1 1 1 3
```
CODEFORCES 1355_E. Restorer Distance
```
3 1 100 100
1 3 8

3 100 1 100
1 3 8

3 100 100 1
1 3 8

5 1 2 4
5 5 3 6 5

5 1 2 2
5 5 3 6 5
```
CODEFORCES 1375_D. Replace by MEX
```
1
1
10
```
```
5
3
1 2 3
```
```
3
3
2 1 0
```
```
1
0
```
```
3
3
0 7 3
```
```
2
1 2
```
```
4
3
0 7 3 1
```
```
1
1
```
```
7
5
0 7 3 1 3 7
```
```
2
1 4
```
```
8
9
8 4 7 6 1 2 3 0 5
```
```
1
1
```
```
1
5
```
CODEFORCES 1398_G. Running Competition
```
3 10 5
0 3 5 10
6
24 30 14 16 18 10
```
CODEFORCES 1422_C. Bargain
```
107
100500100500
```
CODEFORCES 1440_B. Sum of Medians
```
2
2 4
0 24 34 58 62 64 69 78
2 2
27 61 81 91
```
CODEFORCES 1467_C. Three Bags
```
2 4 1
1 2
6 3 4 5
5

3 2 2
7 5 4
2 9
7 1

1 1 1
1 2
1 3

4 3 1
4 5 6 7
1 2 3
9

5 1 1
1000000000 1000000000 1000000000 1000000000
1000000000
```
CODEFORCES 1491_F. Magnets
```
1
4

4
NNS-
```
CODEFORCES 1514_C. Product 1 Modulo N
2
5
8
1000000000
CODEFORCES 1541_C. Great Graphs
```
# 1. Incorrect input format

1
1000000000

# 2. Incorrect data type

1
1.234

# 3. Off-by-one errors

3
1 2 3

# 4. Logic errors

1
1 2 3

# 5. Runtime errors

1000000
1000000000

# 6. Memory errors

1000000000
```
CODEFORCES 169_B. Replacing Digits
```
# 1. Using the wrong data type
a = 10**10**100000
s = '9'

# 2. Not handling the case where `s` is empty
a = 10
s = ''

# 3. Not handling the case where `a` contains leading zeroes
a = '0123'
s = '0123'

# 4. Not handling the case where `a` is equal to one of the digits in `s`
a = '9'
s = '9'

# 5. Not handling the case where `a` is equal to `0`
a = 0
s = '0123'

# 6. Not handling the case where `a` is negative
a = -1
s = '0123'

# 7. Not handling the case where `s` contains invalid digits
s = 'a'
```
CODEFORCES 189_E. Weak Memory
```
6 6 3
1 3 6
1 2
2 3
4 2
5 6
4 5
3 4
1 6
```
CODEFORCES 212_E. IT Restaurants
```
5
1 2
2 3
3 4
4 5


10
1 2
2 3
3 4
5 6
6 7
7 4
8 9
9 10
10 4
```
CODEFORCES 236_E. Cyclical Quest
```
baabaabaaa
5
a
ba
baa
aabaa
aaba
```
CODEFORCES 261_C. Maxim and Matrix
```
1 1

3 2

3 3

1000000000000 1048576
```
CODEFORCES 285_C. Building Permutation
```
3
-1 -1 2
```
CODEFORCES 30_C. Shooting Gallery
```
1
0 0 0 0.5
```
CODEFORCES 333_A. Secrets
```
1
4
5
```
CODEFORCES 356_A. Knight Tournament
```
4 3
1 2 1
1 3 3
1 4 4

8 4
3 5 4
3 7 6
2 8 8
1 8 1
```
CODEFORCES 379_G. New Year Cactus
1. Incorrect input format

```
1 0
```

2. Incorrect edge representation

```
1 2
2 1
```

3. Incorrect graph representation

```
1 2
1 3
```

4. Incorrect output format

```
1 2 3 4
```

5. Incorrect algorithm

```
n, m = map(int, input().split())
g = [[] for _ in range(n)]
for i in range(m):
    a, b = map(int, input().split())
    g[a - 1].append(b - 1)
    g[b - 1].append(a - 1)

ans = [0] * (n + 1)
def dfs(v, color):
    ans[color] += 1
    for u in g[v]:
        if color == 1:
            dfs(u, 2)
        else:
            dfs(u, 1)

for i in range(n + 1):
    dfs(i, 1)
print(*ans)
```

6. Incorrect debugging

```
n, m = map(int, input().split())
g = [[] for _ in range(n)]
for i in range(m):
    a, b = map(int, input().split())
    g[a - 1].append(b - 1)
    g[b - 1].append(a - 1)

ans = [0] * (n + 1)
for i in range(n + 1):
    dfs(i, 1)

print(*ans)
```
CODEFORCES 3_C. Tic-tac-toe
1. Incorrect input format
```
X0X
00.
..X
```
2. Incorrect output format
```
X0X
.0.
.X.
```
Output: 10
3. Incorrect logic
```
X0X
.0.
.X.
```
Output: second
4. Memory leaks
```
X0X
.0.
.X.
```
Output: first
5. Security vulnerabilities
```
X0X
.0.
.X.
```
Output: draw
6. Performance issues
```
X0X
.0.
.X.
```
Output: illegal
CODEFORCES 426_E. Sereja and Two Sequences
```
5 5 100000 1000
1 2 3 4 5
3 2 4 5 1
```
CODEFORCES 44_H. Phone Number
1
0
09
000000000000
12345
CODEFORCES 471_D. MUH and Cube Walls
```
13 5
2 4 5 5 4 3 2 2 2 3 3 2 1
3 4 4 3 2
CODEFORCES 495_E. Helping People
```
5 2
1 7 2 4 3
1 3 0.500
2 2 0.500
```

```
5 2
281 280 279 278 282
1 4 1.000
1 4 0.000
```

```
3 5
1 2 3
1 3 0.500
2 2 0.250
1 2 0.800
1 1 0.120
2 2 0.900
```
CODEFORCES 51_C. Three Base Stations
```
1
1000000000
```

```
2
1000000000 1000000001
```

```
3
10 20 30
```

```
4
1 2 3 4
```

```
5
10003 10004 10001 10002 1
```
CODEFORCES 546_D. Soldier and Number Game
```
1
3 1
```
```
2
3 2
```
```
2
4 2
```
```
3
5 2
6 3
7 4
```
CODEFORCES 573_A. Bear and Poker
1. Incorrect input format:
```
2
10 10
```
2. Incorrect output format:
```
2
Yes
```
3. Incorrect logic:
```
2
10 10
```
4. Incorrect implementation:
```
2
10 10
```
5. Incorrect testing:
```
2
10 10
```
CODEFORCES 594_D. REQ
```
10
1 2 3 4 5 6 7 8 9 10
7
1 1
3 8
5 6
4 8
8 10
7 9
7 10
```
CODEFORCES 616_B. Dinner with Emma
1. Incorrect input format:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

2. Incorrect algorithm:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

3. Incorrect data structures:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

4. Incorrect error handling:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

5. Incorrect code style:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

6. Incorrect comments:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

7. Incorrect testing:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

8. Incorrect deployment:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```

9. Incorrect documentation:
```
3 4
4 1 3 5
2 2 2 2
5 4 5 1
```
CODEFORCES 635_C. XOR Equation
```
9 5

5 2

10 0

4 0

1 2

0 0

```
CODEFORCES 664_B. Rebus
```
? + ? - ? = 1
? = 1000000
? + ? - ? + ? = 42
? - ? = 1
```
CODEFORCES 688_E. The Values You Can Make
**Incorrect input format**

```
1 2
```

**Incorrect algorithm**

```
1 2
5 6 1 10 12 2
```

**Incorrect output format**

```
1 2 3 5 6 7 8 10 11 12 13 15 16 17 18
```

**Runtime errors**

```
5 100
25 25 50
```

**Memory errors**

```
1000000 1000000
```
CODEFORCES 710_D. Two Arithmetic Progressions
```
2 0 3 3 5 21

2 4 3 0 6 17

2 0 3 3 5 5

1 0 1 0 1 10
```
CODEFORCES 731_D. 80-th Level Archeology
```
2 3
2 3 2
2 4 2
```

```
4 3
2 3 2
1 1
3 2 3 1
4 2 3 1 2
```

```
1 3
2 4 3
```

```
4 4
1 2
1 3
1 4
1 2
```

```
4 5
1 2
1 3
1 4
1 2
```

```
3 2
3 1
2 1
```

```
1 1
1
```

```
1 1
1
```

```
1 1
1
```
CODEFORCES 755_F. PolandBall and Gifts
```
# 1. Incorrect input format
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
```
# 2. Incorrect variable type
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
x = int(input())
```
# 3. Incorrect logic
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
if k == 0:
    print(0, 0)
else:
    min_ = 0
    max_ = n
    for i in range(n):
        if i not in p:
            min_ += 1
    p_inv = [p[i] for i in range(n)]
    for i in range(n):
        if p_inv[i] not in p:
            max_ -= 1
    print(min_, max_)
```
# 4. Off-by-one errors
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
min_ = 0
    max_ = n
    for i in range(n):
        if i not in p:
            min_ += 1
    p_inv = [p[i] for i in range(n)]
    for i in range(n):
        if p_inv[i] not in p:
            max_ -= 1
    print(min_, max_ + 1)
```
# 5. Infinite loops
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
while True:
    print(1)
```
# 6. Memory leaks
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
print(1)
```
# 7. Race conditions
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
x = int(input())
```
# 8. Deadlocks
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
x = int(input())
```
# 9. Security vulnerabilities
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
x = int(input())
```
# 10. Performance issues
```
n, k = [int(i) for i in input().split()]
p = [int(i) for i in input().split()]
print(1)
```
CODEFORCES 776_G. Sherlock and the Encrypted Data
1
1014 1014

1
1 1e

2
1 abc
d0e fe23
CODEFORCES 801_C. Voltage Keepsake
**Test 1: Using the wrong data type**

```
2 1
2 2
2 1000
```

This test case will cause an overflow error when computing the maximum amount of time that the devices can be used.

**Test 2: Not handling edge cases**

```
1 0
1 1
```

This test case will cause an error because the charger has a power output of 0, which means that it cannot charge any devices.

**Test 3: Using incorrect math**

```
2 3
4 3
5 2
6 1
```

This test case will produce the wrong answer because it assumes that the maximum amount of time that the devices can be used is the minimum of the amount of time it takes for each device to run out of power. However, this is not always the correct answer, as shown in the example above.

**Test 4: Not using the most efficient algorithm**

```
100000 100000
1 1
2 2
3 3
...
100000 100000
```

This test case will cause the brute-force algorithm to run very slowly.

**Test 5: Not testing your code**

```
1 1
1 1
```

This test case will not catch any bugs or errors in your code.
CODEFORCES 821_E. Okabe and El Psy Kongroo
```
# 1

4 3
0 3 3
1 3 2
2 3 1

# 2

2 4
0 3 0
3 10 2

# 3

4 10
0 3 3
1 4 2
2 5 1
3 6 0
4 7 0

# 4

1 1000000000
```
CODEFORCES 847_E. Packmen
**Incorrect input format**

```
1
a
```

**Incorrect output format**

```
2
```

**Incorrect algorithm**

```
n = int(input())
s = input()

if s[0] == 'P' and s[n-1] == '*':
    print(1)
else:
    print(2)
```

**Incorrect implementation**

```
n = int(input())
s = input()

if s[0] == 'P' and s[n-1] == '*':
    print(1)
else:
    print(2)
```

**Runtime error**

```
n = int(input())
s = input()

if s[0] == 'P' and s[n-1] == '*':
    print(1)
else:
    print(2)
```

**Time limit exceeded**

```
n = int(input())
s = input()

if s[0] == 'P' and s[n-1] == '*':
    print(1)
else:
    print(2)
```

**Memory limit exceeded**

```
n = int(input())
s = input()

if s[0] == 'P' and s[n-1] == '*':
    print(1)
else:
    print(2)
```

**Presentation error**

```
n = int(input())
s = input()

if s[0] == 'P' and s[n-1] == '*':
    print(1)
else:
    print(2)
```

**Other errors**

```
n = int(input())
s = input()

if s[0] == 'P' and s[n-1] == '*':
    print(1)
else:
    print(2)
CODEFORCES 868_G. El Toll Caves
```
1
1000000000 1
```
CODEFORCES 894_D. Ralph And His Tour in Binary Country
```
2 2
5
1 8
2 4
```

```
6 4
2
1
1
3
2
2 4
1 3
3 2
1 7
```

```
10 7
2
1
1
3
2
1 2
2 3
3 2
1 10
```
CODEFORCES 915_G. Coprime Arrays
```
3 4

2000000 8
```
CODEFORCES 939_A. Love Triangle
```
2
1 2
```

```
5
1 2 3 4 5
```

```
5
1 2 3 4 5
```

```
5
1 1 1 1 1
```

```
5
2 4 5 1 3
```
CODEFORCES 964_C. Alternating Sum
```
2 2 3 3
+-+

4 1 5 1
-

5 2 3 5
++-

10 1000000007 1000000007 7
+--+--+--+--+--+--+
```
CODEFORCES 991_D. Bishwock
```
00
00
```
```
00X00X0XXX0
0XXX0X00X00
```
```
0X0X0
0X0X0
```
```
0XXX0
00000
```
```
0000
0000
```
```
0010
0100
```
```
1010
0100
```
```
0000
0000
```
HACKEREARTH arjit-and-apex
1
1 1
1 1
1 1
1 1
1 1
HACKEREARTH change-in-money-1
10 3
1 2 5
HACKEREARTH divisors-3
```
12 6
1 6
1 14
2 4
2 3
3 12
3 14
```
HACKEREARTH gopals-rectangles
```
2
1 2
3 3
```
HACKEREARTH little-jhool-and-brute-force-18
1
3000
HACKEREARTH most-powerful-xor
```
1
1 9
```
HACKEREARTH pranav-and-tle
```
2
12344 12
12 123
HACKEREARTH samu-and-card-game-20
1
5 6
3
1 1
1 1
0 -4
HACKEREARTH sum-of-series-5
1
2 3
2
3 10
3
3 6 10
4
1 10 100 1000
HACKEREARTH weird-multiplayer-scoring
```
1 1
Mithaiwala -100
```

```
1 2
Mithaiwala 5
Mithaiwala -100
```

```
3 5
Murliwala 5
Mithaiwala 4
Mithaiwala 4
Mithaiwala -2
Mirchiwala 8
```

```
3 5
Murliwala 5
Mithaiwala 4
Mithaiwala 4
Mithaiwala -2
Mithaiwala 8
```

```
2 2
Mithaiwala 1
Mithaiwala 2
```

```
2 2
Mithaiwala 1
Mithaiwala 100
```
ATCODER p02619 Introduction to Heuristics Contest - Scoring
```
5
86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82
19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424
6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570
6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256
8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452
19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192
1 17 13 14 13
```
ATCODER p02750 Social Infrastructure Information Systems Division  Hitachi Programming Contest 2020 - Manga Market
```
3 7
2 0
3 2
0 3
```

```
1 3
0 3
```

```
5 21600
2 14
3 22
1 3
1 10
1 9
```

```
7 57
0 25
3 10
2 4
5 15
3 22
2 14
1 15
```
ATCODER p02885 AtCoder Beginner Contest 143 - Curtain
1. Incorrect input format
```
20 15
```
2. Incorrect data type
```
12 'a'
```
3. Incorrect range
```
0 100
```
4. Off-by-one error
```
12 5
```
5. Logical error
```
12 4
```
6. Other bugs
```
12 15 10
```
ATCODER p03020 AtCoder Grand Contest 034 - Manhattan Max Matching
```
3
5 3 1
0 1 1
1 0 1
2 2 1
0 0 1
1 1 1
3 3 1
```
ATCODER p03160 Educational DP Contest - Frog 1
```
1
10
```
```
6
10 30 40 20 30 40
```
```
4
10 30 40 20
```
```
2
10 10
```
```
6
30 10 60 10 60 50
```
ATCODER p03303 SoundHound Inc. Programming Contest 2018 -Masters Tournament- - Acrostic
```
abc
1
```
```
abc
2
```
```
abc
3
```
```
abc
4
```
```
abc
5
```
```
a
1
```
```
aaaaa
1
```
```
a
5
```
ATCODER p03463 AtCoder Grand Contest 020 - Move and Win
5 2 4
2 1 2
58 23 42
1 1 1
ATCODER p03622 AtCoder Grand Contest 019 - Yes or No
1 1
2 2
3 4
10 10
42 23
ATCODER p03781 AtCoder Regular Contest 070 - Go Home
```
6

2

11
```
ATCODER p03951 AtCoder Grand Contest 006 - Prefix and Suffix
```
3
abc
cde
```
```
1
a
z
```
```
4
expr
expr
```
AIZU p00041 Expression
1 2 3 4
5 6 7 8
9 1 2 3
4 4 4 4
0 0 0 0
AIZU p00173 Haunted House
```
1a 132 243
1c 324 183
1f 93 199
2b 372 163
2c 229 293
2e 391 206
3a 118 168
3b 263 293
3d 281 102
```
AIZU p00329 Amidakuji
```
6
1 0 0 0 1
1 0 1 0 1
0 1 0 1 0
0 0 0 1 0
0 1 0 0 1
```
AIZU p00502 Hot days

AIZU p00686 Where's Your Robot?
```
3 3
FORWARD 3
RIGHT
FORWARD 3
STOP
1 1
1 2
2 2
3 3
STOP
0 0

6 5
FORWARD 3
RIGHT
FORWARD 5
LEFT
BACKWARD 2
STOP
3 1
FORWARD 2
STOP
0 0

1 1
FORWARD 3
STOP
1 1
```
AIZU p00828 Make a Sequence
3 3 3
1 1
1 1
1 1
3 3 7
2 2
1 3
1 1
2 3
2 1
3 3
3 1
4 3 15
1 1
2 2
1 1
3 3
3 3
1 1
3 3
3 3
4 4
1 1
4 4
4 4
4 4
4 1
2 2
0 0 0
AIZU p00959 Medical Checkup
1. ```
3 20
5
7
3
```

2. ```
5 1000000000
5553
2186
3472
2605
1790
```

3. ```
10 1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
```
AIZU p01092 Development of Small Flying Robots

AIZU p01228 Rhythm Machine
1
1
0000000000000000000000000000000000000000000000
AIZU p01362 Dice Room
```
..*
...
.*.
...
...
.*.
...
...
...
...
.*.
...
...
.*.
...
...
...

..*
...
*..
...
..*
*.*
*.*
*.*
*.*
.*.
*.*
*..
.*.
..*
*.*
...
*.*

.*.
.*.
...
.**
*..
...
...
.*.
.*.
...
*..
..*
...
.**
...
*..
...

#
AIZU p01544 Longest Increasing Sequence
```
3
1
2
4
```

```
3
1 2
```

```
3
2
2
2
```

```
3
4
2
1
```

```
3
1
1
1
```
AIZU p01700 Golf
117649
1
125000
1610612736
68719476636
-1
AIZU p01844 Land Inheritance
```
3 3 2
1 2 2
3 1 0
0 4 3
```
AIZU p01980 Elevator
5 1 2
3 1 5
3 1 5
4 1 5
AIZU p02126 Ball
```
3 3 2
1 1
1 1
1 100
2 10
```
AIZU p02266 Areas on the Cross-Section Diagram
1. \\//
2. \\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\
3. \\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\
4. \\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\
5. \\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\\\///\_/\/\\\\/_/\\///__\\\_\\/_\/_/\
AIZU p02414 Matrix Multiplication
```
1 1 1
1
1

3 2 3
1 2
0 3
4 5
1 2 1
0 3 2

1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```