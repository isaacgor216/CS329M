CODECHEF cdxm1
```
computer
4
3 7
2 10
5 21
11 26
```
CODECHEF dcgame
```
3 5
1 2 3
> 1 D
< 2 C
= 3 D
> 4 C
< 5 D
```
CODECHEF iiti13
```
1
5
abcde
1 2 3 4 5
```
CODECHEF name1
1
abc a
1
ab

1
abc a
2
ab a

1
abc a
2
ab b

1
abc a
3
ab a b

1
abc a
4
ab a b c
CODECHEF rrjoke
1
2
1 2
0 0
CODECHEF wolvxr
1. ```
1
```
2. ```
2
```
3. ```
3
```
4. ```
4
```
5. ```
5
```
CODEFORCES 1020_C. Elections
```
1 2
1 100
```
```
5 5
2 100
3 200
4 300
5 400
5 900
```
```
5 5
2 100
3 200
4 300
5 800
5 900
```
CODEFORCES 1043_F. Make It One
```
# 1. Incorrect input format

1
2
```

```
# 2. Incorrect output format

3
10 6 15
-1
```

```
# 3. Incorrect algorithm

3
2 4 6
3
```

```
# 4. Incorrect data structures

3
10 6 15
3
```

```
# 5. Incorrect error handling

3
10 6 15
-1
```

```
# 6. Incorrect unit testing

3
10 6 15
3
```

```
# 7. Incorrect integration testing

3
10 6 15
3
```

```
# 8. Incorrect deployment

3
10 6 15
3
```

```
# 9. Incorrect documentation

3
10 6 15
3
```

```
# 10. Incorrect security

3
10 6 15
3
```
CODEFORCES 1066_D. Boxes Packing
```
5 2 6
5 2 1 4 2

5 1 4
4 2 3 4 1

5 3 3
1 2 3 1 1
```
CODEFORCES 1089_G. Guest Student
```
1
1
1
```

```
1
100000000
1 0 0 0 1 0 1
```

```
3
1
0 1 0 0 0 0 0
100000000
1 0 0 0 1 0 1
1
1 0 0 0 0 0 0
```
CODEFORCES 1108_B. Divisors of Two Integers
```
# 1. Incorrect input format

```
n = int(input())

# 2. Incorrect output format

x, y = map(int, input().split())
print(x, y)

# 3. Incorrect logic

n = int(input())

divisors = set()
for i in range(n):
    divisor = int(input())
    divisors.add(divisor)

# 4. Incorrect data structures

n = int(input())

divisors = set()
for i in range(n):
    divisor = int(input())
    divisors.add(divisor)

# 5. Incorrect algorithm

n = int(input())

divisors = set()
for i in range(n):
    divisor = int(input())
    divisors.add(divisor)

min_divisor = min(divisors)
max_divisor = max(divisors)

x = min_divisor * max_divisor
y = x + 1

print(x, y)
```
CODEFORCES 1137_D. Cooperative Game
```
10 10
next 0 1 2 3 4 5 6 7 8 9
```
CODEFORCES 1155_F. Delivery Oligopoly
```
3 3
1 2
2 3
3 1
```
```
4 5
1 2
1 4
2 3
4 3
1 3
```
```
6 10
1 2
2 3
3 1
3 4
4 5
5 6
4 6
2 5
1 6
3 5
```
```
8 13
1 2
1 3
2 3
3 4
4 5
5 6
6 7
7 8
8 2
6 8
4 7
```
CODEFORCES 1178_C. Tiles
```
2 2
1 1
0 0
-1 -1
1001 1001
1 1000
1000 1
```
CODEFORCES 1196_C. Robot Breakout
```
1
2
1 2 1 1 1 1
2 3 0 0 0 0
```
```
1
3
1 3 1 1 1 1
2 3 0 1 0 1
3 3 1 0 0 0
```
```
1
5
1 5 1 1 1 1
2 5 0 1 0 1
3 5 1 0 0 0
4 5 0 0 1 0
5 5 0 0 0 1
```
```
1
10
1 1 1 1 1 1
2 2 1 1 1 1
3 3 1 1 1 1
4 4 1 1 1 1
5 5 1 1 1 1
6 6 1 1 1 1
7 7 1 1 1 1
8 8 1 1 1 1
9 9 1 1 1 1
10 10 1 1 1 1
```
```
1
100000
100000 100000 1 1 1 1
```
```
1
3
3 5 1 1 1 1
4 5 1 1 1 1
5 5 1 1 1 1
```
```
2
2
1337 1337 0 1 1 1
1336 1337 1 1 0 1
2
3 5 1 1 1 1
```
```
1
5
1 5 1 1 1 1
2 5 1 1 1 1
3 5 1 1 1 1
4 5 1 1 1 1
5 5 1 1 1 1
```
```
1
5
1 1 1 1 1 1
2 2 1 1 1 1
3 3 1 1 1 1
4 4 1 1 1 1
5 5 1 1 1 1
```
```
1
5
1 1 1 1 1 1
2 2 1 1 1 1
3 3 1 1 1 1
4 4 1 1 1 1
5 5 1 1 1 1
```
CODEFORCES 1213_D2. Equalizing by Division (hard version)
```
5 3
1 2 2 4 5
```
CODEFORCES 1236_F. Alice and the Cactus
```
# 1. Incorrect implementation of the Floyd-Warshall algorithm

n, m = map(int, input().split())

g = [[0] * (n + 1) for _ in range(n + 1)]
for _ in range(m):
    u, v = map(int, input().split())
    g[u][v] = 1
    g[v][u] = 1

for k in range(1, n + 1):
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            g[i][j] = min(g[i][j], g[i][k] + g[k][j])

print(g[1][n])

# 2. Incorrect implementation of the Union-Find algorithm

n = int(input())

parent = [0] * (n + 1)
for i in range(1, n + 1):
    parent[i] = i

def find(x):
    if parent[x] == x:
        return x
    parent[x] = find(parent[x])
    return parent[x]

def union(x, y):
    px = find(x)
    py = find(y)

    if px < py:
        parent[py] = px
    else:
        parent[px] = py

for _ in range(int(input())):
    u, v = map(int, input().split())

    union(u, v)

for i in range(1, n + 1):
    print(find(i), end=' ')
```
CODEFORCES 1254_D. Tree Queries
```
5 12
1 2
1 3
2 4
2 5
1 1 1
2 1
2 2
2 3
2 4
2 5
1 2 2
2 1
2 2
2 3
2 4
2 5
```
CODEFORCES 1278_D. Segment Tree
```
1
10 20
```

```
2
1 5
2 6
```

```
3
1 3
2 4
3 5
```

```
4
1 3
2 4
3 5
4 6
```

```
5
1 3
2 4
3 5
4 6
5 7
```

```
6
1 2
2 3
3 4
4 5
5 6
6 7
```
CODEFORCES 1299_A. Anu Has a Function
```
1
10
```
```
10
10
```
```
2
10 10
```
```
3
10 10 10
```
```
4
10 10 10 10
```
CODEFORCES 1321_E. World of Darkraft: Battle for Azathoth
```
2 3 3
2 3
4 7
2 4
3 2
5 11
1 2 4
2 1 6
3 4 6
```
CODEFORCES 1340_D. Nastya and Time Machine
```
1
```

This input is incorrect because it does not follow the expected input format. The input should be a single integer representing the number of vertices in the graph.

```
100
1 2
2 3
3 4
4 5
5 6
6 7
7 8
8 9
9 10
10 11
11 12
12 13
13 14
14 15
15 16
16 17
17 18
18 19
19 20
20 1
```

This input is also incorrect because it does not follow the expected input format. The input should be a list of pairs of integers, where each pair represents an edge in the graph. The first integer in each pair should be the source vertex of the edge, and the second integer should be the destination vertex of the edge.

```
1
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
```

This input is also incorrect because it does not follow the expected input format. The input should be a list of pairs of integers, where each pair represents an edge in the graph. The first integer in each pair should be the source vertex of the edge, and the second integer should be the destination vertex of the edge. In this input, all of the edges are from vertex 1 to vertex 2. This is not a valid graph because it does not contain any other vertices.
CODEFORCES 1362_D. Johnny and Contribution
**1. Incorrect data type**

```
3 3
1 2
2 3
3 1
2 1 3
```

**2. Undeclared variable**

```
3 3
1 2
2 3
3 1
1 1 1
```

**3. Undefined variable**

```
3 3
1 2
2 3
3 1
2 1 3
```

**4. Incorrect logic**

```
3 3
1 2
2 3
3 1
2 1 2
```

**5. Missing return statement**

```
3 3
1 2
2 3
3 1
2 1 2
```
CODEFORCES 1382_E. Mastermind
```
1
5 2 4
3 1 1 2 5
```
CODEFORCES 1403_C. Chess Rush
```
10 10 5
P 1 2
R 4 8
Q 2 3
B 3 6
K 5 5
3 5 1 1
100 100 10000
Q 1 10000
Q 10000 1
K 1 1
K 10000 10000
```
CODEFORCES 1425_E. Excitation of Atoms
```
4 2
5 6 7 8
3 5 6 7 1
```
```
6 0
5 6 7 8 10 2
3 5 6 7 1 10
```
```
6 1
5 6 7 8 10 2
3 5 6 7 1 10
```
```
6 2
5 6 7 8 10 2
3 5 6 7 1 10
```
CODEFORCES 1447_C. Knapsack
```
1
1 3
```
```
1 1
```
```
2
1 3
3
```
```
1
```
```
3
19 8 19 69 9 4
7 12
```
```
-1
```
```
1
1 1 1 17 1 1 1
```
```
7
1 2 3 5 6 7
```
```
5
1 2 3 4 5
```
```
5
1 1 1 1 1
```
```
-1
```
```
1000000000 1
```
```
-1
```
```
1000000000 1000000000
```
```
1
```
```
1000000000 1000000000
```
```
2
```
```
1000000000 1000000000
```
```
1
```
```
1000000000 1000000000
```
```
2
```
```
1000000000 1000000000
```
```
1
```
```
1000000000 1000000000
```
```
2
```
```
1000000000 1000000000
```
```
1
```
```
1000000000 1000000000
```
```
2
```
```
1000000000 1000000000
```
```
1
```
```
1000000000 1000000000
```
```
2
```
```
1000000000 1000000000
```
```
1
```
```
1000000000 1000000000
```
```
2
```
CODEFORCES 1472_C. Long Jumps
1
3
1 4 1

2
2
1 2
3
1 2 3
CODEFORCES 1498_D. Bananas in a Microwave
```
1 1
1 1000000 1
```

```
3 20
1 300000 2
2 400000 2
1 1000000 3
```

```
1 1
1 1000000 1
```

```
3 10
1 399999 2
2 412345 2
1 1000001 3
```

```
1 1
1 1000000000 1
```

```
3 1000000000
1 1000000000 1
2 1000000000 1
1 1000000000 1
```

```
1000000000 1000000000
```
CODEFORCES 1520_C. Not Adjacent Matrix
1
3
2
5
3
1
4
2
CODEFORCES 154_A. Hometask
```
ababa
1
ab
```

```
codeforces
2
do
cs
```

```
aabaa
1
aa
```

```
zZzZzZz
0
```

```
aabbbbb
2
ab
bb
```
CODEFORCES 175_E. Power Defence
```
# 1 0 0
# 10 10 10
# 100 100

# 1 0 1
# 10 10 10
# 100 100

# 1 1 0
# 10 10 10
# 100 100

# 1 1 1
# 10 10 10
# 100 100

# 3 0 1
# 10 10 10
# 100 100

# 0 3 0
# 10 10 10
# 100 100

# 0 0 3
# 10 10 10
# 100 100

# 3 2 0
# 10 10 10
# 100 100

# 0 2 3
# 10 10 10
# 100 100
```
CODEFORCES 196_A. Lexicographically Maximum Subsequence
```
a

```
CODEFORCES 21_A. Jabber ID
1. ```
mike@codeforces.com
```

2. ```
john.smith@codeforces.ru/contest.icpc/12
```

3. ```
@codeforces.com
```

4. ```
mike@codeforces.com/contest.icpc/12/123
```

5. ```
mike@codeforces.com/contest.icpc
```

6. ```
mike@codeforces.com/contest.icpc.
```

7. ```
mike@codeforces.com/contest.icpc@12
```

8. ```
mike@codeforces.com/contest.icpc#12
```

9. ```
mike@codeforces.com/contest.icpc/12?12
```

10. ```
mike@codeforces.com/contest.icpc/12\n12
```
CODEFORCES 243_C. Colorado Potato Beetle
```
1
L 1
```
```
5
R 10
D 2
L 7
U 9
D 2
```
```
7
R 10
D 2
L 7
U 9
D 2
R 3
D 10
```
```
100
```
```
1000
```
CODEFORCES 269_A. Magical Boxes
```
1
0 4
```
CODEFORCES 291_C. Network Mask
**1. Using incorrect data types**

```
n, k = map(int, input().split())
ip_addresses = []
for _ in range(n):
    ip_addresses.append(input())

for ip_address in ip_addresses:
    int_ip_address = int.from_bytes(ip_address.encode(), "big")
    print(int_ip_address)
```

This code will raise an error if any of the IP addresses contain leading zeros.

**2. Using incorrect operators**

```
n, k = map(int, input().split())
ip_addresses = []
for _ in range(n):
    ip_addresses.append(input())

for ip_address in ip_addresses:
    int_ip_address = int.from_bytes(ip_address.encode(), "big")
    print(int_ip_address & 0xFFFFFFFF)
```

This code will not work correctly because the bitwise operator `&` only works on 16-bit integers.

**3. Using incorrect logic**

```
n, k = map(int, input().split())
ip_addresses = []
for _ in range(n):
    ip_addresses.append(input())

for ip_address in ip_addresses:
    int_ip_address = int.from_bytes(ip_address.encode(), "big")
    print(int_ip_address >> 24)
```

This code will not work correctly because the subnet mask should have "one or more one bits, and then one or more zero bits".

**4. Not handling all possible cases**

```
n, k = map(int, input().split())
ip_addresses = []
for _ in range(n):
    ip_addresses.append(input())

for ip_address in ip_addresses:
    int_ip_address = int.from_bytes(ip_address.encode(), "big")
    if int_ip_address < 0:
        raise ValueError("IP address must be a positive integer")
```

This code will raise an error if any of the IP addresses are negative.

**5. Using inefficient algorithms**

```
n, k = map(int, input().split())
ip_addresses = []
for _ in range(n):
    ip_addresses.append(input())

for ip_address in ip_addresses:
    int_ip_address = int.from_bytes(ip_address.encode(), "big")
    for i in range(32):
        if int_ip_address & (1 << i) != 0:
            print(i)
            break
```

This code will run very slowly for large values of n and k.

**6. Not testing the code**

```
n, k = map(int, input().split())
ip_addresses = []
for _ in range(n):
    ip_addresses.append(input())

for ip_address in ip_addresses:
    int_ip_address = int.from_bytes(ip_address.encode(), "big")
    print(int_ip_address)
```

This code does not test for any errors.
CODEFORCES 316_D3. PE Lesson
```
5
1 2 2 1 2
```
```
8
1 2 2 1 2 1 1 2
```
```
1000000
```
CODEFORCES 33_A. What is for dinner?
```
10 2 13
1 13
2 12
```

```
1 2 1
1 1
```
CODEFORCES 362_C. Insertion Sort
```
3
1 2 0
```
CODEFORCES 386_A. Second-Price Auction
```
2
5 7
```
```
3
10 2 8
```
```
6
3 8 2 9 4 14
```
```
2
1 2
```
```
1
10000
```
CODEFORCES 406_E. Hamming Triples
```
5 4
0 3
0 5
1 4
1 5
```
CODEFORCES 434_A. Ryouko's Memory Note
```
3 4
1 2 3 2
```

```
4 6
1 2 3 4 3 2
```

```
10 5
9 4 3 8 8
```

```
5 10
5 3 4 1 2 3 5 4 2 1
```

```
1000000 1000000
1
```
CODEFORCES 456_C. Boredom
```
1
1
```

```
2
1 2
```

```
3
1 2 3
```

```
4
1 2 1 3
```

```
5
1 2 1 3 1
```

```
6
1 2 1 3 1 2
```

```
7
1 2 1 3 1 2 1
```

```
8
1 2 1 3 1 2 1 2
```

```
9
1 2 1 3 1 2 1 2 3
```

```
10
1 2 1 3 1 2 1 2 3 1
```

```
11
1 2 1 3 1 2 1 2 3 1 2
```

```
12
1 2 1 3 1 2 1 2 3 1 2 1
```
CODEFORCES 479_A. Expression
```
1
2
3

2
10
3

1
1
1

0
0
0

100
100
100
```
CODEFORCES 501_A. Contest
```
1000 1000 1 1
1000 1000 1 2
1000 1000 100 101
1000 1000 176 177
1000 1000 177 176
500 1000 20 30
1000 999 1 1
```
CODEFORCES 526_F. Pudding Monsters
**Incorrect input format:**

```
1
```

**Incorrect use of mathematical functions:**

```
n = int(input())
ri, ci = [], []
for i in range(n):
    r, c = map(int, input().split())
    ri.append(r)
    ci.append(c)
max_r = max(ri)
max_c = max(ci)
gcd_r = gcd(max_r, n)
gcd_c = gcd(max_c, n)
result = 0
for i in range(1, max_r + 1):
    for j in range(1, max_c + 1):
        if gcd(i, n) == gcd_r and gcd(j, n) == gcd_c:
            result += 1
print(result)
```

**Incorrect logic:**

```
n = int(input())
ri, ci = [], []
for i in range(n):
    r, c = map(int, input().split())
    ri.append(r)
    ci.append(c)
max_r = max(ri)
max_c = max(ci)
gcd_r = gcd(max_r, n)
gcd_c = gcd(max_c, n)
result = 0
for i in range(1, max_r + 1):
    for j in range(1, max_c + 1):
        if gcd(i, n) == gcd_r and gcd(j, n) == gcd_c:
            result += 1
print(result)
```

**Incorrect output format:**

```
n = int(input())
ri, ci = [], []
for i in range(n):
    r, c = map(int, input().split())
    ri.append(r)
    ci.append(c)
max_r = max(ri)
max_c = max(ci)
gcd_r = gcd(max_r, n)
gcd_c = gcd(max_c, n)
result = 0
for i in range(1, max_r + 1):
    for j in range(1, max_c + 1):
        if gcd(i, n) == gcd_r and gcd(j, n) == gcd_c:
            result += 1
print(result)
```

**Correct input format:**

```
5
1 1
4 3
3 2
2 4
5 5
```

**Correct use of mathematical functions:**

```
n = int(input())
ri, ci = [], []
for i in range(n):
    r, c = map(int, input().split())
    ri.append(r)
    ci.append(c)
max_r = max(ri)
max_c = max(ci)
gcd_r = gcd(max_r, n)
gcd_c = gcd(max_c, n)
result = 0
for i in range(1, max_r + 1):
    for j in range(1, max_c + 1):
        if gcd(i, n) == gcd_r and gcd(j, n) == gcd_c:
            result += 1
print(result)
```

**Correct logic:**

```
n = int(input())
ri, ci = [], []
for i in range(n):
    r, c = map(int, input().split())
    ri.append(r)
    ci.append(c)
max_r = max(ri)
max_c = max(ci)
gcd_r = gcd(max_r, n)
gcd_c = gcd(max_c, n)
result = 0
for i in range(1, max_r + 1):
    for j in range(1, max_c + 1):
        if gcd(i * j, n) == gcd_r * gcd_c:
            result += 1
print(result)
```

**Correct output format:**

```
10
```
CODEFORCES 552_B. Vanya and Books
```
1
4
1000000000
```
CODEFORCES 579_B. Finding Team Member
```
2
5
1 2
3 4 5
```
```
3
487060
3831 161856
845957 794650 976977
83847 50566 691206 498447
698377 156232 59015 382455 626960
```
```
1
1
```
```
5
1 2 3 4 5
```
CODEFORCES 600_A. Extract Numbers
```
1
a;;101,01,;
01,1;;a
```
CODEFORCES 622_D. Optimal Number Permutation
```
1
```

```
2
```

```
3
```

```
4
```

```
5
```

```
6
```

```
7
```

```
8
```

```
9
```

```
10
```

```
11
```

```
12
```

```
13
```

```
14
```

```
15
```

```
16
```

```
17
```

```
18
```

```
19
```

```
20
```

```
21
```

```
22
```

```
23
```

```
24
```

```
25
```
CODEFORCES 643_G. Choosing Ads
```
1 1 100
1 1 1
2 1 1
```

This input tests for incorrect input format. The first line of the input should contain three integers, but this input only contains one integer. This will cause the program to crash.

```
10 10 100
1 2 3 4 5 6 7 8 9 10
2 1 10
2 1 5
```

This input tests for incorrect data type. The first line of the input contains three integers, but the second line contains ten strings. This will cause the program to crash.

```
10 10 100
1 2 3 4 5 6 7 8 9 10
2 1 5
2 1 5
```

This input tests for off-by-one errors. The first query should buy all slots from 1 to 5, but this query only buys slots from 1 to 4. This will cause the program to produce incorrect results.

```
10 10 100
1 2 3 4 5 6 7 8 9 10
2 1 5
2 1 5
```

This input tests for indexing errors. The second query should choose advertisers for the segment from 1 to 5, but this query tries to access the element at index 6, which is out of bounds. This will cause the program to crash.

```
10 10 100
1 2 3 4 5 6 7 8 9 10
2 1 5
2 1 5
```

This input tests for logic errors. The second query should choose advertisers for the segment from 1 to 5, but this query only chooses one advertiser, even though there are two advertisers that own at least 10% of the slots in the segment. This will cause the program to produce incorrect results.

```
10 10 100
1 2 3 4 5 6 7 8 9 10
2 1 5
2 1 5
```

This input tests for memory leaks. The program should release the memory that it has allocated after it is finished using it, but this program does not do that. This will eventually cause the program to crash.

```
10 10 100
1 2 3 4 5 6 7 8 9 10
2 1 5
2 1 5
```

This input tests for race conditions. The program may not be thread-safe, which means that it can produce incorrect results or crash if multiple threads are accessing it at the same time. This input does not test for race conditions, but it is a potential problem that should be considered when designing the program.

```
10 10 100
1 2 3 4 5 6 7 8 9 10
2 1 5
2 1 5
```

This input tests for security vulnerabilities. The program may contain security vulnerabilities, such as allowing attackers to execute arbitrary code or access sensitive data. This input does not test for security vulnerabilities, but it is a potential problem that should be considered when designing the program.
CODEFORCES 670_F. Restore a Number
```
003512
021

199966633300
63

12123456789012345678901234567890
123456789012345678901234567890
CODEFORCES 696_C. PLEASE
```
1
2
```
```
3
1 1 1
```
```
5
1 2 3 4 5
```
CODEFORCES 717_D. Dexterina’s Lab
```
2 2
0.500000 0.250000 0.250000
```
CODEFORCES 737_F. Dirty plates
```
6 2 3
2 3 6 4 1 5
```
CODEFORCES 761_E. Dasha and Puzzle
1. **The input format is not correct**

```
1 2
```

2. **The output format is not correct**

```
1 2
```

3. **The program does not consider all cases**

```
1 2
```

4. **The program has a runtime error**

```
1 2
```

5. **The program has a logical error**

```
1 2
```
CODEFORCES 784_G. BF Calculator
```
# Incorrect input format

Input:

a+b

Output:

Error: Expected integer


# Incorrect calculation

Input:

2+3

Output:

++&gt;
+++&gt;
&lt;[&lt;+&gt;-]&lt;
++++++++++++++++++++++++++++++++++++++++++++++++.

Expected output:

5


# Memory overflow

Input:

999999999+999999999

Output:

Error: Memory overflow


# Infinite loop

Input:

++++++++++[->++++++++++]

Output:

Infinite loop


# Other bugs

Input:

2+3

Output:

++&gt;
+++&gt;
&lt;[&lt;+&gt;-]&lt;
+++++++++++++++++++++++++++++++++++++++++++++++++++++.

Expected output:

5
```
CODEFORCES 805_F. Expected diameter of a tree
```
3 1 2
1 3
3 1
2 3

3 1 2
1 2
2 3
3 1

2 0 1
1 2
```
CODEFORCES 831_A. Unimodal Array
```
1
1

2
1 2

3
1 2 3

4
1 2 1 2

5
1 2 3 2 1

6
1 5 5 5 4 2

7
3 3 3 3 3 3 3

8
10 20 30 20 10 20 30 10

9
10 9 8 7 6 5 4 3 2 1

10
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 852_B. Neural Network country
10 3 2
7 1 2 8 6 3 9 5 4 1
1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10
CODEFORCES 876_C. Classroom Watch
```
1

2

10

100

200

1000000000
```
CODEFORCES 8_C. Looking for Order
```
0 0
2
1 1
-1 1

0 0
3
4 3
3 4
0 0

0 0
4
1 1
-1 1
0 100
100 0
```
CODEFORCES 922_B. Magic Forest
1. ```
6
```
2. ```
10
```
3. ```
1
```
4. ```
2500
```
5. ```
0
```
6. ```
-1
```
7. ```
"abc"
```
8. ```
[1, 2, 3]
```
9. ```
{1, 2, 3}
```
10. ```
```
CODEFORCES 94_C. Frames
1. 100 5 1 100
2. 100 5 101 200
3. 100 5 1 1000000000
CODEFORCES 978_A. Remove Duplicates
```
1
1

6
1 5 5 1 6 1

5
2 4 2 4 4

5
6 6 6 6 6
```
CODEFORCES 997_E. Good Subsegments
```
5
1 3 2 5 4
15
1 1
1 2
1 3
1 4
1 5
2 2
2 3
2 4
2 5
3 3
3 4
3 5
4 4
4 5
5 5
```
HACKEREARTH bear-and-chocolate
1
4
####
.##.
.#..
#...
HACKEREARTH code-gjd
```
1
4
4 2 1 3
```
```
1
5
2 3 9 8 4
```
```
2
7
1 2 3 4 5 6 7
9
1 3 2 5 4 8 7 6 9
```
```
3
10
1 2 3 4 5 6 7 8 9 10
1000000000
1
1
```
HACKEREARTH extraordinarily-large-1
```
1
0!
-1!
```
```
1
5!
5!
```
```
1
5!!
4!!
```
```
1
0!
999999999!
```
```
1
999999999!!
123!!!!!!
```
```
1
0!
9!
```
```
1
9!!
123!
```
HACKEREARTH hit-me-baby-one-more-time
1
10
100
1000
10000
100000
HACKEREARTH magical-number-a-3
```
# small input
28

# large input
456
```
HACKEREARTH nikhil-and-binary-numbers
1
5
1 0 0 0 0
5
1 1 1 1 1
HACKEREARTH protect-the-bad-when-weak-4
1
0
1
1
0
1
1

HACKEREARTH shikhars-fibonacci-a-4
```
small input:
2 3 3

large input:
3141592653589793238462643383279502884197169399375105820974944592 141592653589793238462643383279502884197169399375105820974944592 1000000000000000000
```
HACKEREARTH the-football-fest-6
1
1 1
P 2
B

2
1 1
P 2
B
P 3
B

HACKEREARTH xsquare-and-interesting-sequences
```
1
1000000000
```
ATCODER p02657 AtCoder Beginner Contest 169 - Multiplication 1
```
2 5
100 100
0 0
-2 -5
```
ATCODER p02786 AtCoder Beginner Contest 153 - Caracal vs Monster
```
2
4
1000000000000
```
ATCODER p02922 AtCoder Beginner Contest 139 - Power Socket
4 10
8 9
8 8
ATCODER p03057 AtCoder Grand Contest 033 - Go around a Circle
```
4 7
RBRRBRR
```

```
3 3
BBB
```

```
12 10
RRRRBRRRRB
```
ATCODER p03201 AtCoder Grand Contest 029 - Powers of two
```
3
1 2 3
```
```
5
3 11 14 5 13
```
```
10
1 2 4 8 16 32 64 128 256
```
```
20
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
```
ATCODER p03348 AtCoder Grand Contest 024 - Isomorphism Freak
5
1 2
2 3
3 4
3 5
ATCODER p03508 Code Festival Team Relay (Parallel) - Shock
```
4 2
2 4
1 3
```

```
2 0
```

```
9 6
1 4
1 8
2 5
3 6
4 8
5 7
```
ATCODER p03669 AtCoder Grand Contest 017 - Jigsaw
```
3 4
1 1 0 0
2 2 0 1
3 3 1 0

4 2
1 1 0 1
1 1 0 1
1 1 0 1
1 1 0 1

10 4
1 1 0 3
2 3 2 0
1 2 3 0
2 1 0 0
3 2 0 2
1 1 3 0
3 2 0 0
1 3 2 0
1 1 1 3
2 3 0 0

100000 200
```
ATCODER p03824 AtCoder Grand Contest 009 - Uninity
```
# 2
7
1 2
2 3
2 4
4 6
6 7
7 5

# 3
12
1 2
2 3
2 4
4 5
5 6
6 7
7 8
5 9
9 10
10 11
11 12

# 0
1

# 1
2
1 2
```
ATCODER p03991 AtCoder Grand Contest 005 - Many Easy Problems
```
3
1 2
2 3
```
```
4
1 2
1 3
1 4
```
```
7
1 2
2 3
2 4
4 5
4 6
6 7
```
AIZU p00079 Area of Polygon
```
# Invalid format
0, 0
0, 1
1, 1
2, 0
1, -1

# Invalid values
NaN, NaN
Inf, Inf

# Non-convex polygon
0, 0
0, 1
1, 1
2, 0
1, -1
1, 2

# Too complex polygon
0, 0
0, 1
1, 1
2, 0
1, -1
1, 2
0, 3
0, 4
```
AIZU p00211 Jogging
```
2
4 3
5 4
5
789 289
166 46
9 4
617 252
972 303
2
8 5
32 20
0
```
AIZU p00371 Lottery Box
```
3 2 7
8
3
6
5
2 2
3 2
4 1
6 1
6 0
```
AIZU p00588 Extraordinary Girl I
```
1
3
NYNY
```
AIZU p00725 Curling 2
2 1
3 2
6 6
1 0 0 2 1 0
1 1 0 0 0 0
0 0 0 0 0 3
0 0 0 0 0 0
1 0 0 0 0 1
0 1 1 1 1 1
6 1
1 1 2 1 1 3
6 1
1 0 2 1 1 3
12 1
2 0 1 1 1 1 1 1 1 1 1 3
13 1
2 0 1 1 1 1 1 1 1 1 1 1 3
0 0
AIZU p00865 Expected Allowance

AIZU p00996 Dice
```
3 3
3o.
3o.
3o.
```
AIZU p01128 Railroad Conflict
1. ```
n = int(input())
for _ in range(n):
    x1, y1, x2, y2 = map(int, input().split())
    n = int(input())
    c1 = 0
    c2 = 0
    for _ in range(n):
        x3, y3, x4, y4, o, l = map(int, input().split())
        if (x1 == x3 and y1 == y3) or (x2 == x4 and y2 == y4):
            if o == 1:
                c1 += 1
            else:
                c2 += 1
    print(min(c1, c2))
```

2. ```
n = int(input())
for _ in range(n):
    xa, ya, xb, yb = map(int, input().split())
    n = int(input())
    c1 = 0
    c2 = 0
    for _ in range(n):
        x3, y3, x4, y4, o, l = map(int, input().split())
        if (x3 == xa and y3 == ya) or (x4 == xb and y4 == yb):
            if o == 1:
                c1 += 1
            else:
                c2 += 1
    print(min(c1, c2))
```

3. ```
n = int(input())
for _ in range(n):
    xa, ya, xb, yb = map(int, input().split())
    n = int(input())
    c1 = 0
    c2 = 0
    for _ in range(n):
        x3, y3, x4, y4, o, l = map(int, input().split())
        if (x3 == xa and y3 == ya) or (x4 == xb and y4 == yb):
            if o == 1:
                c1 += 1
            else:
                c2 += 1
    print(min(c1, c2))
```

4. ```
n = int(input())
for _ in range(n):
    xa, ya, xb, yb = map(int, input().split())
    n = int(input())
    c1 = 0
    c2 = 0
    for _ in range(n):
        x3, y3, x4, y4, o, l = map(int, input().split())
        if (x3 == xa and y3 == ya) or (x4 == xb and y4 == yb):
            if o == 1:
                c1 += 1
            else:
                c2 += 1
    print(min(c1, c2))
```

5. ```
n = int(input())
for _ in range(n):
    xa, ya, xb, yb = map(int, input().split())
    n = int(input())
    c1 = 0
    c2 = 0
    for _ in range(n):
        x3, y3, x4, y4, o, l = map(int, input().split())
        if (x3 == xa and y3 == ya) or (x4 == xb and y4 == yb):
            if o == 1:
                c1 += 1
            else:
                c2 += 1
    print(min(c1, c2))
```
AIZU p01267 Luck Manipulator
1 5 7 11 10
10
2 5 7 11 10
2 4
2 1 1 256 0
128 255
2 0 0 1 0
1234 5678
2 1 1 100 0
99 98
2 1 1 100 0
99 99
2 1 1 10000 0
1 0
2 1 1 10000 0
2 1
0 0 0 0 0
AIZU p01437 Infinity Maze
```
3 3 10
E..
.#.
...
5 5 19
####.
.....
.#S#.
...#.
#.##.
5 5 6
#.#..
#....
##.#.
#..S.
#....
5 4 35
..##
....
.##.
.#S.
...#
0 0 0
```
AIZU p01584 Divide the Water
3
 6 1 2
 2
 1 1
 6
 1 1 1 1 1 1
 10
 1 1 1 1 1 1 1 1 1 1
AIZU p01743 Clique Coloring
```
1
5
```
```
2
3
3
```
```
5
2
3
4
5
6
```
```
1
1000000000
```
```
10
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
1000000000
```
AIZU p01883 Parentheses
1

2

3

4

5

6

7
AIZU p02020 Tea Party
1
2
AIZU p02162 AOJ50M
```
9 8 1000 999
9 8 1000 1000
9 8 2849 -1
```
AIZU p02303 Closest Pair
2
1.0 1.0
2.0 2.0

3
0.0 0.0
1.0 0.0
2.0 0.0
AIZU p02450 Permutation Enumeration
1. ```
2
```
2. ```
3
```
3. ```
1
```
4. ```
10
```
5. ```
0
```