CODECHEF acugray
```
2
0
10001
```
CODECHEF chefsock
1, 2, 3
1, 2, 6
1, 3, 4
4, 2, 6
1, 1, 1000000000
CODECHEF double
2
2
4
CODECHEF jeryfibo
```
1
1
```

```
3
1
3
7
```

```
5
1
2
3
4
5
```

```
10
1
2
3
4
5
6
7
8
9
10
```
CODECHEF noways
```
1
5 2
```
CODECHEF sgarden
1
2
1 2
1 2
CODEFORCES 1003_F. Abbreviation
```
6
to be or not to be
```
```
10
a ab a a b ab a a b c
```
```
6
aa bb aa aa bb bb
```
CODEFORCES 1027_G. X-mouse in the Campus
```
4 3
5 2
1000 3
```
CODEFORCES 1046_F. Splitting money
```
1
1
1000000000
1000000000 1
```
CODEFORCES 1070_E. Getting Deals Done

CODEFORCES 1092_A. Uniform String
```
1
5 3
```
```
10
100 1
```
```
100
1 1
```
```
100
26 26
```
```
100
10 5
```
```
5
10 3
15 4
20 5
25 6
30 7
```
CODEFORCES 1110_G. Tree-Tac-Toe 
```
1
5
1 2
2 3
3 4
4 5
NNNNN
```

```
1
5
1 2
2 3
3 4
4 5
WWWW
```

```
3
6
1 2
2 3
1 4
3 5
6 5
WNWNNW
6
1 2
2 3
3 4
1 5
1 6
WNNWNW
4
1 2
2 3
3 4
NNNNN
```
CODEFORCES 1140_D. Minimum Triangulation
```
3

4

5

10
```
CODEFORCES 1159_B. Expansion coefficient of the array
```
1
1

1
10

1
0

2
0 1

3
0 1 2

4
6 4 5 5

4
821 500 479 717
```
CODEFORCES 1181_B. Split a Number
1. Incorrect input format:
```
10
```
2. Incorrect output format:
```
1000
```
3. Incorrect calculation of the sum:
```
1234567
```
4. Off-by-one errors:
```
1234567
```
5. Memory leaks:
```
1234567
```
6. Race conditions:
```
1234567
```
7. Security vulnerabilities:
```
1234567
```
CODEFORCES 119_A. Epic Game
```
1 1 100

3 5 9

0 0 1

1 1 0

100 100 100
```
CODEFORCES 1216_E2. Numerical Sequence (hard version)
```
1
999999999999999999
```
```
1
3
20
38
56
```
CODEFORCES 123_A. Prime Permutation
```
abc

abcd

xxxyxxx
```
CODEFORCES 125_B. Simple XML
```
<a><b><c></c></b></a>

<a><b></b><d><c></c></d></a>

<a><b><c></c><d><c></c></d></b></a>
CODEFORCES 1281_D. Beingawesomeism
1
7 8
AAPAAAAA
PPPPAAAA
PPPPAAAA
APAAPPPP
APAPPAPP
AAAAPPAP
AAAAPPAA
```
3
4
PPPP
PAAP
PPPP
```
2
4 4
PPPP
PPPP
PPPP
PPPP
```
2
6 5
AAAAA
AAAAA
AAPAA
AAPAP
AAAPP
AAAPP
```
4
5 5
AAAAA
AAAAA
AAAAA
AAAAA
AAAAA
```
2
3 4
PPPP
PAAP
PPPP
```
1
2 3
AAP
```
MORTAL
3 4
PPPP
PAAP
PPPP
```
CODEFORCES 1301_D. Time to Run
1. 4 4 200
2. 2 1 2
3. 2 2 4
4. 5 5 1000000000
5. 3 3 1000000000
CODEFORCES 1325_D. Ehab the Xorcist
1. **Incorrect input format**
```
1 4
```
2. **Incorrect output format**
```
2
3 1\n
```
3. **Incorrect calculation of the bitwise-xor of the elements in the array**
```
2 1
```
4. **Incorrect calculation of the sum of the elements in the array**
```
1 3
```
5. **Incorrect determination of the length of the array**
```
2 4
```
6. **Incorrect printing of the array**
```
2
1 1 1\n
```
7. **Incorrect handling of edge cases**
```
0 0
```
CODEFORCES 1344_C. Quantifier Question
```
2 1
1 2
```
```
4 3
1 2
2 3
3 1
```
```
3 2
1 3
2 3
```
CODEFORCES 1366_C. Palindromic Paths
```
1
2 2
0 1
1 0
```

```
2
3 7
1 0 1 1 1 1 1
0 0 0 0 0 0 0
1 1 1 1 1 0 1
2
3 5
1 0 1 0 0
1 1 1 1 0
0 0 1 0 0
```

```
3
3 7
1 0 1 1 1 1 1
0 0 0 0 0 0 0
1 1 1 1 1 0 1
3
3 5
1 0 1 0 0
1 1 1 1 0
0 0 1 0 0
```
CODEFORCES 1386_C. Joker
```
200000 200000 200000
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
1 2
```
CODEFORCES 1408_C. Discrete Acceleration
```
1
2 10
1 9
```
```
1
1 10
1
```
```
1
10 10
1
```
```
5 7
1 2 3 4 6
```
```
2 1000000000
413470354 982876160
```
```
9 478
1 10 25 33 239 445 453 468 477
```
CODEFORCES 1428_F. Fruit Sequences
1. **Incorrect use of pointers.**

```
4
0110
```

2. **Off-by-one errors.**

```
7
1101001
```

3. **Using the wrong data type.**

```
12
011100011100
```

4. **Not handling edge cases.**

```
0
```

5. **Using inefficient algorithms.**

```
1000000000
0
```
CODEFORCES 1452_A. Robot Program
```
1
1000 1000
```

```
2
1 2
100 100
```

```
5
0 0
1 1
1000000000 1000000000
1000000000 0
0 1000000000
```
CODEFORCES 1475_F. Unusual Matrix
```
1
2
01
10

01
01
```

```
2
1
0
1

0
1
```

```
3
1
1

0
0
```

```
2
01
11

10
01
```

```
4
4
0010
0101
1010
1101

0000
0000
0000
0000
```
CODEFORCES 1500_D. Tiles for Bathroom
```
3 4
1 2 3
4 5 6
7 8 9

```
CODEFORCES 1525_F. Goblins And Gnomes
```
3 1 2
1 2
100 1
```
```
1 0
```
```
3 3 2
1 2
2 3
100 1
10 1
```
```
2 1 0
```
```
5 10 1
1 2
1 3
1 4
1 5
5 2
5 3
5 4
4 2
4 3
2 3
100 100
```
```
6
1 2 3 4 5 0
```
```
6 3 4
1 2
2 3
4 3
100 1
200 5
10 10
100 1
```
```
6
-2 -3 0 0 0 0 
```
```
5 4 4
1 2
2 3
4 3
5 3
100 100
200 5
10 10
100 1
```
```
6
0 -3 0 0 1 0
```
```
5 10 1
1 2
1 3
1 4
1 5
5 2
5 3
5 4
4 2
4 3
2 3
100 100
```
```
6
1 2 3 4 5 0
```
CODEFORCES 157_C. Message
```
aabaa
aaa
CODEFORCES 178_A3. Educational Game
```
1
1
```

```
4
1 0 1 2
```

```
8
1 2 3 4 5 6 7 8
```

```
10
1 2 3 4 5 6 7 8 9 10
```

```
100
1 2 3 4 5 6 7 8 9 10 ... 99 100
```

```
1000
1 2 3 4 5 6 7 8 9 10 ... 999 1000
```

```
10000
1 2 3 4 5 6 7 8 9 10 ... 9999 10000
```
CODEFORCES 19_D. Points
1. ```
1000000
add 1 1
remove 1 1
find 0 0
```
2. ```
1000000
add 1 1
add 2 2
find 0 0
```
3. ```
1000000
add 1 1
add 2 2
add 3 3
find 0 0
```
4. ```
1000000
add 1 1
add 1 2
add 1 3
find 0 0
```
5. ```
1000000
add 1 1
add 2 1
add 3 1
find 0 0
```
6. ```
1000000
add 1 1
add 2 1
add 3 1
find 0 0
```
7. ```
1000000
add 1 1
add 2 2
add 3 3
find 0 0
```
8. ```
1000000
add 1 1
add 2 2
add 3 3
find 0 0
```
9. ```
1000000
add 1 1
add 2 2
add 3 3
find 0 0
```
10. ```
1000000
add 1 1
add 2 2
add 3 3
find 0 0
```
CODEFORCES 223_E. Planar Graph
```
3 3
1 2
2 3
3 1
0 0
1 0
0 1
1
3 1 2 3
```
CODEFORCES 248_C. Robo-Footballer
```
3 10 15 17 9 2
```
```
1 4 6 2 2 1
```
```
4 10 13 10 3 1
```
CODEFORCES 272_D. Dima and Two Sequences
```
1
1
2
7
```

```
2
1 2
2 3
11
```

```
2
1 2
3 4
11
```
CODEFORCES 296_A. Yaroslav and Permutations
```
1
1

1
2

3
1 1 2

4
7 7 7 7

```
CODEFORCES 319_D. Have You Ever Heard About the Word?
1. 'a'
2. ''
3. 'abcabc'
4. 'abababab'
5. 'abcac'
6. 'abcabcabc'
7. 'abccbacba'
CODEFORCES 343_D. Water Tree
```
5
1 2
5 1
2 3
4 2
12
1 1
2 3
3 1
3 2
3 3
3 4
1 2
2 4
3 1
3 3
3 4
3 5
```
CODEFORCES 367_A. Sereja and Algorithm 
```
# Problem: Sereja and Algorithm

# Input:

# zyxxxxxxyyz
# 5
# 5 5
# 1 3
# 1 11
# 1 4
# 3 6

# Output:

# YES
# YES
# NO
# YES
# NO
```
CODEFORCES 38_E. Let's Go Rolling!
1. Incorrect input format
```
2
1 2
2 3
```
2. Incorrect output format
```
3
2 3
3 4
1 2
```
3. Incorrect data
```
3
2 3
3 1
5 10
6 -1
```
4. Algorithmic errors
```
3
1 2
2 3
3 4
```
5. Runtime errors
```
1000000000
```
6. User errors
```
1
1 1
```
CODEFORCES 40_D. Interesting Sequence
1728 1729
CODEFORCES 438_C. The Child and Polygon
```
4
0 0
0 1
1 1
1 0
```
```
4
0 0
1 0
0 1
-1 0
```
```
5
0 0
1 0
1 1
0 1
-2 -1
```
```
6
0 0
1 0
0 1
1 1
2 0
2 1
```
```
200
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
152340157 80597076
```
CODEFORCES 45_J. Planting Trees
```
1 1
```

```
2 1
```

```
2 2
```

```
3 3
```

```
2 3
```

```
2 4
```

```
3 4
```
CODEFORCES 483_D. Interesting Array
```
3 1
1 3 3
```
```
2 1
1 3 3
```
```
3 2
1 3 1
1 3 2
```
```
4 2
1 4 1
1 4 2
```
```
5 2
1 5 4
1 5 5
```
CODEFORCES 507_D. The Maths Lecture
```
1 1 1000
```
```
10 10 1000
```
```
100 100 1000
```
CODEFORCES 530_E. Sum and product
```
2 1
3 5
```
CODEFORCES 556_E. Case of Chocolate
1. **Incorrect input format**
```
6 5
3 4 U
6 1 L
2 5 L
1 6 U
4 3 U
```

2. **Off-by-one errors**
```
6 5
1 1 U
2 2 L
3 3 U
4 4 L
5 5 U
```

3. **Incorrect logic**
```
6 5
1 1 U
2 2 U
3 3 U
4 4 U
5 5 U
```

4. **Memory leaks**
```
6 5
1 1 U
2 2 U
3 3 U
4 4 U
5 5 U
```

5. **Timeouts**
```
6 5
1 1 U
2 2 U
3 3 U
4 4 U
5 5 U
```
CODEFORCES 582_C. Superior Periodic Subarrays
```
1
2
```
```
3
1 1 1
```
```
5
1 2 3 4 5
```
```
10
2 1 3 4 5 6 7 8 9 10
```
```
10
1 2 3 4 5 6 7 8 9 9
```
```
20
1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1 2 3 1
```
```
4
2 1 3 4
```
```
2
1 1
```
```
1
1000000000
```
```
5
999999998 999999999 1 2 3
```
CODEFORCES 604_C. Alternative Thinking
```
8
10000011
```
```
2
01
```
```
5
01010
```
```
1
0
```
CODEFORCES 626_F. Group Projects
```
3 2
2 4 5

4 3
7 8 9 10

4 0
5 10 20 21

10 9
1 2 3 4 5 6 7 8 9 10

5 1
1 2 3 4 5
```
CODEFORCES 650_D. Zip-line
```
3 3
1 2 3
1 1
1 3
2 4
```

```
4 4
1 2 3 4
1 1
1 4
4 3
4 5
```

```
4 2
1 3 2 6
3 5
2 4
```

```
5 4
4 5 6 7 8
1 4
2 5
3 6
```

```
6 6
1 2 3 4 5 6
1 1
1 2
1 3
1 4
1 5
1 6
```

```
100000 100000
1 2 3 4 5 6 7 8 9 10
1 1
```
CODEFORCES 676_B. Pyramid of Glasses
1. Incorrect input format:
```
1 2
```
2. Incorrect data type:
```
1 a
```
3. Incorrect values:
```
1 10001
```
4. Off-by-one errors:
```
3 5
```
5. Incorrect logic:
```
3 4
```
6. Uninitialized variables:
```
n, t = 3, 5
```
7. Memory leaks:
```
n, t = 3, 5
full = 0
while t > 0:
    full += 1
    t -= 1
print(full)
```
CODEFORCES 69_B. Bets
```
4 4
1 4 20 5
1 3 21 10
3 3 4 30
3 4 4 20
```
CODEFORCES 720_E. Cipher
```
5
2
42
abcdefghij
jihgfedcba
3
123
defghiabc
abcdefghijklmno
2
55
aaaaaaaaaa
aaaaaaaaaa
5
999
abcdefghijklmnopqrstuvwx
abcdefghijklmnopqrstuvwx
```
CODEFORCES 742_B. Arpa’s obvious problem and Mehrdad’s terrible solution
```
1 0
```
```
1 1
```
```
2 1
1 2
```
```
2 2
1 2
```
```
4 1
2 3 4 1
```
```
4 1
1 2 3 1
```
```
6 1
5 1 2 3 4 1
```
```
5 2
2 3 4 5 2
```
```
6 3
1 2 3 4 5 6
```
CODEFORCES 765_F. Souvenirs
```
4
5 1 2 7 4
3
1 4
1 3
4 4
```
CODEFORCES 789_C. Functions again
```
5
1 4 2 3 1
```
```
4
1 5 4 7
```
```
1
-1000000000
```
```
1000000000
1
```
CODEFORCES 80_E. Beavermuncher-0xFF
```
5
1 3 1 3 2
2 5
3 4
4 5
1 5
4
```

```
3
2 1 1
3 2
1 2
3
```
CODEFORCES 835_C. Star sky
```
2 3 3
1 1 1
3 2 0
2 1 1 2 2
0 2 1 4 5
5 1 1 5 5
```
CODEFORCES 855_F. Nagini
```
10
1 1 10 10
1 2 5 -5
1 4 5 5
2 1 10
1 1 10 -10
1 1 10 10
2 4 8
1 1 10 -10
2 1 10
2 1 10
```
CODEFORCES 87_D. Beautiful Road
1. **Incorrect data types**

```
n = int(input())
```

This code will not work if the number of cities is larger than `2147483647`.

2. **Incorrect algorithms**

```
from heapq import heapify, heappop

n = int(input())
roads = []
for _ in range(n - 1):
    a, b, d = map(int, input().split())
    roads.append((d, a, b))

heapify(roads)

max_length = -1
max_count = 0
for _ in range(n - 1):
    length, a, b = heappop(roads)
    if length == max_length:
        max_count += 1

print(max_length, max_count)
```

This code has a time complexity of O(n^2). A more efficient algorithm would be to use a heap to store the roads in decreasing order of their lengths. Then, you can iterate over the heap and find the first road with the length equal to the maximum length. The time complexity of this algorithm is O(n log n).

3. **Incorrect output format**

```
print(max_length, max_count)
```

This code does not print the list of the most beautiful roads.

4. **Incorrect variable names**

```
n = int(input())
roads = []
for _ in range(n - 1):
    a, b, d = map(int, input().split())
    roads.append((d, a, b))

heapify(roads)

max_length = -1
max_count = 0
for _ in range(n - 1):
    length, a, b = heappop(roads)
    if length == max_length:
        max_count += 1

print(max_length, max_count)
```

The variable names `a`, `b`, and `d` are not very descriptive. It would be better to use names like `city_a`, `city_b`, and `length`.

5. **Forgetting to check for errors**

```
n = int(input())
```

This code will not work if the input is not a valid integer.

Here are some program inputs that will validate whether an implementation meets each of the requirements listed above:

1. **Incorrect data types**

```
n = '100'
```

This input will cause the code to raise a ValueError exception.

2. **Incorrect algorithms**

```
n = int(input())
roads = []
for _ in range(n - 1):
    a, b, d = map(int, input().split())
    roads.append((d, a, b))

heapify(roads)

max_length = -1
max_count = 0
for _ in range(n - 1):
    length, a, b = heappop(roads)
    if length == max_length:
        max_count += 1

print(max_length, max_count)
```

This code will print the wrong answer. The correct answer should be `1`, not `2`.

3. **Incorrect output format**

```
n = int(input())
roads = []
for _ in range(n - 1):
    a, b, d = map(int, input().split())
    roads.append((d, a, b))

heapify(roads)

max_length = -1
max_count = 0
for _ in range(n - 1):
    length, a, b = heappop(roads)
    if length == max_length:
        max_count += 1

print(max_length, max_count)
```

This code will print the output in the wrong format. The correct output should be `1 1`.

4. **Incorrect variable names**

```
n = int(input())
roads = []
for _ in range(n - 1):
    a, b, d = map(int, input().split())
    roads.append((d, a, b))

heapify(roads)

max_length =
CODEFORCES 903_F. Clear The Matrix
```
4
1 10 8 20
***.
***.
***.
...*
```
CODEFORCES 926_A. 2-3-numbers
```
1 10
100 200
1 2000000000
0 0
```
CODEFORCES 954_H. Path Counting
```
#include <iostream>
#include <vector>
#define MOD 1000000007
using namespace std;

int n;
vector<int> a;
vector<vector<int>> dp;

int main() {
    cin >> n;
    a.resize(n - 1);
    for (int i = 0; i < n - 1; i++) {
        cin >> a[i];
    }

    dp.resize(n + 1, vector<int>(2 * n - 2, 0));
    dp[0][0] = 1;
    for (int i = 1; i <= n; i++) {
        for (int j = 0; j < 2 * n - 2; j++) {
            if (j - 1 >= 0) {
                dp[i][j] = (dp[i - 1][j - 1] * (a[i - 1] + 1)) % MOD;
            }
            if (j - a[i - 1] >= 0) {
                dp[i][j] = (dp[i][j] + dp[i - 1][j - a[i - 1]]) % MOD;
            }
        }
    }

    for (int i = 0; i < 2 * n - 2; i++) {
        cout << dp[n][i] << " ";
    }
    cout << endl;
}
```

This program input is valid and will correctly validate the following requirements:

1. Incorrect implementation of the tree traversal algorithm
2. Incorrect calculation of the number of paths between two nodes
3. Incorrect modulo operation
4. Incorrect input/output
5. Runtime errors
CODEFORCES 981_A. Antipalindrome
```
mew
```

```
wuffuw
```

```
qqqqqqqq
```

```
abacaba
```

```
bb
```

```
aabbaa
```
HACKEREARTH 189
1
10
HACKEREARTH bholu-the-pandit-1
```
1
1 1 1
```
HACKEREARTH count-carry-problem-1
1
-123 456

0
123 456

1
123 123

2
123 456
555 555

3
123 456
555 555
123 594

4
123 456
555 555
123 594
123 -456

5
123 456
555 555
123 594
123 -456
-234 567

6
123 456
555 555
123 594
123 -456
-234 567
-999 -999

7
123 456
555 555
123 594
123 -456
-234 567
-999 -999
987654321 987654321
HACKEREARTH find-the-students-2
3
2 1 3

3
2 1 1
HACKEREARTH integration-1
```
1
1 3 3 1 1
```
HACKEREARTH maximum-and
```
2
2 3
4 8
```
HACKEREARTH one-in-zillion-2
1
115

HACKEREARTH random-generator
1
5 2 2
2 9 6 8 4
HACKEREARTH skipping-stones
```
3 4 10
0.4 0.6 0.8
2 4 8

3 1 10
0.4 0.6 0.8
2 4 8

1 3 4
0.5
1

0 0 0
0 0 0

1000 1000 1000
0.5 0.5 0.5
1 1 1
```
HACKEREARTH the-tiled-footpath-on-marine-drive
1
2 2
1
1 2
3
5 1
1
1 1
1
1 2
2
4 2
ATCODER p02550 AtCoder Beginner Contest 179 - Sequence Sum
```
1
1
10

10
2
1001

10000000000
10
99959
```
ATCODER p02681 AtCoder Beginner Contest 167 - Registration
```
chokudai
chokudaiz

snuke
snekee

a
aa

a
ab

ab
abc
ATCODER p02809 Dwango Programming Contest 6th - Arrangement
```
5
4 2 5 1 3
```
```
5
4 2 5 3 1
```
```
13
2 3 4 5 6 7 8 9 10 11 12 13 12
```
```
1
1
```
```
4
3 2 1 4
```
ATCODER p02946 AtCoder Beginner Contest 137 - One Clue
```
1 0
3 7
4 0
1 100
```
ATCODER p03082 ExaWizards 2019 - Modulo Operations
```
1
1
```

```
2
2
3 7
```

```
5
82
22 11 6 5 13
```

```
10
100000
50000 50001 50002 50003 50004 50005 50006 50007 50008 50009
```
ATCODER p03227 Tenka1 Programmer Beginner Contest - Measure
```
ab
```
```
abc
```
```
a
```
```
abd
```
```
3456789
```
ATCODER p03375 AtCoder Regular Contest 096 - Everything on It
```
2
1000000007

3
1000000009

50
111111113

3000
123456791
```
ATCODER p03537 CODE FESTIVAL 2017 Final (Parallel) - Combination Lock
```
Input:
abc
2
2 3
3 4

Output:
YES


Input:
acb
1
2 2

Output:
NO


Input:
abc
2
3 4
1 1
2 2

Output:
YES


Input:
cassert
4
1 2
3 4
1 1
2 2

Output:
YES


Input:
a
0

Output:
YES


Input:
z
0

Output:
YES
```
ATCODER p03696 AtCoder Beginner Contest 064 - Insertion
**Incorrect data type**

```
N = 3
S = '())'
```

**Incorrect algorithm**

```
N = 3
S = '())'

def find_shortest_correct_bracket_sequence(S):
  if len(S) == 0:
    return '()'
  if S[0] == '(':
    return find_shortest_correct_bracket_sequence(S[1:]) + '('
  if S[0] == ')':
    return find_shortest_correct_bracket_sequence(S[1:]) + ')'
  return '()'

print(find_shortest_correct_bracket_sequence(S))
```

**Not handling edge cases**

```
N = 3
S = 'foo'
```

**Incorrect variable names**

```
N = 3
S = '())'

def find_shortest_correct_bracket_sequence(n):
  if n == 0:
    return '()'
  if S[0] == '(':
    return find_shortest_correct_bracket_sequence(n - 1) + '('
  if S[0] == ')':
    return find_shortest_correct_bracket_sequence(n - 1) + ')'
  return '()'

print(find_shortest_correct_bracket_sequence(N))
```

**Forgetting to comment your code**

```
N = 3
S = '())'

def find_shortest_correct_bracket_sequence(N):
  if len(S) == 0:
    return '()'
  if S[0] == '(':
    return find_shortest_correct_bracket_sequence(S[1:]) + '('
  if S[0] == ')':
    return find_shortest_correct_bracket_sequence(S[1:]) + ')'
  return '()'

print(find_shortest_correct_bracket_sequence(N))
```
ATCODER p03851 AtCoder Regular Contest 066 - Contest with Drinks Hard
5
1 1 4 1 1
2
3 2
3 10
ATCODER p04018 AtCoder Regular Contest 060 - Best Representation
```
>>> a = 'abcd'
>>> b = 'abcde'
>>> c = 'cdcd'
>>> d = 'ddd'
>>> e = 'a'
>>> f = 'b'
>>> g = 'c'
>>> h = 'd'
>>> i = 'e'
```
AIZU p00102 Matrix-like Computation
1
1
1
1
1
1
1
1
1
0
5
1 2 3 4 5
2 3 4 5 6
3 4 5 6 7
4 5 6 7 8
5 6 7 8 9
5
1 2 3 4 5
2 3 4 5 6
3 4 5 6 7
4 5 6 7 8
5 6 7 8 9
-1
-1
-1
-1
-1
-1
-1
-1
-1
0
AIZU p00235 Sergeant Rian
1
1 2 100

2
1 2 100
2 3 100

3
1 2 100
2 3 100
3 1 100

4
1 2 100
2 3 100
3 4 100
4 1 100

5
1 2 100
2 3 100
3 4 100
4 5 100
5 1 100

6
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 1 100

7
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 1 100

8
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 1 100

9
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 9 100
9 1 100

10
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 9 100
9 10 100
10 1 100

11
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 9 100
9 10 100
10 11 100
11 1 100

12
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 9 100
9 10 100
10 11 100
11 12 100
12 1 100

13
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 9 100
9 10 100
10 11 100
11 12 100
12 13 100
13 1 100

14
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 9 100
9 10 100
10 11 100
11 12 100
12 13 100
13 14 100
14 1 100

15
1 2 100
2 3 100
3 4 100
4 5 100
5 6 100
6 7 100
7 8 100
8 9 100
9 10 100
10 11 100
11 12 100
12 13 100

AIZU p00397 Kth XOR
```
3 3
1 2 3
```

```
7 1
1 0 1 0 1 0 1
```

```
5 10
1 2 4 8 16
```
AIZU p00612 Hedro's Hexahedron
```
2
4
0
```
AIZU p00750 The Most Powerful Spell
4 7 0 2
0 1 abra
0 1 oil
2 0 ket
1 3 cada
3 3 da
3 2 bra
2 3 ket
2 2 0 1
0 0 a
0 1 b
5 6 3 0
3 1 op
3 2 op
3 4 opq
1 0 st
2 0 qr
4 0 r
2 1 0 1
1 1 loooop
0 0 0 0
AIZU p00888 The Two Men of the Japanese Alps
0
5
0 0
10 0
20 0
30 0
40 0
10
0 0
1 2
3 0
6 3
9 0
11 2
13 0
15 2
16 2
18 0
7
0 0
150 997
300 1
450 999
600 2
750 998
900 0
100
0 0
10 0
20 0
30 0
40 0
50 0
60 0
70 0
80 0
90 0
100 0
AIZU p01019 Cheat Case

AIZU p01152 Reading a Chord
```
5
3 C E G
3 C E G#
4 C A G E
5 F A C E D
3 C D E
```
AIZU p01291 Wind Passages
```
2 1
3
2 1
2 2
0 0
```
AIZU p01460 Matrix Operation
```
2 1 3 6 12 1 2 1 2
WR 1 1 1
```
AIZU p01612 Company Trip
```
5 4
1 2
2 3
3 4
3 5
```

```
5 3
1 2
2 3
3 4
```

```
2 1
```
AIZU p01772 A-Z Cat
ZZAZZAZ
AIZUNYAN PEROPERO
1234567890abcdefghijklmnopqrstuvwxyz
AIZUNYANPEROPERO
```
AIZUNYANPEROPERO
```
AIZU p01906 Weight Range
```
6 2
1 5 7 8 9 3
```
AIZU p02044 Equal Split
```
3 300
120 100 80
3 30
10 20 5
4 1000
100 200 300 400
5 5
2523 8430 3 4199 632
0 0
AIZU p02187 Substring Decomposition
```
abracadabra
cadabra
4

abcd
zcba
1

abc
zcba
1

abcdefg
abcddefg
Four
```
AIZU p02329 Coin Combination Problem
```
1 1
1
1
1
1
```

```
5 4
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
```

```
4 20
1 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
```
AIZU p02474 Multiplication of Big Integers
5 8
100 25
-1 0
12 -3
-1234567890123456789 -1234567890123456789