CODECHEF chearmy
1
47
CODECHEF devhand
```
1
4 2
```
```
3
1 3
2 2
```
```
5
3
```
```
4
1
```
```
1
1
```
CODECHEF iitk2p10
```
2
2 2
3 4
```
CODECHEF neuronb4
1
100
CODECHEF saarc07
1. Incorrect board dimensions.

```
1
AAA
```

2. Incorrect characters.

```
1
AA#A
```

3. Incorrect number of test cases.

```
0
```

4. Incorrect output.

```
1
AABBA
```

5. Off-by-one errors.

```
1
AAAAA
```

6. Incorrect handling of ties.

```
1
AAAAA
```

7. Incorrect handling of multiple winning combinations.

```
1
AAAAA
```

8. Incorrect handling of invalid input.

```
1
AA#A
```

9. Incorrect handling of unexpected errors.

```
1
AA#A
```
CODECHEF xorsub
```
1
3 4
1 2 3
```
CODEFORCES 1023_F. Mobile Phone Network
```
10 3 10
1 2
3 4
2 3 10

10 3 4
1 2
3 4
1 3
4 2 2
4 3 3
4 1 1

10 3 5
1 2
3 4
1 3
4 1 1000000000
4 2 1000000000
4 3 1000000000
```
CODEFORCES 1045_A. Last chance
```
3 5
0 1 4
2 1 5
1 1 4
```
CODEFORCES 1068_A. Birthday
```
20 15 2 3
```

```
10 11 2 4
```

```
1 1 0 0
```

```
10 10 3 3
```

```
1 3 0 3
```
CODEFORCES 108_D. Basketball Team
**Incorrect input format**

```
1 2 1
1 1
```

**Incorrect output format**

```
1.0000000
```

**Incorrect calculation**

```
3 2 1
1 1
```

**Incorrect error handling**

```
1 0 0
```

**Other bugs**

```
1 1 1
1
```
CODEFORCES 1109_C. Sasha and a Patient Friend
```
5
1 10 1
1 20 -1
3 1 20 1
3 1 20 2
3 1 20 3
```
CODEFORCES 1138_F. Cooperative Game
```
10 2

next 0 1 3 5

next 2 3 0 1 4 5 6 7 8 9

next 9 8 7 6 5 4 3 2 1 0

next 0 1 3 5

next 1 3 5

done
```
CODEFORCES 1157_A. Reachable Numbers
```
1098
10
1
0
-1
```
CODEFORCES 1179_B. Tolik and His Uncle
```
1 1
```

```
2 3
```

```
1 2
2 2
```

```
2 4
```

```
1 1
1 3
2 2
2 4
```

```
3 3
```

```
-1
```

```
3 2
```

```
-1
```

```
4 4
```

```
1 1
1 3
3 4
2 2
2 1
4 1
4 3
3 2
```
CODEFORCES 1197_D. Yet Another Subarray Problem
**Incorrect implementation of the sliding window.**

```
n, m, k = map(int, input().split())
a = list(map(int, input().split()))

# Initialize the sliding window.
window = [0] * m

# Iterate over the input array.
for i in range(n):
    # Update the sliding window.
    window[i % m] += a[i]

    # Find the maximum sum of the sliding window.
    max_sum = max(window)

# Print the maximum sum.
print(max_sum)
```

**Incorrect calculation of the cost of a subarray.**

```
n, m, k = map(int, input().split())
a = list(map(int, input().split()))

# Initialize the maximum cost.
max_cost = float('-inf')

# Iterate over all possible subarrays.
for l in range(n):
    for r in range(l, n + 1):
        # Calculate the cost of the subarray.
        cost = sum(a[i] for i in range(l, r + 1)) - k * ceil((r - l + 1) / m)

        # Update the maximum cost.
        max_cost = max(max_cost, cost)

# Print the maximum cost.
print(max_cost)
```

**Incorrect use of the ceil function.**

```
n, m, k = map(int, input().split())
a = list(map(int, input().split()))

# Initialize the maximum cost.
max_cost = float('-inf')

# Iterate over all possible subarrays.
for l in range(n):
    for r in range(l, n + 1):
        # Calculate the number of subarrays.
        num_subarrays = ceil((r - l + 1) / m)

        # Calculate the cost of the subarray.
        cost = sum(a[i] for i in range(l, r + 1)) - k * num_subarrays

        # Update the maximum cost.
        max_cost = max(max_cost, cost)

# Print the maximum cost.
print(max_cost)
```

**Incorrect implementation of the sliding window.**

```
n, m, k = map(int, input().split())
a = list(map(int, input().split()))

# Initialize the sliding window.
window = [0] * m

# Iterate over the input array.
for i in range(n):
    # Update the sliding window.
    window[i % m] += a[i]

    # Find the maximum sum of the sliding window.
    max_sum = max(window)

# Print the maximum sum.
print(max_sum)
```

**Incorrect calculation of the cost of a subarray.**

```
n, m, k = map(int, input().split())
a = list(map(int, input().split()))

# Initialize the maximum cost.
max_cost = float('-inf')

# Iterate over all possible subarrays.
for l in range(n):
    for r in range(l, n + 1):
        # Calculate the cost of the subarray.
        cost = sum(a[i] for i in range(l, r + 1)) - k * ceil((r - l + 1) / m)

        # Update the maximum cost.
        max_cost = max(max_cost, cost)

# Print the maximum cost.
print(max_cost)
```

**Incorrect use of the ceil function.**

```
n, m, k = map(int, input().split())
a = list(map(int, input().split()))

# Initialize the maximum cost.
max_cost = float('-inf')

# Iterate over all possible subarrays.
for l in range(n):
    for r in range(l, n + 1):
        # Calculate the number of subarrays.
        num_subarrays = ceil((r - l + 1) / m)

        # Calculate the cost of the sub
CODEFORCES 1214_E. Petya and Construction Set
### Incorrect input format
```
3
2 2 2
```

### Incorrect data type
```
3
a 2 2
```

### Off-by-one errors
```
3
2 2 1
```

### Logic errors
```
3
2 2 1
```

### Undefined behavior
```
3
2 2 2
```

### Memory leaks
```
3
2 2 2
```

### Race conditions
```
3
2 2 2
```

### Deadlocks
```
3
2 2 2
```

### Security vulnerabilities
```
3
2 2 2
```
CODEFORCES 1237_G. Balanced Distribution
```
6 3
2 6 1 10 3 2

11 4
1 0 1 0 0 4 4 2 4 3 3

6 7
9 1 4 3 6 2 1

6 2
6 4 2 1 0 5

8 3
1 2 3 4 5 6 7 8
```
CODEFORCES 1255_F. Point Ordering
```
3
1 0
0 1
1 1
```
CODEFORCES 1279_F. New Year and Handle Change
```
7 1 4
PikMike
```
```
15 2 2
AaAaAAaaAAAAaaA
```
```
14 2 6
aBcdEFGHIJklMn
```
```
9 2 2
aAaAAAaaA
```
```
1000000000 1000000000 1
```
```
1000000000 1000000000 1000000000
```
```
1000000000 1000000000 1000000001
```
```
1 1000000000 1
```
```
1 1 1
```
```
1000000000 1 1
```
```
1000000000 0 1
```
```
1000000000 1000000000 1000000000
```
CODEFORCES 129_D. String
**Incorrect Input**

```
a2
10
```

**Incorrect Input**

```

```
CODEFORCES 1323_A. Even Subset Sum Problem
```
1
3
1 4 3
```
```
2
1
15
2
3 5
```
```
3
3
1 4 3
1
15
2
3 5
```
CODEFORCES 1341_F. Nastya and Time Machine
```
5
1 2
2 3
2 4
4 5
```
CODEFORCES 1363_F. Rotating Substrings
```
1
1
a
a

3
2
ab
ba

4
3
abc
cba

3
3
abc
cba
```
CODEFORCES 1384_B1. Koa and the Beach (Easy Version)
1
5 1 3
1 2 3 2 2
2
5 2 3
1 2 3 2 2
3
7 2 3
3 0 2 1 3 0 1
4
7 1 4
4 4 3 0 2 4 2
5
5 2 3
1 2 3 2 2
CODEFORCES 1405_C. Balanced Bitstring
```
6 4
100110
3 2
1?1
3 2
1?0
4 4
????
7 4
1?0??1?
10 10
11??11??11
4 2
1??1
4 4
?0?0
6 2
????00
```
CODEFORCES 1426_E. Rock, Paper, Scissors
```
1
0 1 0
1 1 0
```
CODEFORCES 144_D. Missile Silos
```
4 6 1
1 2 1
1 3 3
2 3 1
2 4 1
3 4 1
1 4 2
2
```

```
5 6 3
3 1 1
3 2 1
3 4 1
3 5 1
1 2 6
4 5 8
4
```
CODEFORCES 1473_D. Program
```
1
5 2
+++-
1 5
```
CODEFORCES 1499_F. Diameter Cuts
```
4 3
1 2
1 3
1 4
```

```
2 0
1 2
```

```
6 2
1 6
2 4
2 6
3 6
5 6
```

```
6 3
1 2
1 5
2 3
3 4
5 6
```
CODEFORCES 1521_D. Nastia Plays with a Tree
```
# 1. Incorrect input format

1
-1
```

```
# 2. Incorrect output format

1
1
```

```
# 3. Incorrect solution

1
1
1 2
```

```
# 4. Time complexity

1
1000000
1 2
1 3
2 4
...
```

```
# 5. Space complexity

1000000000
```

```
# 6. Memory leaks

```

```
# 7. Synchronization issues

```

```
# 8. Race conditions

```

```
# 9. Deadlocks

```

```
# 10. Unhandled exceptions

```
CODEFORCES 1550_D. Excellent Arrays
```
1
4 2 4
```
```
2
2 0 2
```
```
3
3 0 3
```
```
4
4 -3 5
```
CODEFORCES 177_A2. Good Matrix Elements
1. Incorrect input format
```
3
1 2 3
4 5 6
7 8 9
```
2. Incorrect calculation of the sum of good matrix elements
```
5
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
```
3. Incorrect output
```
5
```
CODEFORCES 197_D. Infinite Maze
```
5 4
##.#
##S#
#..#
#.##
#..#

5 4
##.#
##S#
#..#
..#.
#.##

5 4
##.#
##S#
#..#
#.##
#..#

5 4
##.#
##S#
#..#
..#.
#.##
```
CODEFORCES 220_E. Little Elephant and Inversions
```
1 0
1

2 0
1 2

3 1
1 2 3

3 2
1 3 2

5 2
1 3 2 1 7

10 5
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 245_A. System Administrator
```
1
1 0 10
```
```
2
1 5 5
2 6 4
```
```
3
1 0 10
2 0 10
1 10 0
```
CODEFORCES 26_D. Tickets
```
5 3 1
0 5 5
0 1 0
```
CODEFORCES 293_A. Weird Game
1. ```
1
1
1
```

2. ```
2
01
00
```

3. ```
3
110110
001001
```

4. ```
3
111000
000111
```

5. ```
4
01010110
00101101
```

6. ```
4
01100000
10010011
```

7. ```
5
000000000
111111111
```

8. ```
6
0101010101010101010101
1010101010101010101010
```

9. ```
25
00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000001
```
CODEFORCES 316_G2. Good Substrings
```
aaab
2
aa 0 0
aab 1 1
```
```
ltntlnen
3
n 0 0
ttlneenl 1 4
lelllt 1 1
```
```
a
0
```
```
aaba
2
aa 0 0
aab 1 1
```
```
aabab
2
aa 0 0
aab 1 1
```
CODEFORCES 340_D. Bubble Sort Graph
```
2
1 2
```
```
3
3 1 2
```
```
4
3 1 4 2
```
```
5
1 5 4 3 2
```
```
10
4 1 2 3 8 6 5 7 9 10
```
CODEFORCES 364_A. Matrix
```
10
12345


16
439873893693495623498263984765
```
CODEFORCES 387_E. George and Cards
```
2 1
1 2
2
```
```
3 2
2 1 3
1 3
```
```
10 5
1 2 3 4 5 6 7 8 9 10
2 4 6 8 10
```
```
10 1
1 2 3 4 5 6 7 8 9 10
10
```
```
100 1
1 2 3 4 5 6 7 8 9 10
1
```
CODEFORCES 408_C. Triangle
1 1
5 5
5 10
CODEFORCES 435_D. Special Grid
```
# Problem: CODEFORCES 435_D. Special Grid
# Author: Anmol Verma

n, m = map(int, input().split())
grid = []
for _ in range(n):
    grid.append(input())

ans = 0
for i in range(n):
    for j in range(m):
        if grid[i][j] == '1':
            ans += 4
            if i > 0 and j > 0 and grid[i-1][j-1] == '1':
                ans -= 1
            if i < n-1 and j < m-1 and grid[i+1][j+1] == '1':
                ans -= 1
            if i > 0 and j < m-1 and grid[i-1][j+1] == '1':
                ans -= 1
            if i < n-1 and j > 0 and grid[i+1][j-1] == '1':
                ans -= 1

print(ans)
```
CODEFORCES 457_F. An easy problem about trees
1
3
10
5

5
-1 1 2
-1 3 4
10
5
20

7
-1 1 2
-1 3 4
-1 5 6
1
2
3
4

11
-1 1 2
-1 3 4
-1 5 6
-1 7 8
15
7
-1 9 10
7
8
9
11
CODEFORCES 47_D. Safe
6 2
000000 2
010100 4
CODEFORCES 504_D. Misha and XOR
1. Incorrect input format
```
1
1
```

2. Incorrect output format
```
1
1
```

3. Incorrect logic
```
1
1
```

4. Memory leak
```
10000
10000
```

5. Security vulnerability
```
10000
10000
```

6. Other bugs
```
10000
10000
```
CODEFORCES 528_B. Clique Problem
```
# 528_B. Clique Problem

import sys

input = sys.stdin.readline


def main():
    N = int(input())
    xs = [list(map(int, input().split())) for _ in range(N)]
    xs.sort(key=lambda x: x[0])
    
    ans = 1
    cur = 0
    for i in range(N-1):
        if xs[i][0] + xs[i][1] <= xs[i+1][0]:
            ans += 1
            cur = i+1
    print(ans)
    

if __name__ == "__main__":
    main()
```
CODEFORCES 553_E. Kyoya and Train
4 4 5 1
1 2 0
50000 0 50000 0 0
2 3 0
10000 0 0 0 90000
3 4 0
100000 0 0 0 0
2 4 0
0 0 0 50000 50000
CODEFORCES 57_D. Journey
2 2
..
.X
CODEFORCES 601_C. Kleofáš and the n-thlon
```
# 568D

n, m = map(int, input().split())

ans = 0
for i in range(n):
    x = int(input())
    ans += (m - x) * (x - 1) / (m - 1)

print(ans / n)
```
CODEFORCES 624_A. Save Luke
```
# Incorrect data type

d, L, v1, v2 = input().split()
d = int(d)
L = int(L)
v1 = int(v1)
v2 = int(v2)

# Incorrect calculation

d, L, v1, v2 = map(int, input().split())

# Off-by-one error

d, L, v1, v2 = map(int, input().split())

# Floating-point error

d, L, v1, v2 = map(int, input().split())

# Infinite loop

d, L, v1, v2 = map(int, input().split())
while True:
    pass

# Stack overflow

d, L, v1, v2 = map(int, input().split())

# Memory leak

d, L, v1, v2 = map(int, input().split())
```
CODEFORCES 645_E. Intellectual Inquiry
```
1 3
ac
```
```
0 2
aaba
```
```
1000000 26
abcdefghijklmnopqrstuvwxyz
```
CODEFORCES 672_C. Recycling Bottles
```
1 1 1 2 0 0
1
1 1
```
CODEFORCES 697_E. PLEASE
```
1
1
```

```
1
2
```

```
2
1 1
```

```
3
2 3 4
```
CODEFORCES 718_D. Andrew and Chemistry
```
4
1 2
2 3
2 4
```
```
5
1 2
1 3
1 4
1 5
```
```
5
2 5
5 3
4 3
4 1
```
```
5
1 2
1 3
2 4
3 4
```
```
5
1 2
1 3
1 4
1 5
2 4
```
```
5
1 2
1 3
2 4
3 4
2 5
```
```
10
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
```
```
10
1 2
1 3
2 4
3 4
5 6
5 7
5 8
5 9
5 10
```
```
10
1 2
1 3
2 4
3 4
5 6
5 7
5 8
5 9
5 10
5 1
```
```
10
1 2
1 3
2 4
3 4
5 6
5 7
5 8
5 9
5 10
1 5
```
CODEFORCES 73_C. LionAge II
```
1. Incorrect input format

    Input:
        abcdef 1
        5
        a b -10
        b c 5
        c d 5
        d e 5
        e f 5

    Expected output:
        20

    Correct output:
        20

2. Incorrect logic

    Input:
        abcdef 1
        5
        a b -10
        b c 5
        c d 5
        d e 5
        e f 5

    Expected output:
        20

    Correct output:
        20

3. Memory leaks

    Input:
        abcdef 1
        5
        a b -10
        b c 5
        c d 5
        d e 5
        e f 5

    Expected output:
        20

    Correct output:
        20

4. Race conditions

    Input:
        abcdef 1
        5
        a b -10
        b c 5
        c d 5
        d e 5
        e f 5

    Expected output:
        20

    Correct output:
        20

5. Security vulnerabilities

    Input:
        abcdef 1
        5
        a b -10
        b c 5
        c d 5
        d e 5
        e f 5

    Expected output:
        20

    Correct output:
        20
```
CODEFORCES 763_A. Timofey and a tree
```
5
1 2
1 3
2 4
3 5
1 2 3 4 5

1

1 2
1 2
1 2

0

1

1 2
1 2
1 2
```
CODEFORCES 786_C. Till I Collapse
```
5
1 3 4 3 3
```
```
8
1 5 7 8 1 7 6 1
```
CODEFORCES 808_B. Average Sleep Time
**Incorrect input format:**

```
1 3
4 5 6
```

**Incorrect data type:**

```
1 3
a b c
```

**Off-by-one errors:**

```
3 2
1 2 3 4
```

**Arithmetic errors:**

```
3 2
1 2 3
```

**Floating-point errors:**

```
3 2
1 2 3
```

**Boundary errors:**

```
3 1
1 2 3
```

**Null pointer errors:**

```
3 2
1 2 3
```

**Memory leaks:**

```
3 2
1 2 3
```

**Race conditions:**

```
3 2
1 2 3
```

**Deadlocks:**

```
3 2
1 2 3
```
CODEFORCES 832_C. Strange Radiation
```
2 999
400000 1 2
500000 1 1

2 1000
400000 500 1
600000 500 2
```
CODEFORCES 853_A. Planning
```
10 5
1 2 3 4 5 6 7 8 9 10
```
CODEFORCES 877_E. Danil and a Part-time Job
10
1 2 3 4 5 6 7 8 9 10
0 0 1 0 1 0 0 0 0 0
10
get 1
pow 1
get 1
get 2
pow 1
get 1
get 2
get 3
get 4
pow 1
CODEFORCES 901_A. Hashing Trees
```
2
1 2 2
```

```
3
1 2 3 3
```

```
5
1 2 3 4 5
```

```
3
1 2 4 4
```
CODEFORCES 923_D. Picking Strings
**Incorrect assumptions**

```
S = input()
T = input()
Q = int(input())
for _ in range(Q):
    a, b, c, d = map(int, input().split())
    s = S[a-1:b]
    t = T[c-1:d]
    print(1 if s == t or t == 'A' else 0)
```

This code will not work correctly because it assumes that the strings S and T are the same length. This is not always the case, and if the strings are not the same length, the code will not be able to determine whether the target string can be obtained from the source string.

**Using incorrect data types**

```
S = input()
T = input()
Q = int(input())
for _ in range(Q):
    a, b, c, d = map(int, input().split())
    s = S[a-1:b]
    t = T[c-1:d]
    print(1 if s == t or t == 'A' else 0)
```

This code will not work correctly because it is using the incorrect data types. The variable `a` should be a string, not an integer. This is because the input is a string, and we need to be able to compare strings to each other.

**Not handling edge cases**

```
S = input()
T = input()
Q = int(input())
for _ in range(Q):
    a, b, c, d = map(int, input().split())
    s = S[a-1:b]
    t = T[c-1:d]
    print(1 if s == t or t == 'A' else 0)
```

This code will not work correctly because it does not handle the edge case where the target string is longer than the source string. In this case, the code will always return 0, even if the target string can be obtained from the source string by applying the transitions.

**Using inefficient algorithms**

```
S = input()
T = input()
Q = int(input())
for _ in range(Q):
    a, b, c, d = map(int, input().split())
    s = S[a-1:b]
    t = T[c-1:d]
    print(1 if s == t or t == 'A' else 0)
```

This code will not work correctly because it is using an inefficient algorithm. The algorithm iterates over the entire string S, even if the target string is only a small part of S. This can be very inefficient, especially if the string S is very long.

Here are some improved program inputs that will validate whether an implementation meets each of the requirements:

**Off-by-one errors**

```
S = 'A'
T = 'A'
Q = 1
a, b, c, d = 1, 1, 1, 1

print(1 if S[a-1:b] == T[c-1:d] else 0)
```

This program will print 1, because the source string and the target string are the same.

**Incorrect assumptions**

```
S = 'A'
T = 'B'
Q = 1
a, b, c, d = 1, 1, 1, 1

print(1 if S[a-1:b] == T[c-1:d] or t == 'A' else 0)
```

This program will print 0, because the source string and the target string are not the same.

**Using incorrect data types**

```
S = 'A'
T = 'B'
Q = 1
a, b, c, d = 1, 1, 1, 1

print(1 if S[a-1:b] == T[c-1:d] else 0)
```

This program will print 0, because the variable `a` is a string, not an integer.

**Not handling edge cases**

```
S = 'A'
T = 'B'
Q = 1
a, b, c, d = 1, 1, 1, 1

print
CODEFORCES 950_F. Curfew
5 1 1
1 0 0 0 4
CODEFORCES 979_B. Treasure Hunt
```
3
Kuroo
Shiro
Katie
```
CODEFORCES 999_C. Alphabetic Removals
```
1. `1 2`
2. `5 6`
3. `5 a123`
4. `0 1`
5. `1 1`
6. `5 aaa`
7. `5 abc`
8. `5 cba`
9. `5 aaa`
10. `5 123`
HACKEREARTH benny-and-her-school-reports
1
1 2 2
1
6 10 4
5 4 7 8 4 1 
1 4 3
2 
1 6 2
5
HACKEREARTH colour-queries
```
1 1 0
0
```

```
1 1 0
1
```

```
3 4 3
0 0 1 0
1 2 1 0
0 0 1 0
1 0 1 0
1 1 1
1 2 1
2 2 2
```

```
5 5 2
0 0 1 0 0
0 1 1 1 0
1 1 1 1 1
0 1 1 1 0
0 0 1 0 0
2 2 0
3 3 0
4 4 0
```

```
10 10 1
0 0 0 1 0 1 0 0 0 0
0 0 0 2 0 1 0 0 0 0
0 0 0 3 0 1 0 0 0 0
1 2 3 4 5 1 0 0 0 0
0 1 2 3 4 5 1 0 0 0
0 0 1 2 3 4 5 1 0 0
0 0 0 1 2 3 4 5 1 0
0 0 0 0 1 2 3 4 5 1
0 0 0 0 0 1 2 3 4 5
0 0 0 0 0 0 1 2 3 4
1 1 1 1 1 1 1 1 1 1
```

```
5 5 4
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
1 1 1 1 1
3 3 1
4 4 2
3 4 3
```

```
10 10 1
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
-5 -5 -5 -5 -5 -5 -5 -5 -5 -5
1 1 1
2 2 1
3 3 1
4 4 1
5 5 1
```
HACKEREARTH fibo-stones
```
3 2
1 5

5 3
1 1 5

3 1
1

5 4
1 1 1 1

1 1
1
```
HACKEREARTH i-will-find-you-and-correct-you-5
1
perfection is achieved not when there is nothing more to add but when there is nothing left to take away
3
you must be the change you wish to see in the world
if the lessons of history teach us anything it is that nobody learns the lessons that history teaches us
1

HACKEREARTH manish-playning-with-bits
```
1
2 3
```
HACKEREARTH number-game-1-1
1
1000000000
HACKEREARTH question-2-20
```
1
1000 1000
HACKEREARTH shil-and-round-numbers
```
5 5
1 2 33 456 111
1 1 2
1 1 5
2 1 6
2 2 1000
1 1 5
```
HACKEREARTH the-magical-shop
```
5 100
101
```
HACKEREARTH zrzr
```
1
9
```
ATCODER p02665 NOMURA Programming Competition 2020 - Folia
```
3
0 1 1 2

4
0 0 1 0 2

2
0 3 1

1
1 1

10
0 0 1 1 2 3 5 8 13 21 34
```
ATCODER p02794 AtCoder Beginner Contest 152 - Tree and Constraints
```
3
1 2
2 3
1
1 3

2
1 2
1
1 2

5
1 2
3 2
3 4
5 3
3
1 3
2 4
2 5

8
1 2
2 3
4 3
2 5
6 3
6 7
8 6
5
2 7
3 5
1 6
2 8
7 8
```
ATCODER p02930 Japanese Student Championship 2019 Qualification - Classified
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
ATCODER p03066 Tenka1 Programmer Contest 2019 - Banned X
```
3 3
8 6
10 1
9 13
314 159
```
ATCODER p03209 AtCoder Beginner Contest 115 - Christmas
```
2 7
1 1
50 4321098765432109
```
ATCODER p03358 AtCoder Regular Contest 097 - Monochrome Cat
5
1 2
2 3
2 4
4 5
WBBWW

6
3 1
4 5
2 6
6 1
3 4
WWBWBB

1
B

20
2 19
5 13
6 4
15 6
12 19
13 19
3 11
8 3
3 20
16 13
7 14
3 17
7 8
10 20
11 9
8 18
8 2
10 1
6 13
WBWBWBBWWWBBWWBBBBBW
ATCODER p03516 CODE FESTIVAL 2017 Elimination Tournament Round 3 (Parallel) - Unicyclic Graph Counting
```
1
1
```

```
5
1 2 2 3 2
```

```
16
2 1 3 1 2 1 4 1 1 2 1 1 3 2 4 3
```
ATCODER p03679 AtCoder Beginner Contest 065 - Expired?
```
1
-2
1
```

```
7
0
1
```

```
10
11
12
```

```
5
3
1
```
ATCODER p03834 AtCoder Beginner Contest 051 - Haiku
```
happy,newyear,enjoy
haiku,atcoder,tasks
abcde,fghihgf,edcba
```
ATCODER p03999 AtCoder Beginner Contest 045 - Many Formulas
125
9999999999
AIZU p00087 Strange Mathematical Expression
10 2 12 - /
3 4 - 7 2 3 * + *
-1 -2 3 + +
AIZU p00219 A Popular Ice-cream Shop
```
1
3

3
0
0
2

2
0
1

0
```
AIZU p00381 Transporter
```
6
abbaba
baabab
```
AIZU p00597 Finding the Largest Carbon Compound Given Its Long
1
3
4
2
2
10
5
11
12
8
6
23
40
30
9
50
7
22
14
31
13
15
24
20
18
21
AIZU p00733 Dr. Podboq or: How We Became Asymmetric
((x (x x)) ((x x) (x (x x))))
(((x x) (x x)) ((x x) ((x x) (x x))))
(((x x) ((x x) x)) (((x (x x)) x) (x x)))
(((x x) x) ((x x) (((((x x) x) x) x) x)))
(((x x) x) ((x (x x)) (x (x x))))
((((x (x x)) x) (x ((x x) x))) ((x (x x)) (x x)))
((((x x) x) ((x x) (x (x x)))) (((x x) (x x)) ((x x) ((x x) (x x)))))
0
AIZU p00873 Zigzag
1
-10 -10
10 10
2
0 0
10 10
0 0
0 1
2
0 0
10 10
AIZU p01004 Balloon Contest
```
1
10
10
0
0
```
```
2
100 100
50 50
0
0
```
```
3
50 50
25 25
75 75
10 10 10 10 1
0
```
AIZU p01136 Gather the Maps!
```
5
1 1
1 1
1 1
1 1
1 1
0
```

```
4
1 1 2 3
2 2 3
2 1 2
3 3 4 5
0
```

```
4
1 1 3 4
1 1 2 3
2 1 2
3 3 4 5
0
```

```
4
1 1 2 3
1 1 2 3
2 1 2
3 3 4 5
0
```

```
3
1 1 2
2 2 3
3 3 4 5
0
```
AIZU p01275 Dial Lock
1. **Incorrect input format**

```
1
123456
123456
```

2. **Incorrect output format**

```
1
2
0
```

3. **Incorrect calculation**

```
4
1357 4680
```

4. **Incorrect logic**

```
4
1357 4680
```

5. **Incorrect implementation**

```
4
1357 4680
```
AIZU p01445 Mobile Network
1 0
1 1 x^3+4x^2+7x+10
3 3
1 2 x+2
2 3 2x+1
3 1 x+1
2 0
3 2
1 2 x
2 3 2
4 3
1 2 x^3+2x^2+3x+4
2 3 x^2+2x+3
3 4 x+2
0 0
AIZU p01594 Exportation in Space
4
0 0 0
0 0 1
0 1 0
1 0 0

4
0 0 0
0 0 1
0 1 0
1 0 0

8
0 0 0
0 0 1
0 1 0
0 1 1
1 0 0
1 0 1
1 1 0
1 1 1
AIZU p01751 Yamanote Line
```
10 10 5
50 40 51
20 20 20
30 30 40
```
AIZU p01891 Cabbage
```
5 3 6 9
9 7 5 3 1
```

```
5 3 6 9
5 4 3 2 1
```

```
5 3 6 9
10 8 6 4 2
```

```
5 3 6 9
5 10 8 6 4
```

```
5 0 6 9
9 9 8 8 7
```
AIZU p02028 Mail Order
1 6
6 1 6 1 6 1
1 6 1 6 1 6
AIZU p02170 Coin and Die
```
1 1 50
2 2 10
6 10 99
AIZU p02311 Common Tangent
1 1 1
6 2 2
1 2 1
4 2 2
1 2 1
3 2 2
0 0 1
1 0 2
0 0 1
0 0 2
AIZU p02459 Map: Search
### Program inputs for testing the implementation with a list

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a dictionary

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a hash table

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a binary search tree

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a balanced binary tree

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a self-balancing binary search tree

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a B-tree

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a B+ tree

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a Trie

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```

### Program inputs for testing the implementation with a suffix array

```
10
0 blue 4
0 red 1
0 white 5
1 red
1 blue
0 black 8
1 black
1 blue
0 blue 2
```